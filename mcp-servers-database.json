{
  "mcp-simple": {
    "name": "Tech Stack & MCP Recommender",
    "githubLink": "https://github.com/kmhari/mcp-simple",
    "package": "@oglabs/mcp",
    "description": "Intelligent MCP server for tech stack detection and MCP server recommendations with smart prompts",
    "installCommand": "npx -y @oglabs/mcp --server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use prompts for tech stack analysis, then tools for MCP server recommendations",
    "category": "Development",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.633Z",
    "logo": ""
  },
  "everything": {
    "name": "Everything",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/everything",
    "package": "@modelcontextprotocol/server-everything",
    "description": "Reference/test server with prompts, resources, and tools",
    "installCommand": "npx -y @modelcontextprotocol/server-everything",
    "requiredEnvVars": [],
    "optionalParams": [
      "CONFIG_PATH"
    ],
    "usageInstructions": "Development and testing server with example implementations",
    "category": "Development",
    "stars": 58096,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/oz4xg0ru8t8.jpg"
  },
  "fetch": {
    "name": "Fetch",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/fetch",
    "package": "mcp-server-fetch",
    "description": "Web content fetching and processing",
    "installCommand": "uvx mcp-server-fetch",
    "requiredEnvVars": [],
    "optionalParams": [
      "USER_AGENT",
      "TIMEOUT"
    ],
    "usageInstructions": "Fetch and process web content for efficient LLM usage",
    "category": "Web Scraping",
    "stars": 58096,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/oz4xg0ru8t8.jpg"
  },
  "filesystem": {
    "name": "Filesystem",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
    "package": "@modelcontextprotocol/server-filesystem",
    "description": "Local filesystem operations",
    "installCommand": "npx -y @modelcontextprotocol/server-filesystem",
    "requiredEnvVars": [],
    "optionalParams": [
      "ALLOWED_DIRECTORIES"
    ],
    "usageInstructions": "Read, write, and manage local files and directories",
    "category": "File Management",
    "stars": 58096,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/oz4xg0ru8t8.jpg"
  },
  "git": {
    "name": "Git",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/git",
    "package": "mcp-server-git",
    "description": "Git repository operations",
    "installCommand": "uvx mcp-server-git",
    "requiredEnvVars": [],
    "optionalParams": [
      "REPOSITORY_PATH"
    ],
    "usageInstructions": "Perform Git operations like commit, push, pull, and branch management",
    "category": "Version Control",
    "stars": 58096,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/oz4xg0ru8t8.jpg"
  },
  "skyvern": {
    "name": "Skyvern",
    "githubLink": "https://github.com/Skyvern-AI/skyvern",
    "package": "skyvern",
    "description": "Advanced browser automation with AI-powered web interaction",
    "installCommand": "python -m skyvern run mcp",
    "requiredEnvVars": [
      "SKYVERN_API_KEY"
    ],
    "optionalParams": [
      "SKYVERN_BASE_URL"
    ],
    "defaultEnvVars": {
      "SKYVERN_BASE_URL": "https://api.skyvern.com"
    },
    "usageInstructions": "Automate browser-based workflows, fill forms, download files, and interact with websites using AI",
    "category": "Browser Automation",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "memory": {
    "name": "Memory",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/memory",
    "package": "@modelcontextprotocol/server-memory",
    "description": "Persistent memory and knowledge storage",
    "installCommand": "npx -y @modelcontextprotocol/server-memory",
    "requiredEnvVars": [],
    "optionalParams": [
      "MEMORY_FILE_PATH"
    ],
    "usageInstructions": "Store and retrieve persistent memories across conversations",
    "category": "Data Storage",
    "stars": 58096,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/oz4xg0ru8t8.jpg"
  },
  "sequentialthinking": {
    "name": "Sequential Thinking",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking",
    "package": "@modelcontextprotocol/server-sequential-thinking",
    "description": "Sequential thinking and reasoning tools",
    "installCommand": "npx -y @modelcontextprotocol/server-sequential-thinking",
    "requiredEnvVars": [],
    "optionalParams": [
      "THINKING_DEPTH"
    ],
    "usageInstructions": "Enable step-by-step reasoning and problem-solving approaches",
    "category": "AI/ML",
    "stars": 58096,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/oz4xg0ru8t8.jpg"
  },
  "time": {
    "name": "Time",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/time",
    "package": "mcp-server-time",
    "description": "Time and scheduling utilities",
    "installCommand": "uvx mcp-server-time",
    "requiredEnvVars": [],
    "optionalParams": [
      "TIMEZONE"
    ],
    "usageInstructions": "Get current time, schedule events, and manage time zones",
    "category": "Utilities",
    "stars": 58096,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/oz4xg0ru8t8.jpg"
  },
  "obsidian": {
    "name": "Obsidian",
    "githubLink": "https://github.com/calclavia/mcp-obsidian",
    "package": null,
    "description": "Read and search through Obsidian vault or Markdown notes directory",
    "installCommand": "pip install mcp-obsidian",
    "requiredEnvVars": [
      "OBSIDIAN_VAULT_PATH"
    ],
    "optionalParams": [
      "SEARCH_DEPTH"
    ],
    "usageInstructions": "Access and search Obsidian notes and Markdown files",
    "category": "Knowledge Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/mkoe8p7bdb.svg"
  },
  "spotify": {
    "name": "Spotify",
    "githubLink": "https://github.com/varunneal/spotify-mcp",
    "package": null,
    "description": "MCP server allowing LLM to play and use Spotify",
    "installCommand": "pip install spotify-mcp",
    "requiredEnvVars": [
      "SPOTIFY_CLIENT_ID",
      "SPOTIFY_CLIENT_SECRET"
    ],
    "optionalParams": [
      "SPOTIFY_REDIRECT_URI"
    ],
    "usageInstructions": "Control Spotify playback and search music",
    "category": "Entertainment",
    "stars": 390,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": ""
  },
  "kubernetes": {
    "name": "Kubernetes",
    "githubLink": "https://github.com/Flux159/mcp-server-kubernetes",
    "package": null,
    "description": "Connect to Kubernetes cluster and manage pods, deployments, and services",
    "installCommand": "pip install mcp-kubernetes",
    "requiredEnvVars": [
      "KUBECONFIG"
    ],
    "optionalParams": [
      "NAMESPACE"
    ],
    "usageInstructions": "Manage Kubernetes resources via natural language interface",
    "category": "DevOps",
    "stars": 839,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/ey5taygqwr.png"
  },
  "aws": {
    "name": "AWS",
    "githubLink": "https://github.com/awslabs/mcp",
    "package": null,
    "description": "Specialized MCP servers bringing AWS best practices to development workflow",
    "installCommand": "pip install mcp-aws",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY",
      "AWS_REGION"
    ],
    "optionalParams": [
      "AWS_PROFILE"
    ],
    "usageInstructions": "Interact with various AWS services and resources",
    "category": "Cloud Services",
    "stars": 4414,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": ""
  },
  "clerk": {
    "name": "Clerk",
    "githubLink": "https://github.com/clerk/javascript/tree/HEAD/packages/agent-toolkit",
    "package": "@clerk/agent-toolkit",
    "description": "Authentication and user management with Clerk for AI agents",
    "installCommand": "npx -y @clerk/agent-toolkit",
    "requiredEnvVars": [
      "CLERK_SECRET_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Integrate Clerk authentication with AI agent frameworks. Manage users, organizations, and inject session claims into AI prompts. Warning: Agent behavior is non-deterministic - use carefully in production.",
    "category": "Authentication",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "playwright": {
    "name": "Microsoft Playwright",
    "githubLink": "https://github.com/microsoft/playwright-mcp",
    "package": "@playwright/mcp@latest",
    "description": "Browser automation and testing with Playwright",
    "installCommand": "npx -y @playwright/mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "BROWSER_TYPE",
      "HEADLESS",
      "VIEWPORT_WIDTH",
      "VIEWPORT_HEIGHT",
      "DEFAULT_TIMEOUT"
    ],
    "usageInstructions": "Automate browser interactions, perform web testing, and capture screenshots",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "context7": {
    "name": "Context7",
    "githubLink": "https://github.com/upstash/context7",
    "package": "@upstash/context7-mcp",
    "description": "Context management and conversation memory system",
    "installCommand": "npx -y @upstash/context7-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "UPSTASH_REDIS_REST_URL",
      "UPSTASH_REDIS_REST_TOKEN",
      "CONTEXT_KEY",
      "MAX_CONTEXT_SIZE"
    ],
    "usageInstructions": "Manage conversation context, maintain session memory, and handle context switching",
    "category": "AI & Machine Learning",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "taskmaster": {
    "name": "Task Master",
    "githubLink": "https://github.com/eyaltoledano/claude-task-master",
    "package": "task-master-mcp",
    "description": "Comprehensive task management with projects, contexts, and advanced organization",
    "installCommand": "npx -y --package=task-master-ai task-master-ai",
    "requiredEnvVars": [],
    "optionalParams": [
      ""
    ],
    "usageInstructions": "Manage tasks with projects, contexts, priorities, due dates, and dependencies. Supports natural language input for task creation and filtering.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "xcodebuild": {
    "name": "Xcode Build",
    "githubLink": "https://github.com/cameroncooke/XcodeBuildMCP",
    "package": "xcodebuildmcp",
    "description": "Xcode project building and iOS/macOS development automation",
    "installCommand": "npx -y xcodebuildmcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "SENTRY_DISABLED",
      "PROJECT_PATH",
      "SCHEME",
      "CONFIGURATION",
      "DESTINATION"
    ],
    "usageInstructions": "Build, test, and manage Xcode projects for iOS and macOS development",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/lmy0310xy3.jpg"
  },
  "supabase": {
    "name": "Supabase",
    "githubLink": "https://github.com/supabase-community/supabase-mcp",
    "package": "@supabase/mcp-server-supabase",
    "description": "Complete Supabase platform integration for database and project management",
    "installCommand": "npx -y @supabase/mcp-server-supabase@latest",
    "requiredEnvVars": [
      "SUPABASE_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "PROJECT_REF"
    ],
    "usageInstructions": "Manage Supabase projects, design tables, run SQL queries, create database branches, generate TypeScript types, and handle migrations",
    "category": "Databases",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "postgres-crystal": {
    "name": "PostgreSQL (Crystal DBA)",
    "githubLink": "https://github.com/crystaldba/postgres-mcp",
    "package": "postgres-mcp",
    "description": "PostgreSQL database operations with advanced DBA capabilities",
    "installCommand": "pip install postgres-mcp",
    "requiredEnvVars": [
      "PG_CONNECTION_STRING"
    ],
    "optionalParams": [],
    "usageInstructions": "Execute SQL queries, manage database schema, perform DBA operations on PostgreSQL databases. Requires a PostgreSQL connection string.",
    "category": "Databases",
    "stars": 622,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/3ticy7h11ql.png"
  },
  "qdrant": {
    "name": "Qdrant",
    "githubLink": "https://github.com/qdrant/mcp-server-qdrant",
    "package": "@qdrant/mcp-server-qdrant",
    "description": "Vector database operations for Qdrant - store and search high-dimensional vectors",
    "installCommand": "npx -y @qdrant/mcp-server-qdrant",
    "requiredEnvVars": [
      "QDRANT_URL"
    ],
    "optionalParams": [
      "QDRANT_API_KEY"
    ],
    "usageInstructions": "Manage collections, insert vectors, perform similarity searches, and handle vector data in Qdrant. Requires Qdrant instance URL.",
    "category": "Databases",
    "stars": 751,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/tc9emb3zgon.png"
  },
  "nixos": {
    "name": "NixOS",
    "githubLink": "https://github.com/utensils/mcp-nixos",
    "package": "mcp-nixos",
    "description": "Provides real-time information about NixOS packages, configurations, and version histories",
    "installCommand": "uvx mcp-nixos",
    "requiredEnvVars": [],
    "optionalParams": [
      "ELASTICSEARCH_URL"
    ],
    "usageInstructions": "Search NixOS packages, configuration options, Home Manager settings, nix-darwin configurations, and package version history. Queries live NixOS APIs for accurate data.",
    "category": "Development Tools",
    "stars": 173,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/kdjjvcov4l.png"
  },
  "shadcn-ui": {
    "name": "shadcn/ui",
    "githubLink": "https://github.com/heilgar/shadcn-ui-mcp-server",
    "package": "@heilgar/shadcn-ui-mcp-server",
    "description": "Browse and install shadcn/ui components and utilities for React applications",
    "installCommand": "npx -y @heilgar/shadcn-ui-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "FRAMEWORK"
    ],
    "usageInstructions": "Search, view documentation, and install shadcn/ui components directly into your React project. Supports component browsing, installation, and dependency management.",
    "category": "UI Components",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "gpt-researcher": {
    "name": "GPT Researcher",
    "githubLink": "https://github.com/assafelovic/gpt-researcher",
    "package": "gptr-mcp",
    "description": "AI-powered research assistant that conducts comprehensive online research on any topic",
    "installCommand": "git clone https://github.com/assafelovic/gptr-mcp.git && cd gptr-mcp && pip install -r requirements.txt",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "TAVILY_API_KEY"
    ],
    "optionalParams": [
      "RESEARCH_DEPTH",
      "REPORT_FORMAT",
      "MAX_SOURCES"
    ],
    "usageInstructions": "Perform deep research on topics, generate comprehensive reports, quick searches, and track sources. Requires manual setup with git clone and Python environment.",
    "category": "Research & Analysis",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "pr-reviewer": {
    "name": "PR Reviewer",
    "githubLink": "https://github.com/elhadjaoui/pr_reviewer",
    "package": null,
    "description": "Automatically analyzes Pull Requests, reviews changes, and adds comments directly to modified files",
    "installCommand": "pip install requests python-dotenv 'mcp[cli]' pydrive",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "GOOGLE_PARENT_FOLDER_ID"
    ],
    "usageInstructions": "Review pull requests automatically, add inline comments, approve PRs, and optionally store reviews in Google Drive. Requires GitHub personal access token with appropriate permissions.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "gdrive-ej": {
    "name": "Google Drive (Enhanced)",
    "githubLink": "https://github.com/ejoyee/ej-mcp-server-gdrive",
    "package": "@modelcontextprotocol/server-gdrive",
    "description": "Enhanced Google Drive integration with file listing, reading, and searching capabilities with automatic format conversion",
    "installCommand": "npx -y @modelcontextprotocol/server-gdrive",
    "requiredEnvVars": [
      "GDRIVE_CREDENTIALS_PATH"
    ],
    "optionalParams": [
      "FOLDER_ID",
      "MAX_RESULTS"
    ],
    "usageInstructions": "Access Google Drive files with advanced search, read documents with automatic format conversion, and manage Drive content. Requires Google OAuth credentials JSON file.",
    "category": "Cloud Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/oz4xg0ru8t8.jpg"
  },
  "sharepoint": {
    "name": "SharePoint",
    "githubLink": "https://github.com/Sofias-ai/mcp-sharepoint",
    "package": "mcp-sharepoint-server",
    "description": "Lightweight Microsoft SharePoint integration for document and folder management",
    "installCommand": "pip install mcp-sharepoint-server",
    "requiredEnvVars": [
      "SHP_ID_APP",
      "SHP_ID_APP_SECRET",
      "SHP_SITE_URL",
      "SHP_TENANT_ID"
    ],
    "optionalParams": [
      "SHP_DOC_LIBRARY"
    ],
    "usageInstructions": "List, read, search, and download SharePoint documents and folders. Requires Azure AD application credentials for authentication.",
    "category": "Cloud Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "shrimp-task-manager": {
    "name": "Shrimp Task Manager",
    "githubLink": "https://github.com/cjo4m06/mcp-shrimp-task-manager",
    "package": "mcp-shrimp-task-manager",
    "description": "Intelligent task management system based on MCP, providing efficient programming workflow framework for AI Agents",
    "installCommand": "npx -y @smithery/cli install @cjo4m06/mcp-shrimp-task-manager --client claude",
    "requiredEnvVars": [
      "DATA_DIR"
    ],
    "optionalParams": [
      "TEMPLATES_USE",
      "ENABLE_GUI",
      "MCP_PROMPT_PLAN_TASK"
    ],
    "usageInstructions": "Switch between TaskPlanner and TaskExecutor modes for systematic task planning and execution. Supports dependency tracking, research mode, task history, multiple languages, and customizable prompts.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "just-prompt": {
    "name": "Just Prompt",
    "githubLink": "https://github.com/disler/just-prompt",
    "package": null,
    "description": "Unified interface to multiple LLM providers with parallel querying capabilities",
    "installCommand": "git clone https://github.com/disler/just-prompt && cd just-prompt && uv sync",
    "requiredEnvVars": [],
    "optionalParams": [
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "GEMINI_API_KEY",
      "GROQ_API_KEY",
      "DEEPSEEK_API_KEY",
      "OLLAMA_HOST"
    ],
    "usageInstructions": "Query multiple LLM providers (OpenAI, Anthropic, Google, Groq, DeepSeek, Ollama) simultaneously or individually. Configure API keys for the providers you want to use.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "circleci": {
    "name": "CircleCI",
    "githubLink": "https://github.com/CircleCI-Public/mcp-server-circleci",
    "package": "@circleci/mcp-server-circleci",
    "description": "Model Context Protocol server for integrating with CircleCI development workflows",
    "installCommand": "npx -y @circleci/mcp-server-circleci",
    "requiredEnvVars": [
      "CIRCLECI_TOKEN"
    ],
    "optionalParams": [
      "CIRCLECI_BASE_URL"
    ],
    "usageInstructions": "Retrieve build failure logs, find flaky tests, analyze job results, validate configuration, and manage CircleCI pipelines. Supports natural language interactions with CI/CD workflows.",
    "category": "DevOps",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/o9aryvjh74.png"
  },
  "clickup": {
    "name": "ClickUp",
    "githubLink": "https://github.com/taazkareem/clickup-mcp-server",
    "package": "@taazkareem/clickup-mcp-server",
    "description": "Comprehensive ClickUp task management integration with 36 tools for AI applications",
    "installCommand": "npx -y @taazkareem/clickup-mcp-server@latest",
    "requiredEnvVars": [
      "CLICKUP_API_KEY",
      "CLICKUP_TEAM_ID"
    ],
    "optionalParams": [
      "ENABLE_SSE",
      "PORT",
      "DISABLED_TOOLS"
    ],
    "usageInstructions": "Manage ClickUp tasks, spaces, lists, and folders with natural language. Create, update, track time, and manage team members. Supports HTTP/SSE transport and markdown formatting.",
    "category": "Project Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "cognition-wheel": {
    "name": "Cognition Wheel",
    "githubLink": "https://github.com/Hormold/cognition-wheel",
    "package": "cognition-wheel",
    "description": "AI-powered cognitive assessment and development tool that helps track and improve various cognitive abilities",
    "installCommand": "pip install cognition-wheel",
    "requiredEnvVars": [],
    "optionalParams": [
      "CONFIG_PATH",
      "MODEL_PATH",
      "OUTPUT_DIR"
    ],
    "usageInstructions": "Assess and track cognitive abilities including memory, attention, reasoning, and problem-solving. Generate personalized cognitive development plans and track progress over time.",
    "category": "AI & Machine Learning",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "github-project-manager": {
    "name": "GitHub Project Manager",
    "githubLink": "https://github.com/kunwarVivek/mcp-github-project-manager",
    "package": "mcp-github-project-manager",
    "description": "Comprehensive GitHub project management tool for managing repositories, issues, pull requests, and GitHub Projects",
    "installCommand": "npx -y mcp-github-project-manager",
    "requiredEnvVars": [
      "GITHUB_TOKEN",
      "GITHUB_OWNER",
      "GITHUB_REPO"
    ],
    "optionalParams": [
      "DEFAULT_ORG",
      "DEFAULT_REPO",
      "MAX_RESULTS"
    ],
    "usageInstructions": "Manage GitHub repositories, create and update issues, handle pull requests, manage GitHub Projects (v2), and automate project workflows. Requires a GitHub personal access token with appropriate permissions.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "github": {
    "name": "GitHub",
    "githubLink": "https://github.com/github/github-mcp-server",
    "package": "ghcr.io/github/github-mcp-server",
    "description": "Official GitHub MCP server providing seamless integration with GitHub APIs for advanced automation and interaction capabilities",
    "installCommand": "docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> ghcr.io/github/github-mcp-server",
    "requiredEnvVars": [
      "GITHUB_PERSONAL_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "--toolsets",
      "--read-only",
      "--gh-host",
      "--dynamic-toolsets"
    ],
    "usageInstructions": "Access GitHub APIs through MCP for repository management, issues, pull requests, actions, and more. Requires Docker and a GitHub Personal Access Token.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "firecrawl": {
    "name": "Firecrawl",
    "githubLink": "https://github.com/mendableai/firecrawl-mcp-server",
    "package": "firecrawl-mcp-server",
    "description": "Advanced web scraping and crawling with intelligent content extraction and data processing",
    "installCommand": "npx -y firecrawl-mcp-server",
    "requiredEnvVars": [
      "FIRECRAWL_API_KEY"
    ],
    "optionalParams": [
      "MAX_PAGES",
      "TIMEOUT",
      "INCLUDE_HTML",
      "INCLUDE_RAW_HTML"
    ],
    "usageInstructions": "Crawl websites, extract structured data, and process web content at scale. Supports intelligent content extraction with configurable crawling parameters.",
    "category": "Web Scraping",
    "stars": 3715,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/tpiydg5jd7.jpg"
  },
  "google-maps": {
    "name": "Google Maps",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps",
    "package": "@modelcontextprotocol/server-google-maps",
    "description": "Google Maps integration for location services, directions, and place information",
    "installCommand": "npx -y @modelcontextprotocol/server-google-maps",
    "requiredEnvVars": [
      "GOOGLE_MAPS_API_KEY"
    ],
    "optionalParams": [
      "DEFAULT_LOCATION",
      "SEARCH_RADIUS",
      "LANGUAGE"
    ],
    "usageInstructions": "Search places, get directions, geocode addresses, and access Google Maps services. Requires Google Maps API key with appropriate services enabled.",
    "category": "Location Services",
    "stars": 58096,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/oz4xg0ru8t8.jpg"
  },
  "apple-mcp": {
    "name": "Apple MCP",
    "githubLink": "https://github.com/supermemoryai/apple-mcp",
    "package": "apple-mcp",
    "description": "Apple ecosystem integration for accessing iOS/macOS system information and device management",
    "installCommand": "pip install apple-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "DEVICE_ID",
      "BUNDLE_ID",
      "SYSTEM_INTEGRATION_LEVEL"
    ],
    "usageInstructions": "Access Apple device information, system status, and integrate with iOS/macOS applications. Provides device management and system monitoring capabilities.",
    "category": "System Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "mindsdb": {
    "name": "MindsDB",
    "githubLink": "https://github.com/mindsdb/mindsdb",
    "package": "mindsdb",
    "description": "AI query engine for federated data sources with built-in MCP server for database and ML operations",
    "installCommand": "pip install mindsdb",
    "requiredEnvVars": [],
    "optionalParams": [
      "MINDSDB_DB_CON",
      "MINDSDB_STORAGE_PATH",
      "MINDSDB_CONFIG_PATH"
    ],
    "usageInstructions": "Connect multiple data sources (SQL databases, APIs, files) and query them with natural language. Includes ML capabilities and predictive analytics.",
    "category": "AI & Machine Learning",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "fastmcp": {
    "name": "FastMCP",
    "githubLink": "https://github.com/jlowin/fastmcp",
    "package": "fastmcp",
    "description": "Python framework for rapidly building MCP servers and clients with simplified development workflow",
    "installCommand": "uv pip install fastmcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "SERVER_NAME",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "Build custom MCP servers quickly using Python. Provides scaffolding, decorators, and utilities for MCP development.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "figma-context": {
    "name": "Figma Context MCP",
    "githubLink": "https://github.com/GLips/Figma-Context-MCP",
    "package": "figma-developer-mcp",
    "description": "Provides Figma design data and context to AI coding tools for design-to-code workflows",
    "installCommand": "npx -y figma-developer-mcp",
    "requiredEnvVars": [
      "FIGMA_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "Access Figma files, frames, and design tokens to enhance AI-powered code generation. Requires Figma API access token.",
    "category": "Design Tools",
    "stars": 8870,
    "lastStarUpdate": "2025-07-07T15:28:25.044Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/dzswosx8do9.svg"
  },
  "ghidra-mcp": {
    "name": "Ghidra MCP",
    "githubLink": "https://github.com/LaurieWired/GhidraMCP",
    "package": null,
    "description": "MCP server for autonomous reverse engineering with Ghidra - enables AI-powered binary analysis",
    "installCommand": "git clone https://github.com/LaurieWired/GhidraMCP.git && cd GhidraMCP && python3 -m pip install mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "GHIDRA_HOST",
      "GHIDRA_PORT"
    ],
    "usageInstructions": "Perform automated reverse engineering and binary analysis using Ghidra with AI assistance. Requires Ghidra installation and manual setup.",
    "category": "Security",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "notion": {
    "name": "Notion",
    "githubLink": "https://github.com/makenotion/notion-mcp-server",
    "package": "@makenotion/notion-mcp-server",
    "description": "Official Notion MCP server for comprehensive workspace and database management",
    "installCommand": "npx -y @makenotion/notion-mcp-server",
    "requiredEnvVars": [
      "NOTION_API_KEY"
    ],
    "optionalParams": [
      "NOTION_DATABASE_ID"
    ],
    "usageInstructions": "Access Notion pages, databases, and blocks. Create, read, update content in your Notion workspace. Requires Notion integration API key.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "obsidian-advanced": {
    "name": "Obsidian (Advanced)",
    "githubLink": "https://github.com/cyanheads/obsidian-mcp-server",
    "package": "obsidian-mcp-server",
    "description": "Comprehensive Obsidian vault interactions via Local REST API with advanced note management",
    "installCommand": "uvx obsidian-mcp-server",
    "requiredEnvVars": [
      "OBSIDIAN_API_URL",
      "OBSIDIAN_API_KEY"
    ],
    "optionalParams": [
      "VAULT_PATH",
      "TIMEOUT"
    ],
    "usageInstructions": "Advanced Obsidian operations including note reading/writing, tag management, frontmatter operations, and graph navigation. Requires Obsidian Local REST API plugin.",
    "category": "Knowledge Management",
    "stars": 129,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "git-advanced": {
    "name": "Git (Advanced)",
    "githubLink": "https://github.com/cyanheads/git-mcp-server",
    "package": "git-mcp-server",
    "description": "Comprehensive Git operations with clone, commit, branch, merge, rebase, and worktree support",
    "installCommand": "uvx git-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "GIT_USER_NAME",
      "GIT_USER_EMAIL",
      "DEFAULT_BRANCH"
    ],
    "usageInstructions": "Full Git workflow support including advanced operations like interactive rebase, worktree management, tag operations, and repository cloning.",
    "category": "Version Control",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "npm-docs": {
    "name": "NPM Documentation",
    "githubLink": "https://github.com/bsmi021/mcp-npm_docs-server",
    "package": "mcp-npm-docs-server",
    "description": "Fetches NPM package metadata and documentation with intelligent caching",
    "installCommand": "uvx mcp-npm-docs-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "NPM_CACHE_TTL",
      "NPM_CACHE_DB_PATH"
    ],
    "usageInstructions": "Retrieve package information, README content, and documentation from NPM registry with local caching for performance.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "npm-search": {
    "name": "NPM Search",
    "githubLink": "https://github.com/btwiuse/npm-search-mcp-server",
    "package": "npm-search-mcp-server",
    "description": "Search and discover NPM packages with dependency analysis and popularity metrics",
    "installCommand": "uvx npm-search-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "SEARCH_LIMIT",
      "CACHE_DURATION"
    ],
    "usageInstructions": "Search NPM registry, analyze package dependencies, view popularity metrics, and discover related packages.",
    "category": "Development Tools",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "docker": {
    "name": "Docker",
    "githubLink": "https://github.com/docker/mcp-servers",
    "package": null,
    "description": "Secure code execution in Docker containers for AI development workflows",
    "installCommand": "docker pull docker/mcp-server && docker run -d docker/mcp-server",
    "requiredEnvVars": [
      "DOCKER_HOST"
    ],
    "optionalParams": [
      "DOCKER_CERT_PATH",
      "DOCKER_TLS_VERIFY"
    ],
    "usageInstructions": "Execute code securely in isolated Docker containers, manage containers and images, enable sandboxed AI operations.",
    "category": "DevOps",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/eor42x3k8r7.jpg"
  },
  "json": {
    "name": "JSON",
    "githubLink": "https://github.com/gongrzhe/json-mcp-server",
    "package": "@gongrzhe/server-json-mcp",
    "description": "Query and manipulate JSON data using JSONPath expressions",
    "installCommand": "npx -y @gongrzhe/server-json-mcp@1.0.3",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Query JSON data using JSONPath (start with $), filter arrays, perform string/numeric/date operations, and data aggregation",
    "category": "Data Processing",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "slack": {
    "name": "Slack",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/slack",
    "package": "@modelcontextprotocol/server-slack",
    "description": "Official Slack integration for posting messages, managing channels, and interacting with Slack workspaces",
    "installCommand": "npx -y @modelcontextprotocol/server-slack",
    "requiredEnvVars": [
      "SLACK_BOT_TOKEN",
      "SLACK_TEAM_ID"
    ],
    "optionalParams": [
      "SLACK_CHANNEL_IDS"
    ],
    "usageInstructions": "Post messages, reply to threads, add reactions, get channel history, and manage Slack workspace interactions. Requires creating a Slack App with bot token scopes and workspace installation.",
    "category": "Communication",
    "stars": 58096,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/oz4xg0ru8t8.jpg"
  },
  "slack-stealth": {
    "name": "Slack Stealth",
    "githubLink": "https://github.com/korotovsky/slack-mcp-server",
    "package": "slack-mcp-server",
    "description": "Advanced Slack MCP server with stealth mode, OAuth support, and flexible message retrieval without additional workspace permissions",
    "installCommand": "npx -y slack-mcp-server@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "SLACK_MCP_XOXC_TOKEN",
      "SLACK_MCP_XOXD_TOKEN",
      "SLACK_MCP_XOXP_TOKEN",
      "SLACK_MCP_SERVER_PORT",
      "SLACK_MCP_SERVER_HOST"
    ],
    "defaultEnvVars": {
      "SLACK_MCP_SERVER_PORT": "3001",
      "SLACK_MCP_SERVER_HOST": "127.0.0.1"
    },
    "authMethods": {
      "browser": {
        "name": "Browser-based Tokens (XOXC/XOXD)",
        "requiredVars": [
          "SLACK_MCP_XOXC_TOKEN",
          "SLACK_MCP_XOXD_TOKEN"
        ],
        "description": "Extract tokens from your browser session"
      },
      "oauth": {
        "name": "User OAuth Token",
        "requiredVars": [
          "SLACK_MCP_XOXP_TOKEN"
        ],
        "description": "More secure, uses Slack API OAuth token"
      }
    },
    "usageInstructions": "Retrieve channel/thread messages, list channels, and access DMs with minimal workspace permissions. Choose between browser-based tokens (XOXC/XOXD) or OAuth token (XOXP) authentication methods.",
    "category": "Communication",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/qvo8s5lobd.png"
  },
  "exa": {
    "name": "Exa",
    "githubLink": "https://github.com/exa-labs/exa-mcp-server",
    "package": "exa-mcp-server",
    "description": "AI-powered web search API integration for real-time searches, research papers, company info, and more",
    "installCommand": "npx -y exa-mcp-server",
    "requiredEnvVars": [
      "EXA_API_KEY"
    ],
    "optionalParams": [
      "--tools"
    ],
    "usageInstructions": "Enable web search, research papers, company research, crawling, competitor analysis, LinkedIn search, Wikipedia, and GitHub search. Get API key from dashboard.exa.ai/api-keys. Use --tools flag to select specific search capabilities.",
    "category": "Search & Research",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "magic": {
    "name": "21st.dev Magic",
    "githubLink": "https://github.com/21st-dev/magic-mcp",
    "package": "@21st-dev/magic-mcp",
    "description": "AI-powered UI component generator that creates beautiful, modern React components through natural language descriptions",
    "installCommand": "npx -y @21st-dev/magic-mcp",
    "requiredEnvVars": [
      "MAGIC_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Type '/ui' in your AI chat and describe the component you want. Magic generates production-ready React components with TypeScript support. Get your API key from the 21st.dev Magic Console. Currently in beta with all features free.",
    "category": "UI Components",
    "stars": 2825,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/dzx0qvoinfd.png"
  },
  "vercel-api": {
    "name": "Vercel MCP Server",
    "githubLink": "https://github.com/zueai/vercel-api-mcp",
    "package": "vercel-mcp",
    "description": "An MCP server that connects to Vercel API, providing various tools for interacting with Vercel deployments, DNS, domains, projects, and environment variables.",
    "installCommand": "npx vercel-mcp VERCEL_API_KEY=<your-vercel-api-key>",
    "requiredEnvVars": [
      "VERCEL_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "To use this MCP server, add it to your Cursor settings or Windsurf configuration with the VERCEL_API_KEY environment variable. The server provides various commands for managing Vercel resources.",
    "category": "API Integration",
    "stars": 16,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "workos": {
    "name": "WorkOS MCP Server",
    "githubLink": "https://github.com/zueai/workos-mcp",
    "package": "workos-mcp",
    "description": "A lightweight MCP server for interacting with WorkOS API, deployed on Cloudflare Workers.",
    "installCommand": "bun create mcp --clone https://github.com/zueai/workos-mcp && cd workos-mcp && bunx wrangler secret put WORKOS_API_KEY && bunx wrangler secret put WORKOS_CLIENT_ID",
    "requiredEnvVars": [
      "WORKOS_API_KEY",
      "WORKOS_CLIENT_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Run the install command. 2. Configure Cursor Settings with the MCP server. 3. Deploy changes using 'bun run deploy'.",
    "category": "API Integration",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "frontend-review": {
    "name": "Frontend Review MCP Server",
    "githubLink": "https://github.com/zueai/frontend-review-mcp",
    "package": "frontend-review-mcp",
    "description": "An MCP server that performs visual review of UI edit requests by comparing before and after screenshots.",
    "installCommand": "npx frontend-review-mcp HYPERBOLIC_API_KEY=<your-hyperbolic-api-key>",
    "requiredEnvVars": [
      "HYPERBOLIC_API_KEY"
    ],
    "optionalParams": [
      "MODEL"
    ],
    "usageInstructions": "To use this MCP server, add it to your Cursor or Windsurf configuration with your Hyperbolic API key. The server provides a 'reviewEdit' tool that compares before and after screenshots of UI edits.",
    "category": "Development Tools",
    "stars": 25,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "together-ai-image": {
    "name": "Together AI Image Server",
    "githubLink": "https://github.com/zym9863/together-ai-image-server",
    "package": "together-ai-image-server",
    "description": "An MCP server for generating images using Together AI API",
    "installCommand": "git clone https://github.com/zym9863/together-ai-image-server.git && cd together-ai-image-server && npm install",
    "requiredEnvVars": [
      "TOGETHER_API_KEY"
    ],
    "optionalParams": [
      "steps",
      "n"
    ],
    "usageInstructions": "1. Set TOGETHER_API_KEY environment variable. 2. Configure Claude Desktop by adding server config to claude_desktop_config.json. 3. Run the server using 'npm run build' or 'npm run watch' for development.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "code-indexer": {
    "name": "MCP Code Indexer",
    "githubLink": "https://github.com/zxfgds/mcp-code-indexer",
    "package": "mcp-code-indexer",
    "description": "An intelligent code retrieval tool based on Model Context Protocol, providing efficient and accurate code base retrieval for AI large language models.",
    "installCommand": "git clone https://github.com/zxfgds/mcp-code-indexer && cd mcp-code-indexer && pip install -r requirements.txt && python setup.py install",
    "requiredEnvVars": [],
    "optionalParams": [
      "command",
      "args",
      "cwd",
      "env"
    ],
    "usageInstructions": "1. Configure Claude Desktop or VSCode extension settings with the correct installation directory path. 2. Use tools like identify_project, index_project, search_code, get_code_structure, analyze_code_quality, extract_documentation, find_similar_code, get_code_metrics, and analyze_dependencies.",
    "category": "Development Tools",
    "stars": 17,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "mcp": {
    "name": "ZoomEye MCP Server",
    "githubLink": "https://github.com/zoomeye-ai/mcp",
    "package": "mcp-server-zoomeye",
    "description": "An MCP server providing network asset information through ZoomEye API queries.",
    "installCommand": "pip install mcp-server-zoomeye",
    "requiredEnvVars": [
      "ZOOMEYE_API_KEY"
    ],
    "optionalParams": [
      "page",
      "pagesize",
      "fields",
      "sub_type",
      "facets",
      "ignore_cache"
    ],
    "usageInstructions": "1. Install using 'pip install mcp-server-zoomeye'. 2. Set ZOOMEYE_API_KEY environment variable. 3. Run using 'python -m mcp_server_zoomeye'. Alternatively, use Docker: 'docker run -i --rm -e ZOOMEYE_API_KEY=your_api_key_here zoomeyeteam/mcp-server-zoomeye:latest'",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "warpcast": {
    "name": "Warpcast MCP Server",
    "githubLink": "https://github.com/zhangzhongnan928/mcp-warpcast-server",
    "package": "mcp-warpcast-server",
    "description": "An MCP server for Warpcast integration allowing Claude to interact with Warpcast accounts",
    "installCommand": "python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt && export WARPCAST_API_TOKEN=YOUR_TOKEN && uvicorn main:app --reload",
    "requiredEnvVars": [
      "WARPCAST_API_TOKEN"
    ],
    "optionalParams": [
      "port"
    ],
    "usageInstructions": "1. Create virtual environment and install dependencies. 2. Set WARPCAST_API_TOKEN environment variable. 3. Run server with uvicorn. Configure Claude Desktop by adding server details to claude_desktop_config.json.",
    "category": "API Integration",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "blockchain": {
    "name": "MCP Blockchain Server & DApp",
    "githubLink": "https://github.com/zhangzhongnan928/mcp-blockchain-server",
    "package": "mcp-blockchain-server",
    "description": "A secure MCP server enabling AI assistants to interact with blockchain smart contracts while maintaining user control over private keys and transaction signing.",
    "installCommand": "git clone https://github.com/zhangzhongnan928/mcp-blockchain-server.git && cd mcp-blockchain-server && npm install && cp .env.example .env && npm run db:migrate && npm run dev",
    "requiredEnvVars": [
      "INFURA_API_KEY",
      "ETHERSCAN_API_KEY",
      "DATABASE_URL"
    ],
    "optionalParams": [
      "REDIS_URL",
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Configure environment variables in .env file.\n3. Set up PostgreSQL database and run migrations.\n4. Start the server using 'npm run dev' or use Docker Compose for a quick start.",
    "category": "Blockchain",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "evm-signer": {
    "name": "MCP EVM Signer",
    "githubLink": "https://github.com/zhangzhongnan928/mcp-evm-signer",
    "package": "mcp-evm-signer",
    "description": "An MCP server for managing Ethereum private keys and deploying smart contracts using Infura.",
    "installCommand": "git clone https://github.com/zhangzhongnan928/mcp-evm-signer.git && cd mcp-evm-signer && npm install && npm run build",
    "requiredEnvVars": [
      "INFURA_API_KEY"
    ],
    "optionalParams": [
      "DEFAULT_NETWORK",
      "ENCRYPT_KEYS",
      "KEY_PASSWORD"
    ],
    "usageInstructions": "1. Configure environment variables by copying .env.example to .env and editing it. 2. Integrate with Claude for Desktop by adding the server configuration. 3. Restart Claude for Desktop.",
    "category": "Blockchain",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "pa-ai-agent": {
    "name": "MCP Personal Assistant Agent",
    "githubLink": "https://github.com/zhangzhongnan928/mcp-pa-ai-agent",
    "package": "mcp-pa-ai-agent",
    "description": "A versatile personal assistant AI agent built with the Model Context Protocol (MCP) that helps with calendar, tasks, emails, and more.",
    "installCommand": "git clone https://github.com/zhangzhongnan928/mcp-pa-ai-agent.git && cd mcp-pa-ai-agent && pip install -r requirements.txt",
    "requiredEnvVars": [
      "Google API credentials",
      "Weather API key",
      "News API key",
      "Home Assistant credentials"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Configure environment variables by copying .env.example to .env and editing it.\n3. Start the server with 'python mcp_server.py'.\n4. Configure Claude for Desktop to use this MCP server.",
    "category": "AI/ML",
    "stars": 12,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "confluence": {
    "name": "Confluence MCP Server",
    "githubLink": "https://github.com/zereight/confluence-mcp",
    "package": "@zereight/mcp-confluence",
    "description": "An MCP server providing Confluence integration with functionalities to execute CQL queries and retrieve page content.",
    "installCommand": "npx -y @zereight/mcp-confluence",
    "requiredEnvVars": [
      "CONFLUENCE_API_MAIL",
      "CONFLUENCE_API_KEY",
      "CONFLUENCE_URL",
      "JIRA_URL"
    ],
    "optionalParams": [
      "CONFLUENCE_IS_CLOUD"
    ],
    "usageInstructions": "To use this server, set the required environment variables (CONFLUENCE_API_MAIL, CONFLUENCE_API_KEY, CONFLUENCE_URL, JIRA_URL) and run the command: env CONFLUENCE_API_MAIL=your@email.com CONFLUENCE_API_KEY=your-key CONFLUENCE_URL=your-confluence-url JIRA_URL=your-jira-url npx -y @zereight/mcp-confluence. Optionally, you can set CONFLUENCE_IS_CLOUD to 'false' for Server/Data Center version.",
    "category": "Knowledge Management",
    "stars": 20,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "gitlab": {
    "name": "Better GitLab MCP Server",
    "githubLink": "https://github.com/zereight/gitlab-mcp",
    "package": "@zereight/mcp-gitlab",
    "description": "GitLab MCP Server with bug fixes and improvements over the original GitLab MCP server.",
    "installCommand": "npx -y @zereight/mcp-gitlab",
    "requiredEnvVars": [
      "GITLAB_PERSONAL_ACCESS_TOKEN",
      "GITLAB_API_URL"
    ],
    "optionalParams": [
      "GITLAB_READ_ONLY_MODE",
      "USE_GITLAB_WIKI",
      "USE_MILESTONE",
      "USE_PIPELINE",
      "GITLAB_PROJECT_ID",
      "GITLAB_AUTH_COOKIE_PATH",
      "SSE",
      "STREAMABLE_HTTP"
    ],
    "usageInstructions": "To use this server, set the required environment variables (GITLAB_PERSONAL_ACCESS_TOKEN, GITLAB_API_URL) and optionally configure other parameters. You can run it using 'npx -y @zereight/mcp-gitlab' or using Docker with 'docker run -i --rm -e GITLAB_PERSONAL_ACCESS_TOKEN=your_token -e GITLAB_API_URL=your_api_url iwakitakuma/gitlab-mcp'. Configure the server for Claude App, Cline, Roo Code, or Cursor by setting up the mcp.json file accordingly.",
    "category": "Development Tools",
    "stars": 296,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "shortcut": {
    "name": "Shortcut MCP Server",
    "githubLink": "https://github.com/zekus/shortcut-mcp",
    "package": "shortcut-mcp",
    "description": "An MCP server for interacting with Shortcut (formerly Clubhouse), allowing read-only and safe create operations.",
    "installCommand": "git clone https://github.com/zekus/shortcut-mcp.git && cd shortcut-mcp && uv venv && source .venv/bin/activate && uv pip install -e .",
    "requiredEnvVars": [
      "SHORTCUT_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and set up the environment. 2. Create a .env file by copying .env.example and add your Shortcut API token. 3. Run the server using 'python -m shortcut_mcp'. For Claude Desktop integration, add the server configuration to claude_desktop_config.json.",
    "category": "API Integration",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "batchdata-real-estate": {
    "name": "BatchData Real Estate MCP Server",
    "githubLink": "https://github.com/zellerhaus/batchdata-mcp-real-estate",
    "package": "@zellerhaus/batchdata-mcp-real-estate",
    "description": "An MCP server integrating BatchData.io's property and address APIs for property data, address verification, and geocoding.",
    "installCommand": "npx -y @smithery/cli install @zellerhaus/batchdata-mcp-real-estate --client claude",
    "requiredEnvVars": [
      "BATCHDATA_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Get BatchData.io API key from https://app.batchdata.com/settings/api\n2. Create .env file with BATCHDATA_API_KEY=your_api_key\n3. Run with 'npm start' or use Docker: './docker-manage.sh run'",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/1vgby5adid.png"
  },
  "docling": {
    "name": "MCP Docling Server",
    "githubLink": "https://github.com/zanetworker/mcp-docling",
    "package": "mcp-docling",
    "description": "An MCP server providing document processing capabilities using the Docling library.",
    "installCommand": "pip install -e .",
    "requiredEnvVars": [
      "WATSONX_PROJECT_ID",
      "WATSONX_APIKEY"
    ],
    "optionalParams": [
      "enable_ocr",
      "ocr_language",
      "no_of_qnas",
      "INFERENCE_MODEL",
      "LLAMA_STACK_PORT",
      "WATSONX_URL"
    ],
    "usageInstructions": "Start the server using 'mcp-server-lls' or 'uv run mcp-server-lls'. Configure transport and port with '--transport sse --port8000'. For qna_from_document tool, set Watson X credentials as environment variables.",
    "category": "Document Processing",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "zaj-mysql": {
    "name": "zaj-MySQL-MCP Server",
    "githubLink": "https://github.com/zajTools/zaj-MySQL-MCP",
    "package": "zaj-MySQL-MCP",
    "description": "An MCP server implementation providing database interaction and business intelligence capabilities through MySQL.",
    "installCommand": "git clone https://github.com/zajTools/zaj-MySQL-MCP.git && cd zaj-MySQL-MCP && npm install && npm run build",
    "requiredEnvVars": [
      "DB_USER",
      "DB_PASSWORD",
      "DB_NAME"
    ],
    "optionalParams": [
      "DB_HOST",
      "DB_PORT"
    ],
    "usageInstructions": "1. Configure .env file with database credentials.\n2. Run 'node build/index.js' to start the server.\n3. Add server configuration to cline_mcp_settings.json.",
    "category": "Database",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "gmail": {
    "name": "Gmail MCP Server",
    "githubLink": "https://github.com/zacco16/gmail-mcp-server",
    "package": "gmail-mcp-server",
    "description": "An MCP server implementation for Gmail API integration, enabling AI assistants to interact with Gmail services including email and calendar operations.",
    "installCommand": "git clone https://github.com/zacco16/gmail-mcp-server.git && cd gmail-mcp-server && npm install && cp .env.example .env",
    "requiredEnvVars": [
      "GOOGLE_CLIENT_ID",
      "GOOGLE_CLIENT_SECRET",
      "REDIRECT_URI",
      "GOOGLE_REFRESH_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Configure .env file with your Google API credentials\n2. Run 'npm run build' to build the project\n3. Run 'npm start' to start the server\n4. Use the provided API interfaces for email and calendar operations",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "mysql": {
    "name": "MySQL MCP Server",
    "githubLink": "https://github.com/yuru-sha/mcp-server-mysql",
    "package": "@yuru-sha/mcp-server-mysql",
    "description": "Model Context Protocol Server for MySQL databases, enabling LLMs to inspect database schemas and execute read-only queries.",
    "installCommand": "npx -y @smithery/cli install @yuru-sha/mcp-server-mysql --client claude",
    "requiredEnvVars": [
      "mysql://user:password@host:port/dbname"
    ],
    "optionalParams": [
      "host",
      "port",
      "database",
      "user",
      "password"
    ],
    "usageInstructions": "1. Install via Smithery using 'npx -y @smithery/cli install @yuru-sha/mcp-server-mysql --client claude'. 2. Configure Claude Desktop by adding 'mcpServers' configuration to claude_desktop_config.json. 3. Use connection URL format: mysql://user:password@host:port/database",
    "category": "Databases",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "cosense": {
    "name": "Cosense MCP Server",
    "githubLink": "https://github.com/yosider/cosense-mcp-server",
    "package": "@yosider/cosense-mcp-server",
    "description": "An MCP server for interacting with Cosense pages, providing functionality to retrieve, list, search, and insert text into pages.",
    "installCommand": "npx -y @yosider/cosense-mcp-server",
    "requiredEnvVars": [
      "COSENSE_PROJECT_NAME",
      "COSENSE_SID"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Configure JSR registry: echo '@jsr:registry=https://npm.jsr.io' >> ~/.npmrc (Linux/macOS) or echo '@jsr:registry=https://npm.jsr.io' >> $env:USERPROFILE\\.npmrc (Windows PowerShell). 2. Configure MCP client with 'cosense-mcp-server' command and required environment variables. 3. For debugging, use 'npm run inspect' after cloning the repository.",
    "category": "Knowledge Management",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "hackmd": {
    "name": "HackMD MCP Server",
    "githubLink": "https://github.com/yuna0x0/hackmd-mcp",
    "package": "@yuna0x0/hackmd-mcp",
    "description": "An MCP server for interacting with the HackMD API, enabling AI assistants to manage notes and teams.",
    "installCommand": "npx -y @smithery/cli install @yuna0x0/hackmd-mcp --client claude",
    "requiredEnvVars": [
      "HACKMD_API_TOKEN"
    ],
    "optionalParams": [
      "HACKMD_API_URL"
    ],
    "usageInstructions": "1. Install via Smithery using 'npx -y @smithery/cli install @yuna0x0/hackmd-mcp --client claude'. 2. Set HACKMD_API_TOKEN environment variable with your HackMD API token. 3. For manual installation, add server configuration to claude_desktop_config.json and restart Claude Desktop.",
    "category": "Productivity",
    "stars": 30,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/unqgwmdk6qj.svg"
  },
  "anilist": {
    "name": "AniList MCP Server",
    "githubLink": "https://github.com/yuna0x0/anilist-mcp",
    "package": "@yuna0x0/anilist-mcp",
    "description": "An MCP server that interfaces with the AniList API, allowing LLM clients to access anime, manga, character, staff, and user data.",
    "installCommand": "npx -y @smithery/cli install @yuna0x0/anilist-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "ANILIST_TOKEN"
    ],
    "usageInstructions": "1. Install using Smithery CLI or mcp-get. 2. Configure Claude Desktop by adding the server to claude_desktop_config.json. 3. Restart Claude Desktop. 4. Optional: Set ANILIST_TOKEN environment variable for operations requiring login.",
    "category": "API Integration",
    "stars": 43,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/mc3vfr4as9e.svg"
  },
  "redmine": {
    "name": "Redmine MCP Server",
    "githubLink": "https://github.com/yonaka15/mcp-server-redmine",
    "package": "mcp-server-redmine",
    "description": "MCP server implementation for Redmine, integrating with Redmine's REST API to provide ticket and project information.",
    "installCommand": "npx -y mcp-server-redmine",
    "requiredEnvVars": [
      "REDMINE_HOST",
      "REDMINE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Enable REST API in Redmine admin settings. 2. Get API key from user settings. 3. Set REDMINE_HOST and REDMINE_API_KEY environment variables. 4. Configure with Claude using provided JSON configuration.",
    "category": "Project Management",
    "stars": 44,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "protolint": {
    "name": "protolint MCP Server",
    "githubLink": "https://github.com/yoheimuta/protolint",
    "package": "protolint",
    "description": "A pluggable linting/fixing utility for Protocol Buffer files that supports MCP server functionality",
    "installCommand": "brew install protolint",
    "requiredEnvVars": [],
    "optionalParams": [
      "PROTOLINT_MIRROR_HOST",
      "PROTOLINT_MIRROR_REMOTE_PATH",
      "PROTOLINT_MIRROR_USERNAME",
      "PROTOLINT_MIRROR_PASSWORD",
      "PROTOLINT_PROXY"
    ],
    "usageInstructions": "To start the MCP server, run: protolint --mcp. For detailed documentation, see the MCP documentation at ./mcp/README.md",
    "category": "Development Tools",
    "stars": 638,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/gllkudj6qxm.png"
  },
  "pyodide": {
    "name": "mcp-pyodide",
    "githubLink": "https://github.com/yonaka15/mcp-pyodide",
    "package": "mcp-pyodide",
    "description": "A Pyodide server implementation for the Model Context Protocol (MCP) enabling Large Language Models to execute Python code.",
    "installCommand": "npm install mcp-pyodide",
    "requiredEnvVars": [],
    "optionalParams": [
      "PYODIDE_CACHE_DIR",
      "PYODIDE_DATA_DIR",
      "PORT"
    ],
    "usageInstructions": "To use as a server: import { runServer } from 'mcp-pyodide'; runServer().catch(error => console.error(error));\nTo use as CLI: mcp-pyodide [--sse]. Requires Node.js 18+ and npm 9+.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "server": {
    "name": "AI Development Assistant MCP Server",
    "githubLink": "https://github.com/yeakub108/mcp-server",
    "package": "mcp-server",
    "description": "An MCP server providing AI-powered development tools for Cursor, including code architecture, screenshot analysis, code review, and file reading capabilities.",
    "installCommand": "git clone https://github.com/yeakub108/mcp-server && cd mcp-server && npm install && npm run build",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "other API keys as needed"
    ],
    "usageInstructions": "1. Create src/env/keys.ts with API keys. 2. Configure MCP server in Windsurf Chat using the built index.js path. 3. Use tools in Cursor's Composer.",
    "category": "AI/ML",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "cipher42": {
    "name": "Cipher42 MCP Server",
    "githubLink": "https://github.com/yevgenypats/cipher42-mcp",
    "package": "@yevgenyp/cipher42-mcp",
    "description": "Unified MCP server providing API for database and data warehouse tools like Claude and Cursor",
    "installCommand": "npx -y @yevgenyp/cipher42-mcp",
    "requiredEnvVars": [
      "CIPHER42_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Sign-up to Cipher42.ai. 2. Connect your datasource. 3. Get your personal API key. 4. Configure Claude Desktop by editing claude_desktop_config.json with CIPHER42_API_KEY. 5. Restart Claude.",
    "category": "API Integration",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/fwot0yqtss.png"
  },
  "js": {
    "name": "YepCode MCP Server",
    "githubLink": "https://github.com/yepcode/mcp-server-js",
    "package": "@yepcode/mcp-server",
    "description": "An MCP server enabling AI platforms to interact with YepCode's infrastructure, executing LLM generated scripts and turning YepCode processes into AI-ready tools.",
    "installCommand": "npx -y @yepcode/mcp-server",
    "requiredEnvVars": [
      "YEPCODE_API_TOKEN"
    ],
    "optionalParams": [
      "YEPCODE_MCP_OPTIONS"
    ],
    "usageInstructions": "1. Install Node.js (version 18 or higher). 2. Configure YEPCODE_API_TOKEN environment variable with your YepCode API token. 3. Use 'npx -y @yepcode/mcp-server' to run the server. Optional: Configure YEPCODE_MCP_OPTIONS for additional settings like disabling run_code tool or run_code cleanup.",
    "category": "AI/ML",
    "stars": 24,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/dsqecfmr9yl.png"
  },
  "mongodb-mysql": {
    "name": "MCP-MongoDB-MySQL-Server",
    "githubLink": "https://github.com/yaoxiaolinglong/mcp-mongodb-mysql-server",
    "package": "@yaoxiaolinglong/mcp-mongodb-mysql-server",
    "description": "A Model Context Protocol server providing MySQL and MongoDB database operations",
    "installCommand": "npx -y @smithery/cli install @yaoxiaolinglong/mcp-mongodb-mysql-server --client claude",
    "requiredEnvVars": [
      "DATABASE_URL or DB_HOST/DB_USER/DB_PASSWORD/DB_DATABASE",
      "MONGODB_URI"
    ],
    "optionalParams": [
      "DB_PORT",
      "MONGODB_DATABASE",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install via Smithery or manually clone and build the project. 2. Configure MySQL and MongoDB connections using .env file or direct connection parameters. 3. Use available tools for database operations.",
    "category": "Database",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "wegene-assistant": {
    "name": "WeGene Assistant MCP Server",
    "githubLink": "https://github.com/xraywu/mcp-wegene-assistant",
    "package": "@xraywu/mcp-wegene-assistant",
    "description": "MCP server for analyzing WeGene genetic testing reports using LLM",
    "installCommand": "npx -y @smithery/cli install @xraywu/mcp-wegene-assistant --client claude",
    "requiredEnvVars": [
      "WEGENE_API_KEY",
      "WEGENE_API_SECRET"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository\n2. Run 'uv sync --dev --all-extras'\n3. Configure Claude Desktop by adding the MCP server configuration to claude_desktop_config.json\n4. Create .env file with WeGene API key and secret",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "openmetadata": {
    "name": "OpenMetadata MCP Server",
    "githubLink": "https://github.com/yangkyeongmo/mcp-server-openmetadata",
    "package": "@yangkyeongmo/mcp-server-openmetadata",
    "description": "An MCP server implementation for OpenMetadata, enabling standardized interaction with OpenMetadata through the Model Context Protocol.",
    "installCommand": "npm install @yangkyeongmo/mcp-server-openmetadata",
    "requiredEnvVars": [
      "OPENMETADATA_URL",
      "OPENMETADATA_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "1. Install using npm install @yangkyeongmo/mcp-server-openmetadata. 2. Configure OPENMETADATA_URL and OPENMETADATA_API_KEY environment variables. 3. Run the server.",
    "category": "API Integration",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "tavily-search": {
    "name": "MCP Tavily Search",
    "githubLink": "https://github.com/y7ut/mcp-tavily-search",
    "package": "github.com/y7ut/mcp-tavily-search",
    "description": "An MCP server providing search functionality through Tavily.",
    "installCommand": "go install github.com/y7ut/mcp-tavily-search@latest",
    "requiredEnvVars": [
      "Tavily API key (tvly-*******************)"
    ],
    "optionalParams": [
      "keyword",
      "days",
      "limit",
      "search_depth",
      "topic"
    ],
    "usageInstructions": "1. Install using 'go install github.com/y7ut/mcp-tavily-search@latest'. 2. Configure in MCP config file with command and API key. 3. Use with npx @modelcontextprotocol/inspector for debugging.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "neodb": {
    "name": "NeoDB MCP Server",
    "githubLink": "https://github.com/xytangme/neodb-mcp",
    "package": "neodb-mcp",
    "description": "An MCP server implementation for interacting with NeoDB, a social book cataloging service, providing tools to fetch user information, search books, and retrieve detailed book information.",
    "installCommand": "curl -LsSf https://astral.sh/uv/install.sh | sh && uv venv && source .venv/bin/activate && uv pip install .",
    "requiredEnvVars": [
      "NEODB_API_BASE",
      "NEODB_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "query",
      "book_id"
    ],
    "usageInstructions": "1. Install UV package installer. 2. Create and activate a Python virtual environment. 3. Install project dependencies. 4. Configure Claude Desktop with neodb-mcp server details including API base URL and access token.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "repomix": {
    "name": "Repomix",
    "githubLink": "https://github.com/yamadashy/repomix",
    "package": "repomix",
    "description": "A tool that packs entire repositories into AI-friendly formats for use with Large Language Models.",
    "installCommand": "npm install -g repomix",
    "requiredEnvVars": [],
    "optionalParams": [
      "output format (XML, Markdown, Plain Text)",
      "token count estimation"
    ],
    "usageInstructions": "Run 'repomix' in your project directory after installation. The tool generates a 'repomix-output.xml' file by default.",
    "category": "Development Tools",
    "stars": 17461,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "pdf-extraction": {
    "name": "PDF Extraction MCP Server",
    "githubLink": "https://github.com/lh/mcp-pdf-extraction-server",
    "package": "mcp-pdf-extraction-server",
    "description": "MCP server to extract contents from PDF files, with fixes for Claude Code CLI installation.",
    "installCommand": "git clone https://github.com/lh/mcp-pdf-extraction-server.git && cd mcp-pdf-extraction-server && pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "pdf_path",
      "pages"
    ],
    "usageInstructions": "1. Clone and install the repository. 2. Find the installed command path using 'which pdf-extraction'. 3. Add the server to Claude Code using 'claude mcp add pdf-extraction <path>'. 4. Verify the server is connected in Claude with '/mcp'. Requires Python3.11+, pip or conda, and Claude Code CLI installed.",
    "category": "File Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "swagger-viewer": {
    "name": "Swagger Viewer MCP",
    "githubLink": "https://github.com/xiezhuo0513/swagger-viewer",
    "package": "@xc_angelwatch/swagger-viewer",
    "description": "An MCP tool for Cursor editor to view and use Swagger API documentation.",
    "installCommand": "npm install -g @xc_angelwatch/swagger-viewer",
    "requiredEnvVars": [],
    "optionalParams": [
      "swaggerUrl"
    ],
    "usageInstructions": "Create swagger.json in user root directory with swaggerUrl. Use MCP interfaces like mcp_swagger_initialize(), mcp_swagger_search(query), mcp_swagger_generate_code(path, method, language), mcp_swagger_get_all_endpoints().",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "go": {
    "name": "Go MCP Server",
    "githubLink": "https://github.com/wricardo/go-mcp",
    "package": "github.com/wricardo/go-mcp",
    "description": "An MCP server providing Go documentation tools for AI assistants, exposing Go's documentation and package listing capabilities.",
    "installCommand": "go install github.com/wricardo/go-mcp@latest",
    "requiredEnvVars": [
      "WORKDIR"
    ],
    "optionalParams": [
      "cmd_flags"
    ],
    "usageInstructions": "1. Run 'go-mcp' after installation. 2. Configure your MCP-compatible assistant with the 'go-mcp' command and set WORKDIR to your Go project path.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "grpcurl": {
    "name": "MCP Grpcurl Server",
    "githubLink": "https://github.com/wricardo/grpcurl-mcp",
    "package": "github.com/wricardo/mcp-grpcurl",
    "description": "An MCP server for interacting with gRPC services using grpcurl, enabling method invocation, service listing, and service description.",
    "installCommand": "go install github.com/wricardo/mcp-grpcurl@latest",
    "requiredEnvVars": [
      "ADDRESS"
    ],
    "optionalParams": [
      "headers"
    ],
    "usageInstructions": "1. Install grpcurl from https://github.com/fullstorydev/grpcurl. 2. Run 'mcp-grpc-client'. 3. Configure MCP settings with 'mcp-grpcurl' command and set ADDRESS environment variable to your gRPC server address (e.g., localhost:8005).",
    "category": "Development Tools",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "gpt-proxy": {
    "name": "GPT MCP Proxy",
    "githubLink": "https://github.com/wricardo/gpt-mcp-proxy",
    "package": "gpt-mcp-proxy",
    "description": "A REST API server providing HTTP access to Multiple Command Protocol (MCP) tools, acting as a bridge between HTTP clients and MCP-compliant tool servers.",
    "installCommand": "git clone https://github.com/wricardo/mcp-http-server.git && cd mcp-http-server && go build",
    "requiredEnvVars": [
      "NGROK_AUTH_TOKEN",
      "NGROK_DOMAIN"
    ],
    "optionalParams": [
      "MCP_CONFIG_FILE"
    ],
    "usageInstructions": "1. Set NGROK_AUTH_TOKEN and NGROK_DOMAIN environment variables. 2. Create mcp_settings.json configuration file. 3. Run the server using 'go run main.go'. Ensure Go1.20 or later is installed and ngrok account is configured.",
    "category": "API Integration",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "trader": {
    "name": "MCP Trader Server",
    "githubLink": "https://github.com/wshobson/mcp-trader",
    "package": "mcp-trader",
    "description": "A simplified Model Context Protocol (MCP) server for stock and cryptocurrency analysis.",
    "installCommand": "git clone https://github.com/wshobson/mcp-trader.git && cd mcp-trader && uv venv --python3.11 && source .venv/bin/activate && uv sync",
    "requiredEnvVars": [
      "TIINGO_API_KEY"
    ],
    "optionalParams": [
      "BINANCE_API_KEY",
      "BINANCE_API_SECRET",
      "provider",
      "lookback_days",
      "quote_currency",
      "benchmark",
      "symbol",
      "stop_price",
      "risk_amount",
      "account_size",
      "price"
    ],
    "usageInstructions": "1. Clone the repository and set up the environment. 2. Create a .env file with your TIINGO_API_KEY. 3. Run the server using 'uv run mcp-trader'. For development mode, use 'uv run python -m mcp_trader.server'. Configure Claude Desktop App with the provided JSON configuration.",
    "category": "API Integration",
    "stars": 162,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "hotnews": {
    "name": "HotNews MCP Server",
    "githubLink": "https://github.com/wopal-cn/mcp-hotnews-server",
    "package": "@wopal/mcp-server-hotnews",
    "description": "An MCP server providing real-time hot trending topics from major Chinese social platforms and news sites.",
    "installCommand": "npx -y @wopal/mcp-server-hotnews",
    "requiredEnvVars": [],
    "optionalParams": [
      "sources"
    ],
    "usageInstructions": "To use this MCP server, you can call the `get_hot_news` function with a list of platform IDs. For example: `get_hot_news([1,3,7])` to get hot lists from Zhihu Hot, Baidu Hot Discussion, and Hupu Hot List. The server can be run using NPX or built and run using Docker.",
    "category": "API Integration",
    "stars": 127,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "jina-reader": {
    "name": "Jina Reader MCP Server",
    "githubLink": "https://github.com/wong2/mcp-jina-reader",
    "package": "mcp-jina-reader",
    "description": "An MCP server that fetches the content of a remote URL as Markdown using Jina Reader",
    "installCommand": "npm install -g mcp-jina-reader",
    "requiredEnvVars": [
      "JINA_READER_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install the package globally using npm. 2. Set the JINA_READER_API_KEY environment variable. 3. Run 'mcp-jina-reader' to start the server.",
    "category": "API Integration",
    "stars": 42,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "make": {
    "name": "MCP Server Make",
    "githubLink": "https://github.com/wrale/mcp-server-make",
    "package": "mcp-server-make",
    "description": "An MCP server that provides make functionality to LLMs, enabling safe execution of make targets from any Makefile.",
    "installCommand": "uv pip install mcp-server-make",
    "requiredEnvVars": [],
    "optionalParams": [
      "--make-path",
      "--working-dir"
    ],
    "usageInstructions": "To run the server: 'uvx mcp-server-make'. Configure Claude Desktop by adding to claude_desktop_config.json: '\"make\": { \"command\": \"uvx\", \"args\": [\"mcp-server-make\", \"--make-path\", \"/absolute/path/to/Makefile\", \"--working-dir\", \"/absolute/path/to/working/dir\"] }'. See docs/user_guide.md for detailed configuration.",
    "category": "Development Tools",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "scrapbox-cosense": {
    "name": "Scrapbox Cosense MCP Server",
    "githubLink": "https://github.com/worldnine/scrapbox-cosense-mcp",
    "package": "github:worldnine/scrapbox-cosense-mcp",
    "description": "MCP server for cosense/scrapbox providing page retrieval, listing, searching, and creation capabilities",
    "installCommand": "git clone https://github.com/worldnine/scrapbox-cosense-mcp.git && cd scrapbox-cosense-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "COSENSE_PROJECT_NAME",
      "COSENSE_SID"
    ],
    "optionalParams": [
      "API_DOMAIN",
      "SERVICE_LABEL",
      "COSENSE_PAGE_LIMIT",
      "COSENSE_SORT_METHOD",
      "COSENSE_TOOL_SUFFIX",
      "COSENSE_CONVERT_NUMBERED_LISTS"
    ],
    "usageInstructions": "Configure the server in Claude Desktop by adding the server configuration to claude_desktop_config.json. Set required environment variables COSENSE_PROJECT_NAME and COSENSE_SID. Optional variables can be configured as needed. Use the tools in Claude by specifying commands like get_page, list_pages, search_pages, create_page, and get_page_url.",
    "category": "Knowledge Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "textwell": {
    "name": "Textwell Write Tool MCP Server",
    "githubLink": "https://github.com/worldnine/textwell-mcp",
    "package": "textwell-mcp",
    "description": "An MCP server that writes text to Textwell on macOS using various modes like replace, insert, and add.",
    "installCommand": "git clone https://github.com/worldnine/textwell-mcp.git && cd textwell-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After installation, run the server. Configure Textwell on macOS to connect to this MCP server. Use the 'write-text' tool with appropriate modes (replace, insert, add) to write text to Textwell.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "file-converter": {
    "name": "File Converter MCP Server",
    "githubLink": "https://github.com/wowyuarm/file-converter-mcp",
    "package": "mcp",
    "description": "MCP server providing multiple file conversion tools for various document and image formats.",
    "installCommand": "git clone https://github.com/wowyuarm/file-converter-mcp.git && cd file-converter-mcp && pip install mcp docx2pdf pdf2docx pillow pandas pdfkit markdown",
    "requiredEnvVars": [],
    "optionalParams": [
      "input_file",
      "file_content_base64",
      "input_format",
      "output_format"
    ],
    "usageInstructions": "Run the server in development mode with 'mcp dev file_converter_server.py'. Install for Claude Desktop with 'mcp install file_converter_server.py --name \"File Converter\"'. Use tools like 'docx2pdf', 'pdf2docx', 'convert_image', 'excel2csv', 'html2pdf', and 'convert_file' with appropriate input parameters.",
    "category": "File Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": ""
  },
  "claudecomputercommander": {
    "name": "Desktop Commander MCP",
    "githubLink": "https://github.com/wonderwhy-er/ClaudeComputerCommander",
    "package": "@wonderwhy-er/desktop-commander",
    "description": "Execute terminal commands, manage files, and automate tasks through Model Context Protocol (MCP) with AI integration.",
    "installCommand": "npx @wonderwhy-er/desktop-commander@latest setup",
    "requiredEnvVars": [],
    "optionalParams": [
      "--debug"
    ],
    "usageInstructions": "1. Ensure Claude Desktop app is installed. 2. Run the installation command. 3. Configure Claude's desktop config if needed. 4. Restart Claude if running.",
    "category": "Development Tools",
    "stars": 3810,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "reddit": {
    "name": "MCP Reddit Server",
    "githubLink": "https://github.com/wllcnm/mcp-reddit",
    "package": "ghcr.io/nangeplus/mcp-reddit:latest",
    "description": "An MCP server for interacting with Reddit API, enabling AI assistants to browse and analyze Reddit content.",
    "installCommand": "docker run -i --rm -e REDDIT_CLIENT_ID=your_client_id -e REDDIT_CLIENT_SECRET=your_client_secret -e REDDIT_USER_AGENT=your_user_agent ghcr.io/nangeplus/mcp-reddit:latest",
    "requiredEnvVars": [
      "REDDIT_CLIENT_ID",
      "REDDIT_CLIENT_SECRET",
      "REDDIT_USER_AGENT"
    ],
    "optionalParams": [
      "limit",
      "query",
      "post_id",
      "comment_limit"
    ],
    "usageInstructions": "1. Configure Reddit API credentials as environment variables. 2. Use with Claude desktop client by adding mcpServer configuration. 3. Available tools: search_subreddit, get_post_details, get_subreddit_hot.",
    "category": "API Integration",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "wix": {
    "name": "Wix MCP Server",
    "githubLink": "https://github.com/wix/wix-mcp",
    "package": "@wix/mcp-remote",
    "description": "Wix MCP server for integrating Wix tools and services with AI clients",
    "installCommand": "npx -y @wix/mcp-remote https://mcp.wix.com/sse",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Ensure Node.js (version 19.9.0 or higher) is installed.\n2. Configure the MCP server in your AI client using the provided JSON configuration.\n3. For troubleshooting, check IDE logs, verify npx arguments, and try running the server directly via command line.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.634Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/ib5qw6vi82l.png"
  },
  "dingding": {
    "name": "DingTalk MCP Server V2",
    "githubLink": "https://github.com/wllcnm/dingding",
    "package": "ghcr.io/wllcnm/mcp-dingding-v2",
    "description": "An MCP server implementation for DingTalk robot interactions, providing features like sending messages, getting conversation info, user info, and calendar events.",
    "installCommand": "docker run -i --rm --name mcp-dingding-v2 -e DINGTALK_APP_KEY=your_app_key -e DINGTALK_APP_SECRET=your_app_secret ghcr.io/wllcnm/mcp-dingding-v2:latest",
    "requiredEnvVars": [
      "DINGTALK_APP_KEY",
      "DINGTALK_APP_SECRET"
    ],
    "optionalParams": [
      "conversation_id",
      "message",
      "msg_type",
      "user_id",
      "start_time",
      "end_time",
      "max_results",
      "next_token"
    ],
    "usageInstructions": "1. Set DINGTALK_APP_KEY and DINGTALK_APP_SECRET environment variables. 2. Run the Docker command. 3. Use the API tools like send_message, get_conversation_info, get_user_info, and get_calendar_list in your Claude configuration.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "osm": {
    "name": "MCP-OSM: OpenStreetMap Integration for MCP",
    "githubLink": "https://github.com/wiseman/osm-mcp",
    "package": "mcp-osm",
    "description": "Provides OpenStreetMap integration for MCP, allowing users to query and visualize map data through an MCP interface.",
    "installCommand": "uv run --with mcp[cli] --with psycopg2 mcp run mcp.py",
    "requiredEnvVars": [
      "PGHOST",
      "PGPORT",
      "PGDB",
      "PGUSER",
      "PGPASSWORD"
    ],
    "optionalParams": [
      "FLASK_HOST",
      "FLASK_PORT"
    ],
    "usageInstructions": "1. Configure environment variables in .env file. 2. Run using: uv run --env-file .env --with mcp[cli] --with psycopg2 mcp run mcp.py. 3. Access map interface at http://localhost:8889/. Available MCP tools: get_map_view, set_map_view, set_map_title, add_map_marker, add_map_line, add_map_polygon, query_osm_postgres.",
    "category": "API Integration",
    "stars": 21,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "wildfly": {
    "name": "WildFly MCP Server",
    "githubLink": "https://github.com/wildfly-extras/wildfly-mcp",
    "package": "wildfly-mcp-server",
    "description": "A WildFly MCP server to integrate with AI chatbots for managing WildFly servers using natural language.",
    "installCommand": "git clone https://github.com/wildfly-extras/wildfly-mcp.git && cd wildfly-mcp/wildfly-mcp-server && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "After installation, configure the server by setting optional parameters if needed. The server can be integrated with WildFly Chat Bot for interacting with WildFly servers.",
    "category": "DevOps",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "cursor-a11y": {
    "name": "Cursor A11y MCP",
    "githubLink": "https://github.com/westsideori/cursor-a11y-mcp",
    "package": "cursor-a11y-mcp",
    "description": "An MCP server providing accessibility testing capabilities for web applications using axe-core and Puppeteer.",
    "installCommand": "git clone https://github.com/westsideori/cursor-a11y-mcp.git && cd cursor-a11y-mcp && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Run `npm run build` to compile the source code.\n2. Start the MCP server with `npm start`.\n3. Run the test site with `npm run start:test-site`.\n4. Configure in Cursor by adding a new MCP Server with the command `node path/to/cursor-a11y-mcp/build/index.js`.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "db-tool": {
    "name": "Database Explorer MCP Tool",
    "githubLink": "https://github.com/wirdes/db-mcp-tool",
    "package": "@wirdes/db-mcp-tool",
    "description": "A powerful Model Context Protocol (MCP) tool for exploring and managing different types of databases including PostgreSQL, MySQL, and Firestore.",
    "installCommand": "git clone https://github.com/wirdes/db-mcp-tool.git && cd db-mcp-tool && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "connection details for PostgreSQL, MySQL, or Firestore"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'. 2. Build the project using 'npm run build'. 3. Configure the tool in Cursor settings with the command 'node /path/to/project/dist/index.js'. 4. Connect to your database using '!pg' for PostgreSQL, '!mysql' for MySQL, or '!firestore' for Firestore with appropriate connection details. 5. Use commands like '!tables', '!triggers', '!functions', '!query', '!export-db', '!export-data' to manage your database.",
    "category": "Database",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "datadog": {
    "name": "Datadog MCP Server",
    "githubLink": "https://github.com/winor30/mcp-server-datadog",
    "package": "@winor30/mcp-server-datadog",
    "description": "MCP server for Datadog API, enabling incident management and observability features.",
    "installCommand": "npm install -g @winor30/mcp-server-datadog",
    "requiredEnvVars": [
      "DATADOG_API_KEY",
      "DATADOG_APP_KEY"
    ],
    "optionalParams": [
      "LOG_LEVEL",
      "TIMEOUT"
    ],
    "usageInstructions": "After installation, configure Datadog API credentials and initialize the server. Use available commands like list_incidents, get_monitors, and query_metrics to interact with Datadog services.",
    "category": "API Integration",
    "stars": 81,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "webscraping-ai": {
    "name": "WebScraping.AI MCP Server",
    "githubLink": "https://github.com/webscraping-ai/webscraping-ai-mcp-server",
    "package": "webscraping-ai-mcp",
    "description": "An MCP server implementation that integrates with WebScraping.AI for web data extraction capabilities.",
    "installCommand": "npx -y webscraping-ai-mcp",
    "requiredEnvVars": [
      "WEBSCRAPING_AI_API_KEY"
    ],
    "optionalParams": [
      "WEBSCRAPING_AI_CONCURRENCY_LIMIT",
      "WEBSCRAPING_AI_DEFAULT_PROXY_TYPE",
      "WEBSCRAPING_AI_DEFAULT_JS_RENDERING",
      "WEBSCRAPING_AI_DEFAULT_TIMEOUT",
      "WEBSCRAPING_AI_DEFAULT_JS_TIMEOUT"
    ],
    "usageInstructions": "1. Run using npx: 'npx -y webscraping-ai-mcp'. 2. Set required environment variable WEBSCRAPING_AI_API_KEY. 3. Optional: Configure additional environment variables for customization.",
    "category": "Web Scraping",
    "stars": 16,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/13b09kvebp5r.png"
  },
  "waldur": {
    "name": "Waldur MCP Server",
    "githubLink": "https://github.com/waldur/waldur-mcp-server",
    "package": "waldur-mcp-server",
    "description": "Waldur MCP server enables integration between Waldur instance and Claude Desktop by implementing the Model Context Protocol (MCP).",
    "installCommand": "uv pip install waldur-mcp-server",
    "requiredEnvVars": [
      "WALDUR_API_URL",
      "WALDUR_TOKEN"
    ],
    "optionalParams": [
      "command",
      "args",
      "directory"
    ],
    "usageInstructions": "1. Install Claude Desktop. 2. Install Python3.13+ and uv. 3. Configure Claude Desktop config file with WALDUR_API_URL and WALDUR_TOKEN. For development: use 'uv run waldur-mcp-server'. For debugging: use MCP Inspector via 'npx @modelcontextprotocol/inspector'.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "jira": {
    "name": "MCP Jira Server",
    "githubLink": "https://github.com/vurtnec/mcp-jira",
    "package": "mcp-jira",
    "description": "Model Context Protocol (MCP) server for Jira Cloud products, enabling search and read operations on Jira issues.",
    "installCommand": "git clone https://github.com/vurtnec/mcp-jira && cd mcp-jira && npm install && npm run build",
    "requiredEnvVars": [
      "--jira-url",
      "--jira-username",
      "--jira-api-token"
    ],
    "optionalParams": [
      "--expand"
    ],
    "usageInstructions": "1. Clone the repository and run 'npm install && npm run build'. 2. Configure the server in claude_desktop_config.json with your Jira credentials and URL. 3. Obtain API tokens from https://id.atlassian.com/manage-profile/security/api-tokens.",
    "category": "Project Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "pubmed": {
    "name": "PubMed Search MCP Server",
    "githubLink": "https://github.com/wavelovey/pubmed",
    "package": "pubmed_search",
    "description": "An MCP server that provides PubMed search functionality with note management capabilities.",
    "installCommand": "uvx pubmed_search",
    "requiredEnvVars": [],
    "optionalParams": [
      "style"
    ],
    "usageInstructions": "To use this MCP server, configure it in Claude Desktop by adding the server details to claude_desktop_config.json. For development, use 'uv run pubmed_search' in the project directory. Debugging can be done using MCP Inspector via 'npx @modelcontextprotocol/inspector uv --directory /path/to/pubmed_search run pubmed-search'.",
    "category": "Knowledge Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "slim": {
    "name": "Slim-MCP: Claude Tools",
    "githubLink": "https://github.com/webdevtodayjason/slim-MCP",
    "package": "claude_tools",
    "description": "Python-based MCP server providing calculator, weather, and datetime tools for Claude AI",
    "installCommand": "conda create -n mcp-tools python=3.11 && conda activate mcp-tools && git clone https://github.com/webdevtodayjason/slim-MCP.git && cd slim-MCP && uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "Claude configuration settings"
    ],
    "usageInstructions": "1. Create conda environment: conda create -n mcp-tools python=3.11\n2. Activate environment: conda activate mcp-tools\n3. Clone repository and install: git clone https://github.com/webdevtodayjason/slim-MCP.git && cd slim-MCP && uv pip install -e .\n4. Configure Claude Desktop/Claude Web/Cursor IDE with the Python executable path from the conda environment",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "rosetta": {
    "name": "MCP Rosetta Server",
    "githubLink": "https://github.com/vrtejus/mcp-rosetta",
    "package": "mcp-rosetta",
    "description": "MCP server integrating with Rosetta binary for protein structure analysis",
    "installCommand": "git clone https://github.com/vrtejus/mcp-rosetta && cd mcp-rosetta",
    "requiredEnvVars": [
      "ROSETTA_SCRIPT_PATH",
      "PDB_DIR",
      "OUTPUT_DIR",
      "ROSETTA_BIN_PATH",
      "ROSETTA_DB_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "After cloning the repository, set the required environment variables (ROSETTA_SCRIPT_PATH, PDB_DIR, OUTPUT_DIR, ROSETTA_BIN_PATH, ROSETTA_DB_PATH) to your specific paths. The server is configured by defining these paths.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "gdrive": {
    "name": "Google Drive MCP Server",
    "githubLink": "https://github.com/w-jeon/mcp-gdrive",
    "package": "@modelcontextprotocol/server-gdrive",
    "description": "MCP server that integrates with Google Drive to list, read, and search files.",
    "installCommand": "npx -y @modelcontextprotocol/server-gdrive",
    "requiredEnvVars": [
      "GDRIVE_OAUTH_PATH",
      "GDRIVE_CREDENTIALS_PATH"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Create Google Cloud project and enable Drive API. 2. Configure OAuth consent screen. 3. Create OAuth Client ID. 4. Rename OAuth key file to 'gcp-oauth.keys.json'. 5. Run 'node ./dist auth' to authenticate. For Docker: 'docker run -i --rm --mount type=bind,source=/path/to/gcp-oauth.keys.json,target=/gcp-oauth.keys.json -v mcp-gdrive:/gdrive-server -e GDRIVE_OAUTH_PATH=/gcp-oauth.keys.json -e GDRIVE_CREDENTIALS_PATH=/gdrive-server/credentials.json -p 3000:3000 mcp/gdrive auth'",
    "category": "File Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "ollama": {
    "name": "MCP Server for Ollama",
    "githubLink": "https://github.com/vincentf305/mcp-server-ollama",
    "package": "mcp-server-ollama",
    "description": "An MCP server enabling Claude Desktop to communicate with Ollama LLM server",
    "installCommand": "git clone https://github.com/vincentf305/mcp-server-ollama.git && cd mcp-server-ollama && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository\n2. Copy `.env.example` to `.env` and configure as needed\n3. Configure Claude Desktop by editing `claude_desktop_config.json` with the appropriate path to this MCP server",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "k8s": {
    "name": "Kubernetes MCP Server",
    "githubLink": "https://github.com/vlttnv/k8s-mcp",
    "package": "@vlttnv/k8s-mcp",
    "description": "A Python-based MCP server for Kubernetes clusters that exposes a comprehensive API to retrieve cluster information and diagnose issues.",
    "installCommand": "git clone git@github.com:vlttnv/k8s-mcp.git && cd k8s-mcp && uv venv && source .venv/bin/activate && uv sync",
    "requiredEnvVars": [],
    "optionalParams": [
      "KUBECONFIG"
    ],
    "usageInstructions": "After installation, configure Claude for Desktop by editing ~/Library/Application Support/Claude/claude_desktop_config.json. Ensure proper kubeconfig setup or appropriate RBAC permissions if running in-cluster.",
    "category": "DevOps",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "websocket": {
    "name": "MCP WebSocket Server",
    "githubLink": "https://github.com/virajsharma2000/mcp-websocket",
    "package": "mcp-websocket-server",
    "description": "An MCP server with WebSocket enhancements for real-time data updates, handling standard MCP requests and WebSocket subscriptions.",
    "installCommand": "git clone https://github.com/virajsharma2000/mcp-websocket.git && cd mcp-websocket && pip install websockets mcp-sdk",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Start the server with 'python server.py'.\n3. Connect to WebSocket server at 'ws://localhost:8765' and subscribe with '{\"action\": \"subscribe\"}'.\n4. Send MCP requests to 'http://localhost:8080'.",
    "category": "API Integration",
    "stars": 19,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "pg-schema": {
    "name": "PostgreSQL MCP Server",
    "githubLink": "https://github.com/vinsidious/mcp-pg-schema",
    "package": "@modelcontextprotocol/server-postgres",
    "description": "An MCP server providing read-only access to PostgreSQL databases, enabling LLMs to inspect database schemas and execute read-only queries.",
    "installCommand": "npx -y @modelcontextprotocol/server-postgres postgresql://localhost/mydb",
    "requiredEnvVars": [
      "postgresql://user:password@host:port/db-name"
    ],
    "optionalParams": [
      "host",
      "port",
      "db-name"
    ],
    "usageInstructions": "To use with Claude Desktop, add the server configuration to claude_desktop_config.json. Replace '/mydb' with your database name. For Docker on macOS, use 'host.docker.internal' if the server is on the host network.",
    "category": "Databases",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "canvas": {
    "name": "Canvas MCP Server",
    "githubLink": "https://github.com/vishalsachdev/canvas-mcp",
    "package": "canvas-mcp",
    "description": "An MCP server implementation for interacting with Canvas Learning Management System API, providing educators with an intelligent interface while maintaining FERPA compliance.",
    "installCommand": "git clone https://github.com/vishalsachdev/canvas-mcp.git && cd canvas-mcp && python scripts/install.py",
    "requiredEnvVars": [
      "CANVAS_API_TOKEN",
      "CANVAS_API_URL"
    ],
    "optionalParams": [
      "ENABLE_DATA_ANONYMIZATION"
    ],
    "usageInstructions": "1. Clone the repository and run the automated installer. 2. Configure environment variables in .env file. 3. Set up Claude Desktop integration by modifying claude_desktop_config.json. 4. Test the installation using 'canvas-mcp-server --test'",
    "category": "Education/ Productivity",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "pandoc": {
    "name": "mcp-pandoc Document Conversion Server",
    "githubLink": "https://github.com/vivekVells/mcp-pandoc",
    "package": "mcp-pandoc",
    "description": "An MCP server for document format conversion using pandoc, supporting multiple input/output formats.",
    "installCommand": "uvx mcp-pandoc",
    "requiredEnvVars": [],
    "optionalParams": [
      "contents",
      "input_file",
      "input_format",
      "output_format",
      "output_file",
      "reference_doc"
    ],
    "usageInstructions": "1. Install pandoc and uv. 2. Verify installations with 'pandoc --version' and 'uvx --version'. 3. For PDF conversion, install TeX Live. 4. Use the server with 'uvx mcp-pandoc' and configure as needed.",
    "category": "Productivity",
    "stars": 308,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "groww": {
    "name": "Groww MCP Server",
    "githubLink": "https://github.com/venkatakaushikvemani/groww-mcp",
    "package": "groww-mcp",
    "description": "An MCP server for interacting with the Groww trading API, allowing portfolio management and market data access.",
    "installCommand": "git clone https://github.com/venkatakaushikvemani/groww-mcp && cd groww-mcp && npm install",
    "requiredEnvVars": [
      "GROWW_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and cd into it.\n2. Run 'npm install' to install dependencies.\n3. Create a .env file with GROWW_API_KEY and optional PORT.\n4. Start the server with 'npm start'.",
    "category": "API Integration",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/m4nph6qeed.webp"
  },
  "bc": {
    "name": "Business Central MCP Server",
    "githubLink": "https://github.com/vanachterjacob/BC-MCP",
    "package": "bc-mcp-server",
    "description": "A server providing standardized development rules and context for Business Central projects, optimized for Cursor editor.",
    "installCommand": "git clone https://github.com/vanachterjacob/BC-MCP.git && cd BC-MCP && npm install",
    "requiredEnvVars": [
      "MCP_SERVER_PORT",
      "MONGODB_URI"
    ],
    "optionalParams": [
      "NODE_ENV"
    ],
    "usageInstructions": "1. Clone the repository or copy bc-rules.json and .cursor-context to your project. 2. For administrators: Edit bc-rules.json or manage rules via MongoDB. 3. Set environment variables: MCP_SERVER_PORT and optionally MONGODB_URI. 4. Run node scripts/generateRules.js to update static rules from database.",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "vectara": {
    "name": "Vectara MCP Server",
    "githubLink": "https://github.com/vectara/vectara-mcp",
    "package": "vectara-mcp",
    "description": "Vectara MCP Server provides AI applications with fast, reliable RAG capabilities through the Model Context Protocol.",
    "installCommand": "pip install vectara-mcp",
    "requiredEnvVars": [
      "api_key",
      "corpus_keys"
    ],
    "optionalParams": [
      "n_sentences_before",
      "n_sentences_after",
      "lexical_interpolation",
      "max_used_search_results",
      "generation_preset_name",
      "response_language"
    ],
    "usageInstructions": "After installation, configure Claude Desktop by adding the server to claude_desktop_config.json. Restart Claude Desktop to access Vectara MCP tools. First-time usage requires setting Vectara API key and corpus key(s) when prompted.",
    "category": "AI/ML",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "deepseek": {
    "name": "MCP Server for Deepseek Integration",
    "githubLink": "https://github.com/vincentf305/mcp-server-deepseek",
    "package": "mcp-server-deepseek",
    "description": "An MCP server implementation that allows Claude Desktop to use Deepseek models running in Docker.",
    "installCommand": "git clone https://github.com/vincentf305/mcp-server-deepseek.git && cd mcp-server-deepseek && pip install -r requirements.txt",
    "requiredEnvVars": [
      "DEEPSEEK_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create a .env file with DEEPSEEK_API_KEY=your_api_key_here\n2. Run the server using Docker: docker build -t mcp_server_deepseek . && docker run -d --name mcp-server-deepseek -p8765:8765 -e DEEPSEEK_API_KEY=your_api_key_here mcp-server-deepseek\n3. Configure Claude Desktop by adding the MCP server configuration to claude_desktop_config.json",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "vantage": {
    "name": "Vantage MCP Server",
    "githubLink": "https://github.com/vantage-sh/vantage-mcp-server",
    "package": "vantage-mcp-server",
    "description": "An open-source tool that lets you interact with your cloud cost data through AI assistants and MCP clients.",
    "installCommand": "brew install vantage-sh/tap/vantage-mcp-server",
    "requiredEnvVars": [
      "VANTAGE_BEARER_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create a read-only Vantage API token. 2. Install using 'brew install vantage-sh/tap/vantage-mcp-server'. 3. Configure MCP client (Claude, Cursor, or Goose) with the Vantage MCP Server binary path and VANTAGE_BEARER_TOKEN.",
    "category": "Cloud Services",
    "stars": 71,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/1oz1qbm0qw8j.ico"
  },
  "x": {
    "name": "X(Twitter) MCP Server",
    "githubLink": "https://github.com/vidhupv/x-mcp",
    "package": "@smithery/cli",
    "description": "An MCP server to create, manage and publish X/Twitter posts directly through Claude chat.",
    "installCommand": "npx -y @smithery/cli install x-mcp --client claude",
    "requiredEnvVars": [
      "TWITTER_API_KEY",
      "TWITTER_API_SECRET",
      "TWITTER_ACCESS_TOKEN",
      "TWITTER_ACCESS_TOKEN_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install via Smithery using the provided command. 2. Create claude_desktop_config.json in the appropriate directory based on your OS. 3. Configure the JSON with the correct command, args, and environment variables including your Twitter API credentials. 4. Quit and reopen Claude.",
    "category": "API Integration",
    "stars": 58,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "uiflowchartcreator": {
    "name": "UIFlowchartCreator",
    "githubLink": "https://github.com/umshere/uiflowchartcreator",
    "package": "uiflowchartcreator",
    "description": "An MCP server for creating UI flowcharts with easy-to-use API for flowchart creation",
    "installCommand": "npm install uiflowchartcreator",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add to MCP configuration: { \"mcpServers\": { \"uiflowchartcreator\": { \"command\": \"node\", \"args\": [\"path/to/uiflowchartcreator/build/index.js\"], \"env\": {} } } }. Refer to src/index.ts for API documentation.",
    "category": "Development Tools",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "valyu-js": {
    "name": "Valyu MCP Server",
    "githubLink": "https://github.com/valyu-network/valyu-mcp-js",
    "package": "ghcr.io/tiovikram/valyu-mcp-server",
    "description": "A Model Context Protocol server providing access to Valyu's knowledge retrieval and feedback APIs",
    "installCommand": "docker pull ghcr.io/tiovikram/valyu-mcp-server && docker run -i --rm -e VALYU_API_KEY=your-api-key ghcr.io/tiovikram/valyu-mcp-server",
    "requiredEnvVars": [
      "VALYU_API_KEY"
    ],
    "optionalParams": [
      "data_sources",
      "max_num_results",
      "similarity_threshold",
      "query_rewrite"
    ],
    "usageInstructions": "1. Pull the Docker image using 'docker pull ghcr.io/tiovikram/valyu-mcp-server'. 2. Run the server with 'docker run -i --rm -e VALYU_API_KEY=your-api-key ghcr.io/tiovikram/valyu-mcp-server'. 3. Configure Claude.app settings to use the server. 4. Use the 'knowledge' and 'feedback' tools as shown in the example interactions.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "replicate": {
    "name": "MCP Server for Replicate",
    "githubLink": "https://github.com/tzafrir/mcp-server-replicate",
    "package": "mcp-server-replicate",
    "description": "A FastMCP server implementation for interfacing with Replicate's API, providing access to various AI models.",
    "installCommand": "git clone https://github.com/tzafrir/mcp-server-replicate && cd mcp-server-replicate && pip install -r requirements.txt",
    "requiredEnvVars": [
      "REPLICATE_API_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Create a .env file with your REPLICATE_API_TOKEN.\n3. Run the server using 'fastmcp dev server.py'.",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "wazuh": {
    "name": "Wazuh MCP Server",
    "githubLink": "https://github.com/unmuktoai/Wazuh-MCP-Server",
    "package": "wazuh-mcp-server",
    "description": "Production-grade Model Context Protocol server for Wazuh security platform integration",
    "installCommand": "git clone https://github.com/gensecaihq/Wazuh-MCP-Server.git && cd Wazuh-MCP-Server && pip install -r requirements.txt && pip install -e .",
    "requiredEnvVars": [
      "WAZUH_HOST",
      "WAZUH_USER",
      "WAZUH_PASS"
    ],
    "optionalParams": [
      "VERIFY_SSL"
    ],
    "usageInstructions": "1. Configure .env file with Wazuh credentials\n2. Configure Claude Desktop configuration file\n3. Run server with 'python wazuh_mcp_server.py --stdio'",
    "category": "Security",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "vertexai-search": {
    "name": "MCP Server for Vertex AI Search",
    "githubLink": "https://github.com/ubie-oss/mcp-vertexai-search",
    "package": "mcp-vertexai-search",
    "description": "An MCP server that integrates with Vertex AI to search documents using private data.",
    "installCommand": "pip install git+https://github.com/ubie-oss/mcp-vertexai-search.git",
    "requiredEnvVars": [],
    "optionalParams": [
      "model.model_name",
      "model.project_id",
      "model.location",
      "model.impersonate_service_account",
      "data_stores.project_id",
      "data_stores.location",
      "data_stores.datastore_id",
      "data_stores.tool_name",
      "data_stores.description"
    ],
    "usageInstructions": "1. Install the package using 'pip install git+https://github.com/ubie-oss/mcp-vertexai-search.git'. 2. Create a config file from config.yml.template. 3. Run 'mcp-vertexai-search serve --config config.yml --transport <stdio|sse>'. Prerequisites include uv and a Vertex AI data store. Refer to README for detailed configuration and testing instructions.",
    "category": "AI/ML",
    "stars": 21,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "basescan": {
    "name": "Base Network MCP Server",
    "githubLink": "https://github.com/u-Operating-System/basescan-mcp-server",
    "package": "basescan-mcp-server",
    "description": "An MCP server for accessing Base Network blockchain data, providing tools for querying blocks, transactions, and smart contracts.",
    "installCommand": "git clone https://github.com/u-Operating-System/basescan-mcp-server.git && cd basescan-mcp-server && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "BASESCAN_API_KEY",
      "NODE_ENV",
      "MCP_TRANSPORT_TYPE",
      "MCP_HTTP_PORT",
      "MCP_LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone repository and install dependencies. 2. Configure environment variables as needed. 3. Run 'npm start' to start the server. For Claude Desktop, add configuration to claude_desktop_config.json. Docker users can run with 'docker run -p3010:3010 basescan-mcp-server'.",
    "category": "Blockchain/Blockchain Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/waw5q7ovdn.png"
  },
  "sol": {
    "name": "Model Context Protocol Server for Solana Client",
    "githubLink": "https://github.com/tywenk/mcp-sol",
    "package": "@tywenk/mcp-solana",
    "description": "An MCP server providing Solana blockchain functionality for Claude Desktop",
    "installCommand": "npx -y @smithery/cli install @tywenk/mcp-solana --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "globalShortcut"
    ],
    "usageInstructions": "1. Install using 'npx -y @smithery/cli install @tywenk/mcp-solana --client claude'. 2. Configure Claude desktop JSON config with server details. 3. Ensure uv binary and paths are absolute.",
    "category": "Blockchain/Other",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "puppeteer-py": {
    "name": "Puppeteer MCP Server (Python)",
    "githubLink": "https://github.com/twolven/mcp-server-puppeteer-py",
    "package": "mcp-server-puppeteer-py",
    "description": "A Model Context Protocol server providing browser automation capabilities using Playwright.",
    "installCommand": "git clone https://github.com/twolven/mcp-server-puppeteer-py.git && cd mcp-server-puppeteer-py && pip install -r requirements.txt && playwright install",
    "requiredEnvVars": [],
    "optionalParams": [
      "timeout",
      "selector",
      "width",
      "height",
      "script",
      "value",
      "url"
    ],
    "usageInstructions": "1. Clone the repository and install requirements.\n2. Run 'playwright install' to install browsers.\n3. Start the server with 'python puppeteer_server.py'.\n4. Configure Claude Desktop with the appropriate command and args.",
    "category": "Browser Automation",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "local-dev": {
    "name": "MCP Local Dev",
    "githubLink": "https://github.com/txbm/mcp-local-dev",
    "package": "mcp-local-dev",
    "description": "A local development environment manager that lets LLMs configure and manage dev environments automatically.",
    "installCommand": "uvx --from git+https://github.com/txbm/mcp-local-dev@main mcp-local-dev",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Install Claude Desktop from the MCP quickstart guide. 2. Add the server configuration to Claude Desktop config. 3. Point Claude at any GitHub repository and ask it to set up a dev environment.",
    "category": "Development Tools",
    "stars": 25,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "surfpool": {
    "name": "Surfpool",
    "githubLink": "https://github.com/txtx/surfpool",
    "package": "surfpool",
    "description": "Surfpool is a blazing-fast in-memory Solana testnet that allows instant point-forking of Solana mainnet.",
    "installCommand": "brew install txtx/taps/surfpool # for macOS or snap install surfpool # for Linux",
    "requiredEnvVars": [],
    "optionalParams": [
      "--help"
    ],
    "usageInstructions": "Start a local Solana network with: surfpool start. For Anchor projects, it automatically generates infrastructure as code, deploys programs, and provides a structured environment.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/ti0sj6icfn.png"
  },
  "rand": {
    "name": "MCP Rand",
    "githubLink": "https://github.com/turlockmike/mcp-rand",
    "package": "mcp-rand",
    "description": "An MCP server providing various random generation utilities including UUID, numbers, strings, passwords, Gaussian distribution, dice rolling, and card drawing.",
    "installCommand": "npm install mcp-rand",
    "requiredEnvVars": [],
    "optionalParams": [
      "min",
      "max",
      "length",
      "charset",
      "dice",
      "count",
      "deckState"
    ],
    "usageInstructions": "After installation, you can use the server as a CLI tool with 'npx mcp-rand' or integrate it with MCP clients by configuring it in your client configuration. Various tools are available for generating random data, rolling dice, and drawing cards.",
    "category": "Development Tools",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "text-editor": {
    "name": "MCP Text Editor Server",
    "githubLink": "https://github.com/tumf/mcp-text-editor",
    "package": "mcp-text-editor",
    "description": "An MCP server providing line-oriented text file editing capabilities through a standardized API, optimized for LLM tools.",
    "installCommand": "uvx mcp-text-editor",
    "requiredEnvVars": [],
    "optionalParams": [
      "encoding"
    ],
    "usageInstructions": "Start the server using 'uvx mcp-text-editor' or 'docker run -i --rm --mount type=bind,src=/some/path/src,dst=/some/path/dst mcp/text-editor'. Configure Claude.app by adding the server configuration to claude_desktop_config.json.",
    "category": "Development Tools",
    "stars": 129,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "shell": {
    "name": "MCP Shell Server",
    "githubLink": "https://github.com/tumf/mcp-shell-server",
    "package": "mcp-shell-server",
    "description": "A secure shell command execution server implementing the Model Context Protocol (MCP) for remote execution of whitelisted shell commands.",
    "installCommand": "pip install mcp-shell-server",
    "requiredEnvVars": [
      "ALLOW_COMMANDS"
    ],
    "optionalParams": [
      "timeout",
      "directory",
      "stdin"
    ],
    "usageInstructions": "Start the server with: ALLOW_COMMANDS='ls,cat,echo' uvx mcp-shell-server. Configure allowed commands via ALLOW_COMMANDS environment variable. Send requests with command arrays and optional stdin, directory, and timeout parameters.",
    "category": "Development Tools",
    "stars": 108,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "tavily-proxy": {
    "name": "Tavily MCP Server with Proxy Support",
    "githubLink": "https://github.com/tulong66/mcp-tavily-proxy",
    "package": "mcp-tavily-proxy",
    "description": "An MCP server providing AI-powered web search capabilities with proxy support",
    "installCommand": "pip install mcp-tavily-proxy",
    "requiredEnvVars": [
      "TAVILY_API_KEY"
    ],
    "optionalParams": [
      "HTTP_PROXY",
      "HTTPS_PROXY",
      "TAVILY_LOG_LEVEL"
    ],
    "usageInstructions": "1. Install using 'pip install mcp-tavily-proxy'. 2. Set TAVILY_API_KEY environment variable. 3. Optionally configure HTTP_PROXY and HTTPS_PROXY. 4. Run using 'python -m mcp_server_tavily'. For Claude integration, add appropriate configuration to Claude settings.",
    "category": "AI/ML",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "akshare": {
    "name": "AKShare MCP Server",
    "githubLink": "https://github.com/ttjslbz001/akshare",
    "package": "akshare-mcp-server",
    "description": "An MCP server providing financial data analysis capabilities using AKShare library.",
    "installCommand": "git clone https://github.com/yourusername/akshare_mcp_server.git && cd akshare_mcp_server && python -m venv venv && source venv/bin/activate && uv pip install -e .",
    "requiredEnvVars": [
      "AKSHARE_API_KEY"
    ],
    "optionalParams": [
      "AKSHARE_API_KEY"
    ],
    "usageInstructions": "1. Activate virtual environment: source venv/bin/activate. 2. Run server: python run_server.py. 3. Configure Claude Desktop with the server details.",
    "category": "Financial Data Analysis",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "interactive": {
    "name": "Interactive MCP Server",
    "githubLink": "https://github.com/ttommyth/interactive-mcp",
    "package": "interactive-mcp",
    "description": "A Node.js/TypeScript MCP server facilitating interactive communication between LLMs and users, enabling features like user input prompts and OS notifications.",
    "installCommand": "npx -y interactive-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "--timeout",
      "--disable-tools"
    ],
    "usageInstructions": "To use with Claude Desktop/Cursor, add configuration to claude_desktop_config.json or mcp.json. For VS Code, add to User Settings (JSON) or .vscode/mcp.json. Use command-line options like --timeout and --disable-tools in the client's args array.",
    "category": "Development Tools",
    "stars": 250,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/perlie2cf9.png"
  },
  "instagram": {
    "name": "Instagram DM MCP Server",
    "githubLink": "https://github.com/trypeggy/instagram",
    "package": "instagram_dm_mcp",
    "description": "An MCP server for sending Instagram Direct Messages and managing Instagram interactions.",
    "installCommand": "git clone https://github.com/trypeggy/instagram_dm_mcp.git && cd instagram_dm_mcp && uv sync",
    "requiredEnvVars": [
      "INSTAGRAM_USERNAME",
      "INSTAGRAM_PASSWORD"
    ],
    "optionalParams": [
      "command line arguments for username and password"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'uv sync'. 2. Configure Instagram credentials using environment variables or command line arguments. 3. Create configuration files for Claude Desktop or Cursor. 4. Restart Claude Desktop or Cursor to use the Instagram DM MCP integration.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "facebook-ads-library": {
    "name": "Facebook Ads Library MCP Server",
    "githubLink": "https://github.com/trypeggy/facebook-ads-library-mcp",
    "package": "facebook-ads-library-mcp",
    "description": "An MCP server for searching and analyzing Facebook's public ads library, providing insights into companies' advertising strategies.",
    "installCommand": "git clone https://github.com/trypeggy/facebook-ads-library-mcp.git && cd facebook-ads-library-mcp && python -m pip install -r requirements.txt",
    "requiredEnvVars": [
      "SCRAPECREATORS_API_KEY"
    ],
    "optionalParams": [
      "PATH_TO_SRC"
    ],
    "usageInstructions": "1. Clone the repository and cd into it. 2. Obtain an API token from Scrape Creators. 3. Configure the MCP server connection by creating a JSON config file with your API key. 4. Restart Claude Desktop or Cursor to see the Facebook Ads Library integration.",
    "category": "API Integration",
    "stars": 108,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/unjwd5wywt.png"
  },
  "pdf2png": {
    "name": "PDF to PNG MCP Server",
    "githubLink": "https://github.com/truaxki/mcp-Pdf2png",
    "package": "mcp-Pdf2png",
    "description": "An MCP server that converts PDF documents to PNG images.",
    "installCommand": "git clone https://github.com/truaxki/mcp-Pdf2png.git && cd mcp-Pdf2png && uv venv && .venv/Scripts/activate && uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "read_file_path",
      "write_folder_path"
    ],
    "usageInstructions": "1. Configure MCP client by adding server configuration to claude_desktop_config.json. 2. Use the pdf2png tool with read_file_path and write_folder_path parameters.",
    "category": "File Management",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "youtube-summarizer": {
    "name": "YouTube Summarizer MCP Server",
    "githubLink": "https://github.com/trilogy-group/youtube-summarizer-mcp",
    "package": "youtube-summarizer-mcp",
    "description": "MCP server exposing YouTube Summarizer APIs as tools for AI applications",
    "installCommand": "docker build -t youtube-summarizer-mcp . && docker run -i --rm youtube-summarizer-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use with Claude Desktop, add the server configuration to claude_desktop_config.json. Alternatively, use the MCP Inspector with ./inspector.sh or run the MCP client sample using ./run.sh after running ./setup.sh",
    "category": "AI/ML",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "cua": {
    "name": "C/ua - Computer-Use Agent",
    "githubLink": "https://github.com/trycua/cua",
    "package": "cua-computer",
    "description": "Docker for Computer-Use Agents enabling AI control of operating systems in virtual containers",
    "installCommand": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/trycua/cua/main/scripts/playground-docker.sh)\"",
    "requiredEnvVars": [],
    "optionalParams": [
      "API_KEY",
      "CONTAINER_NAME"
    ],
    "usageInstructions": "1. Install Docker. 2. Run the installation command. 3. Follow the guided setup to launch the Computer-Use Agent UI.",
    "category": "AI/ML",
    "stars": 8917,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/d1zz0w67vlb.png"
  },
  "aws-pricing": {
    "name": "AWS EC2 Pricing MCP Server",
    "githubLink": "https://github.com/trilogy-group/aws-pricing-mcp",
    "package": "ai1st/aws-pricing-mcp",
    "description": "An MCP server providing real-time AWS EC2 pricing information for LLMs and automation scripts.",
    "installCommand": "docker run --rm -i -q --network none ai1st/aws-pricing-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this MCP server, first configure your mcp_config.json with the appropriate Docker command. For local Python usage, download the pricing data using 'curl https://cloudfix-public-aws-pricing.s3.us-east-1.amazonaws.com/pricing/ec2_pricing.json.gz | gunzip > ec2_pricing.json' and ensure it's in the same directory as server.py.",
    "category": "Cloud Services",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/pqbn5fb4w3.png"
  },
  "variance-log": {
    "name": "MCP Variance Log",
    "githubLink": "https://github.com/truaxki/mcp-variance-log",
    "package": "mcp-variance-log",
    "description": "Agentic tool that logs statistical variations in conversation structure to a SQLite database, built using the Model Context Protocol (MCP).",
    "installCommand": "git clone https://github.com/truaxki/mcp-variance-log.git && cd mcp-variance-log && uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "PATH_TO_REPO"
    ],
    "usageInstructions": "1. Configure Claude Desktop by adding the server to claude_desktop_config.json. 2. Update the PATH_TO_REPO in the config file to point to the installation directory. 3. Use commands like 'log-query', 'read-logs', 'read_query' to interact with the logged data stored in data/varlog.db.",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "lara": {
    "name": "Lara Translate MCP Server",
    "githubLink": "https://github.com/translated/lara-mcp",
    "package": "@translated/lara-mcp",
    "description": "An MCP server for Lara Translate API, enabling powerful translation capabilities with language detection and translation memories.",
    "installCommand": "npm install -g @translated/lara-mcp",
    "requiredEnvVars": [
      "LARA_TRANSLATE_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "After installation, configure the Lara Translate API key as an environment variable. Run 'lara-mcp --help' for available commands and options. The server listens on the configured port (default: 8080).",
    "category": "API Integration",
    "stars": 61,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/biarvcyvr8d.png"
  },
  "pdf-reader": {
    "name": "PDF Reader MCP Server",
    "githubLink": "https://github.com/trafflux/pdf-reader-mcp",
    "package": "mcp/pdf-reader",
    "description": "An MCP server for reading and extracting text from PDF files, supporting both local files and URLs.",
    "installCommand": "git clone https://github.com/trafflux/pdf-reader-mcp.git && cd pdf-reader-mcp && docker build -t mcp/pdf-reader .",
    "requiredEnvVars": [],
    "optionalParams": [
      "path to local PDF files directory for volume mounting",
      "MCP configuration settings"
    ],
    "usageInstructions": "1. Run with local PDFs: docker run -i --rm -v /path/to/pdfs:/pdfs mcp/pdf-reader\n2. Run without local PDFs: docker run -i --rm mcp/pdf-reader\n3. Configure MCP settings as shown in the README",
    "category": "File Management",
    "stars": 21,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "python-run": {
    "name": "Python MCP Server",
    "githubLink": "https://github.com/topherbc/python-run-mcp",
    "package": "python-run-mcp",
    "description": "Python service implementing Model Context Protocol (MCP) for executing Python code via standardized API endpoints.",
    "installCommand": "git clone https://github.com/topherbc/python-run-mcp && cd python-run-mcp && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Start the server: python src/server.py\n2. Send requests to the /run_python endpoint: curl -X POST http://localhost:8000/run_python -H 'Content-Type: application/json' -d '{\"code\": \"print(\\'Hello, World!\\')\"}'",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "memory-cache": {
    "name": "Memory Cache Server",
    "githubLink": "https://github.com/tosin2013/mcp-memory-cache-server",
    "package": "@tosin2013/mcp-memory-cache-server",
    "description": "An MCP server that reduces token consumption by caching data between language model interactions.",
    "installCommand": "npx -y @smithery/cli install @tosin2013/mcp-memory-cache-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "MAX_ENTRIES",
      "MAX_MEMORY",
      "DEFAULT_TTL",
      "CHECK_INTERVAL",
      "STATS_INTERVAL",
      "CONFIG_PATH"
    ],
    "usageInstructions": "1. Install via Smithery using the provided command. Alternatively, clone the repository, run 'npm install', and 'npm run build'. 2. Configure the server by creating a config.json file or using environment variables in your MCP client settings. 3. Add the server to your MCP client settings, specifying the path to the built index.js file.",
    "category": "Productivity",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "toolhouse": {
    "name": "Toolhouse MCP Server",
    "githubLink": "https://github.com/toolhouse-community/mcp-server-toolhouse",
    "package": "mcp_server_toolhouse",
    "description": "MCP server connecting to Toolhouse's tools via their API",
    "installCommand": "uvx mcp_server_toolhouse",
    "requiredEnvVars": [
      "TOOLHOUSE_API_KEY",
      "TOOLHOUSE_BUNDLE"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository: git clone https://github.com/toolhouse-community/mcp-server-toolhouse.git\n2. Configure TOOLHOUSE_API_KEY and TOOLHOUSE_BUNDLE environment variables\n3. Modify Claude's configuration file (claude_desktop_config.json) to include the server configuration",
    "category": "AI/ML",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "cognee": {
    "name": "Cognee - Memory for AI Agents",
    "githubLink": "https://github.com/topoteretes/cognee",
    "package": "cognee",
    "description": "Cognee is an AI memory management system that replaces RAG systems, providing dynamic memory for agents through scalable ECL pipelines.",
    "installCommand": "pip install cognee",
    "requiredEnvVars": [
      "LLM_API_KEY"
    ],
    "optionalParams": [
      "other configuration variables as described in the documentation"
    ],
    "usageInstructions": "1. Install using 'pip install cognee'. 2. Set LLM_API_KEY environment variable with your OpenAI API key. 3. Use the provided Python example to add, cognify, and search data.",
    "category": "AI/ML",
    "stars": 6194,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "nativewind": {
    "name": "NativeWind MCP Server",
    "githubLink": "https://github.com/tokenizin-agency/mcp-nativewind",
    "package": "@modelcontextprotocol/server-nativewind",
    "description": "MCP server for transforming Tailwind components to NativeWind4",
    "installCommand": "npm install -g @modelcontextprotocol/server-nativewind",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run 'mcp-nativewind' as a CLI tool or configure in Claude for Desktop by adding to claude_desktop_config.json",
    "category": "Development Tools",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "strava": {
    "name": "Strava MCP Server",
    "githubLink": "https://github.com/tomekkorbak/strava-mcp-server",
    "package": "strava-mcp-server",
    "description": "An MCP server providing access to Strava API for athlete activities data",
    "installCommand": "uvx strava-mcp-server",
    "requiredEnvVars": [
      "STRAVA_CLIENT_ID",
      "STRAVA_CLIENT_SECRET",
      "STRAVA_REFRESH_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create Strava API application and get Client ID/Secret. 2. Run 'python get_strava_token.py' to get refresh token. 3. Set STRAVA_CLIENT_ID, STRAVA_CLIENT_SECRET, and STRAVA_REFRESH_TOKEN environment variables. 4. Configure Claude for Desktop or use Claude Web with MCP extension.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "claude-data-explorer": {
    "name": "Claude MCP Data Explorer",
    "githubLink": "https://github.com/tofunori/claude-mcp-data-explorer",
    "package": "claude-mcp-data-explorer",
    "description": "An MCP server for data exploration with Claude, enabling CSV loading and JavaScript data analysis.",
    "installCommand": "git clone https://github.com/tofunori/claude-mcp-data-explorer.git && cd claude-mcp-data-explorer && npm install && npm run setup",
    "requiredEnvVars": [],
    "optionalParams": [
      "CSV file path",
      "exploration topic"
    ],
    "usageInstructions": "1. Start Claude Desktop. 2. Select the 'Explore Data' prompt template. 3. Enter CSV file path and exploration topic. Ensure Node.js v16+ and Claude Desktop are installed. Enable Developer Mode in Claude Desktop.",
    "category": "Data Storage",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "ietf": {
    "name": "MCP-Server-IETF",
    "githubLink": "https://github.com/tizee/mcp-server-ietf",
    "package": "mcp-server-ietf",
    "description": "An MCP server for fetching IETF RFC documents for Large Language Models",
    "installCommand": "git clone https://github.com/tizee/mcp-server-ietf && cd mcp-server-ietf && pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "LOG_LEVEL"
    ],
    "usageInstructions": "Start the server with 'mcp-server-ietf'. Use with MCP inspector: 'npx @modelcontextprotocol/inspector uv run mcp-server-ietf'. Requires Python 3.11 or higher.",
    "category": "API Integration",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "tinybird": {
    "name": "Tinybird MCP Server",
    "githubLink": "https://github.com/tinybirdco/mcp-tinybird",
    "package": "mcp-tinybird",
    "description": "An MCP server to interact with a Tinybird Workspace from any MCP client, supporting SSE and STDIO modes.",
    "installCommand": "uvx mcp-tinybird",
    "requiredEnvVars": [
      "TB_API_URL",
      "TB_ADMIN_TOKEN"
    ],
    "optionalParams": [
      "port",
      "log_level"
    ],
    "usageInstructions": "1. Install using 'uvx mcp-tinybird'. 2. Configure Claude Desktop by creating claude_desktop_config.json with TB_API_URL and TB_ADMIN_TOKEN. 3. Restart Claude Desktop. For SSE mode, run 'uvx mcp-tinybird sse'.",
    "category": "Data Storage",
    "stars": 70,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/6ry45t95rr4.webp"
  },
  "youtube-transcripts": {
    "name": "YouTube Transcript Extractor",
    "githubLink": "https://github.com/tlofreso/mcp-youtube-transcripts",
    "package": "youtube_transcript_api",
    "description": "A command-line tool that extracts transcripts from YouTube videos with support for various URL formats and configurable output options.",
    "installCommand": "git clone https://github.com/tlofreso/mcp-youtube-transcripts.git && cd mcp-youtube-transcripts",
    "requiredEnvVars": [],
    "optionalParams": [
      "--output",
      "--timestamps/--no-timestamps"
    ],
    "usageInstructions": "python youtube_transcript.py <youtube-url> [options]. Requires Python 3.12 or higher. Automatically installs dependencies: click and youtube_transcript_api.",
    "category": "Media",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "unix-manual": {
    "name": "Unix Manual Server",
    "githubLink": "https://github.com/tizee/mcp-unix-manual",
    "package": "unix_manual_server",
    "description": "An MCP server providing Unix command documentation within Claude conversations.",
    "installCommand": "git clone https://github.com/tizee/mcp-unix-manual.git && cd mcp-unix-manual && pip install -e . && mcp install unix_manual_server.py",
    "requiredEnvVars": [],
    "optionalParams": [
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install the package using 'pip install -e .' or 'uv install -e .'. 2. Install the server in Claude Desktop using 'mcp install unix_manual_server.py'. For development, use 'mcp dev unix_manual_server.py'. Requires Python3.13+ and Claude Desktop.",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "tana": {
    "name": "Tana MCP Server",
    "githubLink": "https://github.com/tim-mcdonnell/tana-mcp",
    "package": "tana-mcp",
    "description": "An MCP server connecting to Tana's Input API for LLM data manipulation",
    "installCommand": "npm install -g tana-mcp",
    "requiredEnvVars": [
      "TANA_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install using 'npm install -g tana-mcp'\n2. Configure TANA_API_TOKEN environment variable with your Tana API token\n3. Set up Claude Desktop or Raycast configuration to use the server",
    "category": "Productivity",
    "stars": 28,
    "lastStarUpdate": "2025-07-07T15:28:25.045Z",
    "logo": ""
  },
  "google-calendar": {
    "name": "Google Calendar MCP Server",
    "githubLink": "https://github.com/thisnick/google-calendar-mcp",
    "package": "google-calendar-mcp",
    "description": "An MCP server that integrates with Google Calendar, allowing event management and calendar insights through Claude Desktop.",
    "installCommand": "git clone https://github.com/thisnick/google-calendar-mcp.git && cd google-calendar-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "GOOGLE_CLIENT_ID",
      "GOOGLE_CLIENT_SECRET",
      "GOOGLE_REDIRECT_URI"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Set up Google Cloud credentials by enabling the Google Calendar API and creating OAuth2.0 credentials. 3. Place the client secret JSON file as `.client_secret.json` in the project root. 4. Configure Claude Desktop by adding the server config to `claude_desktop_config.json`. 5. Run the server and complete the initial authentication process.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "tigris": {
    "name": "Tigris MCP Server",
    "githubLink": "https://github.com/tigrisdata/tigris-mcp-server",
    "package": "@tigrisdata/tigris-mcp-server",
    "description": "Tigris MCP Server implements the MCP specification to connect AI agents with Tigris object storage, enabling bucket and object management.",
    "installCommand": "docker run -i --rm -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_ENDPOINT_URL_S3 quay.io/tigrisdata/tigris-mcp-server:latest",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY",
      "AWS_ENDPOINT_URL_S3"
    ],
    "optionalParams": [
      "USE_AWS_PROFILES",
      "AWS_PROFILE"
    ],
    "usageInstructions": "1. Sign up at storage.new. 2. Get access key from storage.new/accesskey. 3. Set AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_ENDPOINT_URL_S3. 4. Run using Docker or npx.",
    "category": "Data Storage",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/map8u3w08zs.png"
  },
  "ai": {
    "name": "thirdweb AI",
    "githubLink": "https://github.com/thirdweb-dev/ai",
    "package": "thirdweb-mcp",
    "description": "Comprehensive toolkit for blockchain data analysis, wallet management, and AI agent interaction with blockchains",
    "installCommand": "uvx thirdweb-mcp",
    "requiredEnvVars": [
      "THIRDWEB_SECRET_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Run using uvx: uvx thirdweb-mcp\n2. Alternatively, install using pipx: pipx install thirdweb-mcp\n3. Set THIRDWEB_SECRET_KEY environment variable before running\n4. For Python SDK, install using pip: pip install \"thirdweb-ai[all]\"\n5. See documentation at https://portal.thirdweb.com/ for comprehensive guides",
    "category": "AI/ML",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/2hssa8z8ek9.jpg"
  },
  "terraform": {
    "name": "Terraform Registry MCP Server",
    "githubLink": "https://github.com/thrashr888/terraform-mcp-server",
    "package": "terraform-mcp-server",
    "description": "An MCP server providing tools for interacting with the Terraform Registry API, enabling AI agents to query provider information and module metadata.",
    "installCommand": "npx -y terraform-mcp-server",
    "requiredEnvVars": [
      "TFC_TOKEN"
    ],
    "optionalParams": [
      "TERRAFORM_REGISTRY_URL",
      "DEFAULT_PROVIDER_NAMESPACE",
      "LOG_LEVEL",
      "REQUEST_TIMEOUT_MS",
      "RATE_LIMIT_ENABLED",
      "RATE_LIMIT_REQUESTS",
      "RATE_LIMIT_WINDOW_MS"
    ],
    "usageInstructions": "To use this MCP server, configure it in Cursor or Claude Desktop by providing the command 'npx -y terraform-mcp-server'. For Terraform Cloud features, set the TFC_TOKEN environment variable with your Terraform Cloud API token.",
    "category": "DevOps",
    "stars": 117,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "terminal": {
    "name": "MCP SSE Server and STDIO Server Examples",
    "githubLink": "https://github.com/theailanguage/terminal",
    "package": "theailanguage/terminal",
    "description": "Examples of MCP servers using different transport methods and environments",
    "installCommand": "git clone https://github.com/theailanguage/terminal && cd terminal",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "1. Clone the repository: git clone https://github.com/theailanguage/terminal && cd terminal. 2. Follow the tutorial for your chosen setup: Option1 (Local Python): https://youtu.be/_veLqeCzdIQ, Option2 (Docker): https://youtu.be/cgml6yzrOjc, Option3 (SSE Local Docker): https://youtu.be/s0YJNcT1XMA, Option4 (SSE on GCP): https://youtu.be/s0YJNcT1XMA. 3. Test the server using prompts in Claude.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "squad": {
    "name": "Squad MCP Server",
    "githubLink": "https://github.com/the-basilisk-ai/squad-mcp",
    "package": "@squadai/tools",
    "description": "An MCP server connecting Squad AI platform to LLM applications, providing tools for product strategy artefacts.",
    "installCommand": "npm install @squadai/tools",
    "requiredEnvVars": [
      "SQUAD_API_KEY"
    ],
    "optionalParams": [
      "SQUAD_ENV"
    ],
    "usageInstructions": "1. Obtain Squad API key from https://meetsquad.ai Settings → Developer → API Keys. 2. Run server using one of the methods: standalone executable, Docker, or from source. 3. Configure MCP client by adding 'mcpServers' entry with command and environment variables.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/vcc1moypg3a.png"
  },
  "tox-testing": {
    "name": "Tox Testing MCP Server",
    "githubLink": "https://github.com/that1guy15/tox-testing",
    "package": "tox-testing",
    "description": "An MCP server that executes tox commands to run Python tests using pytest, providing various test execution modes.",
    "installCommand": "git clone https://github.com/that1guy15/tox-testing && cd tox-testing && npm install && npm run build",
    "requiredEnvVars": [
      "TOX_APP_DIR"
    ],
    "optionalParams": [
      "TOX_TIMEOUT"
    ],
    "usageInstructions": "Configure the server in your MCP settings file with the path to your Python project and optional timeout. Use the 'run_tox_tests' tool with different modes (all, file, case, directory) to execute tests. Follow the recommended workflow with Cline for efficient test execution and debugging.",
    "category": "Development Tools",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "openai": {
    "name": "OpenAI MCP Server",
    "githubLink": "https://github.com/thadius83/mcp-server-openai",
    "package": "@thadius83/mcp-server-openai",
    "description": "An MCP server that integrates with OpenAI's API, allowing users to query OpenAI models directly from Claude.",
    "installCommand": "git clone https://github.com/thadius83/mcp-server-openai.git && cd mcp-server-openai && pip install -e .",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "PYTHONPATH"
    ],
    "optionalParams": [
      "model"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Configure Claude Desktop by adding the server to your MCP settings configuration.\n3. Get an OpenAI API key and add it to your configuration file.\n4. Restart Claude.\n5. Use the 'ask-openai' tool in Claude with the use_mcp_tool command.",
    "category": "AI/ML",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "cursor-rust-tools": {
    "name": "Cursor Rust Tools",
    "githubLink": "https://github.com/terhechte/cursor-rust-tools",
    "package": "cursor-rust-tools",
    "description": "MCP server providing Rust Analyzer, Crate Docs, and Cargo Commands to Cursor LLM",
    "installCommand": "cargo install --git https://github.com/terhechte/cursor-rust-tools",
    "requiredEnvVars": [],
    "optionalParams": [
      "--no-ui"
    ],
    "usageInstructions": "1. Run 'cursor-rust-tools' to start with UI or 'cursor-rust-tools --no-ui' for headless mode. 2. Configure projects via UI or manually in ~/.cursor-rust-tools. 3. Create .cursor/mcp.json in your project directory. 4. Enable MCP server in Cursor settings.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/z4sps9g2f7r.png"
  },
  "supabase-nextjs": {
    "name": "Supabase NextJS MCP Server",
    "githubLink": "https://github.com/tengfone/supabase-nextjs-mcp-server",
    "package": "@tengfone/supabase-nextjs-mcp-server",
    "description": "A TypeScript-based MCP server implementing a simple notes system for NextJS with resources, tools, and prompts.",
    "installCommand": "npx -y @smithery/cli install @tengfone/supabase-nextjs-mcp-server --client claude",
    "requiredEnvVars": [
      "NEXT_PUBLIC_SUPABASE_URL",
      "NEXT_PUBLIC_SUPABASE_ANON_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install using Smithery CLI. 2. Configure Claude Desktop by adding server config to claude_desktop_config.json. 3. Set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY environment variables.",
    "category": "Development Tools",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "xrpl-service": {
    "name": "XRPL MCP Service",
    "githubLink": "https://github.com/tedlikeskix/xrpl-mcp-service",
    "package": "xrpl-mcp-service",
    "description": "An MCP server providing comprehensive access to the XRP Ledger through standardized endpoints",
    "installCommand": "pip install xrpl-py fastapi uvicorn python-dotenv && uvicorn main:app --host 0.0.0.0 --port 8000 --reload",
    "requiredEnvVars": [
      "XRPL_NODE_URL"
    ],
    "optionalParams": [
      "host",
      "port"
    ],
    "usageInstructions": "1. Create a .env file with XRPL_NODE_URL. 2. Run the server using uvicorn. 3. Use API endpoints for XRPL operations.",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "ip-geolocator": {
    "name": "MCP IP Geolocation Server",
    "githubLink": "https://github.com/tedlikeskix/mcp-ip-geolocator",
    "package": "mcp-ip-geolocator",
    "description": "An MCP server providing IP geolocation services via IP-API.com, returning structured location data without requiring an API key.",
    "installCommand": "npm install -g mcp-ip-geolocator",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Install using 'npm install -g mcp-ip-geolocator'. 2. Run the server with 'mcp-ip-geolocator'. 3. Connect to the server in Claude Desktop and query IP locations.",
    "category": "Location Services",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "alpaca": {
    "name": "Alpaca MCP Server",
    "githubLink": "https://github.com/tedlikeskix/alpaca-mcp-server",
    "package": "alpaca-mcp",
    "description": "An MCP server enabling LLMs like Claude to interact with Alpaca trading API for stock trading and account management.",
    "installCommand": "git clone https://github.com/YOUR_USERNAME/alpaca-mcp.git && cd alpaca-mcp && pip install mcp alpaca-py python-dotenv",
    "requiredEnvVars": [
      "API_KEY_ID",
      "API_SECRET_KEY"
    ],
    "optionalParams": [
      "paper"
    ],
    "usageInstructions": "1. Create a .env file with Alpaca API credentials. 2. Run 'python alpaca_mcp_server.py'. 3. Configure Claude for Desktop by adding server configuration to claude_desktop_config.json.",
    "category": "API Integration",
    "stars": 22,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "u301": {
    "name": "U301 URL Shortener MCP Server",
    "githubLink": "https://github.com/tealight-uk/u301-mcp",
    "package": "@u301/mcp",
    "description": "MCP server for creating short URLs using U301 service",
    "installCommand": "npx -y @u301/mcp",
    "requiredEnvVars": [
      "U301_API_KEY"
    ],
    "optionalParams": [
      "domain",
      "workspaceId",
      "slug",
      "expires",
      "password",
      "comment"
    ],
    "usageInstructions": "1. Create an API key in U301 Dashboard (https://u301.com). 2. Optionally configure custom domain via Cloudflare. 3. Configure MCP server with API key in config: { \"mcpServers\": { \"u301-url-shortener\": { \"command\": \"npx\", \"args\": [\"-y\", \"@u301/mcp\"], \"env\": { \"U301_API_KEY\": \"<Your-U301-API-Key>\" } } } }",
    "category": "URL Shortener/API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/rgy7cma7wpg.svg"
  },
  "imessage": {
    "name": "Mac iMessage MCP for Claude",
    "githubLink": "https://github.com/tchbw/mcp-imessage",
    "package": "mcp-imessage",
    "description": "An MCP implementation for reading and sending iMessages on MacBook, allowing AI assistants like Claude to interact with iMessage.",
    "installCommand": "npm install -g mcp-imessage",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this MCP server, ensure you have Node.js installed. After installation, configure the server according to your iMessage setup. The server allows Claude or other AI assistants supporting MCP to read and send iMessages.",
    "category": "Communication",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "loxo": {
    "name": "Loxo MCP Server",
    "githubLink": "https://github.com/tbensonwest/loxo-mcp-server",
    "package": "loxo-mcp-server",
    "description": "An MCP server providing tools for interacting with the Loxo recruitment platform API, enabling AI assistants to manage candidates, jobs, activities, and call queues.",
    "installCommand": "git clone https://github.com/tbensonwest/loxo-mcp-server.git && cd loxo-mcp-server && npm install && npm run build",
    "requiredEnvVars": [
      "LOXO_API_KEY",
      "LOXO_AGENCY_SLUG"
    ],
    "optionalParams": [
      "LOXO_DOMAIN"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Copy .env.example to .env and fill in required values. 3. Run 'npm start' to start the server. Configuration requires setting LOXO_API_KEY and LOXO_AGENCY_SLUG. LOXO_DOMAIN defaults to 'app.loxo.co' if not set.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "github-projects": {
    "name": "GitHub Projects MCP Server",
    "githubLink": "https://github.com/taylor-lindores-reeves/mcp-github-projects",
    "package": "@smithery/cli",
    "description": "An MCP server that enables AI agents to create and manage Agile Sprint-based projects using GitHub Projects.",
    "installCommand": "npx -y @smithery/cli install taylor-lindores-reeves/mcp-github-projects --client claude",
    "requiredEnvVars": [
      "GITHUB_TOKEN",
      "GITHUB_OWNER"
    ],
    "optionalParams": [
      "GITHUB_OWNER_TYPE",
      "ALLOWED_REPOS"
    ],
    "usageInstructions": "1. Clone the repository and cd into it. 2. Run 'bun install'. 3. Create a .env file with required environment variables. 4. Run 'bun run build'. 5. Configure your MCP client with the server settings.",
    "category": "Project Management",
    "stars": 28,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "bart": {
    "name": "BART MCP Server",
    "githubLink": "https://github.com/tchbw/bart-mcp",
    "package": "bart-mcp",
    "description": "An MCP server implementation for accessing BART departures data",
    "installCommand": "npm install -g bart-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this server, simply run 'bart-mcp' after installation. The server will start and be ready to serve MCP requests.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "homeassistant": {
    "name": "Home Assistant MCP Server",
    "githubLink": "https://github.com/tevonsb/homeassistant-mcp",
    "package": "homeassistant-mcp",
    "description": "An MCP server that bridges Home Assistant with Language Learning Models (LLMs) for natural language control and monitoring of smart home devices.",
    "installCommand": "git clone https://github.com/jango-blockchained/homeassistant-mcp.git && cd homeassistant-mcp && docker compose up -d",
    "requiredEnvVars": [
      "HASS_HOST",
      "HASS_TOKEN",
      "HASS_SOCKET_URL"
    ],
    "optionalParams": [
      "PORT",
      "NODE_ENV",
      "DEBUG"
    ],
    "usageInstructions": "1. Clone the repository and cd into it.\n2. Configure environment variables by copying .env.example to .env and editing it.\n3. Run 'docker compose up -d' to start the server.\n4. Verify installation by checking http://localhost:3000/health.",
    "category": "Home Automation",
    "stars": 350,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "tv-recommender": {
    "name": "TV Recommender MCP Server",
    "githubLink": "https://github.com/terryso/tv-recommender-mcp-server",
    "package": "tv-recommender-mcp-server",
    "description": "An MCP server providing TV show recommendations and information through TMDb API integration.",
    "installCommand": "npm install -g tv-recommender-mcp-server && export TMDB_API_KEY=your_api_key_here && tv-recommender-mcp-server",
    "requiredEnvVars": [
      "TMDB_API_KEY"
    ],
    "optionalParams": [
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install globally using npm\n2. Set TMDB_API_KEY environment variable\n3. Run tv-recommender-mcp-server\n4. Configure in Cursor using .cursor/mcp.json",
    "category": "Entertainment",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/9pt0u1125xm.png"
  },
  "smartsheet": {
    "name": "Smartsheet MCP Server",
    "githubLink": "https://github.com/terilios/smartsheet-server",
    "package": "smartsheet-mcp-server",
    "description": "An MCP server providing seamless integration with Smartsheet for automated document management and data operations.",
    "installCommand": "npm install -g smartsheet-mcp-server",
    "requiredEnvVars": [
      "SMARTSHEET_API_TOKEN",
      "MCP_SERVER_PORT"
    ],
    "optionalParams": [
      "LOG_LEVEL",
      "DEBUG_MODE",
      "MAX_CONNECTIONS"
    ],
    "usageInstructions": "1. Install using npm. 2. Set SMARTSHEET_API_TOKEN environment variable. 3. Run the server. 4. Configure MCP client to connect to the server.",
    "category": "API Integration",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "tavily": {
    "name": "Tavily MCP Server",
    "githubLink": "https://github.com/tavily-ai/tavily-mcp",
    "package": "tavily-mcp",
    "description": "Tavily MCP server provides real-time web search, data extraction, web mapping, and crawling capabilities for AI assistants.",
    "installCommand": "npx -y tavily-mcp@latest",
    "requiredEnvVars": [
      "TAVILY_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Ensure Node.js (v20 or higher) is installed.\n2. Obtain a Tavily API key from https://app.tavily.com/home.\n3. Run the server using 'npx -y tavily-mcp@latest'.\n4. Configure MCP clients (VS Code, Cursor, Claude Desktop) with the server settings, including the Tavily API key.",
    "category": "AI/ML",
    "stars": 548,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "docker-servers": {
    "name": "Docker MCP Servers",
    "githubLink": "https://github.com/tatsuiman/docker-mcp-servers",
    "package": "ghcr.io/tatsuiman/docker-mcp-notion-server-{service}:main",
    "description": "Docker-based MCP servers for various services like Slack, Notion, and GitHub",
    "installCommand": "docker run -i --rm -e {SERVICE_TOKEN}=your-{service}-token ghcr.io/tatsuiman/docker-mcp-notion-server-{service}:main",
    "requiredEnvVars": [
      "SLACK_BOT_TOKEN",
      "SLACK_TEAM_ID",
      "NOTION_API_TOKEN",
      "GITHUB_PERSONAL_ACCESS_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Choose the appropriate service (slack, notion, github) and replace 'your-{service}-token' with the actual token. For Slack, both SLACK_BOT_TOKEN and SLACK_TEAM_ID are required. For Notion and GitHub, their respective API tokens are required.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "tecton": {
    "name": "Tecton MCP Server",
    "githubLink": "https://github.com/tecton-ai/tecton-mcp",
    "package": "tecton-mcp",
    "description": "Tecton MCP Server provides tool-based context and assistance for feature engineering through integration with LLM-powered editors like Cursor.",
    "installCommand": "git clone https://github.com/tecton-ai/tecton-mcp.git && cd tecton-mcp && brew install uv && MCP_SMOKE_TEST=1 uv --directory $(pwd) run mcp run src/tecton_mcp/mcp_server/server.py",
    "requiredEnvVars": [
      "TECTON_API_KEY"
    ],
    "optionalParams": [
      "MCP_SMOKE_TEST"
    ],
    "usageInstructions": "1. Clone the repository and cd into it.\n2. Install uv package manager.\n3. Verify installation with MCP_SMOKE_TEST=1 uv command.\n4. Configure Cursor with the MCP server path.\n5. Log into your Tecton cluster using 'tecton login'.",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "diff-python": {
    "name": "MCP Server Diff Python",
    "githubLink": "https://github.com/tatn/mcp-server-diff-python",
    "package": "mcp-server-diff-python",
    "description": "An MCP server for obtaining text differences between two strings using Python's difflib library.",
    "installCommand": "uvx mcp-server-diff-python",
    "requiredEnvVars": [],
    "optionalParams": [
      "string_a",
      "string_b"
    ],
    "usageInstructions": "To use with Claude Desktop, add the server config to claude_desktop_config.json. For development, clone the repository and use 'uv sync' and 'uv build'.",
    "category": "Development Tools",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "perplexity": {
    "name": "Perplexity MCP Server",
    "githubLink": "https://github.com/tanigami/mcp-server-perplexity",
    "package": "mcp-server-perplexity",
    "description": "MCP Server for the Perplexity API, enabling chat completion with citations.",
    "installCommand": "uvx mcp-server-perplexity",
    "requiredEnvVars": [
      "PERPLEXITY_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "To use this server, install it via 'uvx mcp-server-perplexity', set PERPLEXITY_API_KEY environment variable, and configure Claude Desktop by adding the server details to claude_desktop_config.json.",
    "category": "AI/ML",
    "stars": 73,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "diff-typescript": {
    "name": "MCP Server Diff TypeScript",
    "githubLink": "https://github.com/tatn/mcp-server-diff-typescript",
    "package": "mcp-server-diff-typescript",
    "description": "A Model Context Protocol server that generates unified diffs between text strings.",
    "installCommand": "npm install -g mcp-server-diff-typescript",
    "requiredEnvVars": [],
    "optionalParams": [
      "oldString",
      "newString"
    ],
    "usageInstructions": "To use with Claude Desktop, configure the server in claude_desktop_config.json. For global installation, use 'npx -y mcp-server-diff-typescript'. For local development, clone the repository, run 'npm install', and 'npm run build', then configure with the path to build/index.js.",
    "category": "Development Tools",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "usescraper": {
    "name": "UseScraper MCP Server",
    "githubLink": "https://github.com/tanevanwifferen/usescraper-mcp-server",
    "package": "@smithery/cli",
    "description": "An MCP server providing web scraping capabilities through the UseScraper API, allowing content extraction from web pages in various formats.",
    "installCommand": "npx -y @smithery/cli install usescraper-server --client claude",
    "requiredEnvVars": [
      "USESCRAPER_API_KEY"
    ],
    "optionalParams": [
      "url",
      "format",
      "advanced_proxy",
      "extract_object"
    ],
    "usageInstructions": "1. Install using Smithery CLI. 2. Configure Claude Desktop by adding server config to claude_desktop_config.json. 3. Use the 'scrape' tool through MCP interface with required URL and optional format parameters.",
    "category": "Web Scraping",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "twitter-scraper": {
    "name": "Twitter MCP Server",
    "githubLink": "https://github.com/takiAA/twitter-scraper-mcp",
    "package": "twitter-scraper-mcp",
    "description": "An MCP server providing tools for interacting with Twitter using the agent-twitter-client library.",
    "installCommand": "git clone https://github.com/takiAA/twitter-scraper-mcp.git && cd twitter-scraper-mcp && npm install",
    "requiredEnvVars": [
      "TWITTER_USERNAME",
      "TWITTER_PASSWORD"
    ],
    "optionalParams": [
      "TWITTER_EMAIL",
      "TWITTER_2FA_SECRET",
      "TWITTER_API_KEY",
      "TWITTER_API_SECRET_KEY",
      "TWITTER_ACCESS_TOKEN",
      "TWITTER_ACCESS_TOKEN_SECRET"
    ],
    "usageInstructions": "1. Create a .env file with required Twitter credentials.\n2. Run the server using 'npx fastmcp dev' for development or 'npx fastmcp inspect' for visual inspection.",
    "category": "Web Scraping",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "supavec": {
    "name": "Supavec MCP Server",
    "githubLink": "https://github.com/taishikato/supavec-mcp-server",
    "package": "@supavec/mcp-server",
    "description": "An MCP server that enables AI assistants to fetch relevant embeddings and content from Supavec.",
    "installCommand": "npm install -g @supavec/mcp-server",
    "requiredEnvVars": [
      "SUPAVEC_API_KEY"
    ],
    "optionalParams": [
      "--api-key",
      "DEBUG"
    ],
    "usageInstructions": "1. Get your Supavec API key from https://supavec.com\n2. Run: supavec-mcp --api-key your_api_key\n3. Configure in Cursor/VS Code/Claude using npx @supavec/mcp-server",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "ts-introspect": {
    "name": "TypeScript Package Introspector MCP Server",
    "githubLink": "https://github.com/t3ta/ts-introspect-mcp-server",
    "package": "ts-introspect-mcp-server",
    "description": "An MCP server that extracts TypeScript package information and provides it to LLM applications.",
    "installCommand": "npx -y ts-introspect-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "packageName",
      "source"
    ],
    "usageInstructions": "To use this MCP server, run 'npx ts-introspect-mcp-server'. For project integration, create a .roo/mcp.json configuration file with the appropriate command and args. The server provides 'introspect-package' and 'introspect-source' tools.",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "linear": {
    "name": "MCP Linear",
    "githubLink": "https://github.com/tacticlaunch/mcp-linear",
    "package": "@tacticlaunch/mcp-linear",
    "description": "An MCP server implementation for Linear GraphQL API enabling AI assistants to interact with Linear project management systems.",
    "installCommand": "npx -y @smithery/cli install @tacticlaunch/mcp-linear --client cursor",
    "requiredEnvVars": [
      "LINEAR_API_TOKEN"
    ],
    "optionalParams": [
      "--token",
      "--client"
    ],
    "usageInstructions": "1. Get Linear API token from linear.app settings. 2. Configure MCP settings file with LINEAR_API_TOKEN. 3. Run using 'npx -y @smithery/cli install @tacticlaunch/mcp-linear --client [cursor/claude]' or manually with 'mcp-linear' after global installation.",
    "category": "Project Management",
    "stars": 89,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/2l2eoknp33n.png"
  },
  "ssh-rails-runner": {
    "name": "MCP Server: SSH Rails Runner",
    "githubLink": "https://github.com/tadasant/mcp-server-ssh-rails-runner",
    "package": "mcp-server-ssh-rails-runner",
    "description": "An MCP server for secure remote execution of Rails console commands via SSH, enabling read-only operations and managed mutations.",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [
      "SSH_HOST",
      "SSH_USER",
      "SSH_PRIVATE_KEY_PATH",
      "RAILS_WORKING_DIR"
    ],
    "optionalParams": [
      "PROJECT_NAME_AS_CONTEXT",
      "CODE_SNIPPET_FILE_DIRECTORY"
    ],
    "usageInstructions": "Configure environment variables, then run with Claude Desktop using the provided configuration. Review code snippets before executing mutations.",
    "category": "Development Tools",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "cgv": {
    "name": "CGV Cinema API Client",
    "githubLink": "https://github.com/t-rekttt/cgv-mcp",
    "package": "cgv-mcp",
    "description": "A Python client for interacting with CGV Cinema's mobile API, providing access to movie listings, cinema locations, and booking capabilities.",
    "installCommand": "pip install git+https://github.com/t-rekttt/cgv-mcp.git",
    "requiredEnvVars": [],
    "optionalParams": [
      "logging configuration",
      "API endpoint customization"
    ],
    "usageInstructions": "After installation, import the client in your Python script and configure it according to your needs. Check the GitHub repository for example usage.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "dblp": {
    "name": "MCP-DBLP Server",
    "githubLink": "https://github.com/szeider/mcp-dblp",
    "package": "mcp-dblp",
    "description": "An MCP server providing access to DBLP computer science bibliography database for Large Language Models.",
    "installCommand": "git clone https://github.com/szeider/mcp-dblp.git && cd mcp-dblp && uv venv && source .venv/bin/activate && uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "exportdir",
      "query",
      "max_results",
      "year_from",
      "year_to",
      "venue_filter",
      "include_bibtex",
      "title",
      "similarity_threshold",
      "author_name",
      "venue_name",
      "results",
      "links"
    ],
    "usageInstructions": "1. Install an MCP-compatible client (e.g., Claude Desktop app). 2. Clone the repository and set up the virtual environment. 3. Create the configuration file at the specified path with the required content. 4. Configure the 'command' and 'args' in the configuration file to point to the mcp-dblp directory.",
    "category": "Knowledge Management",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "stability-ai": {
    "name": "Stability AI MCP Server",
    "githubLink": "https://github.com/tadasant/mcp-server-stability-ai",
    "package": "mcp-server-stability-ai",
    "description": "MCP server integrating Stability AI's Stable Diffusion image manipulation functionalities",
    "installCommand": "npm install -g mcp-server-stability-ai",
    "requiredEnvVars": [
      "STABILITY_API_KEY",
      "IMAGE_STORAGE_DIRECTORY"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Sign up for Stability AI API key at https://platform.stability.ai/account/keys\n2. Set STABILITY_API_KEY and IMAGE_STORAGE_DIRECTORY environment variables\n3. Run the server using 'mcp-server-stability-ai'\n4. Configure MCP client to connect to the server",
    "category": "AI/ML",
    "stars": 73,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "claude-chatgpt": {
    "name": "Claude ChatGPT MCP Tool",
    "githubLink": "https://github.com/syedazharmbnr1/claude-chatgpt-mcp",
    "package": "claude-chatgpt-mcp",
    "description": "MCP tool allowing Claude to interact with ChatGPT desktop app on macOS.",
    "installCommand": "npx claude-chatgpt-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Run 'npx claude-chatgpt-mcp'. 2. Configure Claude Desktop by editing ~/Library/Application Support/Claude/claude_desktop_config.json. 3. Restart Claude Desktop. 4. Grant necessary permissions in System Preferences.",
    "category": "Productivity",
    "stars": 698,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "claude-outlook": {
    "name": "Claude Outlook MCP Tool",
    "githubLink": "https://github.com/syedazharmbnr1/claude-outlook-mcp",
    "package": "claude-outlook-mcp",
    "description": "MCP tool allowing Claude to interact with Microsoft Outlook for macOS, enabling email, calendar, and contact operations.",
    "installCommand": "git clone https://github.com/syedazharmbnr1/claude-outlook-mcp.git && cd claude-outlook-mcp && bun install && chmod +x index.ts",
    "requiredEnvVars": [],
    "optionalParams": [
      "isHtml",
      "attachments"
    ],
    "usageInstructions": "1. Configure Claude Desktop by editing ~/Library/Application Support/Claude/claude_desktop_config.json to include the tool. 2. Restart Claude Desktop. 3. Grant Terminal accessibility permissions in System Preferences. Use Claude to perform Outlook operations like checking emails, scheduling events, or managing contacts.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "redash": {
    "name": "Redash MCP Server",
    "githubLink": "https://github.com/suthio/redash-mcp",
    "package": "@suthio/redash-mcp",
    "description": "MCP server for integrating Redash with AI assistants like Claude, enabling query and dashboard management.",
    "installCommand": "npm install -g @suthio/redash-mcp",
    "requiredEnvVars": [
      "REDASH_URL",
      "REDASH_API_KEY"
    ],
    "optionalParams": [
      "REDASH_TIMEOUT",
      "REDASH_MAX_RESULTS"
    ],
    "usageInstructions": "1. Set REDASH_URL and REDASH_API_KEY environment variables. 2. Configure Claude for Desktop by adding the MCP server configuration to claude_desktop_config.json. 3. Use npx -y @suthio/redash-mcp to start the server.",
    "category": "Data Storage",
    "stars": 29,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "zotero": {
    "name": "Zotero MCP Server",
    "githubLink": "https://github.com/swairshah/zotero-mcp-server",
    "package": "zotero-mcp-server",
    "description": "MCP server for interacting with local Zotero repository, enabling programmatic access to search papers, manage notes, and more.",
    "installCommand": "git clone https://github.com/swairshah/zotero-mcp-server && cd zotero-mcp-server && pip install -e .",
    "requiredEnvVars": [
      "ZOTERO_API_KEY",
      "ZOTERO_USER_ID"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Create .env file with ZOTERO_API_KEY and ZOTERO_USER_ID. 2. Configure Anthropic Desktop app by modifying claude_desktop_config.json. 3. Run server using 'python -m zotero_mcp.server' after activating virtual environment.",
    "category": "Knowledge Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "sumup-agent-toolkit": {
    "name": "SumUp Agent Toolkit MCP Server",
    "githubLink": "https://github.com/sumup/sumup-agent-toolkit",
    "package": "@sumup/mcp",
    "description": "MCP Server that integrates with AI-powered code editors and apps such as Claude or Cursor to interact with SumUp API.",
    "installCommand": "npx -y @sumup/mcp",
    "requiredEnvVars": [
      "SUMUP_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Set SUMUP_API_KEY environment variable with your SumUp API key before running the server. The server integrates with applications supporting Model Context Protocol (MCP) like Claude and Cursor.",
    "category": "API Integration",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/l0myszrdejc.png"
  },
  "paradex-py": {
    "name": "MCP Paradex Server",
    "githubLink": "https://github.com/sv/mcp-paradex-py",
    "package": "mcp-paradex",
    "description": "MCP server implementation for Paradex trading platform, enabling AI assistants to interact with Paradex services.",
    "installCommand": "uvx mcp-paradex",
    "requiredEnvVars": [
      "PARADEX_ENVIRONMENT",
      "PARADEX_ACCOUNT_PRIVATE_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Set PARADEX_ENVIRONMENT to 'testnet' or 'mainnet'. 2. Set PARADEX_ACCOUNT_PRIVATE_KEY to your private key. 3. Run using 'uvx mcp-paradex' or configure in Claude Desktop.",
    "category": "API Integration",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "upload-file": {
    "name": "MCP File Upload Server",
    "githubLink": "https://github.com/sujianqingfeng/mcp-upload-file",
    "package": "mcp-upload-file",
    "description": "An MCP server for file uploading with configurable upload URL and form data",
    "installCommand": "npx -y mcp-upload-file@latest",
    "requiredEnvVars": [
      "UPLOAD_URL",
      "FILE_KEY"
    ],
    "optionalParams": [
      "FILE_NAME",
      "EXTRA_FORM"
    ],
    "usageInstructions": "Configure MCP server by adding 'upload-file' configuration with required env vars (UPLOAD_URL, FILE_KEY) and optional params (FILE_NAME, EXTRA_FORM). Ensure npx is available by installing Node.js.",
    "category": "File Management",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "imagesorcery": {
    "name": "ImageSorcery MCP",
    "githubLink": "https://github.com/sunriseapps/imagesorcery-mcp",
    "package": "imagesorcery-mcp",
    "description": "ComputerVision-based image recognition and editing tools for AI assistants, enabling local image processing without sending images to servers.",
    "installCommand": "python -m venv imagesorcery-mcp && source imagesorcery-mcp/bin/activate && pip install imagesorcery-mcp && imagesorcery-mcp --post-install",
    "requiredEnvVars": [],
    "optionalParams": [
      "models://list"
    ],
    "usageInstructions": "1. Create and activate a virtual environment using Python's venv module. 2. Install the package using pip or uv pip. 3. Run the post-installation script. Configure the MCP client to use ImageSorcery MCP by adding its configuration to the MCP-configuration file.",
    "category": "Computer Vision",
    "stars": 29,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/bqj1qmcgbui.png"
  },
  "typesense": {
    "name": "Typesense MCP Server",
    "githubLink": "https://github.com/suhail-ak-s/mcp-typesense-server",
    "package": "typesense-mcp-server",
    "description": "An MCP server implementation providing AI models with Typesense search capabilities",
    "installCommand": "npm install -g typesense-mcp-server",
    "requiredEnvVars": [
      "TYPESENSE_API_KEY",
      "TYPESENSE_HOST"
    ],
    "optionalParams": [
      "--port",
      "--protocol",
      "--api-key"
    ],
    "usageInstructions": "Configure Claude Desktop by adding server config to claude_desktop_config.json with command and args: ['--host', 'your-typesense-host', '--port', '8108', '--protocol', 'http', '--api-key', 'your-api-key']",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "agent-toolkit": {
    "name": "Stripe Agent Toolkit",
    "githubLink": "https://github.com/stripe/agent-toolkit",
    "package": "@stripe/agent-toolkit",
    "description": "The Stripe Agent Toolkit enables popular agent frameworks to integrate with Stripe APIs through function calling, supporting both Python and TypeScript.",
    "installCommand": "npm install @stripe/agent-toolkit",
    "requiredEnvVars": [
      "STRIPE_SECRET_KEY"
    ],
    "optionalParams": [
      "configuration.actions.paymentLinks.create",
      "configuration.context.account"
    ],
    "usageInstructions": "To use the Stripe Agent Toolkit, configure it with your Stripe secret key. For MCP server, run: npx -y @stripe/mcp --tools=all --api-key=YOUR_STRIPE_SECRET_KEY",
    "category": "API Integration",
    "stars": 879,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/1u8f676t4bi.jpg"
  },
  "beeminder": {
    "name": "MCP Beeminder Server",
    "githubLink": "https://github.com/strickvl/mcp-beeminder",
    "package": "mcp-beeminder",
    "description": "An MCP server implementation for interacting with the Beeminder API, enabling AI assistants to manage Beeminder goals and datapoints.",
    "installCommand": "git clone https://github.com/strickvl/mcp-beeminder.git && cd mcp-beeminder && uv run mcp-beeminder",
    "requiredEnvVars": [
      "BEEMINDER_API_KEY",
      "BEEMINDER_USERNAME"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and configure Claude Desktop by adding the server configuration to claude_desktop_config.json. 2. Set BEEMINDER_API_KEY and BEEMINDER_USERNAME environment variables. 3. Use Claude Desktop to interact with Beeminder goals and datapoints.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "trino": {
    "name": "Trino MCP Server",
    "githubLink": "https://github.com/stinkgen/trino",
    "package": "trino-mcp",
    "description": "Model Context Protocol server for Trino, providing AI models with structured access to Trino's distributed SQL query engine.",
    "installCommand": "docker-compose up -d",
    "requiredEnvVars": [],
    "optionalParams": [
      "TRINO_HOST",
      "TRINO_PORT",
      "TRINO_USER",
      "TRINO_CATALOG"
    ],
    "usageInstructions": "Start the server with docker-compose up -d. The server will be available at http://localhost:9097. Use curl -X POST 'http://localhost:9097/api/query' -H 'Content-Type: application/json' -d '{\"query\": \"SELECT 1 AS test\"}' to verify the API is working.",
    "category": "Data Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "k8s-go": {
    "name": "MCP K8S Go",
    "githubLink": "https://github.com/strowk/mcp-k8s-go",
    "package": "@strowk/mcp-k8s",
    "description": "Golang-based MCP server connecting to Kubernetes, enabling interaction with Kubernetes resources through various clients like Claude Desktop.",
    "installCommand": "npm install -g @strowk/mcp-k8s",
    "requiredEnvVars": [],
    "optionalParams": [
      "KUBECONFIG",
      "--allowed-contexts",
      "--readonly"
    ],
    "usageInstructions": "After installation, configure Claude Desktop by adding 'mcp-k8s' to claude_desktop_config.json. You can also use it with other clients or run directly with 'npx @strowk/mcp-k8s'. For Docker, use 'docker run -i -v ~/.kube/config:/home/nonroot/.kube/config --rm mcpk8s/server:latest'.",
    "category": "DevOps",
    "stars": 314,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "peekaboo": {
    "name": "Peekaboo MCP",
    "githubLink": "https://github.com/steipete/Peekaboo",
    "package": "@steipete/peekaboo-mcp",
    "description": "A powerful macOS utility for capturing screenshots and analyzing them with AI vision models, working as both a standalone CLI tool and an MCP server.",
    "installCommand": "npm install -g @steipete/peekaboo-mcp",
    "requiredEnvVars": [
      "PEEKABOO_AI_PROVIDERS",
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "PEEKABOO_OLLAMA_BASE_URL",
      "PEEKABOO_DEFAULT_SAVE_PATH",
      "PEEKABOO_LOG_LEVEL",
      "PEEKABOO_LOG_FILE",
      "PEEKABOO_CLI_PATH"
    ],
    "usageInstructions": "For CLI usage: 'peekaboo image', 'peekaboo list', 'peekaboo analyze'. For MCP server, configure in Claude Desktop or Cursor IDE settings. Create configuration file with 'peekaboo config init'.",
    "category": "Development Tools",
    "stars": 293,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/dmigz7b4pvj.png"
  },
  "semgrep": {
    "name": "Semgrep MCP Server",
    "githubLink": "https://github.com/stefanskiasan/semgrep-mcp-server",
    "package": "semgrep-mcp-server",
    "description": "An MCP server for integrating Semgrep static code analysis into development environments.",
    "installCommand": "git clone https://github.com/stefanskiasan/semgrep-mcp-server.git && cd semgrep-mcp-server && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "Start the server using 'npm start' for production or 'npm run dev' for development. The server provides various MCP tools for Semgrep integration including scan_directory, list_rules, and analyze_results.",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "steel": {
    "name": "Steel MCP Server",
    "githubLink": "https://github.com/steel-dev/steel-mcp-server",
    "package": "@steel-dev/steel-mcp-server",
    "description": "An MCP server enabling LLMs like Claude to navigate the web through Puppeteer-based tools and Steel integration.",
    "installCommand": "git clone https://github.com/steel-dev/steel-mcp-server.git && cd steel-mcp-server && npm install && npm run build",
    "requiredEnvVars": [
      "STEEL_API_KEY",
      "STEEL_LOCAL"
    ],
    "optionalParams": [
      "STEEL_BASE_URL",
      "GLOBAL_WAIT_SECONDS"
    ],
    "usageInstructions": "1. Clone and build the project. 2. Configure Claude Desktop by adding a server entry to ~/Library/Application Support/Claude/claude_desktop_config.json. 3. Set STEEL_LOCAL and STEEL_API_KEY/STEEL_BASE_URL environment variables accordingly. 4. Start Claude Desktop to launch the MCP server.",
    "category": "Browser Automation",
    "stars": 36,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "chain-of-draft": {
    "name": "Chain of Draft MCP Server",
    "githubLink": "https://github.com/stat-guy/chain-of-draft",
    "package": "chain-of-draft",
    "description": "MCP server implementing Chain of Draft reasoning approach for efficient LLM interactions",
    "installCommand": "git clone https://github.com/stat-guy/chain-of-draft && cd chain-of-draft && pip install -r requirements.txt",
    "requiredEnvVars": [
      "ANTHROPIC_API_KEY"
    ],
    "optionalParams": [
      "max_words_per_step",
      "domain"
    ],
    "usageInstructions": "1. Clone repository\n2. Install dependencies: pip install -r requirements.txt\n3. Configure ANTHROPIC_API_KEY in .env file\n4. Run server: python server.py\n5. Configure Claude Desktop config file with server details",
    "category": "AI/ML",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "stateset": {
    "name": "StateSet MCP Server",
    "githubLink": "https://github.com/stateset/stateset-mcp-server",
    "package": "stateset-mcp-server",
    "description": "A world-class Model Context Protocol (MCP) server for StateSet API integration, providing comprehensive e-commerce operations management.",
    "installCommand": "npm install -g stateset-mcp-server",
    "requiredEnvVars": [
      "STATESET_API_KEY"
    ],
    "optionalParams": [
      "STATESET_BASE_URL",
      "REQUESTS_PER_HOUR",
      "API_TIMEOUT_MS",
      "LOG_LEVEL",
      "ENABLE_METRICS",
      "ENABLE_HEALTH_CHECK"
    ],
    "usageInstructions": "1. Set up environment variables by copying .env.example to .env and editing it with your StateSet API credentials. 2. Run the server using 'stateset-mcp-server' command. 3. Connect your MCP client using the provided SDK.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "harvester": {
    "name": "Harvester MCP Server",
    "githubLink": "https://github.com/starbops/harvester-mcp-server",
    "package": "github.com/starbops/harvester-mcp-server/cmd/harvester-mcp-server",
    "description": "MCP server for Harvester HCI enabling AI assistants to interact with Harvester clusters",
    "installCommand": "go install github.com/starbops/harvester-mcp-server/cmd/harvester-mcp-server@latest",
    "requiredEnvVars": [
      "KUBECONFIG"
    ],
    "optionalParams": [
      "--kubeconfig",
      "--log-level"
    ],
    "usageInstructions": "1. Install using 'go install'. 2. Configure kubeconfig path via --kubeconfig flag or KUBECONFIG env var. 3. Run with appropriate log level. 4. Configure Claude Desktop to use the server.",
    "category": "DevOps",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "feature-discussion": {
    "name": "Feature Discussion MCP Server",
    "githubLink": "https://github.com/squirrelogic/mcp-feature-discussion",
    "package": "feature-discussion",
    "description": "An MCP server providing AI lead developer capabilities for feature discussions and architectural guidance.",
    "installCommand": "git clone https://github.com/squirrelogic/mcp-feature-discussion.git && cd mcp-feature-discussion && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "command path in claude_desktop_config.json"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'. 2. Build the server using 'npm run build'. 3. Configure Claude Desktop by adding the server path to claude_desktop_config.json. 4. For development, use 'npm run watch' for auto-rebuild. 5. Use 'npm run inspector' for debugging with MCP Inspector.",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "architect": {
    "name": "MCP Architect",
    "githubLink": "https://github.com/squirrelogic/mcp-architect",
    "package": "mcp-architect",
    "description": "An MCP server providing architectural expertise through specialized agents and tools for various architectural domains.",
    "installCommand": "git clone https://github.com/squirrelogic/mcp-architect.git && cd mcp-architect && npm install",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Copy the .env.example file to .env.\n3. Add your OpenAI API key to the .env file.\n4. Configure any additional parameters as needed.",
    "category": "AI/ML",
    "stars": 24,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "svelte-docs": {
    "name": "Svelte5 Documentation MCP Server",
    "githubLink": "https://github.com/spences10/mcp-svelte-docs",
    "package": "mcp-svelte-docs",
    "description": "An MCP server providing comprehensive Svelte5 reference for LLMs, including migration patterns, features, and best practices.",
    "installCommand": "npx -y mcp-svelte-docs",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this MCP server, configure it according to the examples provided for your platform (Claude Desktop, Windsurf, Windows, macOS, or Linux). The server can be started using 'npx -y mcp-svelte-docs' command. No additional environment variables or parameters are required.",
    "category": "Development Tools",
    "stars": 89,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "memory-libsql": {
    "name": "MCP Memory LibSQL Server",
    "githubLink": "https://github.com/spences10/mcp-memory-libsql",
    "package": "mcp-memory-libsql",
    "description": "A high-performance, persistent memory system for the Model Context Protocol (MCP) powered by libSQL, providing vector search capabilities and efficient knowledge storage.",
    "installCommand": "npx -y mcp-memory-libsql",
    "requiredEnvVars": [
      "LIBSQL_URL"
    ],
    "optionalParams": [
      "LIBSQL_AUTH_TOKEN"
    ],
    "usageInstructions": "Configure LIBSQL_URL environment variable to point to your database. For local SQLite databases, use 'file:/path/to/database.db'. For remote libSQL databases, use 'libsql://your-database.turso.io' and provide LIBSQL_AUTH_TOKEN.",
    "category": "AI/ML",
    "stars": 60,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "perplexity-search": {
    "name": "MCP Perplexity Search",
    "githubLink": "https://github.com/spences10/mcp-perplexity-search",
    "package": "mcp-perplexity-search",
    "description": "An MCP server integrating Perplexity's AI API with LLMs for advanced chat completion capabilities.",
    "installCommand": "npx -y mcp-perplexity-search",
    "requiredEnvVars": [
      "PERPLEXITY_API_KEY"
    ],
    "optionalParams": [
      "prompt_template",
      "custom_template",
      "format",
      "include_sources",
      "model",
      "temperature",
      "max_tokens"
    ],
    "usageInstructions": "Configure the server by setting the PERPLEXITY_API_KEY environment variable. Use an MCP client to interact with the server's chat_completion tool.",
    "category": "AI/ML",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "sequentialthinking-tools": {
    "name": "MCP Sequential Thinking Tools",
    "githubLink": "https://github.com/spences10/mcp-sequentialthinking-tools",
    "package": "mcp-sequentialthinking-tools",
    "description": "An MCP server that guides tool usage in problem-solving through sequential thinking and intelligent tool recommendations.",
    "installCommand": "npx -y mcp-sequentialthinking-tools",
    "requiredEnvVars": [],
    "optionalParams": [
      "thought",
      "next_thought_needed",
      "thought_number",
      "total_thoughts",
      "is_revision",
      "revises_thought",
      "branch_from_thought",
      "branch_id",
      "needs_more_thoughts",
      "current_step",
      "previous_steps",
      "remaining_steps"
    ],
    "usageInstructions": "Configure the server through your MCP client settings. For Cline, add the server configuration to your MCP settings JSON. For Claude Desktop with WSL, modify your configuration accordingly. The server requires parameters like 'thought', 'next_thought_needed', 'thought_number', and 'total_thoughts' to function.",
    "category": "Development Tools",
    "stars": 240,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "embedding-search": {
    "name": "MCP Embedding Search Server",
    "githubLink": "https://github.com/spences10/mcp-embedding-search",
    "package": "mcp-embedding-search",
    "description": "An MCP server for vector similarity search in transcript databases using Turso embeddings.",
    "installCommand": "git clone https://github.com/spences10/mcp-embedding-search.git && cd mcp-embedding-search && npm install && npm run build",
    "requiredEnvVars": [
      "TURSO_URL",
      "TURSO_AUTH_TOKEN"
    ],
    "optionalParams": [
      "limit",
      "min_score"
    ],
    "usageInstructions": "Configure the server through your MCP client by providing TURSO_URL and TURSO_AUTH_TOKEN environment variables. Use the search_embeddings tool to query transcript segments by asking questions.",
    "category": "AI/ML",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "youtube": {
    "name": "Youtube MCP Server",
    "githubLink": "https://github.com/sparfenyuk/mcp-youtube",
    "package": "git+https://github.com/sparfenyuk/mcp-youtube",
    "description": "A bridge between the YouTube API and AI assistants, enabling features like video summary creation through closed captions download.",
    "installCommand": "uv tool install git+https://github.com/sparfenyuk/mcp-youtube",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Install using 'uv tool install git+https://github.com/sparfenyuk/mcp-youtube'. 2. Configure Claude Desktop by adding 'mcp-youtube' to claude_desktop_config.json. 3. For development: clone the repository, run 'uv sync', and then 'uv run mcp-youtube --help'.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "cargo-doc": {
    "name": "Cargo Doc MCP Server",
    "githubLink": "https://github.com/spacemeowx2/cargo-doc-mcp",
    "package": "cargo-doc-mcp",
    "description": "MCP server for managing Rust documentation through cargo doc commands, providing tools to check, build, and search Rust documentation locally.",
    "installCommand": "pnpm install && pnpm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "project_path",
      "crate_name",
      "query",
      "limit"
    ],
    "usageInstructions": "1. Install dependencies and build the server using 'pnpm install && pnpm run build'. 2. Configure the MCP server by adding the path to the built index.js in your configuration file. 3. For development, use 'pnpm run watch' for auto-rebuild. 4. Use 'pnpm run inspector' for debugging.",
    "category": "Development Tools",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "visitbeijing": {
    "name": "Beijing Tourism MCP Server",
    "githubLink": "https://github.com/solution9th/visitbeijing-mcp",
    "package": "visitbeijing-mcp",
    "description": "Provides real-time Beijing tourism information including visitor flow data, performance updates, and travel guides.",
    "installCommand": "Configuration requires manual setup: create MCP server configuration JSON with URL and API key",
    "requiredEnvVars": [
      "ak"
    ],
    "optionalParams": [
      "url"
    ],
    "usageInstructions": "1. Create configuration JSON with 'mcpServers' object containing 'visitbeijing' server details. 2. Set 'url' to http://mcp.visitbeijing.com.cn/sse. 3. Obtain and set 'ak' (API key) through certification process. 4. Contact lishuo@huaqniu.com for certification and security information.",
    "category": "Location Services",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/si63stzizlj.jpeg"
  },
  "prompts": {
    "name": "MCP Prompts Server",
    "githubLink": "https://github.com/sparesparrow/mcp-prompts",
    "package": "@sparesparrow/mcp-prompts",
    "description": "A robust server for managing and serving prompts for LLM applications, built on the Model Context Protocol (MCP).",
    "installCommand": "npx -y @sparesparrow/mcp-prompts",
    "requiredEnvVars": [
      "STORAGE_TYPE",
      "POSTGRES_URL"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "API_KEY"
    ],
    "usageInstructions": "Run with NPX: npx -y @sparesparrow/mcp-prompts. For Docker: docker run -d --name mcp-server -p3003:3003 -v $(pwd)/data:/app/data ghcr.io/sparesparrow/mcp-prompts:latest. Configure storage type and Postgres URL if needed.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "project-orchestrator": {
    "name": "MCP Project Orchestrator",
    "githubLink": "https://github.com/sparesparrow/mcp-project-orchestrator",
    "package": "mcp-project-orchestrator",
    "description": "A comprehensive project orchestration tool for managing Model Context Protocol (MCP) projects, templates, prompts, and Mermaid diagrams.",
    "installCommand": "pip install mcp-project-orchestrator",
    "requiredEnvVars": [],
    "optionalParams": [
      "template_path",
      "prompt_path",
      "diagram_output_path"
    ],
    "usageInstructions": "After installation, initialize the respective managers (TemplateManager, PromptManager, MermaidGenerator) with appropriate paths and use their methods to manage templates, prompts, and generate diagrams. Refer to Quick Start examples in README for detailed usage.",
    "category": "Development Tools",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "excel-reader": {
    "name": "Excel Reader Server",
    "githubLink": "https://github.com/softgridinc-pte-ltd/mcp-excel-reader-server",
    "package": "excel-reader-server",
    "description": "An MCP server that reads Excel files and returns data in JSON format.",
    "installCommand": "uv pip install excel-reader-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "file_path",
      "sheet_name",
      "sheet_index"
    ],
    "usageInstructions": "After installation, use the server by providing Excel file paths and optionally sheet names or indices. The server returns JSON data representing the Excel content.",
    "category": "File Management",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "atlassian": {
    "name": "MCP Atlassian",
    "githubLink": "https://github.com/sooperset/mcp-atlassian",
    "package": "ghcr.io/sooperset/mcp-atlassian:latest",
    "description": "Model Context Protocol (MCP) server for Atlassian products (Confluence and Jira) supporting both Cloud and Server/Data Center deployments.",
    "installCommand": "docker pull ghcr.io/sooperset/mcp-atlassian:latest",
    "requiredEnvVars": [
      "CONFLUENCE_URL",
      "CONFLUENCE_USERNAME",
      "CONFLUENCE_API_TOKEN",
      "JIRA_URL",
      "JIRA_USERNAME",
      "JIRA_API_TOKEN"
    ],
    "optionalParams": [
      "CONFLUENCE_SPACES_FILTER",
      "JIRA_PROJECTS_FILTER",
      "READ_ONLY_MODE",
      "MCP_VERBOSE",
      "MCP_LOGGING_STDOUT",
      "ENABLED_TOOLS",
      "ATLASSIAN_OAUTH_CLOUD_ID",
      "ATLASSIAN_OAUTH_CLIENT_ID",
      "ATLASSIAN_OAUTH_CLIENT_SECRET",
      "ATLASSIAN_OAUTH_REDIRECT_URI",
      "ATLASSIAN_OAUTH_SCOPE"
    ],
    "usageInstructions": "1. Set up authentication using API Token, Personal Access Token, or OAuth2.0. 2. Configure environment variables for Confluence and Jira. 3. Run the Docker container with required environment variables. 4. For IDE integration, configure the MCP server in your IDE settings.",
    "category": "API Integration",
    "stars": 2312,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "solana-dev": {
    "name": "Solana Model Context Protocol (MCP) Demo",
    "githubLink": "https://github.com/solana-foundation/solana-dev-mcp",
    "package": "solana-dev-mcp",
    "description": "A simple MCP server implementation for Solana development providing basic RPC methods and helpful prompts.",
    "installCommand": "git clone https://github.com/solana-foundation/solana-dev-mcp.git && cd solana-dev-mcp && pnpm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Explore the code in index.ts. 2. Modify the server by adding more tools and resources. 3. Generate configuration file using 'pnpm generate-config' or 'pnpm build && pnpm generate-config:js'. Use the generated config with Claude, Windsurf, or Cursor.",
    "category": "Development Tools",
    "stars": 34,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "s3": {
    "name": "S3 Tools MCP Server",
    "githubLink": "https://github.com/sofianhamiti/mcp-server-s3",
    "package": "s3-tools",
    "description": "An MCP server providing tools for interacting with AWS S3 buckets through the Model Context Protocol.",
    "installCommand": "uvx install s3-tools",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY"
    ],
    "optionalParams": [
      "AWS_DEFAULT_REGION",
      "region"
    ],
    "usageInstructions": "1. Configure AWS credentials using 'aws configure' or environment variables. 2. Add server configuration to Claude Desktop config file. 3. Run using 'uvx s3-tools' or configure in Claude Desktop.",
    "category": "Cloud Services",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "binance": {
    "name": "Binance Cryptocurrency MCP",
    "githubLink": "https://github.com/snjyor/binance-mcp",
    "package": "@snjyor/binance-mcp",
    "description": "MCP service for accessing Binance cryptocurrency market data, allowing AI agents to execute Binance API calls and obtain real-time data.",
    "installCommand": "npx -y @snjyor/binance-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use in Cursor IDE: 1. Go to Cursor Settings > MCP, 2. Click + Add New MCP Service, 3. Configure with command: 'npx -y @snjyor/binance-mcp@latest'. For other MCP-compatible environments, create mcp.json with appropriate configuration. Start querying cryptocurrency data using available tools like get_price, get_order_book, etc.",
    "category": "API Integration",
    "stars": 22,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/at3d5mkul0p.png"
  },
  "openapi": {
    "name": "OpenAPI MCP Server",
    "githubLink": "https://github.com/janwilmake/openapi-mcp-server",
    "package": "@janwilmake/openapi-mcp-server",
    "description": "An MCP server for Claude/Cursor that enables searching and exploring OpenAPI specifications through oapis.org.",
    "installCommand": "npx -y @smithery/cli install @janwilmake/openapi-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Install using 'npx -y @smithery/cli install @janwilmake/openapi-mcp-server --client claude'. 2. Ensure Node.js >=16.17.0 is installed. 3. Use with Claude Desktop or Cursor by asking queries like 'Find information about the Stripe API'.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "ntropy": {
    "name": "Ntropy MCP Server",
    "githubLink": "https://github.com/smithery-ai/ntropy-mcp",
    "package": "ntropy-mcp",
    "description": "MCP server for enriching banking data using the Ntropy API",
    "installCommand": "uvx ntropy-mcp",
    "requiredEnvVars": [
      "NTROPY_API_KEY"
    ],
    "optionalParams": [
      "country"
    ],
    "usageInstructions": "1. Obtain an Ntropy API key from ntropy.com. 2. Run the server using 'uvx run ntropy-mcp --api-key YOUR_NTROPY_API_KEY'. 3. Configure Claude Desktop by adding the server configuration to claude_desktop_config.json.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "salesforce": {
    "name": "MCP Salesforce Connector",
    "githubLink": "https://github.com/smn2gnt/MCP-Salesforce",
    "package": "mcp-salesforce-connector",
    "description": "An MCP server implementation for Salesforce integration, enabling SOQL queries, SOSL searches, and various Salesforce operations.",
    "installCommand": "uvx --from mcp-salesforce-connector salesforce",
    "requiredEnvVars": [
      "SALESFORCE_ACCESS_TOKEN",
      "SALESFORCE_INSTANCE_URL"
    ],
    "optionalParams": [
      "SALESFORCE_USERNAME",
      "SALESFORCE_PASSWORD",
      "SALESFORCE_SECURITY_TOKEN"
    ],
    "usageInstructions": "Configure the server in your claude_desktop_config.json file. For OAuth, set SALESFORCE_ACCESS_TOKEN and SALESFORCE_INSTANCE_URL as environment variables. For legacy authentication, use SALESFORCE_USERNAME, SALESFORCE_PASSWORD, and SALESFORCE_SECURITY_TOKEN.",
    "category": "API Integration",
    "stars": 116,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "figma": {
    "name": "Figma MCP Server",
    "githubLink": "https://github.com/smithery-ai/mcp-figma",
    "package": "mcp-figma",
    "description": "An MCP server providing Figma API integration for AI assistants like Claude.",
    "installCommand": "npm install -g mcp-figma",
    "requiredEnvVars": [
      "FIGMA_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install using 'npm install -g mcp-figma'. 2. Configure Claude with 'mcp-figma' settings. 3. Set Figma API key using 'mcp-figma set_api_key <your_api_key>'. 4. Use available Figma API functions through Claude.",
    "category": "Design Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "aidd": {
    "name": "SkyDeckAI Code MCP Server",
    "githubLink": "https://github.com/skydeckai/mcp-server-aidd",
    "package": "skydeckai-code",
    "description": "An MCP server providing AI-driven development tools including file operations, code analysis, and web content fetching.",
    "installCommand": "pip install skydeckai-code",
    "requiredEnvVars": [],
    "optionalParams": [
      "Claude Desktop configuration parameters"
    ],
    "usageInstructions": "After installation, configure Claude Desktop by adding 'skydeckai-code' to claude_desktop_config.json. Use the CLI tool 'skydeckai-code-cli' for various operations like reading files, executing code, and web searches.",
    "category": "Development Tools",
    "stars": 65,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "test-repo": {
    "name": "Uber Eats MCP Server",
    "githubLink": "https://github.com/skudskud/test-repo-mcp",
    "package": "requirements.txt",
    "description": "An MCP server implementation for Uber Eats integration with LLM applications",
    "installCommand": "uv venv && source .venv/bin/activate && uv pip install -r requirements.txt && playwright install",
    "requiredEnvVars": [
      "ANTHROPIC_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Activate virtual environment: source .venv/bin/activate\n2. Configure ANTHROPIC_API_KEY in .env file\n3. Run server: uv run mcp dev server.py",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "rememberizer": {
    "name": "MCP Server Rememberizer",
    "githubLink": "https://github.com/skydeckai/mcp-server-rememberizer",
    "package": "@michaellatman/mcp-get",
    "description": "An MCP server for interacting with Rememberizer's document and knowledge management API, enabling Large Language Models to search, retrieve, and manage documents and integrations.",
    "installCommand": "npx @michaellatman/mcp-get@latest install mcp-server-rememberizer",
    "requiredEnvVars": [
      "REMEMBERIZER_API_TOKEN"
    ],
    "optionalParams": [
      "n_results",
      "from_datetime_ISO8601",
      "to_datetime_ISO8601",
      "page",
      "page_size",
      "name",
      "content",
      "query",
      "user_context"
    ],
    "usageInstructions": "1. Install using: npx @michaellatman/mcp-get@latest install mcp-server-rememberizer\n2. Set REMEMBERIZER_API_TOKEN environment variable with your Rememberizer API token\n3. Configure Claude Desktop or SkyDeck AI Helper App to use the server\n4. Use tools like retrieve_semantically_similar_internal_knowledge, smart_search_internal_knowledge, list_internal_knowledge_systems, rememberizer_account_information, list_personal_team_knowledge_documents, remember_this",
    "category": "Knowledge Management",
    "stars": 28,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "apple-notes": {
    "name": "Apple Notes MCP Server",
    "githubLink": "https://github.com/sirmews/apple-notes-mcp",
    "package": "apple-notes-mcp",
    "description": "An MCP server that reads the local Apple Notes database and provides it to Claude Desktop for enhanced note search capabilities.",
    "installCommand": "uvx apple-notes-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Install using 'uvx apple-notes-mcp'. 2. Configure Claude Desktop by editing claude_desktop_config.json with the appropriate MCP server configuration. 3. Grant Full Disk Access to the server on MacOS to access the Apple Notes database.",
    "category": "Productivity",
    "stars": 110,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "pdf": {
    "name": "PDF MCP Server",
    "githubLink": "https://github.com/sirix-v/pdf-mcp-server",
    "package": "pdf-mcp-server",
    "description": "An MCP server for managing and reading PDF files in a specified local directory.",
    "installCommand": "go build -o pdf-mcp-server main.go && export PATH=$PATH:$(pwd) && source ~/.zshrc",
    "requiredEnvVars": [],
    "optionalParams": [
      "pdfdir"
    ],
    "usageInstructions": "1. Build the server using 'go build -o pdf-mcp-server main.go'. 2. Add the binary to your PATH. 3. Start the server with 'pdf-mcp-server -pdfdir=/path/to/papers'. Configure the Cursor settings with 'url': 'http://127.0.0.1:8080/sse'.",
    "category": "File Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "pinecone": {
    "name": "Pinecone Model Context Protocol Server",
    "githubLink": "https://github.com/sirmews/mcp-pinecone",
    "package": "mcp-pinecone",
    "description": "MCP server that enables reading and writing to a Pinecone index, providing semantic search and document management capabilities.",
    "installCommand": "uvx install mcp-pinecone",
    "requiredEnvVars": [
      "PINECONE_API_KEY",
      "PINECONE_INDEX_NAME"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "1. Install using 'uvx install mcp-pinecone'. 2. Configure Claude Desktop by editing claude_desktop_config.json with your Pinecone index name and API key. 3. Sign up for Pinecone at https://www.pinecone.io/ and create an index. 4. For debugging, use 'npx @modelcontextprotocol/inspector uv --directory {project_dir} run mcp-pinecone'.",
    "category": "AI/ML",
    "stars": 131,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "systemd-coredump": {
    "name": "systemd-coredump MCP Server",
    "githubLink": "https://github.com/signal-slot/mcp-systemd-coredump",
    "package": "@taskjp/server-systemd-coredump",
    "description": "An MCP server for managing and analyzing systemd-coredump functionality",
    "installCommand": "npm install -g @taskjp/server-systemd-coredump",
    "requiredEnvVars": [],
    "optionalParams": [
      "MCP configuration settings"
    ],
    "usageInstructions": "Add server configuration to MCP settings file. Requires Node.js18+, systemd-coredump, and coredumpctl. Some operations may need elevated privileges.",
    "category": "System Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "worldpay": {
    "name": "Worldpay MCP Server",
    "githubLink": "https://github.com/simonwfarrow/worldpay-mcp",
    "package": "worldpay-mcp",
    "description": "An MCP server implementing Worldpay APIs for payments and payment queries.",
    "installCommand": "git clone https://github.com/simonwfarrow/worldpay-mcp.git && cd worldpay-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "WORLDPAY_USERNAME",
      "WORLDPAY_PASSWORD"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Configure environment variables WORLDPAY_USERNAME and WORLDPAY_PASSWORD. For stdio transport, create claude_desktop_config.json with server configuration. 2. Run 'node dist/server-sse.js' for SSE transport or let Claude start it automatically for stdio.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "tidb-ai": {
    "name": "TiDB AI MCP Server",
    "githubLink": "https://github.com/siddontang/tidb-ai-mcp",
    "package": "github.com/siddontang/tidb-ai-mcp",
    "description": "An MCP server allowing Cursor to interact with TiDB AI using stdio transport",
    "installCommand": "go get github.com/siddontang/tidb-ai-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Run the server: ./tidb-ai-mcp\n2. Configure Cursor to use the MCP server by specifying the path to the tidb-ai-mcp binary in Cursor settings",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "nebius": {
    "name": "Nebius MCP Server",
    "githubLink": "https://github.com/shivaylamba/mcp-nebius",
    "package": "mcp-nebius",
    "description": "An MCP server integrating with Nebius services",
    "installCommand": "npm install mcp-nebius",
    "requiredEnvVars": [
      "NEBIUS_API_KEY",
      "NEBIUS_SERVICE_URL"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install using npm install mcp-nebius. 2. Set NEBIUS_API_KEY and NEBIUS_SERVICE_URL environment variables. 3. Run the server, optionally configuring PORT and LOG_LEVEL.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "etoroportfoliomcp": {
    "name": "eToro MCP Server",
    "githubLink": "https://github.com/shlomico-tr/etoroPortfolioMCP",
    "package": "etoro-portfolio-mcp",
    "description": "MCP server for interacting with eToro's public API endpoints, allowing portfolio fetching, instrument details lookup, and instrument searching.",
    "installCommand": "git clone https://github.com/shlomico-tr/etoroPortfolioMCP.git && cd etoroPortfolioMCP && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "authToken",
      "fields",
      "namePrefix",
      "username",
      "instrumentIds"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'. 2. Start the development server with 'npm run dev' or build for production with 'npm run build' and start with 'npm start'. 3. Use the REST API to access tools, e.g., 'curl -X POST http://localhost:3000/tools/fetch_etoro_portfolio/execute -H \"Content-Type: application/json\" -d '{\"username\": \"example\"}''",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "couchbase": {
    "name": "Couchbase Model Context Protocol Server",
    "githubLink": "https://github.com/shivay-couchbase/couchbase-mcp",
    "package": "couchbase-mcp",
    "description": "An MCP server providing semantic search for Star Wars planets using Couchbase's vector search.",
    "installCommand": "git clone https://github.com/shivay-couchbase/couchbase-mcp.git && cd couchbase-mcp && npm install",
    "requiredEnvVars": [
      "COUCHBASE_URL",
      "COUCHBASE_USERNAME",
      "COUCHBASE_PASSWORD",
      "COUCHBASE_BUCKET",
      "COUCHBASE_SCOPE",
      "COUCHBASE_COLLECTION"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Set required Couchbase environment variables. 3. Create a vector search index named 'vector-search-index' in Couchbase. 4. Start the server with 'npm start'. 5. Interact with the server using MCP requests via stdin/stdout.",
    "category": "AI/ML",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "shieldmcp": {
    "name": "Shield MCP",
    "githubLink": "https://github.com/shieldmcp/shieldmcp",
    "package": "shieldmcp",
    "description": "A security middleware for Model Context Protocol (MCP) servers that enhances security and monitoring capabilities without modifying the official SDK.",
    "installCommand": "pip install shieldmcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "ALLOWED_TOOLS",
      "rate_limit_config",
      "sanitizer_config"
    ],
    "usageInstructions": "After installation, import and use the @secure_tool decorator to secure your MCP tools. Configure allowed tools, sanitization, and rate limiting as needed. See Quick Start section for example usage.",
    "category": "Security",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/tr6ktkil40n.jpg"
  },
  "xtb": {
    "name": "XTBApiServer",
    "githubLink": "https://github.com/sharplygroup/xtb-mcp-server",
    "package": "@sharplygroup/xtb-mcp-server",
    "description": "An MCP server exposing XTB API functionality for trading account interactions",
    "installCommand": "git clone https://github.com/sharplygroup/xtb-mcp-server.git && cd xtb-mcp-server && npm install",
    "requiredEnvVars": [
      "DEMO_ACCOUNT",
      "USER_ID",
      "PASSWORD"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Create .env file with XTB API credentials\n2. Run 'npm run build' to compile TypeScript\n3. Run 'node build/index.js' to start server\n4. Use MCP Inspector to connect to the server",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "mcptools-langchain-integration": {
    "name": "Langchain TypeScript with MCP Tools Integration",
    "githubLink": "https://github.com/shashwat001/mcptools-langchain-integration",
    "package": "mcptools-langchain-integration",
    "description": "A TypeScript project integrating Langchain with MCP tools for interactive chat with Language Models and tool execution.",
    "installCommand": "git clone https://github.com/shashwat001/mcptools-langchain-integration.git && cd mcptools-langchain-integration && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "ollamaConfig.baseUrl",
      "ollamaConfig.model",
      "ollamaConfig.temperature",
      "mcpConfig.serverUrl",
      "mcpConfig.clientInfo.name",
      "mcpConfig.clientInfo.version",
      "systemPromptForTools"
    ],
    "usageInstructions": "1. Ensure Node.js (v14 or higher) and npm are installed. 2. Clone the repository and install dependencies. 3. Configure Ollama and MCP server settings in src/llm.js. 4. Start Ollama and MCP servers. 5. Run the application with 'node src/index.js'.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "hefeng-weather": {
    "name": "HeFeng Weather MCP Server",
    "githubLink": "https://github.com/shanggqm/hefeng-mcp-weather",
    "package": "hefeng-mcp-weather",
    "description": "An MCP server providing weather forecast data through HeFeng Weather API",
    "installCommand": "npx hefeng-mcp-weather@latest --apiKey=${API_KEY}",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Add the server configuration to claude_desktop_config.json with your API_KEY. The server provides weather forecast data through the 'get-weather' tool.",
    "category": "API Integration",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "postman": {
    "name": "Postman MCP Server",
    "githubLink": "https://github.com/shannonlal/mcp-postman",
    "package": "@smithery/cli",
    "description": "An MCP server that enables running Postman collections using Newman, allowing LLMs to execute API tests and get detailed results.",
    "installCommand": "npx -y @smithery/cli install mcp-postman --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "collection",
      "environment",
      "globals",
      "iterationCount"
    ],
    "usageInstructions": "1. Install via Smithery using 'npx -y @smithery/cli install mcp-postman --client claude'. 2. Configure Claude desktop by adding the server to ~/Library/Application Support/Claude/claude_desktop_config.json. 3. Use in Claude by asking it to run a Postman collection.",
    "category": "Development Tools",
    "stars": 66,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "knowledge-graph": {
    "name": "MCP Knowledge Graph Server",
    "githubLink": "https://github.com/shaneholloman/mcp-knowledge-graph",
    "package": "mcp-knowledge-graph",
    "description": "A knowledge graph memory server implementing the Model Context Protocol (MCP) for persistent memory across AI chats.",
    "installCommand": "npx -y mcp-knowledge-graph --memory-path /path/to/memory.jsonl",
    "requiredEnvVars": [],
    "optionalParams": [
      "--memory-path"
    ],
    "usageInstructions": "To use with Claude Desktop, add the server configuration to claude_desktop_config.json. For other AI platforms, configure according to their MCP implementation guidelines. The server exposes tools like create_entities, add_observations, and search_nodes through the MCP interface.",
    "category": "AI/ML",
    "stars": 465,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "github-pr": {
    "name": "GitHub PR Comments MCP Server",
    "githubLink": "https://github.com/shaileshahuja/github-pr-mcp",
    "package": "@smithery/cli",
    "description": "An MCP server that fetches GitHub Pull Request comments using a personal access token.",
    "installCommand": "npx -y @smithery/cli install github-pr-mcp --client claude",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "owner",
      "repo",
      "pull_number"
    ],
    "usageInstructions": "1. Install using Smithery CLI or manually clone the repository and run 'npm install'. 2. Create a .env file with GITHUB_TOKEN. 3. Build with 'npm run build'. 4. Run with 'npm start' or 'node dist/server.js your_github_token_here'. Configure in Cursor using 'node /path/to/dist/server.js your_github_token_here'.",
    "category": "Development Tools",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "function-hub": {
    "name": "Function Hub MCP Server",
    "githubLink": "https://github.com/segun/mcp-server-function-hub",
    "package": "github:segun/mcp-server-function-hub",
    "description": "MCP Server for the Function Hub API, integrating with Claude Desktop.",
    "installCommand": "npx -y github:segun/mcp-server-function-hub",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Get a Function Hub API Key from https://function-hub.com/api-keys.\n2. Add the MCP server configuration to your claude_desktop_config.json with the API key.\n3. Run Claude Desktop with the configured MCP server.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "youtube-subtitles": {
    "name": "YouTube Subtitles MCP Server",
    "githubLink": "https://github.com/setkyar/youtube-subtitles-mcp",
    "package": "mcp/youtube-subtitles",
    "description": "An MCP server that allows AI assistants to download and analyze YouTube video subtitles.",
    "installCommand": "git clone https://github.com/setkyar/youtube-subtitles-mcp.git && cd youtube-subtitles-mcp && docker build -t mcp/youtube-subtitles .",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and build the Docker image. 2. Configure Claude Desktop to use the MCP server by updating its config file with: { \"mcpServers\": { \"youtube-subtitles\": { \"command\": \"docker\", \"args\": [\"run\", \"-i\", \"mcp/youtube-subtitles\"] } } }. 3. Restart Claude Desktop and use commands like 'Get video information', 'List available subtitle languages', or 'Download and analyze subtitles' for YouTube videos.",
    "category": "Media",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "wallpaper": {
    "name": "Wallpaper MCP",
    "githubLink": "https://github.com/shahanneda/wallpaper-mcp",
    "package": "mcp",
    "description": "An MCP server that generates wallpaper images using Luma Labs AI and sets them as desktop wallpaper on macOS.",
    "installCommand": "git clone git@github.com:shahanneda/wallpaper-mcp.git && cd wallpaper-mcp && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "LUMAAI_API_KEY"
    ],
    "optionalParams": [
      "prompt"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Set LUMAAI_API_KEY environment variable. 3. Configure Claude Desktop to use this server by modifying claude_desktop_config.json. 4. Run using 'uv run mcp run /path/to/server.py' or test with 'LUMAAI_API_KEY=API_KEY_HERE mcp dev server.py --with lumaai --with requests'",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "bing-searches": {
    "name": "Bing Searches Analysis Toolkit",
    "githubLink": "https://github.com/seanivore/bing-searches-mcp",
    "package": "bing-searches-toolkit",
    "description": "A comprehensive system for collecting, processing, and analyzing Bing search data to extract insights and patterns.",
    "installCommand": "npm install bing-searches-toolkit",
    "requiredEnvVars": [],
    "optionalParams": [
      "BING_API_KEY",
      "PROXY_URL"
    ],
    "usageInstructions": "1. Install using 'npm install bing-searches-toolkit'\n2. Run initial collection with 'bingsearch collect --topic \"your-search-topic\"'\n3. Analyze collected data with 'bingsearch analyze --input results.json'\n4. Optional: Configure BING_API_KEY and PROXY_URL environment variables for enhanced functionality",
    "category": "Web Scraping",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "scrapeless": {
    "name": "Scrapeless MCP Server",
    "githubLink": "https://github.com/scrapeless-ai/scrapeless-mcp-server",
    "package": "scrapeless-mcp-server",
    "description": "MCP server that integrates Google SERP results into LLM applications",
    "installCommand": "npx -y scrapeless-mcp-server",
    "requiredEnvVars": [
      "SCRAPELESS_KEY"
    ],
    "optionalParams": [
      "gl",
      "hl"
    ],
    "usageInstructions": "1. Register at Scrapeless to get API key. 2. Configure SCRAPELESS_KEY environment variable. 3. Use with LLM applications like Claude.",
    "category": "Web Scraping",
    "stars": 29,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/in3r0o0wciq.png"
  },
  "anki": {
    "name": "Anki MCP Server",
    "githubLink": "https://github.com/scorzeth/anki-mcp-server",
    "package": "anki-mcp-server",
    "description": "An MCP server implementation that connects to a locally running Anki, providing card review and creation.",
    "installCommand": "git clone https://github.com/scorzeth/anki-mcp-server.git && cd anki-mcp-server && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "command path in claude_desktop_config.json"
    ],
    "usageInstructions": "1. Install Anki desktop app and Anki-Connect add-on. 2. Clone the repository and run 'npm install && npm run build'. 3. Configure Claude Desktop by adding the server path to claude_desktop_config.json. 4. Use 'npm run watch' for development with auto-rebuild.",
    "category": "Productivity",
    "stars": 141,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "vilnius-transport": {
    "name": "Vilnius Transport MCP Server",
    "githubLink": "https://github.com/sarunasdaujotis/vilnius-transport-mcp-server",
    "package": "vilnius-transport-mcp-server",
    "description": "An MCP server providing Vilnius public transport data to Large Language Models",
    "installCommand": "git clone https://github.com/sarunasdaujotis/vilnius-transport-mcp-server && cd vilnius-transport-mcp-server && uv pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "coordinates",
      "name"
    ],
    "usageInstructions": "1. Clone the repository: git clone https://github.com/sarunasdaujotis/vilnius-transport-mcp-server\n2. Configure claude_desktop_config.json with the MCP server details\n3. Run the client using: uv run client.py path/src/vilnius_transport_mcp/transport.py",
    "category": "Location Services",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "sumologic": {
    "name": "MCP Sumo Logic",
    "githubLink": "https://github.com/samwang0723/mcp-sumologic",
    "package": "mcp/sumologic",
    "description": "An MCP server integrating Sumo Logic's API for log searches with configurable time ranges and error handling.",
    "installCommand": "git clone https://github.com/samwang0723/mcp-sumologic.git && cd mcp-sumologic && npm install && npm run build",
    "requiredEnvVars": [
      "ENDPOINT",
      "SUMO_API_ID",
      "SUMO_API_KEY"
    ],
    "optionalParams": [
      "from",
      "to"
    ],
    "usageInstructions": "1. Create a .env file with ENDPOINT, SUMO_API_ID, and SUMO_API_KEY. 2. Start the server using 'npm start'. Alternatively, use Docker: 'docker build -t mcp/sumologic .' then 'docker run --env-file .env mcp/sumologic'",
    "category": "API Integration",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "ragdocs": {
    "name": "MCP Server for RAG Documentation",
    "githubLink": "https://github.com/sanderkooger/mcp-server-ragdocs",
    "package": "@sanderkooger/mcp-server-ragdocs",
    "description": "An MCP server implementation providing vector search for documentation retrieval and processing, enabling AI assistants to augment responses with relevant documentation context.",
    "installCommand": "npx -y @sanderkooger/mcp-server-ragdocs",
    "requiredEnvVars": [
      "QDRANT_URL",
      "EMBEDDINGS_PROVIDER"
    ],
    "optionalParams": [
      "OPENAI_API_KEY",
      "OLLAMA_BASE_URL",
      "QDRANT_API_KEY",
      "PLAYWRIGHT_WS_ENDPOINT"
    ],
    "usageInstructions": "1. Configure environment variables (QDRANT_URL, EMBEDDINGS_PROVIDER, etc.)\n2. Run using: npx -y @sanderkooger/mcp-server-ragdocs\n3. For local development, use docker-compose up -d to start Qdrant and Ollama services\n4. Configure Claude Desktop or OpenAI integration through their respective configuration files",
    "category": "AI/ML",
    "stars": 22,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "tesla": {
    "name": "Tesla MCP Server",
    "githubLink": "https://github.com/scald/tesla-mcp",
    "package": "tesla-mcp",
    "description": "An MCP server connecting to Tesla Fleet API for vehicle control through AI assistants",
    "installCommand": "git clone https://github.com/scald/tesla-mcp.git && cd tesla-mcp && pnpm install",
    "requiredEnvVars": [
      "TESLA_CLIENT_ID",
      "TESLA_CLIENT_SECRET",
      "TESLA_REFRESH_TOKEN"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Configure .env file with Tesla credentials\n2. Run 'pnpm get-token' to obtain refresh token\n3. Run 'pnpm register' to register application with Tesla API\n4. Run 'pnpm start' to start the server\n5. Configure Claude desktop client to use the MCP server",
    "category": "AI/ML",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "package-docs": {
    "name": "MCP Package Documentation Server",
    "githubLink": "https://github.com/sammcj/mcp-package-docs",
    "package": "mcp-package-docs",
    "description": "An MCP server providing efficient access to package documentation across multiple programming languages with LSP capabilities.",
    "installCommand": "npx -y mcp-package-docs",
    "requiredEnvVars": [],
    "optionalParams": [
      "ENABLE_LSP",
      "TYPESCRIPT_SERVER"
    ],
    "usageInstructions": "1. Run 'npx -y mcp-package-docs' to start the server.\n2. Configure MCP settings with server command and args.\n3. Optional: Enable LSP support by setting ENABLE_LSP=true in environment variables.\n4. Use provided tools (lookup_go_doc, describe_python_package, etc.) for documentation access.",
    "category": "Development Tools",
    "stars": 73,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "llm": {
    "name": "MCP LLM Server",
    "githubLink": "https://github.com/sammcj/mcp-llm",
    "package": "@sammcj/mcp-llm",
    "description": "An MCP server providing access to LLMs using LlamaIndexTS library for code generation and documentation.",
    "installCommand": "npx -y @smithery/cli install @sammcj/mcp-llm --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "client"
    ],
    "usageInstructions": "1. Install via Smithery using the provided command. 2. Alternatively, clone the repository, run 'npm install', and 'npm run build'. 3. Configure MCP settings as needed. 4. Use the example script to test the server.",
    "category": "AI/ML",
    "stars": 55,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "package-version": {
    "name": "Package Version MCP Server",
    "githubLink": "https://github.com/sammcj/mcp-package-version",
    "package": "github.com/sammcj/mcp-package-version/v2",
    "description": "MCP server for checking latest stable package versions from multiple package registries",
    "installCommand": "go install github.com/sammcj/mcp-package-version/v2@HEAD",
    "requiredEnvVars": [],
    "optionalParams": [
      "--transport",
      "--port",
      "--base-url"
    ],
    "usageInstructions": "After installation, configure your MCP client to use the server by providing the path to the binary or URL. For stdio transport, simply run 'mcp-package-version'. For SSE transport, use 'mcp-package-version --transport sse --port 18080 --base-url \"http://localhost:18080\"'",
    "category": "Development Tools",
    "stars": 102,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "sourcesyncai": {
    "name": "SourceSync.ai MCP Server",
    "githubLink": "https://github.com/scmdr/sourcesyncai-mcp",
    "package": "sourcesyncai-mcp",
    "description": "A Model Context Protocol (MCP) server implementation for the SourceSync.ai API, enabling AI models to interact with SourceSync.ai's knowledge management platform.",
    "installCommand": "npx -y sourcesyncai-mcp",
    "requiredEnvVars": [
      "SOURCESYNC_API_KEY"
    ],
    "optionalParams": [
      "SOURCESYNC_NAMESPACE_ID",
      "SOURCESYNC_TENANT_ID"
    ],
    "usageInstructions": "1. Run with: npx -y sourcesyncai-mcp\n2. Set required environment variable SOURCESYNC_API_KEY\n3. Optional: Configure SOURCESYNC_NAMESPACE_ID and SOURCESYNC_TENANT_ID\n4. For Claude Desktop, edit claude_desktop_config.json to add the MCP server configuration",
    "category": "Knowledge Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "data-extractor": {
    "name": "MCP Data Extractor Server",
    "githubLink": "https://github.com/sammcj/mcp-data-extractor",
    "package": "mcp-data-extractor",
    "description": "An MCP server that extracts embedded data from TypeScript/JavaScript source code into structured JSON configuration files.",
    "installCommand": "npx -y mcp-data-extractor",
    "requiredEnvVars": [],
    "optionalParams": [
      "DISABLE_SOURCE_REPLACEMENT"
    ],
    "usageInstructions": "Add to MCP Client configuration with 'npx -y mcp-data-extractor' command. Use extract_data or extract_svg tools with appropriate source and target paths. Configure DISABLE_SOURCE_REPLACEMENT env variable to control source file replacement behavior.",
    "category": "Development Tools",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "smtp": {
    "name": "SMTP Email MCP Server",
    "githubLink": "https://github.com/samihalawa/mcp-server-smtp",
    "package": "mcp-server-smtp",
    "description": "An MCP server providing email sending capabilities for AI assistants",
    "installCommand": "git clone https://github.com/samihalawa/mcp-server-smtp.git && cd mcp-server-smtp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "NODE_PATH",
      "PATH"
    ],
    "usageInstructions": "1. Start the server: npm start\n2. Configure in MCP config with command and args\n3. Use tools like send-email, send-bulk-emails, add-smtp-config",
    "category": "Communication",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "aws-kb": {
    "name": "AWS Knowledge Base Retrieval MCP Server",
    "githubLink": "https://github.com/sammcj/mcp-aws-kb",
    "package": "@modelcontextprotocol/server-aws-kb-retrieval",
    "description": "An MCP server implementation for retrieving information from the AWS Knowledge Base using the Bedrock Agent Runtime.",
    "installCommand": "npx -y @modelcontextprotocol/server-aws-kb-retrieval",
    "requiredEnvVars": [
      "AWS_REGION"
    ],
    "optionalParams": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY",
      "AWS_SESSION_TOKEN",
      "AWS_KB_IDS"
    ],
    "usageInstructions": "Configure AWS credentials using either IAM Access Keys or AWS SSO. Set required environment variables (AWS_REGION) and optional variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN, AWS_KB_IDS) as needed. Use with Claude Desktop by adding configuration to claude_desktop_config.json.",
    "category": "Knowledge Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "ankiconnect": {
    "name": "mcp-ankiconnect MCP Server",
    "githubLink": "https://github.com/samefarrar/mcp-ankiconnect",
    "package": "mcp-ankiconnect",
    "description": "MCP server that connects Claude conversations with AnkiConnect for spaced repetition flashcards",
    "installCommand": "git clone https://github.com/samefarrar/mcp-ankiconnect.git && cd mcp-ankiconnect && uv sync",
    "requiredEnvVars": [],
    "optionalParams": [
      "deck",
      "limit",
      "today_only",
      "reviews"
    ],
    "usageInstructions": "1. Install AnkiConnect plugin in Anki. 2. Configure Claude Desktop by adding mcp-ankiconnect configuration to claude_desktop_config.json. 3. Restart Anki and Claude Desktop. For debugging, use MCP Inspector with 'uv run mcp dev mcp_ankiconnect/server.py'",
    "category": "Productivity",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "monday": {
    "name": "Monday.com MCP Server",
    "githubLink": "https://github.com/sakce/mcp-server-monday",
    "package": "@sakce/mcp-server-monday",
    "description": "MCP Server for monday.com, enabling interaction with Monday.com boards, items, updates, and documents.",
    "installCommand": "npx -y @smithery/cli install @sakce/mcp-server-monday --client claude",
    "requiredEnvVars": [
      "MONDAY_API_KEY",
      "MONDAY_WORKSPACE_NAME"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create and save a personal API Token in Monday.com. 2. Get the Workspace Name from the Monday.com workspace URL. Configure the server using the generated API key and workspace name.",
    "category": "Productivity",
    "stars": 31,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "graphql-tools": {
    "name": "GraphQL MCP Tools",
    "githubLink": "https://github.com/saewoohan/mcp-graphql-tools",
    "package": "mcp-graphql-tools",
    "description": "An MCP server implementation providing GraphQL API interaction capabilities for AI assistants.",
    "installCommand": "npx -y mcp-graphql-tools",
    "requiredEnvVars": [],
    "optionalParams": [
      "--endpoint",
      "--headers",
      "--timeout",
      "--maxComplexity",
      "--allowMutations",
      "--includeDeprecated"
    ],
    "usageInstructions": "To use this MCP server with Claude Desktop, configure it in your JSON settings file. Provide the GraphQL endpoint URL and authentication headers as needed. Example configuration:\n\n```json\n{\n  'mcpServers': {\n    'graphql': {\n      'command': 'npx',\n      'args': [\n        '-y',\n        'mcp-graphql-tools',\n        '--endpoint=https://api.github.com/graphql',\n        '--headers={\"Authorization\":\"Bearer YOUR_GITHUB_TOKEN\"}',\n        '--timeout=30000',\n        '--maxComplexity=100'\n      ]\n    }\n  }\n}\n```\n\nFor command-line usage, run: npx -y mcp-graphql-tools --help",
    "category": "API Integration",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/53k2y3jjli8.png"
  },
  "raindrop.io": {
    "name": "Raindrop.io MCP Server",
    "githubLink": "https://github.com/sachin-philip/raindrop.io-mcp",
    "package": "@sachin-philip/raindrop-io-mcp",
    "description": "An MCP server integration for Raindrop.io that allows managing bookmarks programmatically through LLM apps.",
    "installCommand": "npx -y @smithery/cli install @sachin-philip/raindrop-io-mcp --client claude",
    "requiredEnvVars": [
      "RAINDROP_TOKEN"
    ],
    "optionalParams": [
      "<location to project clone>"
    ],
    "usageInstructions": "1. Get an API token from the Raindrop.io Developer Portal. 2. Add the MCP server configuration to your LLM app with the RAINDROP_TOKEN environment variable. 3. Restart your LLM app (e.g., Claude, Cursor).",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/7vwkrokwj52.png"
  },
  "runpod-ts": {
    "name": "RunPod MCP Server",
    "githubLink": "https://github.com/runpod/runpod-mcp-ts",
    "package": "@runpod/runpod-mcp-ts",
    "description": "MCP server for interacting with RunPod REST API through MCP-compatible clients",
    "installCommand": "git clone https://github.com/runpod/runpod-mcp-ts.git && cd runpod-mcp-ts && npm install && npm run build",
    "requiredEnvVars": [
      "RUNPOD_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Set RUNPOD_API_KEY environment variable. 2. Start server with 'npm start'. 3. Configure Claude for Desktop by editing config file and adding server configuration. 4. Restart Claude for Desktop.",
    "category": "API Integration",
    "stars": 18,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/mv9gk0ipfbf.jpg"
  },
  "batchit": {
    "name": "MCP BatchIt",
    "githubLink": "https://github.com/ryanjoachim/mcp-batchit",
    "package": "@modelcontextprotocol/mcp-batchit",
    "description": "An MCP server aggregator that batches multiple tool calls into a single request, reducing overhead and token usage for AI agents.",
    "installCommand": "git clone https://github.com/ryanjoachim/mcp-batchit.git && cd mcp-batchit && npm install && npm run build && npm start",
    "requiredEnvVars": [],
    "optionalParams": [
      "maxConcurrent",
      "stopOnError",
      "timeoutMs"
    ],
    "usageInstructions": "After installation, send JSON-RPC requests with 'tools/call' method and 'name=batch_execute' to the server. Configure batch operations by specifying targetServer, operations, and options in the request body.",
    "category": "Development Tools",
    "stars": 33,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "iceberg": {
    "name": "IcebergMCP",
    "githubLink": "https://github.com/ryft-io/iceberg-mcp",
    "package": "iceberg-mcp",
    "description": "IcebergMCP is a Model Context Protocol (MCP) server that allows interaction with Apache Iceberg™ Lakehouse using natural language through MCP clients like Claude or Cursor.",
    "installCommand": "uv run --with iceberg-mcp iceberg-mcp",
    "requiredEnvVars": [
      "ICEBERG_MCP_PROFILE"
    ],
    "optionalParams": [
      "ICEBERG_MCP_REGION"
    ],
    "usageInstructions": "1. Ensure AWS profile is configured with access to Apache Iceberg™ catalog.\n2. Install `uv` via `brew install uv`.\n3. Configure the server in your MCP client (e.g., Claude or Cursor) with the provided JSON configuration.\n4. Set `ICEBERG_MCP_PROFILE` to your AWS profile name.\n5. Optionally set `ICEBERG_MCP_REGION` to specify the AWS region.\n6. Use natural language queries to interact with your Iceberg tables.",
    "category": "Data Storage",
    "stars": 37,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/jkrrehip788.png"
  },
  "alchemy": {
    "name": "MCP Alchemy",
    "githubLink": "https://github.com/runekaagaard/mcp-alchemy",
    "package": "mcp-alchemy",
    "description": "MCP server connecting Claude Desktop to various databases including PostgreSQL, MySQL, SQLite, and more through SQLAlchemy.",
    "installCommand": "curl -LsSf https://astral.sh/uv/install.sh | sh && uv pip install mcp-alchemy",
    "requiredEnvVars": [
      "DB_URL"
    ],
    "optionalParams": [
      "CLAUDE_LOCAL_FILES_PATH",
      "EXECUTE_QUERY_MAX_CHARS",
      "DB_ENGINE_OPTIONS"
    ],
    "usageInstructions": "1. Install uv if not already installed. 2. Configure claude_desktop_config.json with appropriate database connection details and driver. 3. Set DB_URL environment variable with your database connection string. 4. Optionally configure CLAUDE_LOCAL_FILES_PATH for large result sets.",
    "category": "Database",
    "stars": 260,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "notmuch-sendmail": {
    "name": "MCP Notmuch Sendmail",
    "githubLink": "https://github.com/runekaagaard/mcp-notmuch-sendmail",
    "package": "mcp-notmuch-sendmail",
    "description": "An MCP server that connects Claude Desktop to a Notmuch email database, enabling email search, composition, and management with markdown support and LaTeX-style formatting.",
    "installCommand": "uvx --from mcp-notmuch-sendmail==2025.04.09.174710 --python 3.10 mcp-notmuch-sendmail",
    "requiredEnvVars": [
      "NOTMUCH_DATABASE_PATH",
      "NOTMUCH_REPLY_SEPARATORS",
      "SENDMAIL_FROM_EMAIL"
    ],
    "optionalParams": [
      "SENDMAIL_EMAIL_SIGNATURE_HTML",
      "NOTMUCH_SYNC_SCRIPT",
      "LOG_FILE_PATH",
      "DRAFT_DIR"
    ],
    "usageInstructions": "1. Install uv if not already installed.\n2. Add the server to your `claude_desktop_config.json` under `mcpServers` with the required environment variables.\n3. Ensure the `NOTMUCH_DATABASE_PATH` points to your Notmuch database.\n4. Set `NOTMUCH_REPLY_SEPARATORS` with pipe-separated reply markers.\n5. Set `SENDMAIL_FROM_EMAIL` to your email address.\n6. (Optional) Configure `SENDMAIL_EMAIL_SIGNATURE_HTML`, `NOTMUCH_SYNC_SCRIPT`, `LOG_FILE_PATH`, and `DRAFT_DIR` as needed.\n7. Use the provided API tools to search, view, compose, and send emails.",
    "category": "Email Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "asana": {
    "name": "MCP Server for Asana",
    "githubLink": "https://github.com/roychri/mcp-server-asana",
    "package": "@roychri/mcp-server-asana",
    "description": "An MCP server implementation for Asana, allowing interaction with Asana API from MCP clients like Anthropic's Claude Desktop Application.",
    "installCommand": "npm install -g @roychri/mcp-server-asana",
    "requiredEnvVars": [
      "ASANA_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "READ_ONLY_MODE"
    ],
    "usageInstructions": "1. Install the package globally using 'npm install -g @roychri/mcp-server-asana'. 2. Set the ASANA_ACCESS_TOKEN environment variable with your Asana access token. 3. Optionally set READ_ONLY_MODE to 'true' to disable write operations. 4. Use an MCP client like Claude Desktop to interact with Asana by mentioning 'asana' in your queries.",
    "category": "API Integration",
    "stars": 87,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "deepseek-thinker": {
    "name": "Deepseek Thinker MCP Server",
    "githubLink": "https://github.com/ruixingshi/deepseek-thinker-mcp",
    "package": "deepseek-thinker-mcp",
    "description": "An MCP server that provides access to Deepseek's reasoning process via the Model Context Protocol, supporting both OpenAI API and Ollama local modes.",
    "installCommand": "npm install -g deepseek-thinker-mcp",
    "requiredEnvVars": [
      "API_KEY",
      "BASE_URL"
    ],
    "optionalParams": [
      "USE_OLLAMA"
    ],
    "usageInstructions": "To use the server, configure it in your AI client (e.g., Claude Desktop) by specifying the command as 'npx -y deepseek-thinker-mcp' and setting the required environment variables. For OpenAI API mode, set API_KEY and BASE_URL. For Ollama mode, set USE_OLLAMA=true. Alternatively, run the server locally by cloning the repository, running 'npm install', 'npm run build', and executing 'node build/index.js'.",
    "category": "AI/ML",
    "stars": 55,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "rowik": {
    "name": "rowik-mcp",
    "githubLink": "https://github.com/roshan/rowik-mcp",
    "package": "rowik-mcp",
    "description": "A Model Context Protocol (MCP) server for integrating with Wikipedia, enabling knowledge-based model interactions.",
    "installCommand": "npm install -g rowik-mcp",
    "requiredEnvVars": [
      "WIKIPEDIA_API_KEY",
      "MCP_SERVER_PORT"
    ],
    "optionalParams": [
      "MCP_LOG_LEVEL",
      "WIKIPEDIA_TIMEOUT",
      "MCP_MAX_RESULTS"
    ],
    "usageInstructions": "After installation, set the required environment variables (WIKIPEDIA_API_KEY and MCP_SERVER_PORT). Start the server using 'rowik-mcp start'. Access the server via localhost at the specified port. For advanced configuration, optional environment variables can be set for logging, timeouts, and result limits.",
    "category": "Knowledge Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "robinhood": {
    "name": "Robinhood MCP Server",
    "githubLink": "https://github.com/rohitsingh-iitd/robinhood-mcp-server",
    "package": "robinhood-mcp-server",
    "description": "A comprehensive interface to the Robinhood Crypto API providing REST API and WebSocket interfaces for account management, market data, and trading operations.",
    "installCommand": "git clone https://github.com/rohitsingh-iitd/robinhood-mcp-server && cd robinhood-mcp-server && python -m venv venv && source venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [
      "ROBINHOOD_API_KEY",
      "ROBINHOOD_PRIVATE_KEY"
    ],
    "optionalParams": [
      "HOST",
      "PORT",
      "WEBSOCKET_PORT",
      "DEBUG",
      "LOG_LEVEL",
      "LOG_FILE",
      "RATE_LIMIT_ENABLED",
      "RATE_LIMIT_REQUESTS",
      "RATE_LIMIT_PERIOD"
    ],
    "usageInstructions": "1. Create a .env file with required environment variables.\n2. Run the server using 'python -m src.main'.\n3. REST API available at http://localhost:8000.\n4. WebSocket server available at ws://localhost:8001.",
    "category": "API Integration",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/155luiynohm.png"
  },
  "safari-screenshot": {
    "name": "Safari Screenshot MCP Server",
    "githubLink": "https://github.com/rogerheykoop/mcp-safari-screenshot",
    "package": "@rogerheykoop/mcp-safari-screenshot",
    "description": "A Node.js MCP Server for capturing screenshots using Safari on macOS with configurable sizes and zoom levels.",
    "installCommand": "npm install @rogerheykoop/mcp-safari-screenshot",
    "requiredEnvVars": [],
    "optionalParams": [
      "url",
      "outputPath",
      "width",
      "height",
      "waitTime",
      "zoomLevel"
    ],
    "usageInstructions": "To use this MCP server, ensure you have macOS, Safari, and Node.js >=14.0.0. Grant Terminal Accessibility permissions in System Preferences. Install using 'npm install @rogerheykoop/mcp-safari-screenshot'. For Cursor integration, add the MCP server with command 'npx -y @rogerheykoop/mcp-safari-screenshot'.",
    "category": "Browser Automation",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "screeny": {
    "name": "Screeny MCP Server",
    "githubLink": "https://github.com/rohanrav/screeny",
    "package": "mcp-server-screeny",
    "description": "A privacy-first macOS-only MCP server that enables AI agents to capture screenshots of pre-approved application windows for secure visual context in development and debugging tasks.",
    "installCommand": "pipx install mcp-server-screeny",
    "requiredEnvVars": [
      "SCREEN_CAPTURE_PERMISSION_GRANTED",
      "MCP_HOST_APPLICATION_PATH"
    ],
    "optionalParams": [
      "WINDOW_APPROVAL_LIST_PATH",
      "SCREENSHOT_COMPRESSION_LEVEL",
      "DEBUG_MODE"
    ],
    "usageInstructions": "1. Install using pipx: pipx install mcp-server-screeny\n2. Grant Screen Capture permission to your terminal and MCP host application in System Settings > Privacy & Security > Screen & System Audio Recording\n3. Approve windows with: mcp-server-screeny --setup\n4. Configure your MCP client (Claude Desktop/Cursor) with the provided JSON configuration\n5. Use listWindows and takeScreenshot tools to capture approved windows\n6. Restart your MCP host after configuration changes",
    "category": "Browser Automation",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/1lr8qr8c84g.png"
  },
  "ollama-db": {
    "name": "Ollama MCP Database Assistant",
    "githubLink": "https://github.com/robdodson/ollama-mcp-db",
    "package": "@modelcontextprotocol/ollama-mcp-db",
    "description": "An interactive chat interface combining Ollama's LLM capabilities with PostgreSQL database access through MCP, allowing natural language queries about database content.",
    "installCommand": "git clone https://github.com/robdodson/ollama-mcp-db.git && cd ollama-mcp-db && npm install",
    "requiredEnvVars": [
      "DATABASE_URL"
    ],
    "optionalParams": [
      "OLLAMA_MODEL"
    ],
    "usageInstructions": "1. Create a .env file with DATABASE_URL=postgresql://user:password@localhost:5432/dbname\n2. Pull Ollama model: ollama pull qwen2.5-coder:7b-instruct\n3. Start the application: npm start\n4. Ask natural language questions about your database",
    "category": "AI/ML",
    "stars": 45,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "cve-search": {
    "name": "CVE-Search MCP Server",
    "githubLink": "https://github.com/roadwy/cve-search",
    "package": "cve-search_mcp",
    "description": "A Model Context Protocol (MCP) server for querying the CVE-Search API to access CVE data, including vendor and product information, specific CVE details, and recent CVE updates.",
    "installCommand": "git clone https://github.com/roadwy/cve-search_mcp.git && cd cve-search_mcp && uv sync",
    "requiredEnvVars": [],
    "optionalParams": [
      "YOU_CVE_SEARCH_MCP_DIR_PATH"
    ],
    "usageInstructions": "1. Clone the repository using `git clone https://github.com/roadwy/cve-search_mcp.git`.\n2. Navigate to the directory and install dependencies with `uv sync`.\n3. Add the server configuration to your MCP client (e.g., VSCode with Cline or Roo Code) by specifying the command and directory path in the configuration file.",
    "category": "Security",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "couchdb": {
    "name": "CouchDB MCP Server",
    "githubLink": "https://github.com/robertoamoreno/couchdb-mcp-server",
    "package": "@robertoamoreno/couchdb-mcp-server",
    "description": "A Model Context Protocol server for interacting with CouchDB, enabling AI assistants to manage databases and documents.",
    "installCommand": "npx -y @smithery/cli install @robertoamoreno/couchdb-mcp-server --client claude",
    "requiredEnvVars": [
      "COUCHDB_URL"
    ],
    "optionalParams": [
      "COUCHDB_VERSION"
    ],
    "usageInstructions": "1. Install the server using the provided install command.\n2. Set the COUCHDB_URL environment variable to point to your CouchDB instance.\n3. Optionally set COUCHDB_VERSION if needed.\n4. Configure the server in claude_desktop_config.json with the command path and environment variables.\n5. Use the server to manage CouchDB databases and documents through the MCP interface.",
    "category": "Data Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "image-gen": {
    "name": "Image Generator MCP Server",
    "githubLink": "https://github.com/rmcendarfer2017/MCP-image-gen",
    "package": "image-generator",
    "description": "An MCP server that generates images using Replicate's Stable Diffusion model and saves them locally.",
    "installCommand": "git clone https://github.com/rmcendarfer2017/MCP-image-gen.git && cd MCP-image-gen && python -m venv .venv && source .venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [
      "REPLICATE_API_TOKEN"
    ],
    "optionalParams": [
      "style",
      "negative_prompt",
      "width",
      "height",
      "num_inference_steps",
      "guidance_scale"
    ],
    "usageInstructions": "1. Create a .env file with REPLICATE_API_TOKEN. 2. Activate the virtual environment. 3. Use tools like 'generate-image', 'save-image', and 'list-saved-images'. For debugging, use 'npx @modelcontextprotocol/inspector uv --directory path/to/repo run image-generator'.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "riza": {
    "name": "Riza MCP Server",
    "githubLink": "https://github.com/riza-io/riza-mcp",
    "package": "@riza-io/riza-mcp",
    "description": "Riza MCP server provides isolated code execution for LLM-generated code through various tools.",
    "installCommand": "npx -y @riza-io/riza-mcp",
    "requiredEnvVars": [
      "RIZA_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Get a Riza API key from https://dashboard.riza.io. 2. Configure with Claude Desktop using the provided JSON config or adapt for your MCP client. 3. Run using: npx @riza-io/riza-mcp",
    "category": "Development Tools",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "gumroad": {
    "name": "Gumroad MCP Server",
    "githubLink": "https://github.com/rmarescu/gumroad-mcp",
    "package": "gumroad-mcp",
    "description": "A Model Context Protocol (MCP) server implementation for Gumroad, enabling MCP-compatible AI clients to interact with the Gumroad API for managing products, sales, and offer codes.",
    "installCommand": "npx -y gumroad-mcp@latest init",
    "requiredEnvVars": [
      "GUMROAD_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "GUMROAD_BASE_URL"
    ],
    "usageInstructions": "Once installed, configure the MCP server with your Gumroad access token. Use it in an MCP-compatible client like Claude Desktop to query sales data, manage products, and create or delete offer codes. For manual configuration, update the MCP config with the Gumroad server command and environment variables.",
    "category": "API Integration",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "mock-data": {
    "name": "Mock Data MCP",
    "githubLink": "https://github.com/rhitune2/mock-data-mcp",
    "package": "mock-data-mcp",
    "description": "MCP server for generating mock data",
    "installCommand": "npm install -g mock-data-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this MCP server, install globally using npm then run the appropriate commands as documented in the repository",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "python": {
    "name": "Talk with Your Database Using MCP",
    "githubLink": "https://github.com/rhabraken/mcp-python",
    "package": "uv",
    "description": "An MCP server that allows interaction with PostgreSQL, MySQL, MariaDB, or SQLite databases using Claude Desktop, built on top of mcp-alchemy.",
    "installCommand": "docker-compose up -d && curl -LsSf https://astral.sh/uv/install.sh | sh",
    "requiredEnvVars": [
      "DB_URL"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Copy `.env.example` to `.env` and update environment variables as needed.\n2. Run `docker-compose up -d` to start the PostgreSQL database with dummy data.\n3. Install `uv` if not already installed using the provided command.\n4. Configure the MCP server with the provided JSON configuration, ensuring the `DB_URL` is correct.\n5. Launch Claude Desktop to interact with your database via the MCP server.",
    "category": "Database",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "kite": {
    "name": "Kite MCP Server",
    "githubLink": "https://github.com/rhnvrm/kite-mcp-server",
    "package": "kite-mcp-server",
    "description": "A Model Context Protocol (MCP) server that provides AI assistants with secure access to the Kite Connect trading API for portfolio management, order execution, and market data retrieval.",
    "installCommand": "git clone https://github.com/zerodha/kite-mcp-server && cd kite-mcp-server && go build -o kite-mcp-server",
    "requiredEnvVars": [
      "KITE_API_KEY",
      "KITE_API_SECRET"
    ],
    "optionalParams": [
      "APP_MODE",
      "APP_PORT",
      "APP_HOST"
    ],
    "usageInstructions": "1. Clone the repository and build the server using `go build -o kite-mcp-server`.\n2. Create a `.env` file with your Kite Connect API credentials.\n3. Run the server using `./kite-mcp-server` or `go run main.go`.\n4. For client integration, configure your MCP client to connect to the server's HTTP or SSE endpoint (e.g., `http://localhost:8080/mcp`).\n5. For hosted mode, use `https://mcp.kite.trade/mcp` directly in your client configuration.",
    "category": "API Integration",
    "stars": 120,
    "lastStarUpdate": "2025-07-07T15:28:25.046Z",
    "logo": ""
  },
  "quickvoice": {
    "name": "QuickVoice MCP",
    "githubLink": "https://github.com/rexanity/quickvoice",
    "package": "rexanity/quickvoice-mcp",
    "description": "An MCP server to communicate with QuickVoice AI Voice agents, enabling integration with Claude Desktop for making AI-powered phone calls.",
    "installCommand": "docker run -e QUICKVOICE_AGENT_ID=\"your-agent-id\" -e QUICKVOICE_API_KEY=\"your-api-key\" rexanity/quickvoice-mcp",
    "requiredEnvVars": [
      "QUICKVOICE_AGENT_ID",
      "QUICKVOICE_API_KEY"
    ],
    "optionalParams": [
      "QUICKVOICE_API_ENDPOINT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Obtain your QuickVoice API credentials (Agent ID and API Key) from quickvoice.app.\n2. Set the required environment variables (QUICKVOICE_AGENT_ID and QUICKVOICE_API_KEY).\n3. Run the Docker container using the provided install command.\n4. Configure Claude Desktop to use the QuickVoice MCP server by adding the MCP config to claude_desktop_config.json.\n5. Use Claude Desktop to initiate AI phone calls with natural language prompts.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/2af57whx6zx.png"
  },
  "api-gateway": {
    "name": "MCP API Gateway",
    "githubLink": "https://github.com/rflpazini/mcp-api-gateway",
    "package": "rflpazini/mcp-api-gateway",
    "description": "A universal MCP server to integrate any API with Claude Desktop using Docker configurations.",
    "installCommand": "docker run --rm -i rflpazini/mcp-api-gateway:latest",
    "requiredEnvVars": [
      "API_N_NAME",
      "API_N_SWAGGER_URL"
    ],
    "optionalParams": [
      "API_N_BASE_URL",
      "API_N_HEADER_*",
      "API_N_HEADERS"
    ],
    "usageInstructions": "Add configuration to claude_desktop_config.json with Docker run command and required environment variables. Example: { \"mcpServers\": { \"my-api\": { \"command\": \"docker\", \"args\": [ \"run\", \"--rm\", \"-i\", \"-e\", \"API_1_NAME=my-api\", \"-e\", \"API_1_SWAGGER_URL=https://api.example.com/swagger.json\", \"rflpazini/mcp-api-gateway:latest\" ] } } }",
    "category": "API Integration",
    "stars": 12,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/ii0sah9tlpf.png"
  },
  "rember": {
    "name": "Rember MCP Server",
    "githubLink": "https://github.com/rember/rember-mcp",
    "package": "@getrember/mcp",
    "description": "An MCP server that allows Claude to create flashcards for spaced repetition reviews using Rember's API.",
    "installCommand": "npx -y @getrember/mcp --api-key=YOUR_REMBER_API_KEY",
    "requiredEnvVars": [
      "REMBER_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "MAX_FLASHCARDS_PER_REQUEST",
      "DEBUG"
    ],
    "usageInstructions": "1. Replace YOUR_REMBER_API_KEY with your actual Rember API key from your settings page.\n2. Run the install command to start the server.\n3. Configure Claude Desktop by adding the MCP server configuration to claude_desktop_config.json as shown in the README.\n4. Use commands like 'help me remember this' or 'create flashcards' in Claude to trigger the server.",
    "category": "AI/ML",
    "stars": 47,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "ancestry": {
    "name": "Ancestry MCP Server",
    "githubLink": "https://github.com/reeeeemo/ancestry-mcp",
    "package": "mcp-server-ancestry",
    "description": "Python server implementing Model Context Protocol (MCP) for interacting with .ged files, allowing operations like reading, renaming, and searching within GEDCOM files.",
    "installCommand": "pip install mcp-server-ancestry",
    "requiredEnvVars": [],
    "optionalParams": [
      "--gedcom-path"
    ],
    "usageInstructions": "1. Install using: pip install mcp-server-ancestry. 2. Configure Claude Desktop by adding to claude_desktop_config.json: { \"mcpServers\": { \"ancestry\": { \"command\": \"mcp-server-ancestry\", \"args\": [\"--gedcom-path\", \"path/to/your/gedcom/files\"] } } }",
    "category": "Family History/Ancestry Tools",
    "stars": 23,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "send-email": {
    "name": "Resend Email MCP Server",
    "githubLink": "https://github.com/resend/mcp-send-email",
    "package": "@resend/mcp-send-email",
    "description": "An MCP server that sends emails using Resend's API, allowing integration with Cursor and Claude Desktop.",
    "installCommand": "git clone https://github.com/resend/mcp-send-email.git && cd mcp-send-email && npm install && npm run build",
    "requiredEnvVars": [
      "RESEND_API_KEY"
    ],
    "optionalParams": [
      "SENDER_EMAIL_ADDRESS",
      "REPLY_TO_EMAIL_ADDRESS",
      "--sender",
      "--reply-to"
    ],
    "usageInstructions": "1. Clone the repository and build the project locally. 2. Set up a Resend account and create an API key. 3. Configure the MCP server in Cursor or Claude Desktop by providing the absolute path to the built index.js and your Resend API key. For Cursor, add the config to Cursor Settings > MCP. For Claude Desktop, add the config to the Developer tab in settings.",
    "category": "Communication",
    "stars": 376,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcps/resend.webp"
  },
  "langchain": {
    "name": "langchain-mcp",
    "githubLink": "https://github.com/rectalogic/langchain-mcp",
    "package": "langchain-mcp",
    "description": "Model Context Protocol (MCP) tool calling support in LangChain, enabling integration with MCP-compatible services and tools.",
    "installCommand": "pip install langchain-mcp",
    "requiredEnvVars": [
      "GROQ_API_KEY"
    ],
    "optionalParams": [
      "Allowed directories",
      "Port",
      "Log level",
      "Debug mode"
    ],
    "usageInstructions": "1. Install the package using pip install langchain-mcp. 2. Set the GROQ_API_KEY environment variable with your Groq API key. 3. Run the demo script (e.g., tests/demo.py) to test MCP functionality. 4. Use the MCPToolkit class to integrate with LangChain and call MCP tools.",
    "category": "AI/ML",
    "stars": 192,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "neo4j": {
    "name": "Neo4j MCP Server",
    "githubLink": "https://github.com/rebots-online/mcp-neo4j",
    "package": "mcp-neo4j-memory",
    "description": "Neo4j implementation of the Model Context Protocol (MCP) server with environment variable configuration and improved error handling.",
    "installCommand": "git clone https://github.com/rebots-online/mcp-neo4j.git && cd mcp-neo4j && npm install && npm run build",
    "requiredEnvVars": [
      "NEO4J_URL",
      "NEO4J_USER",
      "NEO4J_PASSWORD"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "After installation, configure the Neo4j connection by setting NEO4J_URL, NEO4J_USER, and NEO4J_PASSWORD environment variables. Then start the server with 'npm start'.",
    "category": "Knowledge Management",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "coin": {
    "name": "Cryptocurrency Daemon MCP Server",
    "githubLink": "https://github.com/raw391/coin",
    "package": "@raw391/coin-daemon-mcp",
    "description": "An MCP server for interacting with cryptocurrency daemon RPC interfaces, enabling AI assistants to manage cryptocurrency nodes.",
    "installCommand": "npm install @raw391/coin-daemon-mcp",
    "requiredEnvVars": [
      "CONFIG_PATH"
    ],
    "optionalParams": [
      "coinName",
      "nickname",
      "rpcEndpoint",
      "rpcUser",
      "rpcPassword"
    ],
    "usageInstructions": "1. Install via npm. 2. Configure Claude Desktop by modifying claude_desktop_config.json. 3. Create a configuration file for cryptocurrency daemons. 4. Configure cryptocurrency daemon's RPC settings. 5. Restart Claude Desktop to use the MCP server.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/yquts6csx5.png"
  },
  "git-repo-browser": {
    "name": "MCP Git Repo Browser",
    "githubLink": "https://github.com/razorback16/mcp-git-repo-browser",
    "package": "mcp-git-repo-browser",
    "description": "A Node.js implementation of a Git repository browser using the Model Context Protocol (MCP) to provide directory structure and file content retrieval.",
    "installCommand": "git clone https://github.com/razorback16/mcp-git-repo-browser && cd mcp-git-repo-browser && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with 'npm install'.\n2. Start the server using 'node src/index.js'.\n3. Configure your MCP client to use the server by adding the configuration to your MCP settings file as shown in the README.\n4. Use the provided tools 'git_directory_structure' and 'git_read_important_files' to interact with Git repositories.",
    "category": "Version Control",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "razorpay": {
    "name": "Razorpay MCP Server",
    "githubLink": "https://github.com/razorpay/razorpay-mcp-server",
    "package": "razorpay-mcp-server",
    "description": "An MCP server providing seamless integration with Razorpay APIs for advanced payment processing",
    "installCommand": "docker run -i --rm razorpay/razorpay-mcp-server",
    "requiredEnvVars": [
      "RAZORPAY_KEY_ID",
      "RAZORPAY_KEY_SECRET"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "API_ENDPOINT"
    ],
    "usageInstructions": "1. Set RAZORPAY_KEY_ID and RAZORPAY_KEY_SECRET environment variables\n2. Run the Docker container\n3. Configure any additional parameters as needed",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "data-exploration": {
    "name": "MCP Server for Data Exploration",
    "githubLink": "https://github.com/reading-plus-ai/mcp-server-data-exploration",
    "package": "mcp-server-data-exploration",
    "description": "A versatile tool for interactive data exploration, acting as a personal data scientist assistant to analyze datasets and generate actionable insights.",
    "installCommand": "python setup.py",
    "requiredEnvVars": [
      "csv_path",
      "topic"
    ],
    "optionalParams": [
      "df_name"
    ],
    "usageInstructions": "1. Download and install Claude Desktop from https://claude.ai/download.\n2. Run the command 'python setup.py' to install and set up the server.\n3. Wait for the prompt template and tools to load in Claude Desktop.\n4. Select the 'explore-data' prompt template from MCP.\n5. Provide the required inputs: 'csv_path' (local path to CSV file) and 'topic' (e.g., 'Weather patterns in New York').\n6. Use the 'load-csv' and 'run-script' tools for data loading and analysis.",
    "category": "Analytics",
    "stars": 418,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "email-checker": {
    "name": "Email Checker MCP Server",
    "githubLink": "https://github.com/ravinahp/email-checker-mcp",
    "package": "email-checker-mcp",
    "description": "Validates email addresses using a simple JSON response format without requiring an API key.",
    "installCommand": "git clone https://github.com/ravinahp/email-checker-mcp.git && cd email-checker-mcp && uv sync",
    "requiredEnvVars": [],
    "optionalParams": [
      "email"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'uv sync'. 2. Configure the MCP server in your Claude desktop configuration file by adding the required JSON configuration. 3. Use the 'validate_email' tool to check if an email address exists.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "flights": {
    "name": "Find Flights MCP Server",
    "githubLink": "https://github.com/ravinahp/flights-mcp",
    "package": "@ravinahp/travel-mcp",
    "description": "MCP server for searching and retrieving flight information using Duffel API, supporting one-way, round-trip, and multi-city flights with flexible search parameters.",
    "installCommand": "npx -y @smithery/cli install @ravinahp/travel-mcp --client claude",
    "requiredEnvVars": [
      "DUFFEL_API_KEY_LIVE"
    ],
    "optionalParams": [
      "DUFFEL_API_KEY_TEST",
      "PORT",
      "DEBUG",
      "MAX_CONNECTIONS",
      "CABIN_CLASS",
      "ADULTS"
    ],
    "usageInstructions": "1. Install via Smithery using the provided command.\n2. Set the DUFFEL_API_KEY_LIVE environment variable with your live Duffel API key.\n3. Modify the Claude desktop configuration file to include the MCP server configuration with the correct path and API key.\n4. Use the tools to search for flights, get offer details, or search for multi-city flights using natural language queries.",
    "category": "API Integration",
    "stars": 107,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "deriv-api": {
    "name": "Deriv API Server",
    "githubLink": "https://github.com/raju-deriv/mcp-deriv-api-server",
    "package": "deriv-api-mcp",
    "description": "An MCP server and OpenAI function calling service for interacting with the Deriv API, providing features like active symbols list and account balance retrieval.",
    "installCommand": "docker build -t deriv-api-mcp .",
    "requiredEnvVars": [
      "DERIV_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create a .env file with DERIV_API_TOKEN=your_api_key_here. 2. Configure Claude Desktop by adding the server configuration to claude_desktop_config.json. 3. Restart Claude Desktop.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "ragie": {
    "name": "Ragie Model Context Protocol Server",
    "githubLink": "https://github.com/ragieai/ragie-mcp-server",
    "package": "@ragieai/mcp-server",
    "description": "An MCP server that provides access to Ragie's knowledge base retrieval capabilities via a 'retrieve' tool.",
    "installCommand": "npm install -g @ragieai/mcp-server",
    "requiredEnvVars": [
      "RAGIE_API_KEY"
    ],
    "optionalParams": [
      "--description",
      "--partition",
      "topK",
      "rerank",
      "recencyBias"
    ],
    "usageInstructions": "1. Set your Ragie API key as the RAGIE_API_KEY environment variable. 2. Run the server using 'npx @ragieai/mcp-server' or configure it in Cursor or Claude desktop as described in the README. 3. Use the 'retrieve' tool with parameters like 'query', 'topK', 'rerank', and 'recencyBias' to search the knowledge base.",
    "category": "Knowledge Management",
    "stars": 48,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "adobe-commerce-dev": {
    "name": "Adobe Commerce Dev MCP Server",
    "githubLink": "https://github.com/rafaelstz/adobe-commerce-dev-mcp",
    "package": "@rafaelcg/adobe-commerce-dev-mcp",
    "description": "An MCP server that interacts with Adobe Commerce GraphQL APIs, supporting various tools for schema introspection and GraphQL operations.",
    "installCommand": "npx -y @rafaelcg/adobe-commerce-dev-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure your MCP client to use the NPM package by setting the command to 'npx' with args: ['-y', '@rafaelcg/adobe-commerce-dev-mcp@latest']. For local development: 1. Clone the repository. 2. Run 'npm install'. 3. Modify source files. 4. Run 'npm run build' to compile. 5. Configure MCP client to run 'node <project_path>/dist/index.js'.",
    "category": "Development Tools",
    "stars": 17,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/lf4nctfu2rd.jpg"
  },
  "stock-analysis": {
    "name": "Alpha Vantage Stock MCP Server",
    "githubLink": "https://github.com/ranveer0323/stock-analysis-mcp",
    "package": "stock-analysis-mcp",
    "description": "A Model Context Protocol (MCP) server that provides stock market data from Alpha Vantage API, allowing access to real-time and historical stock data for integration with Claude and other MCP clients.",
    "installCommand": "git clone https://github.com/ranveer0323/stock-analysis-mcp && cd stock-analysis-mcp && npm install",
    "requiredEnvVars": [
      "ALPHA_VANTAGE_API_KEY"
    ],
    "optionalParams": [
      "interval",
      "outputsize",
      "threshold"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with 'npm install'.\n2. Create a .env file and add your Alpha Vantage API key.\n3. Build the TypeScript code with 'npm run build'.\n4. Run the server with 'npm start' or use 'npm run dev' for development with auto-reloading.\n5. To use with Claude for Desktop, add the server configuration to 'claude_desktop_config.json' with the absolute path to the built index.js file and your API key.\n6. Use the available tools like 'get-stock-data', 'get-daily-stock-data', and 'get-stock-alerts' with required and optional parameters.",
    "category": "Analytics",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "youtube-watchlater": {
    "name": "YouTube Watch Later MCP Server",
    "githubLink": "https://github.com/rados10/youtube-watchlater-mcp",
    "package": "youtube-watchlater",
    "description": "An MCP server that retrieves YouTube video URLs from a custom playlist within a specified timeframe using OAuth2 authentication.",
    "installCommand": "git clone https://github.com/rados10/youtube-watchlater-mcp.git && cd youtube-watchlater-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "OAUTH_CLIENT_ID",
      "OAUTH_CLIENT_SECRET",
      "OAUTH_REFRESH_TOKEN"
    ],
    "optionalParams": [
      "daysBack"
    ],
    "usageInstructions": "1. Create a Google Cloud project and enable the YouTube Data API v3. 2. Generate OAuth 2.0 credentials and obtain a refresh token using the provided script. 3. Configure the server in your MCP settings file with the credentials. 4. Use the `get_watch_later_urls` tool with an optional `daysBack` parameter to retrieve video URLs.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "linkedinads": {
    "name": "Radiate B2B LinkedIn Ads MCP Server",
    "githubLink": "https://github.com/radiateb2b/mcp-linkedinads",
    "package": "mcp-remote",
    "description": "An MCP server implementation providing integration with LinkedIn Ads for campaign analysis and optimization recommendations.",
    "installCommand": "npm install -g npm@latest && npx -y mcp-remote https://mcp.radiateb2b.com/sse",
    "requiredEnvVars": [
      "private access token for LinkedIn Ads account"
    ],
    "optionalParams": [
      "Authorization header configuration"
    ],
    "usageInstructions": "1. Install Node.js and npm. 2. Obtain a Radiate B2B private access token. 3. Configure Claude Desktop by adding the MCP server configuration with your access token. 4. Restart Claude Desktop.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "raccoonai": {
    "name": "Raccoon AI MCP Server",
    "githubLink": "https://github.com/raccoonaihq/raccoonai-mcp-server",
    "package": "@raccoonaihq/raccoonai-mcp-server",
    "description": "Model Context Protocol (MCP) server that enables leveraging the LAM API for web browsing, data extraction, and complex web tasks automation.",
    "installCommand": "npx -y @smithery/cli@latest install @raccoonaihq/raccoonai-mcp-server --client claude",
    "requiredEnvVars": [
      "RACCOON_SECRET_KEY",
      "RACCOON_PASSCODE"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install using the provided install command\n2. Set RACCOON_SECRET_KEY and RACCOON_PASSCODE environment variables with your credentials from https://platform.flyingraccoon.tech\n3. Use with Claude Desktop or other MCP-compatible clients\n4. Try example prompts like: 'Extract product information from Amazon.com for the top-rated gaming keyboards'",
    "category": "Web Scraping",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "blastengine-mailer": {
    "name": "Blastengine Mailer MCP Server",
    "githubLink": "https://github.com/r3-yamauchi/mcp-server-blastengine-mailer",
    "package": "blastengine-mailer",
    "description": "An MCP server that enables LLM to send emails through Blastengine API",
    "installCommand": "git clone https://github.com/r3-yamauchi/mcp-server-blastengine-mailer.git && cd mcp-server-blastengine-mailer && npm install",
    "requiredEnvVars": [
      "BLASTENGINE_USER_ID",
      "BLASTENGINE_API_KEY"
    ],
    "optionalParams": [
      "command",
      "args"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'. 2. Configure Claude Desktop by adding server settings to claude_desktop_config.json. 3. Set BLASTENGINE_USER_ID and BLASTENGINE_API_KEY environment variables. 4. Run the server using 'node /path/to/server.js'",
    "category": "Communication",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "cdata-connect-cloud": {
    "name": "CData Connect Cloud MCP Server",
    "githubLink": "https://github.com/r3-yamauchi/cdata-connect-cloud-mcp-server",
    "package": "cdata-connect-cloud-mcp-server",
    "description": "MCP server implementation for CData Connect Cloud integration with Claude Desktop",
    "installCommand": "git clone https://github.com/r3-yamauchi/cdata-connect-cloud-mcp-server && cd cdata-connect-cloud-mcp-server && npm i",
    "requiredEnvVars": [
      "CDATA_CONNECT_CLOUD_CATALOG_NAME",
      "CDATA_CONNECT_CLOUD_USER",
      "CDATA_CONNECT_CLOUD_PAT"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and run 'npm i'. 2. Configure Claude Desktop by editing claude_desktop_config.json to include the server configuration. 3. Restart Claude Desktop application.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "kintone": {
    "name": "kintone MCP Server",
    "githubLink": "https://github.com/r3-yamauchi/kintone-mcp-server",
    "package": "kintone-mcp-server",
    "description": "This is a sample Model Context Protocol (MCP) server for integration with kintone, enabling access and manipulation of kintone data and application settings via MCP hosts like Claude Desktop.",
    "installCommand": "git clone https://github.com/r3-yamauchi/kintone-mcp-server && cd kintone-mcp-server && npm install",
    "requiredEnvVars": [
      "KINTONE_DOMAIN",
      "KINTONE_USERNAME",
      "KINTONE_PASSWORD"
    ],
    "optionalParams": [
      "MCP_PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with 'npm install'. 2. Configure the Claude Desktop application by editing the 'claude_desktop_config.json' file and adding the server configuration with the required environment variables. 3. Restart the Claude Desktop application. 4. Use the MCP server to interact with kintone by querying or modifying records, managing apps, and handling space operations.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "xcode": {
    "name": "Xcode MCP Server",
    "githubLink": "https://github.com/r-huijts/xcode-mcp-server",
    "package": "xcode-mcp-server",
    "description": "An MCP server providing comprehensive Xcode integration for AI assistants, enabling project management, file operations, build & testing, CocoaPods integration, Swift Package Manager support, iOS simulator tools, and Xcode utilities.",
    "installCommand": "git clone https://github.com/r-huijts/xcode-mcp-server.git && cd xcode-mcp-server && npm install && npm run build",
    "requiredEnvVars": [
      "PROJECTS_BASE_DIR"
    ],
    "optionalParams": [
      "DEBUG",
      "ALLOWED_PATHS",
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and navigate to the directory.\n2. Run `npm install` to install dependencies.\n3. Run `npm run build` to compile TypeScript code.\n4. Create a `.env` file with `PROJECTS_BASE_DIR` set to your projects directory.\n5. Start the server with `npm start` or run in development mode with `npm run dev`.\n6. Connect AI assistants by configuring them to use the server URL (typically http://localhost:3000).",
    "category": "Development Tools",
    "stars": 276,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "airbyte-list-sources": {
    "name": "Airbyte Status Checker MCP Server",
    "githubLink": "https://github.com/quintonwall/mcp-airbyte-list-sources",
    "package": "airbyte_status_checker",
    "description": "An MCP server that checks the status of Airbyte connections, integrating with Claude Desktop.",
    "installCommand": "uv venv && source .venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [
      "AIRBYTE_WORKSPACE_ID",
      "AIRBYTE_CLIENT_ID",
      "AIRBYTE_CLIENT_SECRET",
      "AIRBYTE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create a .env file with required Airbyte credentials. 2. Run 'uv run airbyte_status_checker.py'. 3. Configure Claude Desktop by setting absolute paths in claude_desktop_settings.json and adding the server.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "ns": {
    "name": "NS Travel Information MCP Server",
    "githubLink": "https://github.com/r-huijts/ns-mcp-server",
    "package": "ns-mcp-server",
    "description": "MCP server connecting Claude to real-time NS travel information, providing comprehensive train information and journey planning capabilities.",
    "installCommand": "npx -y ns-mcp-server",
    "requiredEnvVars": [
      "NS_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install using npx: 'npx -y ns-mcp-server'\n2. Configure Claude Desktop by adding the server configuration to ~/Library/Application Support/Claude/claude_desktop_config.json\n3. Obtain NS API key from https://apiportal.ns.nl/ and set as NS_API_KEY environment variable\n4. Restart Claude Desktop after configuration changes",
    "category": "API Integration",
    "stars": 39,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "duck-duck": {
    "name": "Duck Duck MCP",
    "githubLink": "https://github.com/qwang07/duck-duck-mcp",
    "package": "@smithery/cli",
    "description": "一个基于 DuckDuckGo 搜索引擎的 Model Context Protocol (MCP) 服务器实现，提供结构化搜索结果和智能内容分类功能。",
    "installCommand": "npx -y @smithery/cli install duck-duck-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "region",
      "safeSearch",
      "numResults"
    ],
    "usageInstructions": "1. 安装后通过命令 `npx duck-duck-mcp` 启动服务器。\n2. 与支持 MCP 协议的 AI 客户端（如 Claude）集成使用。\n3. 搜索参数示例包括 `query`（搜索关键词）和 `options`（区域、安全搜索级别、结果数量等）。\n4. 返回结果包含结构化的搜索数据，包括标题、网址、描述和元数据。",
    "category": "Search",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "pty": {
    "name": "pty-mcp",
    "githubLink": "https://github.com/qododavid/pty-mcp",
    "package": "git+https://github.com/qodo-ai/pty-mcp.git",
    "description": "An MCP tool server providing a stateful terminal.",
    "installCommand": "python -m pip install --user pipx && pipx ensurepath && pipx install git+https://github.com/qodo-ai/pty-mcp.git",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After installation, the server will be available as `pty-mcp` in your path. Ensure you have Python and pip installed before running the installation command.",
    "category": "Development Tools",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "communicator-telegram": {
    "name": "MCP Communicator (Telegram)",
    "githubLink": "https://github.com/qpd-v/mcp-communicator-telegram",
    "package": "mcp-communicator-telegram",
    "description": "An MCP server enabling communication with users through Telegram, providing tools to interact via a Telegram bot.",
    "installCommand": "npm install -g mcp-communicator-telegram",
    "requiredEnvVars": [
      "TELEGRAM_TOKEN",
      "CHAT_ID"
    ],
    "optionalParams": [
      "directory"
    ],
    "usageInstructions": "1. Create a Telegram bot using @BotFather. 2. Get your chat ID using the provided utility. 3. Configure environment variables TELEGRAM_TOKEN and CHAT_ID. 4. Add the server to your MCP settings file with the correct path to the installation.",
    "category": "Communication",
    "stars": 33,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "deepwebresearch": {
    "name": "MCP Deep Web Research Server",
    "githubLink": "https://github.com/qpd-v/mcp-DEEPwebresearch",
    "package": "mcp-deepwebresearch",
    "description": "A Model Context Protocol (MCP) server for advanced web research with features like intelligent search queuing, enhanced content extraction, and deep research capabilities.",
    "installCommand": "npm install -g mcp-deepwebresearch",
    "requiredEnvVars": [],
    "optionalParams": [
      "MAX_PARALLEL_SEARCHES",
      "SEARCH_DELAY_MS",
      "MAX_RETRIES",
      "TIMEOUT_MS",
      "LOG_LEVEL"
    ],
    "usageInstructions": "After installation, add the server to your Claude Desktop config file. Use the `deep_research`, `parallel_search`, and `visit_page` tools for research. For first-time setup, run `npx playwright install chromium` to install required browser dependencies.",
    "category": "Web Scraping",
    "stars": 70,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "any-chat-completions": {
    "name": "Any Chat Completions MCP Server",
    "githubLink": "https://github.com/pyroprompts/any-chat-completions-mcp",
    "package": "@pyroprompts/any-chat-completions-mcp",
    "description": "MCP server integrating OpenAI compatible chat completion APIs with Claude Desktop",
    "installCommand": "npx -y @pyroprompts/any-chat-completions-mcp",
    "requiredEnvVars": [
      "AI_CHAT_KEY",
      "AI_CHAT_NAME",
      "AI_CHAT_MODEL",
      "AI_CHAT_BASE_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure in Claude Desktop by adding to ~/Library/Application Support/Claude/claude_desktop_config.json or %APPDATA%/Claude/claude_desktop_config.json. Can also be used with LibreChat.",
    "category": "AI/ML",
    "stars": 134,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "security-audit": {
    "name": "MCP Security Audit Tool",
    "githubLink": "https://github.com/qianniuspace/mcp-security-audit",
    "package": "mcp-security-audit",
    "description": "A powerful MCP (Model Context Protocol) Server that audits npm package dependencies for security vulnerabilities with real-time checks and detailed reports.",
    "installCommand": "npx -y @smithery/cli install @qianniuspace/mcp-security-audit --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "--client",
      "--path",
      "--fix",
      "--severity"
    ],
    "usageInstructions": "1. Install using the provided command or clone the repository and run `npm install && npm run build`. 2. Configure the MCP server in Cline/Cursor with the specified JSON configuration. 3. Use the tool to audit npm packages for vulnerabilities. Optional parameters like `--fix` and `--severity` can be used to customize behavior.",
    "category": "Security",
    "stars": 34,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "logfire": {
    "name": "Logfire MCP Server",
    "githubLink": "https://github.com/pydantic/logfire-mcp",
    "package": "logfire-mcp",
    "description": "An MCP server that enables LLMs to retrieve and analyze OpenTelemetry traces and metrics from Logfire, providing tools for querying and exception analysis.",
    "installCommand": "uvx logfire-mcp@latest --read-token=YOUR_READ_TOKEN",
    "requiredEnvVars": [
      "LOGFIRE_READ_TOKEN"
    ],
    "optionalParams": [
      "LOGFIRE_BASE_URL",
      "age",
      "filepath",
      "query"
    ],
    "usageInstructions": "1. Install `uv` if not already installed. 2. Obtain a Logfire read token from the Logfire project settings. 3. Run the server using `uvx logfire-mcp@latest --read-token=YOUR_READ_TOKEN`. 4. Configure your MCP client (e.g., Cursor, Claude Desktop, Cline, or VS Code) to use the server. 5. Use the available tools like `find_exceptions_in_file` and `arbitrary_query` to analyze traces and metrics.",
    "category": "Analytics",
    "stars": 86,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/ar8y4w20eao.png"
  },
  "mattermost": {
    "name": "Mattermost MCP Server",
    "githubLink": "https://github.com/pvev/mattermost-mcp",
    "package": "mattermost-mcp",
    "description": "MCP Server for interacting with Mattermost API, enabling tools like topic monitoring and message management.",
    "installCommand": "git clone https://github.com/pvev/mattermost-mcp.git && cd mattermost-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "mattermostUrl",
      "token",
      "teamId"
    ],
    "optionalParams": [
      "monitoring.enabled",
      "monitoring.schedule",
      "monitoring.channels",
      "monitoring.topics",
      "monitoring.messageLimit",
      "notificationChannelId",
      "userId"
    ],
    "usageInstructions": "1. Create config.local.json with Mattermost credentials. 2. Run 'npm start'. 3. Use MCP tools or HTTP endpoints for monitoring and message management.",
    "category": "API Integration",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "a11y": {
    "name": "A11y MCP Server",
    "githubLink": "https://github.com/priyankark/a11y-mcp",
    "package": "a11y-mcp",
    "description": "An MCP server for performing accessibility audits on webpages using axe-core.",
    "installCommand": "npm install -g a11y-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "includeHtml",
      "tags"
    ],
    "usageInstructions": "To use this MCP server with Cline, add it to your MCP settings configuration file with the command 'npx a11y-mcp'. Available tools include 'audit_webpage' and 'get_summary'.",
    "category": "Accessibility",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "clarity": {
    "name": "Clarity Mcp Server",
    "githubLink": "https://github.com/pronitdas/clarity-mcp",
    "package": "clarity-mcp-server",
    "description": "An MCP server providing structured reasoning and thinking tools for AI assistants",
    "installCommand": "git clone https://github.com/pronitdas/clarity-mcp.git && cd clarity-mcp && pnpm install && pnpm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "transport"
    ],
    "usageInstructions": "1. Configure MCP client with: { \"command\": \"npx\", \"args\": [\"clarity-mcp-server\"] }\n2. Run server with: pnpm start\n3. Connect via stdio or configure custom transport in index.ts",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "lighthouse": {
    "name": "Lighthouse MCP Server",
    "githubLink": "https://github.com/priyankark/lighthouse-mcp",
    "package": "lighthouse-mcp",
    "description": "An MCP server that wraps Google's Lighthouse tool to measure performance metrics for web pages.",
    "installCommand": "npm install -g lighthouse-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "categories",
      "device",
      "throttling"
    ],
    "usageInstructions": "1. Install the package globally using `npm install -g lighthouse-mcp`.\n2. Add the MCP server configuration to your MCP settings file as shown in the README.\n3. Use the `run_audit` or `get_performance_score` tools with the required parameters to analyze web pages.\n4. Example: Run `lighthouse-mcp` directly or integrate it with Claude for automated analysis.",
    "category": "Analytics",
    "stars": 20,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "pubnub": {
    "name": "PubNub Model Context Protocol (MCP) Server",
    "githubLink": "https://github.com/pubnub/pubnub-mcp-server",
    "package": "@pubnub/mcp",
    "description": "A CLI-based Model Context Protocol (MCP) server that exposes PubNub SDK and API documentation, tools, and functionality to LLM-powered tools for improved AI agent interaction with PubNub services.",
    "installCommand": "npx -y @pubnub/mcp",
    "requiredEnvVars": [
      "PUBNUB_PUBLISH_KEY",
      "PUBNUB_SUBSCRIBE_KEY"
    ],
    "optionalParams": [
      "HTTP_PORT",
      "PUBNUB_PUBLISH_KEY",
      "PUBNUB_SUBSCRIBE_KEY"
    ],
    "usageInstructions": "1. Install Node.js (>= 18) and npm. 2. Use `npx -y @pubnub/mcp` to run the server. 3. Configure environment variables PUBNUB_PUBLISH_KEY and PUBNUB_SUBSCRIBE_KEY for API access. 4. Optionally, set HTTP_PORT for SSE mode. 5. Configure Cursor IDE with the MCP server command and environment variables in `~/.cursor/mcp.json` or `.cursor/mcp.json` in your project.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/400guziuh22.png"
  },
  "port": {
    "name": "Port MCP Server",
    "githubLink": "https://github.com/port-experimental/port-mcp-server",
    "package": "mcp-server-port",
    "description": "An MCP server enabling advanced automations and natural language interactions for developers and AI applications with Port IO.",
    "installCommand": "uvx mcp-server-port --client-id your_port_client_id --client-secret your_port_client_secret --region EU --log-level DEBUG",
    "requiredEnvVars": [
      "PORT_CLIENT_ID",
      "PORT_CLIENT_SECRET",
      "PORT_REGION"
    ],
    "optionalParams": [
      "PORT_LOG_LEVEL",
      "PORT_API_VALIDATION_ENABLED"
    ],
    "usageInstructions": "1. Create a Port Account at https://app.port.io/\n2. Obtain Port Credentials from Settings > Credentials\n3. Set required environment variables: PORT_CLIENT_ID, PORT_CLIENT_SECRET, PORT_REGION\n4. Run using: uvx mcp-server-port --client-id your_port_client_id --client-secret your_port_client_secret --region EU --log-level DEBUG\n5. For Docker: docker run -i --rm -e PORT_CLIENT_ID -e PORT_CLIENT_SECRET -e PORT_REGION -e PORT_LOG_LEVEL ghcr.io/port-labs/port-mcp-server:latest",
    "category": "API Integration",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "substack-fetcher": {
    "name": "Substack Reader",
    "githubLink": "https://github.com/pl728/substack-fetcher-mcp",
    "package": "substack-fetcher-mcp",
    "description": "A tool to fetch and read articles from Trade Companion by Adam Mancini on Substack, designed to work with Claude AI assistant.",
    "installCommand": "curl -sSf https://install.ultraviolet.dev | sh && uv venv && source .venv/bin/activate && uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "substack_cookies.json configuration"
    ],
    "usageInstructions": "1. Install uv package manager and create virtual environment. 2. Configure Substack authentication by creating substack_cookies.json with your Substack cookies. 3. Configure Claude to use this MCP server by adding the server configuration to Claude's config file.",
    "category": "AI/ML",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "chucknorris": {
    "name": "C̷h̷u̷c̷k̷N̷o̷r̷r̷i̷s̷ MCP Server",
    "githubLink": "https://github.com/pollinations/chucknorris",
    "package": "@pollinations/chucknorris",
    "description": "MCP gateway for specialized LLM enhancement prompts with dynamic schema adaptation.",
    "installCommand": "npx @pollinations/chucknorris",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this server, add the following configuration to your mcp_config.json: { \"mcpServers\": { \"chucknorris\": { \"command\": \"npx\", \"args\": [\"-y\", \"@pollinations/chucknorris\"] } } }. The server uses a dynamic schema approach to bypass jailbreak detection and is designed for security research and evaluation purposes.",
    "category": "AI/ML",
    "stars": 27,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "pollinations": {
    "name": "Pollinations AI MCP Server",
    "githubLink": "https://github.com/pollinations/pollinations",
    "package": "@pollinations/model-context-protocol",
    "description": "An open-source Model Context Protocol (MCP) server enabling AI assistants to generate images, text, and audio directly from text prompts.",
    "installCommand": "npx @pollinations/model-context-protocol",
    "requiredEnvVars": [],
    "optionalParams": [
      "model",
      "voice",
      "width",
      "height",
      "seed",
      "prompt"
    ],
    "usageInstructions": "1. Run the server using 'npx @pollinations/model-context-protocol'.\n2. AI assistants can connect to the server to generate images, text, and audio.\n3. Use the provided API endpoints for direct integration.\n4. For advanced usage, refer to the API documentation at https://github.com/pollinations/pollinations.",
    "category": "AI/ML",
    "stars": 2324,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/4k9o4hihgg6.png"
  },
  "webcrawl": {
    "name": "mcp-server-webcrawl",
    "githubLink": "https://github.com/pragmar/mcp-server-webcrawl",
    "package": "mcp-server-webcrawl",
    "description": "Advanced search and retrieval for web crawler data, providing full-text search, filtering, and integration with multiple crawlers like WARC, wget, InterroBot, Katana, and SiteOne.",
    "installCommand": "pip install mcp-server-webcrawl",
    "requiredEnvVars": [],
    "optionalParams": [
      "CRAWLER_TYPE",
      "SEARCH_FILTER",
      "PORT",
      "DEBUG",
      "MAX_RESULTS",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install using pip: pip install mcp-server-webcrawl\n2. Configure your web crawler (WARC, wget, etc.) and import the data.\n3. Use the boolean search syntax to query the indexed data.\n4. Optionally, use provided prompts like 'SEO Audit' or '404 Audit' for automated analysis.\n5. Access the server via the command line or integrate with Claude Desktop for AI-powered search.",
    "category": "Web Scraping",
    "stars": 12,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/eqwj1rghnld.png"
  },
  "cli": {
    "name": "PlanetScale CLI",
    "githubLink": "https://github.com/planetscale/cli",
    "package": "planetscale/cli",
    "description": "The `pscale` command line tool provides access to PlanetScale databases, including branching, deploy requests, and an MCP server for AI tools.",
    "installCommand": "brew install planetscale/tap/pscale",
    "requiredEnvVars": [
      "PLANETSCALE_SERVICE_TOKEN_ID",
      "PLANETSCALE_SERVICE_TOKEN"
    ],
    "optionalParams": [
      "MYSQL_CLIENT_PATH",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "After installation, configure your PlanetScale service token credentials by setting the PLANETSCALE_SERVICE_TOKEN_ID and PLANETSCALE_SERVICE_TOKEN environment variables. Use the `pscale mcp install` command to integrate the MCP server with AI tools like Claude Desktop or Cursor. For GitHub Actions, use the setup-pscale-action to install and run commands.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/iiveg3qdfws.png"
  },
  "project-hub": {
    "name": "Project Hub MCP Server",
    "githubLink": "https://github.com/peterparker57/project-hub-mcp-server",
    "package": "project-hub-mcp-server",
    "description": "An MCP server providing comprehensive project management, local Git functionality, and GitHub integration capabilities.",
    "installCommand": "git clone https://github.com/peterparker57/project-hub-mcp-server && cd project-hub-mcp-server && npm install",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "After installation, configure GITHUB_TOKEN environment variable. Start the server and use the provided CLI commands for project management, local Git operations, and GitHub integration.",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "mindbridge": {
    "name": "MindBridge MCP Server",
    "githubLink": "https://github.com/pinkpixel-dev/mindbridge-mcp",
    "package": "@pinkpixel/mindbridge",
    "description": "An AI command hub that unifies and orchestrates multiple LLM workflows through a single interface.",
    "installCommand": "npm install -g @pinkpixel/mindbridge",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "DEEPSEEK_API_KEY",
      "GOOGLE_API_KEY",
      "OPENROUTER_API_KEY",
      "OLLAMA_BASE_URL"
    ],
    "optionalParams": [
      "OPENAI_COMPATIBLE_API_KEY",
      "OPENAI_COMPATIBLE_API_BASE_URL",
      "OPENAI_COMPATIBLE_API_MODELS"
    ],
    "usageInstructions": "1. Install using 'npm install -g @pinkpixel/mindbridge'. 2. Configure environment variables in .env file. 3. Start server using 'mindbridge' command. 4. Use available tools like getSecondOpinion, listProviders, and listReasoningModels.",
    "category": "AI/ML",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/dsidlh9uimk.png"
  },
  "cribl": {
    "name": "Cribl MCP Server",
    "githubLink": "https://github.com/pebbletek/cribl-mcp",
    "package": "@pebbletek/cribl-mcp",
    "description": "An MCP server enabling AI interactions with Cribl API for data operations and management",
    "installCommand": "npx @pebbletek/cribl-mcp",
    "requiredEnvVars": [
      "CRIBL_BASE_URL",
      "CRIBL_AUTH_TYPE",
      "CRIBL_CLIENT_ID",
      "CRIBL_CLIENT_SECRET"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Set required environment variables (CRIBL_BASE_URL, CRIBL_AUTH_TYPE, CRIBL_CLIENT_ID, CRIBL_CLIENT_SECRET)\n2. Run using: npx @pebbletek/cribl-mcp\n3. For local development: git clone https://github.com/pebbletek/cribl-mcp.git && cd cribl-mcp && npm install\n4. Configure MCP client to connect to the server",
    "category": "API Integration",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/qshp80j1ef.png"
  },
  "mermaid": {
    "name": "Mermaid MCP Server",
    "githubLink": "https://github.com/peng-shawn/mermaid-mcp-server",
    "package": "@peng-shawn/mermaid-mcp-server",
    "description": "A Model Context Protocol (MCP) server that converts Mermaid diagrams to PNG images or SVG files using Puppeteer for high-quality headless browser rendering.",
    "installCommand": "npx -y @peng-shawn/mermaid-mcp-server",
    "requiredEnvVars": [
      "CONTENT_IMAGE_SUPPORTED"
    ],
    "optionalParams": [
      "theme",
      "backgroundColor",
      "outputFormat",
      "name",
      "folder"
    ],
    "usageInstructions": "1. Install the server using the command: npx -y @peng-shawn/mermaid-mcp-server.\n2. Set the environment variable CONTENT_IMAGE_SUPPORTED to control whether images are returned directly or saved to disk.\n3. Use the generate tool with Mermaid diagram code and optional parameters like theme, background color, output format, name, and folder.\n4. For Docker or Smithery environments, ensure Puppeteer dependencies are configured correctly.",
    "category": "Development Tools",
    "stars": 127,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "mcpollinations": {
    "name": "MCPollinations Multimodal MCP Server",
    "githubLink": "https://github.com/pinkpixel-dev/MCPollinations",
    "package": "@pinkpixel/mcpollinations",
    "description": "A Model Context Protocol (MCP) server that enables AI assistants to generate images, text, and audio through the Pollinations APIs",
    "installCommand": "npx -y @smithery/cli install @pinkpixel-dev/mcpollinations --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "outputPath",
      "fileName",
      "format",
      "model",
      "width",
      "height",
      "seed",
      "enhance",
      "safe",
      "saveToFile"
    ],
    "usageInstructions": "1. Install via npx: 'npx -y @smithery/cli install @pinkpixel-dev/mcpollinations --client claude'\n2. Run the server: 'npx @pinkpixel/mcpollinations'\n3. Generate an MCP config file: 'npx @pinkpixel/mcpollinations generate-config'\n4. Copy the generated 'mcp.json' file to your application's MCP settings\n5. Use commands like 'Generate an image of a sunset over the ocean using MCPollinations'",
    "category": "AI/ML",
    "stars": 26,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/c8bi3gvt7gl.png"
  },
  "taskflow": {
    "name": "TaskFlow MCP",
    "githubLink": "https://github.com/pinkpixel-dev/taskflow-mcp",
    "package": "@pinkpixel/taskflow-mcp",
    "description": "A task management Model Context Protocol (MCP) server for planning and executing tasks with AI assistants, featuring task planning, subtasks, progress tracking, user approval steps, and export options.",
    "installCommand": "npm install -g @pinkpixel/taskflow-mcp",
    "requiredEnvVars": [
      "TASK_MANAGER_FILE_PATH"
    ],
    "optionalParams": [
      "MCP configuration settings",
      "export formats",
      "task and subtask details",
      "notes",
      "dependencies"
    ],
    "usageInstructions": "1. Install the package globally with `npm install -g @pinkpixel/taskflow-mcp`.\n2. Start the server with `taskflow-mcp`.\n3. Configure the task storage path using `TASK_MANAGER_FILE_PATH`.\n4. Use the provided MCP tools to plan tasks, manage subtasks, track progress, and export results.\n5. Configure your MCP client to use the server with an `mcp_config.json` file as described in the README.",
    "category": "Productivity",
    "stars": 15,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/iza4s9zi2xf.png"
  },
  "blockchain-query": {
    "name": "MCP Blockchain Query Server",
    "githubLink": "https://github.com/pavel-bc/mcp-blockchain-query",
    "package": "mcp-blockchain-query",
    "description": "Model Context Protocol (MCP) server for querying Bitcoin blockchain data via Blockchain.com APIs.",
    "installCommand": "python -m venv venv && source venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "--port",
      "--transport"
    ],
    "usageInstructions": "Activate the virtual environment and run the server with 'python main.py' for stdio mode or 'python main.py --transport sse --port 8000' for SSE mode. Use the provided tools to query blockchain data.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "redshift-js": {
    "name": "Redshift MCP Server",
    "githubLink": "https://github.com/paschmaria/redshift-js-mcp-server",
    "package": "redshift-js-mcp-server",
    "description": "An MCP server for Amazon Redshift implemented in TypeScript, providing rich contextual information about Redshift data warehouses to MCP-compatible clients.",
    "installCommand": "git clone https://github.com/paschmaria/redshift-js-mcp-server.git && cd redshift-js-mcp-server && npm install && npm run build",
    "requiredEnvVars": [
      "DATABASE_URL"
    ],
    "optionalParams": [
      "timeout",
      "keepalives",
      "keepalives_idle"
    ],
    "usageInstructions": "1. Configure DATABASE_URL with your Redshift connection details.\n2. Run the server using 'npm start' or 'node dist/index.js'.\n3. Configure your MCP client (e.g., Cursor IDE) to use the server.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/dhaj5rvm344.jpg"
  },
  "servers": {
    "name": "MCP-Servers",
    "githubLink": "https://github.com/parthshr370/MCP-Servers",
    "package": "Not available as a standalone package",
    "description": "A collection of Model Context Protocol (MCP) servers for various use cases, integrated with CAMEL-AI. Includes servers for file system operations, SQL database interactions, and markdown document handling.",
    "installCommand": "git clone https://github.com/parthshr370/MCP-Servers && cd MCP-Servers && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository using the provided install command. 2. Navigate into the directory and install dependencies using pip. 3. Explore subdirectories for individual server implementations (e.g., filesystem_server, sql_server). 4. Follow each server's specific setup instructions for execution.",
    "category": "Development Tools",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "voyp": {
    "name": "Voyp Model Context Protocol server",
    "githubLink": "https://github.com/paulotaylor/voyp-mcp",
    "package": "@paulotaylor/voyp-mcp",
    "description": "Enables AI assistants like Claude to integrate with VOYP's calling capabilities, allowing AI models to make phone calls and monitor their progress.",
    "installCommand": "npx -y @smithery/cli install @paulotaylor/voyp-mcp --client claude",
    "requiredEnvVars": [
      "VOYP_API_KEY"
    ],
    "optionalParams": [
      "command",
      "args",
      "env"
    ],
    "usageInstructions": "1. Install via Smithery using 'npx -y @smithery/cli install @paulotaylor/voyp-mcp --client claude'. 2. Configure Claude Desktop by editing claude_desktop_config.json to include Voyp server configuration with your VOYP_API_KEY. 3. Restart Claude Desktop to see the Voyp MCP server available.",
    "category": "AI/ML",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "cursor-apple-notes": {
    "name": "Cursor MCP Apple Notes Plugin",
    "githubLink": "https://github.com/packetnomad/cursor-mcp-apple-notes",
    "package": "packetnomad/cursor-mcp-apple-notes",
    "description": "A Cursor MCP plugin for interacting with Apple Notes directly from the editor, allowing search, creation, and reading of notes.",
    "installCommand": "Open Cursor, press Cmd/Ctrl + Shift + P, type 'MCP: Install Plugin', and enter 'packetnomad/cursor-mcp-apple-notes'",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After installation, use commands in Cursor: 'MCP: notes.search <query>' to search notes, 'MCP: notes.create' to create a new note, and 'MCP: notes.read <id>' to read a note. Requires macOS and Cursor with MCP support.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "domaintools": {
    "name": "mcp-domaintools",
    "githubLink": "https://github.com/patrickdappollonio/mcp-domaintools",
    "package": "ghcr.io/patrickdappollonio/mcp-domaintools",
    "description": "A Model Context Protocol (MCP) server providing comprehensive network and domain analysis capabilities including DNS lookups, WHOIS queries, TLS certificate analysis, and HTTP endpoint monitoring.",
    "installCommand": "brew install patrickdappollonio/tap/mcp-domaintools",
    "requiredEnvVars": [],
    "optionalParams": [
      "--remote-server-address=URL",
      "--custom-whois-server=ADDRESS",
      "--timeout=DURATION",
      "--ping-timeout=DURATION",
      "--ping-count=NUMBER",
      "--http-ping-timeout=DURATION",
      "--http-ping-count=NUMBER",
      "--tls-timeout=DURATION",
      "--sse",
      "--sse-port=PORT"
    ],
    "usageInstructions": "After installation, run `mcp-domaintools` in stdio mode for integration with editors or tools. For web-based integrations, run `mcp-domaintools --sse --sse-port=3000` to enable Server-Sent Events (SSE) mode. Configure additional options using command-line flags like `--remote-server-address`, `--custom-whois-server`, and `--timeout` as needed.",
    "category": "Network Tools",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/l6394ygdf9c.png"
  },
  "get-terminal-logs": {
    "name": "MCP Get Terminal Logs",
    "githubLink": "https://github.com/ozgrozer/mcp-get-terminal-logs",
    "package": "mcp-get-terminal-logs",
    "description": "A tool for retrieving terminal logs, likely integrated with Model Context Protocol (MCP) for structured log handling.",
    "installCommand": "git clone https://github.com/ozgrozer/mcp-get-terminal-logs && cd mcp-get-terminal-logs && npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After cloning the repository and running 'npm install', additional setup steps may be required based on the project's configuration. Refer to the provided YouTube and X links for detailed setup instructions.",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "src-tree": {
    "name": "MCP Source Tree Server",
    "githubLink": "https://github.com/owayo/mcp-src-tree",
    "package": "mcp-src-tree",
    "description": "An MCP server that generates a file tree of a specified directory, excluding files and directories based on .gitignore rules.",
    "installCommand": "curl -LsSf https://astral.sh/uv/install.sh | sh && cd /path/to/mcp-src-tree && uv sync",
    "requiredEnvVars": [],
    "optionalParams": [
      "directory path to scan"
    ],
    "usageInstructions": "1. Install uv if not already installed. 2. Navigate to the project directory. 3. Run 'uv sync' to install dependencies. 4. Configure Claude for Desktop by adding the mcpServers configuration to claude_desktop_config.json. 5. Specify the directory to scan in Claude using a command like '/Users/xxx/GitHub/xxx/ のソースツリーを確認してください'.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "openapi-client-generator": {
    "name": "OpenAPI Client Generator MCP Server",
    "githubLink": "https://github.com/orhanveli/openapi-client-generator-mcp",
    "package": "openapi-client-generator-mcp",
    "description": "An MCP server that generates API clients using TypeScript based on OpenAPI/Swagger specs.",
    "installCommand": "git clone https://github.com/orhanveli/openapi-client-generator-mcp.git && cd openapi-client-generator-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "PATH TO index.js in claude_desktop_config.json"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'. 2. Build the server using 'npm run build'. 3. Configure Claude Desktop by adding the server config to claude_desktop_config.json, specifying the path to the built index.js.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "airbnb": {
    "name": "Airbnb MCP Server",
    "githubLink": "https://github.com/openbnb-org/mcp-server-airbnb",
    "package": "@openbnb/mcp-server-airbnb",
    "description": "MCP Server for searching Airbnb listings and retrieving listing details",
    "installCommand": "npx -y @openbnb/mcp-server-airbnb",
    "requiredEnvVars": [],
    "optionalParams": [
      "--ignore-robots-txt"
    ],
    "usageInstructions": "1. Ensure Node.js is installed. 2. Add the server configuration to claude_desktop_config.json. 3. Restart Claude Desktop.",
    "category": "API Integration",
    "stars": 223,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "source-relation": {
    "name": "MCP Source Relation Server",
    "githubLink": "https://github.com/owayo/mcp-source-relation",
    "package": "mcp-source-relation",
    "description": "解析対象ディレクトリのsrc配下のソースコードの関連性を解析し、ファイル間の依存関係を特定するMCPサーバー。 Claudeとの連携によりプロジェクトの依存関係を素早く確認可能。",
    "installCommand": "curl -LsSf https://astral.sh/uv/install.sh | sh && cd /path/to/mcp-source-relation && uv sync",
    "requiredEnvVars": [
      "MCP_SOURCE_RELATION_PROJECT_DIR"
    ],
    "optionalParams": [
      "MCP_SOURCE_RELATION_LOG_LEVEL",
      "MCP_SOURCE_RELATION_ANALYZE_EXTENSIONS",
      "MCP_SOURCE_RELATION_EXCLUDE_PATHS"
    ],
    "usageInstructions": "1. プロジェクトディレクトリに移動\n2. `uv sync`で依存関係をインストール\n3. `claude_desktop_config.json`に設定を追加\n4. Claudeで`/path/to/src`の依存関係を確認する指示を出す\n5. 必要に応じて`MCP_SOURCE_RELATION_LOG_LEVEL`などの環境変数を設定",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "opslevel": {
    "name": "OpsLevel MCP Server",
    "githubLink": "https://github.com/opslevel/opslevel-mcp",
    "package": "opslevel-mcp",
    "description": "An MCP server that provides AIs with read-only access to OpsLevel account data including actions, campaigns, checks, components, documentation, domains, filters, infrastructure, repositories, systems, teams, and users.",
    "installCommand": "brew install opslevel/tap/opslevel-mcp",
    "requiredEnvVars": [
      "OPSLEVEL_API_TOKEN"
    ],
    "optionalParams": [
      "MCP server configuration options for specific AI tools like Claude, VS Code, Cursor, Warp, and Windsurf"
    ],
    "usageInstructions": "1. Install the MCP Server using Homebrew, Docker, or manual download from GitHub releases. 2. Set the OPSLEVEL_API_TOKEN environment variable with your API token. 3. Configure the MCP server in your AI tool of choice (Claude, VS Code, Cursor, Warp, or Windsurf) using the provided JSON configuration examples. 4. Restart the AI tool to apply the configuration.",
    "category": "API Integration",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/yr9fbmwit8l.png"
  },
  "eagle": {
    "name": "MCP Eagle Server",
    "githubLink": "https://github.com/olegshilin/mcp-eagle",
    "package": "mcp-eagle",
    "description": "An MCP server for interfacing with the Eagle app, enabling integration with Claude Desktop.",
    "installCommand": "git clone https://github.com/olegshilin/mcp-eagle && cd mcp-eagle && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "command",
      "args"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Build the server using 'npm run build'.\n3. Configure Claude Desktop by adding the MCP server configuration to '~/Library/Application Support/Claude/claude_desktop_config.json'.\n4. Run the server using 'npm start' or configure Claude to run it automatically.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "osp": {
    "name": "Open Strategy Partners (OSP) Marketing Tools for LLMs",
    "githubLink": "https://github.com/open-strategy-partners/osp",
    "package": "osp_marketing_tools",
    "description": "A comprehensive suite of tools for technical marketing content creation, optimization, and product positioning based on Open Strategy Partners' methodologies.",
    "installCommand": "uvx --from git+https://github.com/open-strategy-partners/osp_marketing_tools@main osp_marketing_tools",
    "requiredEnvVars": [],
    "optionalParams": [
      "command",
      "args"
    ],
    "usageInstructions": "1. Install Claude Desktop or another MCP-enabled AI tool. 2. Install Python 3.10 or higher. 3. Install uv using 'pip install --user uv' (Windows) or 'brew install uv' (macOS). 4. Configure Claude Desktop by adding the OSP marketing tools server configuration to 'claude_desktop_config.json'.",
    "category": "Marketing Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "nody": {
    "name": "Nody",
    "githubLink": "https://github.com/olympeio/nody",
    "package": "@olympeio/nody-vmcp",
    "description": "Nody is a developer-first platform for managing and deploying Model Context Protocol (MCP) servers and toolsets, enabling customization, secure configuration storage, and centralized management of AI tool collections.",
    "installCommand": "npm install -g @olympeio/nody-vmcp",
    "requiredEnvVars": [
      "NODY_CLIENT_ID"
    ],
    "optionalParams": [
      "NODY_USER_KEY"
    ],
    "usageInstructions": "Once installed, configure your Nody client by adding the following JSON configuration to your favorite MCP client:\n\n{\n  \"mcpServers\": {\n    \"<Nody client name>\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@olympeio/nody-vmcp@latest\"\n      ],\n      \"env\": {\n        \"NODY_CLIENT_ID\": \"<Nody client id>\",\n        \"NODY_USER_KEY\": \"<your very own secret encryption key>\"\n      }\n    }\n  }\n}\n\nRun the Nody client to load the list of tools included in the collection with the configured customizations.",
    "category": "AI/ML",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/opyvjycxrze.png"
  },
  "solana": {
    "name": "Solana MCP Server",
    "githubLink": "https://github.com/openSVM/solana-mcp-server",
    "package": "solana-mcp-server",
    "description": "A Model Context Protocol (MCP) server that provides comprehensive access to Solana blockchain data through Cline, implementing a wide range of Solana RPC methods for querying blockchain information via natural language conversations.",
    "installCommand": "TEMP_DIR=$(mktemp -d) && cd \"$TEMP_DIR\" && git clone https://github.com/opensvm/solana-mcp-server.git . && cargo build --release && CONFIG_DIR=\"${XDG_CONFIG_HOME:-$HOME/.config}/claude\" && mkdir -p \"$CONFIG_DIR\" && echo \"{\\\"mcpServers\\\":{\\\"solana\\\":{\\\"command\\\":\\\"$PWD/target/release/solana-mcp-server\\\",\\\"env\\\":{\\\"SOLANA_RPC_URL\\\":\\\"https://api.mainnet-beta.solana.com\\\"}}}}\" > \"$CONFIG_DIR/config.json\" || { rm -rf \"$TEMP_DIR\"; exit 1; }",
    "requiredEnvVars": [
      "SOLANA_RPC_URL"
    ],
    "optionalParams": [
      "CLAUDERPC_PORT",
      "LOG_LEVEL",
      "MAX_CONCURRENT_REQUESTS",
      "ENABLE_DEBUG_LOGS",
      "SOLANA_RPC_TIMEOUT",
      "CACHE_TTL",
      "RATE_LIMIT",
      "ENABLE_SSL",
      "SSL_CERT_PATH",
      "SSL_KEY_PATH"
    ],
    "usageInstructions": "1. Clone the repository and build the project using the provided script or download the appropriate binary from the releases page.\n2. Configure the Solana RPC URL in the config.json file located in $HOME/.config/claude.\n3. Start the server by running the binary or executing the built release.\n4. Use the server to query Solana blockchain data via natural language conversations or programmatic RPC calls.\n5. For deployment, use the provided deployment scripts (deploy-local.sh, deploy-docker.sh, etc.) for different environments.",
    "category": "Blockchain/API Integration",
    "stars": 36,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "zipic": {
    "name": "Zipic MCP Server",
    "githubLink": "https://github.com/okooo5km/zipic-mcp-server",
    "package": "zipic-mcp-server",
    "description": "An MCP server providing image compression capabilities through quick and advanced compression tools.",
    "installCommand": "curl -fsSL https://raw.githubusercontent.com/okooo5km/zipic-mcp-server/main/install.sh | bash",
    "requiredEnvVars": [],
    "optionalParams": [
      "level",
      "format",
      "width",
      "height",
      "suffix",
      "directory"
    ],
    "usageInstructions": "After installation, configure for Claude.app or Cursor by adding the server command to their respective settings files. Use the 'quickCompress' or 'advancedCompress' tools by providing image URLs and optional parameters.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "local-git": {
    "name": "Local Git MCP Server",
    "githubLink": "https://github.com/okdshin/local-git-mcp-server",
    "package": "local-git-mcp-server",
    "description": "A Python-based Git repository management server using the MCP (Message-based Communication Protocol) framework for creating, managing, and interacting with local Git repositories.",
    "installCommand": "git clone https://github.com/okdshin/local-git-mcp-server && cd local-git-mcp-server && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "--repositories-dir"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using the install command. 2. Run the server with 'python git_server.py' or specify a custom repositories directory with '--repositories-dir [path]'. 3. The server supports Git operations like repository creation, file addition, committing, pulling, pushing, and diff generation.",
    "category": "Version Control",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "datetime": {
    "name": "MCP DateTime",
    "githubLink": "https://github.com/odgrim/mcp-datetime",
    "package": "mcp-datetime",
    "description": "An MCP server providing datetime and timezone information to AI agents and chat interfaces.",
    "installCommand": "npm install -g mcp-datetime",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "URI_PREFIX"
    ],
    "usageInstructions": "Run 'mcp-datetime' for standard I/O mode or 'mcp-datetime --sse' for Server-Sent Events mode. Use '--port' and '--prefix' options to customize SSE mode.",
    "category": "AI/ML",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "digitalocean-database": {
    "name": "DigitalOcean Database MCP Server",
    "githubLink": "https://github.com/oladejibidmus/DigitalOcean-Database-MCP-Server",
    "package": "digitalocean-database-mcp",
    "description": "A Model Context Protocol (MCP) server that connects AI-powered IDEs to DigitalOcean managed PostgreSQL and MySQL databases using an API token for secure access.",
    "installCommand": "git clone https://github.com/oladejibidmus/DigitalOcean-Database-MCP-Server.git && cd digitalocean-database-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "DO_API_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "MAX_CONNECTIONS",
      "SSL_MODE",
      "TIMEOUT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Build the project with `npm run build`. 3. Set your DigitalOcean API token via `DO_API_TOKEN` or use the command `Set my DigitalOcean API token: [your_token]` in your IDE. 4. Configure your IDE to use the MCP server by pointing it to `dist/index.js`. 5. Use natural language commands to interact with your databases.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/cghdqyxr56.png"
  },
  "edit-file-lines": {
    "name": "Edit File Lines MCP Server",
    "githubLink": "https://github.com/oakenai/mcp-edit-file-lines",
    "package": "mcp-edit-file-lines",
    "description": "A TypeScript-based MCP server that provides tools for making precise line-based edits to text files within allowed directories.",
    "installCommand": "npm install -g mcp-edit-file-lines",
    "requiredEnvVars": [
      "EDITOR_ACCESS_TOKEN",
      "ALLOWED_EDIT_DIRS"
    ],
    "optionalParams": [
      "MAX_EDIT_LINES",
      "DRY_RUN_DEFAULT",
      "EDITOR_LOG_LEVEL",
      "EDITOR_TIMEOUT_MS"
    ],
    "usageInstructions": "1. Set required environment variables: EDITOR_ACCESS_TOKEN and ALLOWED_EDIT_DIRS\n2. Use the edit_file_lines endpoint with JSON payload containing path, edits, and dryRun flag\n3. Approve changes using approve_edit with the returned state ID\n4. Verify changes with get_file_lines\n5. Optional: Configure MAX_EDIT_LINES and EDITOR_LOG_LEVEL for additional control",
    "category": "Development Tools",
    "stars": 26,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "unity": {
    "name": "Unity MCP Server",
    "githubLink": "https://github.com/nurture-tech/unity-mcp-server",
    "package": "@nurture-tech/unity-mcp-runner",
    "description": "A Model Context Protocol server for Unity, providing multimodal vision, powerful search, and superior code analysis capabilities.",
    "installCommand": "npm install -g @nurture-tech/unity-mcp-runner || npx -y @nurture-tech/unity-mcp-runner",
    "requiredEnvVars": [],
    "optionalParams": [
      "UNITY_PATH",
      "PROJECT_PATH"
    ],
    "usageInstructions": "1. Install Node.js. 2. Configure mcp.json with Unity Editor and project paths. Example: { \"mcpServers\": { \"unity\": { \"command\": \"npx\", \"args\": [\"-y\", \"@nurture-tech/unity-mcp-runner\", \"-unityPath\", \"<path to unity editor>\", \"-projectPath\", \"<path to unity project>\"] } } }",
    "category": "Development Tools",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "smithery": {
    "name": "Novu MCP Server",
    "githubLink": "https://github.com/novuhq/smithery-mcp",
    "package": "smithery-mcp",
    "description": "A TypeScript implementation of a Model Context Protocol (MCP) server for Novu, enabling AI agents to interact with Novu's notification infrastructure.",
    "installCommand": "git clone https://github.com/novuhq/smithery-mcp && cd smithery-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "NOVU_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Configure Novu API key in smithery.yml. 3. Build the project using 'npm run build'. 4. Start the MCP server with 'npm start'. For development, use 'npm run dev'.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "nx-console": {
    "name": "Nx Console",
    "githubLink": "https://github.com/nrwl/nx-console",
    "package": "nx-mcp",
    "description": "Nx Console is a UI tool for Nx and Lerna monorepos, providing visual workflows, AI enhancements, and deep insights into your workspace.",
    "installCommand": "npm install -g nx-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "NX_CONSOLE_PORT",
      "NX_CONSOLE_LOG_LEVEL",
      "NX_CONSOLE_AI_PROVIDER"
    ],
    "usageInstructions": "1. Install the Nx Console extension for your editor (VSCode or JetBrains). 2. Ensure you are in an Nx or Lerna workspace. 3. Use the Nx Console UI to run generators, visualize project graphs, and manage tasks. 4. For AI enhancements, configure the AI provider and enable context sharing in the settings.",
    "category": "Development Tools",
    "stars": 1366,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/xl0wn892y3l.svg"
  },
  "norman": {
    "name": "Norman Finance MCP Server",
    "githubLink": "https://github.com/norman-finance/norman-mcp-server",
    "package": "norman-mcp-server",
    "description": "This Model Context Protocol (MCP) server enables AI to interact with the Norman Finance API, allowing access to accounting, invoices, companies, clients, taxes, and more through a standardized protocol.",
    "installCommand": "npx mcp-remote https://mcp.norman.finance/sse",
    "requiredEnvVars": [
      "NORMAN_EMAIL",
      "NORMAN_PASSWORD",
      "NORMAN_ENVIRONMENT"
    ],
    "optionalParams": [
      "NORMAN_API_TIMEOUT",
      "NORMAN_MCP_HOST",
      "NORMAN_MCP_PORT",
      "NORMAN_MCP_PUBLIC_URL"
    ],
    "usageInstructions": "1. Create an account on Norman Finance (https://app.norman.finance/sign-up). 2. Use the remote MCP server at https://mcp.norman.finance/sse for OAuth-based authentication. 3. For local setup, install uv and run the server with environment variables for authentication. 4. Add the server to Claude Desktop or other MCP-compatible clients using the provided configuration.",
    "category": "API Integration",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/75r9e4vdtcc.jpeg"
  },
  "gitee": {
    "name": "Gitee MCP Server",
    "githubLink": "https://github.com/normal-coder/gitee-mcp-server",
    "package": "gitee-mcp-server",
    "description": "MCP server for operating Gitee repositories, issues, and pull requests through AI",
    "installCommand": "npx -y @smithery/cli install @normal-coder/gitee-mcp-server --client claude",
    "requiredEnvVars": [
      "GITEE_PERSONAL_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "GITEE_API_BASE_URL",
      "DEBUG"
    ],
    "usageInstructions": "1. Install via Smithery using 'npx -y @smithery/cli install @normal-coder/gitee-mcp-server --client claude'. 2. Configure GITEE_PERSONAL_ACCESS_TOKEN environment variable. 3. Optionally set GITEE_API_BASE_URL and DEBUG if needed. 4. Run MCP server via NPX or Docker.",
    "category": "API Integration",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "restart": {
    "name": "MCP Server Restart",
    "githubLink": "https://github.com/non-dirty/mcp-server-restart",
    "package": "mcp-server-restart",
    "description": "An MCP server for restarting Claude Desktop on Mac",
    "installCommand": "uvx mcp-server-restart",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this MCP server, add the following configuration to your Claude Desktop config file (~/Library/Application Support/Claude/claude_desktop_config.json):\n{\n \"mcpServers\": {\n \"mcp-server-restart\": {\n \"command\": \"uvx\",\n \"args\": [\n \"mcp-server-restart\"\n ]\n }\n }\n}\nThen ask Claude Desktop to 'restart Claude'",
    "category": "Productivity",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "cursor-trivy": {
    "name": "Trivy Security Scanner MCP Server",
    "githubLink": "https://github.com/norbinsh/cursor-mcp-trivy",
    "package": "cursor-mcp-trivy",
    "description": "A Model Context Protocol (MCP) server that provides Trivy security scanning capabilities through a standardized interface.",
    "installCommand": "python -m venv .venv && source .venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "workspace",
      "pkg_name",
      "target_version"
    ],
    "usageInstructions": "1. Start the server using the command: python server.py --transport sse --port 54321\n2. Configure Cursor IDE by adding the server URL: http://127.0.0.1:54321/sse\n3. Add a .cursorrules file with the provided configuration to automate security scans on dependency changes.\n4. Use the prompt 'Please scan my project for security vulnerabilities' to manually trigger scans.",
    "category": "Security",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "idb": {
    "name": "MCP Server for Facebook's iOS Development Bridge",
    "githubLink": "https://github.com/noahlozevski/mcp-idb",
    "package": "@noahlozevski/mcp-idb",
    "description": "MCP server integration for Facebook's iOS Development Bridge, enabling automated iOS device management and test execution through MCP.",
    "installCommand": "npx -y @noahlozevski/mcp-idb",
    "requiredEnvVars": [],
    "optionalParams": [
      "idb configuration options through mcp-config.json"
    ],
    "usageInstructions": "1. Install idb companion: 'brew tap facebook/fb && brew install idb-companion'. 2. Configure mcp-config.json with 'idb' server details. 3. Start the server using 'npx -y @noahlozevski/mcp-idb'.",
    "category": "Development Tools",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "render": {
    "name": "Render MCP Server",
    "githubLink": "https://github.com/niyogi/render-mcp",
    "package": "@niyogi/render-mcp",
    "description": "An MCP server that allows AI assistants to interact with the Render API for deploying and managing services on Render.com.",
    "installCommand": "npm install -g @niyogi/render-mcp",
    "requiredEnvVars": [
      "RENDER_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "DEBUG",
      "AUTO_APPROVE",
      "DISABLED"
    ],
    "usageInstructions": "1. Get your Render API key from the Render Dashboard. 2. Configure the MCP server with your key using `node bin/render-mcp.js configure --api-key=YOUR_API_KEY`. 3. Start the server with `node bin/render-mcp.js start`. 4. Use with AI assistants like Cline, Windsurf/Cursor, or custom Claude API integrations by configuring the MCP server connection.",
    "category": "DevOps/Cloud Services",
    "stars": 12,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "myip": {
    "name": "MyIP MCP Server",
    "githubLink": "https://github.com/nikolaypavlov/mcp-myip",
    "package": "mcp-myip",
    "description": "An MCP server that retrieves your public IP address using ifconfig.me.",
    "installCommand": "uvx mcp-myip",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After installation, the server provides a `get_ip_info` tool to retrieve your public IP address. No additional configuration or environment variables are required.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "nodit": {
    "name": "Nodit MCP Server",
    "githubLink": "https://github.com/noditlabs/nodit-mcp-server",
    "package": "@noditlabs/nodit-mcp-server",
    "description": "A Model Context Protocol (MCP) server that connects AI agents and developers to structured, context-ready blockchain data across multiple networks through Nodit's Web3 infrastructure.",
    "installCommand": "npx @noditlabs/nodit-mcp-server@latest",
    "requiredEnvVars": [
      "NODIT_API_KEY"
    ],
    "optionalParams": [
      "NODIT_API_ENDPOINT",
      "LOG_LEVEL",
      "MAX_RETRIES",
      "TIMEOUT_MS"
    ],
    "usageInstructions": "1. Install Node.js 18+. 2. Get a Nodit API key from https://nodit.lambda256.io/. 3. Run 'npx @noditlabs/nodit-mcp-server@latest' or set up locally by cloning the repo and running 'npm install && npm run build'. 4. Set your NODIT_API_KEY environment variable. 5. Communicate via JSON-RPC over stdio using commands like 'echo '{\"method\":\"tools/list\",\"params\":{}}' | node build/index.js'.",
    "category": "Blockchain Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/mgyfcc42yjj.png"
  },
  "nile": {
    "name": "Nile MCP Server",
    "githubLink": "https://github.com/niledatabase/nile-mcp-server",
    "package": "@niledatabase/nile-mcp-server",
    "description": "An MCP server implementation for Nile database platform, enabling LLM applications to interact with Nile through a standardized interface.",
    "installCommand": "npm install @niledatabase/nile-mcp-server",
    "requiredEnvVars": [
      "NILE_API_KEY",
      "NILE_WORKSPACE_SLUG"
    ],
    "optionalParams": [
      "MCP_SERVER_MODE"
    ],
    "usageInstructions": "1. Create a .env file with NILE_API_KEY and NILE_WORKSPACE_SLUG\n2. Configure Claude Desktop/Cursor with the server command\n3. Build the project using 'npm run build'\n4. Start the server using 'node dist/index.js' or 'npm run dev'",
    "category": "API Integration",
    "stars": 15,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/l4ggoh8axe7.jpg"
  },
  "mongodb-model-context-protocol-": {
    "name": "MongoDB MCP Server",
    "githubLink": "https://github.com/nickiiitu/MongoDB-Model-Context-Protocol-MCP-",
    "package": "mongo-mcp",
    "description": "An MCP server enabling LLMs to interact with MongoDB databases through natural language queries.",
    "installCommand": "npx mongo-mcp mongodb://<username>:<password>@<host>:<port>/<database>?authSource=admin",
    "requiredEnvVars": [
      "MONGODB_CONNECTION_URL"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "1. Ensure Node.js 18+ is installed.\n2. Configure Claude Desktop config file with 'npx mongo-mcp' command and MongoDB connection URL.\n3. For local sandbox testing, use Docker Compose to start MongoDB and seed test data.",
    "category": "Databases",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "duckduckgo": {
    "name": "DuckDuckGo Search MCP Server",
    "githubLink": "https://github.com/nickclyde/duckduckgo-mcp-server",
    "package": "duckduckgo-mcp-server",
    "description": "A Model Context Protocol (MCP) server that provides web search capabilities through DuckDuckGo, with additional features for content fetching and parsing.",
    "installCommand": "uv pip install duckduckgo-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "max_results"
    ],
    "usageInstructions": "1. Install the server using `uv pip install duckduckgo-mcp-server`. 2. For local development, use the MCP CLI with `mcp dev server.py`. 3. To use with Claude Desktop, configure the `claude_desktop_config.json` file with the MCP server command. 4. The server provides two tools: `search` for querying DuckDuckGo and `fetch_content` for retrieving webpage content. 5. Ensure rate limits are respected (30 search requests and 20 content fetches per minute).",
    "category": "Web Scraping",
    "stars": 284,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "release-notes": {
    "name": "Release Notes Server",
    "githubLink": "https://github.com/nickbaumann98/release-notes-server",
    "package": "release-notes-server",
    "description": "An MCP server that generates beautiful release notes from GitHub repositories by fetching and organizing commits.",
    "installCommand": "git clone https://github.com/nickbaumann98/release-notes-server && cd release-notes-server && npm install && npm run build",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "owner",
      "repo",
      "commitRange.fromCommit",
      "commitRange.toCommit",
      "format.type",
      "format.groupBy",
      "format.includeStats"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Configure the server in your MCP configuration with the path to the built index.js. 3. Set GITHUB_TOKEN environment variable with your GitHub personal access token. 4. Use the 'generate_release_notes' tool to create release notes for your repositories.",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "chrome-tools": {
    "name": "Chrome Tools MCP Server",
    "githubLink": "https://github.com/nicholmikey/chrome-tools-MCP",
    "package": "@nicholmikey/chrome-tools",
    "description": "An MCP server providing tools for interacting with Chrome through its DevTools Protocol, enabling remote control of Chrome tabs.",
    "installCommand": "npm install @nicholmikey/chrome-tools",
    "requiredEnvVars": [
      "CHROME_DEBUG_URL"
    ],
    "optionalParams": [
      "CHROME_CONNECTION_TYPE",
      "CHROME_ERROR_HELP"
    ],
    "usageInstructions": "1. Launch Chrome with remote debugging enabled. 2. Configure MCP settings with environment variables. 3. Use provided tools like list_tabs, execute_script, capture_screenshot.",
    "category": "Browser Automation",
    "stars": 38,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "everart-forge": {
    "name": "EverArt Forge MCP",
    "githubLink": "https://github.com/nickbaumann98/everart-forge-mcp",
    "package": "everart-forge-mcp",
    "description": "An advanced Model Context Protocol (MCP) server for Cline that integrates with EverArt's AI models to generate both vector and raster images.",
    "installCommand": "git clone https://github.com/nickbaumann98/everart-forge-mcp.git && cd everart-forge-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "EVERART_API_KEY"
    ],
    "optionalParams": [
      "model",
      "format",
      "output_path",
      "web_project_path",
      "project_type",
      "asset_path",
      "image_count"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Build the project using 'npm run build'. 3. Obtain an EverArt API key and add it to your Cline MCP settings file. 4. Restart Cline to load the new MCP server. Use the 'generate_image' tool with prompts to create images, specifying parameters like model, format, and output path.",
    "category": "AI/ML",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "libsql": {
    "name": "LibSQL Model Context Protocol Server",
    "githubLink": "https://github.com/nicholasq/mcp-server-libsql",
    "package": "mcp-server-libsql",
    "description": "A server application that interfaces with LibSQL databases to provide schema information and execute SQL queries using the Model Context Protocol (MCP).",
    "installCommand": "curl -fsSL https://deno.land/install.sh | sh && deno run build",
    "requiredEnvVars": [
      "database-url"
    ],
    "optionalParams": [
      "--auth-token"
    ],
    "usageInstructions": "After installation, run the server with the LibSQL database URL. For unauthenticated access: `./mcp-server-libsql <database-url>`. For authenticated access: `./mcp-server-libsql --auth-token <token> <database-url>`. Ensure Deno 2.1+ is installed and the LibSQL database URL is accessible.",
    "category": "Database",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "vercel": {
    "name": "Vercel MCP Integration",
    "githubLink": "https://github.com/nganiet/mcp-vercel",
    "package": "vercel-mcp",
    "description": "An MCP server implementing Vercel's core API endpoints as tools for deployment management, environment variables, and team management.",
    "installCommand": "git clone https://github.com/nganiet/mcp-vercel.git && cd vercel-mcp && npm install",
    "requiredEnvVars": [
      "VERCEL_API_TOKEN"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Create .env file with VERCEL_API_TOKEN. 2. Start server with 'npm start'. 3. Connect to AI Assistants like Claude or Cursor using MCP protocol.",
    "category": "API Integration",
    "stars": 52,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcps/vercel.svg"
  },
  "stealth-browser": {
    "name": "Stealth Browser MCP Server",
    "githubLink": "https://github.com/newbeb/stealth-browser-mcp",
    "package": "stealth-browser-mcp",
    "description": "An MCP server providing stealth browser capabilities using Playwright with anti-detection techniques for website navigation and screenshot capture.",
    "installCommand": "bun install && bun start",
    "requiredEnvVars": [],
    "optionalParams": [
      "url",
      "fullPage",
      "selector",
      "headless"
    ],
    "usageInstructions": "1. Install dependencies: bun install\n2. Run the MCP server: bun start\n3. Use the 'screenshot' tool with parameters: url (required), fullPage (optional), selector (optional), headless (optional)",
    "category": "Browser Automation",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "clipboard": {
    "name": "MacOS Clipboard MCP Server",
    "githubLink": "https://github.com/newbeb/clipboard-mcp",
    "package": "clipboard-mcp",
    "description": "An MCP server that provides access to the macOS clipboard via OSAScript, allowing AI assistants to retrieve clipboard content including text, images, and binary data.",
    "installCommand": "bun install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To start the server, run: `bun run start`. For development with hot reloading, use: `bun run dev`. Additional development modes include `bun run dev2`, `bun run inspect`, and `bun run mcp-cli`. The server retrieves clipboard content on demand using AppleScript via the `osascript` command and supports text, images (PNG), and binary data with appropriate MIME types.",
    "category": "Productivity",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "deepseek-thinking-claude-3.5-sonnet-cline": {
    "name": "Deepseek-Thinking-Claude-3.5-Sonnet-CLINE-MCP",
    "githubLink": "https://github.com/newideas99/Deepseek-Thinking-Claude-3.5-Sonnet-CLINE-MCP",
    "package": "@newideas99/Deepseek-Thinking-Claude-3.5-Sonnet-CLINE-MCP",
    "description": "A Model Context Protocol (MCP) server combining DeepSeek R1's reasoning with Claude 3.5 Sonnet's response generation via OpenRouter API.",
    "installCommand": "npx -y @smithery/cli install @newideas99/Deepseek-Thinking-Claude-3.5-Sonnet-CLINE-MCP --client claude",
    "requiredEnvVars": [
      "OPENROUTER_API_KEY"
    ],
    "optionalParams": [
      "DEEPSEEK_MODEL",
      "CLAUDE_MODEL",
      "showReasoning",
      "clearContext",
      "includeHistory"
    ],
    "usageInstructions": "1. Install via Smithery using the provided command.\n2. Set the OPENROUTER_API_KEY in your environment.\n3. Add the server to your Cline MCP settings with the correct paths and API key.\n4. Use the 'generate_response' tool with required prompt and optional parameters.\n5. Poll for response status using 'check_response_status' with the returned task ID.",
    "category": "AI/ML",
    "stars": 107,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "neon": {
    "name": "Neon MCP Server",
    "githubLink": "https://github.com/neondatabase-labs/mcp-server-neon",
    "package": "@neondatabase/mcp-server-neon",
    "description": "An open-source MCP server for interacting with Neon Postgres databases using natural language.",
    "installCommand": "npx -y @neondatabase/mcp-server-neon start <YOUR_NEON_API_KEY>",
    "requiredEnvVars": [
      "NEON_API_KEY"
    ],
    "optionalParams": [
      "limit",
      "log_level",
      "debug"
    ],
    "usageInstructions": "1. Install using 'npx -y @smithery/cli@latest install neon --client <client_name>'. 2. Configure Neon API key when prompted. 3. Restart MCP client. For manual configuration, add the Neon MCP server details to your client's mcp_config file.",
    "category": "Database",
    "stars": 355,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/oy68m9rzcql.webp"
  },
  "needle": {
    "name": "Needle MCP Server",
    "githubLink": "https://github.com/needle-ai/needle-mcp",
    "package": "@smithery/cli",
    "description": "MCP server for document management and search using Needle through Claude's Desktop Application",
    "installCommand": "npx -y @smithery/cli install needle-mcp --client claude",
    "requiredEnvVars": [
      "NEEDLE_API_KEY"
    ],
    "optionalParams": [
      "UV_PATH",
      "CONFIG_PATH"
    ],
    "usageInstructions": "1. Install via Smithery using 'npx -y @smithery/cli install needle-mcp --client claude'. 2. For manual installation: clone the repository, install UV, create claude_desktop_config.json with NEEDLE_API_KEY, and configure Claude Desktop. 3. Verify installation by checking Claude Desktop integration.",
    "category": "Knowledge Management",
    "stars": 57,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "calc-tools": {
    "name": "MCP Calc Tools",
    "githubLink": "https://github.com/nbiish/mcp-calc-tools",
    "package": "npm install",
    "description": "A Model Context Protocol (MCP) server providing advanced mathematical and financial calculation tools for integration with AI code assistants.",
    "installCommand": "git clone https://github.com/nbiish/mcp-calc-tools.git && cd mcp-calc-tools && npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'.\n2. Start the server with 'npm start' or 'node index.js'.\n3. Configure your AI assistant (e.g., Cline/Roo Code) to connect to the running server instance.\n4. Use the available mathematical and financial tools by sending appropriate requests to the server.",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "nefino": {
    "name": "Nefino MCP Server",
    "githubLink": "https://github.com/nefino/mcp-nefino",
    "package": "mcp_nefino",
    "description": "The Nefino MCP Server provides Large Language Models with access to news and information about renewable energy projects, planning, and announcements in Germany by integrating with the Nefino API.",
    "installCommand": "pip install git+https://github.com/nefino/mcp-nefino.git",
    "requiredEnvVars": [
      "NEFINO_USERNAME",
      "NEFINO_PASSWORD",
      "NEFINO_JWT_SECRET",
      "NEFINO_BASE_URL"
    ],
    "optionalParams": [
      "range_or_recency",
      "last_n_days",
      "date_range_begin",
      "date_range_end",
      "news_topics"
    ],
    "usageInstructions": "1. Install the server using the provided install command.\n2. Set the required environment variables (NEFINO_USERNAME, NEFINO_PASSWORD, NEFINO_JWT_SECRET, NEFINO_BASE_URL).\n3. Run the server using 'python -m mcp_nefino'.\n4. For use with Claude Desktop, add the server configuration to the Claude Desktop config file as described in the README.\n5. Use the 'retrieve_news_items_for_place' tool with parameters like place_id, place_type, and optional filters for date ranges or topics.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "ctgov": {
    "name": "AACT Clinical Trials MCP Server",
    "githubLink": "https://github.com/navisbio/ctgov",
    "package": "mcp-server-aact",
    "description": "An MCP server providing access to the AACT (Aggregate Analysis of ClinicalTrials.gov) database using FastMCP framework.",
    "installCommand": "uvx mcp-server-aact",
    "requiredEnvVars": [
      "DB_USER",
      "DB_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create a free account at https://aact.ctti-clinicaltrials.org/users/sign_up\n2. Set DB_USER and DB_PASSWORD environment variables\n3. Configure Claude Desktop by adding the server configuration to claude_desktop_config.json",
    "category": "Data Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "livecode": {
    "name": "MCP server for io.livecode.ch",
    "githubLink": "https://github.com/namin/livecode-mcp",
    "package": "livecode-mcp",
    "description": "A Model Context Protocol (MCP) server implementation for the io.livecode.ch domain, enabling integration with live coding environments.",
    "installCommand": "mcp install server.py && mcp dev server.py --with requests",
    "requiredEnvVars": [
      "MCP_SERVICE_URL",
      "LIVECODE_API_KEY"
    ],
    "optionalParams": [
      "MCP_DEBUG",
      "PORT",
      "MAX_CONNECTIONS",
      "LOG_LEVEL"
    ],
    "usageInstructions": "After installation, set the required environment variables (MCP_SERVICE_URL and LIVECODE_API_KEY). Start the server using the provided commands. Ensure the 'requests' dependency is available for API integration. Customize optional parameters like PORT and LOG_LEVEL for configuration.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "code-research": {
    "name": "Code Research MCP Server",
    "githubLink": "https://github.com/nahmanmate/code-research-mcp-server",
    "package": "@nahmanmate/code-research-mcp-server",
    "description": "An MCP server providing tools for searching programming resources across multiple platforms including Stack Overflow, MDN, GitHub, npm, and PyPI.",
    "installCommand": "npx -y @smithery/cli install @nahmanmate/code-research-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "GITHUB_TOKEN"
    ],
    "usageInstructions": "1. Install via Smithery using the provided command. For manual installation: git clone https://github.com/nahmanmate/code-research-mcp-server.git, cd code-research-mcp-server, npm install, npm run build. Configure MCP settings with the server path and optionally set GITHUB_TOKEN environment variable.",
    "category": "Development Tools",
    "stars": 35,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "bazel": {
    "name": "Bazel MCP Server",
    "githubLink": "https://github.com/nacgarg/bazel-mcp-server",
    "package": "github:nacgarg/bazel-mcp-server",
    "description": "A local MCP server that exposes Bazel build system functionality to MCP-enabled AI agents, allowing them to build, query, test, and manage Bazel targets.",
    "installCommand": "npx -y github:nacgarg/bazel-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "MCP_BAZEL_PATH",
      "MCP_WORKSPACE_PATH",
      "MCP_WORKSPACE_CONFIG",
      "MCP_LOG_PATH",
      "DEBUG"
    ],
    "usageInstructions": "1. Install using the command: npx -y github:nacgarg/bazel-mcp-server\n2. Configure the server by providing command line arguments, environment variables, or a configuration file.\n3. Use the provided tools (bazel_build_target, bazel_query_target, etc.) to interact with Bazel targets.\n4. For Cursor integration, add the server configuration to .cursor/mcp.json as shown in the README.\n5. Set DEBUG=true for verbose logging during debugging.",
    "category": "Development Tools",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "webresearch": {
    "name": "MCP Web Research Server",
    "githubLink": "https://github.com/mzxrai/mcp-webresearch",
    "package": "@mzxrai/mcp-webresearch",
    "description": "An MCP server for web research integration with Claude Desktop",
    "installCommand": "npx -y @mzxrai/mcp-webresearch@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "query",
      "url",
      "takeScreenshot"
    ],
    "usageInstructions": "1. Install Claude Desktop app. 2. Add configuration to claude_desktop_config.json. 3. Start chat with Claude and use web research features.",
    "category": "AI/ML",
    "stars": 265,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "todo": {
    "name": "mcp-todo-server",
    "githubLink": "https://github.com/mutker/mcp-todo-server",
    "package": "codeberg.org/mutker/mcp-todo-server/cmd/mcp-todo-server",
    "description": "Model Context Protocol (MCP) server for managing TODO.md and CHANGELOG.md files with line-based editing, version tracking, and semantic task handling.",
    "installCommand": "go install codeberg.org/mutker/mcp-todo-server/cmd/mcp-todo-server@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "File paths for importing TODO.md or CHANGELOG.md",
      "Version numbers for task or changelog filtering",
      "Line ranges for partial file access",
      "Encoding types for file reading/writing"
    ],
    "usageInstructions": "After installation, use the server to perform TODO.md and CHANGELOG.md operations via MCP tools like `get-todo-tasks`, `add-todo-task`, `get-changelog`, and `generate-changelog-from-todo`. Import existing TODO.md or CHANGELOG.md files using `import-todo` or `import-changelog`. Specify line ranges, versions, or file paths as needed for precise content manipulation.",
    "category": "Productivity",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "web-search": {
    "name": "Web Search MCP Server",
    "githubLink": "https://github.com/muka/web-search-mcp",
    "package": "web-search-mcp",
    "description": "MCP server for web searches using Serper API",
    "installCommand": "docker compose up",
    "requiredEnvVars": [
      "SERPER_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Create a .env file with SERPER_API_KEY from serper.dev\n2. Optionally set PORT to specify listening port\n3. Run using 'docker compose up'",
    "category": "Web Scraping",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "google-tasks": {
    "name": "Google Tasks MCP Server",
    "githubLink": "https://github.com/mstfe/mcp-google-tasks",
    "package": "mcp-google-tasks",
    "description": "A Model Context Protocol (MCP) server for managing Google Tasks, enabling integration with LLMs or other applications via MCP.",
    "installCommand": "git clone https://github.com/mstfe/mcp-google-tasks && cd mcp-google-tasks && npm install",
    "requiredEnvVars": [
      "GOOGLE_CLIENT_ID",
      "GOOGLE_CLIENT_SECRET",
      "GOOGLE_REFRESH_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "TASK_LIST_ID"
    ],
    "usageInstructions": "1. Set required environment variables (GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, GOOGLE_REFRESH_TOKEN) for Google API authentication. 2. Run the server using `node build/index.js`. 3. Use MCP tools to interact with the server via commands like `create_task`, `list_tasks`, `delete_task`, `update_task`, and `complete_task`. 4. For debugging, run `npm run inspector` and use the provided URL to access the MCP Inspector.",
    "category": "Productivity",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "ledger": {
    "name": "ledger-service MCP server",
    "githubLink": "https://github.com/mprokopov/ledger-mcp-server",
    "package": "ledger-service",
    "description": "MCP Server for accessing and managing ledger files through Claude, providing tools for listing accounts, checking balances, and viewing transaction registers.",
    "installCommand": "uv pip install ledger-service",
    "requiredEnvVars": [
      "LEDGER_BASE_PATH"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "After installation, configure the server by setting the LEDGER_BASE_PATH environment variable to the directory containing your ledger files. Use the MCP Inspector or integrate with Claude Desktop to interact with the server. For development, clone the repository, create a virtual environment, and install dependencies.",
    "category": "Data Storage",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "django-migrations": {
    "name": "Django Migrations MCP Service",
    "githubLink": "https://github.com/mrrobotke/django-migrations-mcp",
    "package": "django-migrations-mcp",
    "description": "A Model Context Protocol (MCP) service for managing Django migrations in distributed environments, exposing migration commands as MCP endpoints for integration with CI/CD pipelines.",
    "installCommand": "git clone https://github.com/mrrobotke/django-migrations-mcp.git && cd django-migrations-mcp && pip install -r requirements.txt",
    "requiredEnvVars": [
      "DJANGO_SETTINGS_MODULE"
    ],
    "optionalParams": [
      "MCP_SERVICE_PORT",
      "REDIS_URL"
    ],
    "usageInstructions": "1. Set DJANGO_SETTINGS_MODULE to your Django project's settings module. 2. Optionally set MCP_SERVICE_PORT (default 8000) and REDIS_URL for Redis integration. 3. Run the service using `python -m migrations_mcp.service` or via Docker with the provided commands. 4. Use MCP client calls to interact with migration endpoints like show_migrations, make_migrations, and migrate.",
    "category": "Development Tools",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "contentful-delivery": {
    "name": "Contentful Delivery MCP Server",
    "githubLink": "https://github.com/mshaaban0/contentful-delivery-mcp",
    "package": "@mshaaban0/contentful-delivery-mcp-server",
    "description": "An MCP server providing access to Contentful's Delivery API through AI assistants, enabling natural language queries for content entries, assets, and content types.",
    "installCommand": "npm install -g @mshaaban0/contentful-delivery-mcp-server",
    "requiredEnvVars": [
      "CONTENTFUL_SPACE_ID",
      "CONTENTFUL_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "CONTENTFUL_CONTENT_TYPE_IDS"
    ],
    "usageInstructions": "After installation, set up your Contentful credentials by exporting CONTENTFUL_SPACE_ID and CONTENTFUL_ACCESS_TOKEN. Optionally, restrict content to specific types by setting CONTENTFUL_CONTENT_TYPE_IDS. The server can be integrated with Mastra AI using the provided TypeScript example.",
    "category": "API Integration",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "tailscale": {
    "name": "Tailscale MCP Server",
    "githubLink": "https://github.com/mrnugget/tailscale-mcp",
    "package": "tailscale-mcp",
    "description": "MCP server that allows querying Tailscale status using the Tailscale CLI on macOS.",
    "installCommand": "git clone https://github.com/mrnugget/tailscale-mcp && cd tailscale-mcp && uv pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "--transport",
      "--port"
    ],
    "usageInstructions": "1. Ensure Tailscale is installed at /Applications/Tailscale.app/Contents/MacOS/Tailscale. 2. Install uv from https://github.com/astral/uv. 3. Run the server using 'python tailscale.py' for stdio transport or 'python tailscale.py --transport http --port 4001' for HTTP/SSE transport.",
    "category": "System Integration",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "doris": {
    "name": "Apache Doris MCP Server",
    "githubLink": "https://github.com/morningman/mcp-doris",
    "package": "mcp-doris",
    "description": "An MCP server for Apache Doris, enabling integration with the Model Context Protocol for data querying and management.",
    "installCommand": "uv pip install mcp-doris && uv sync",
    "requiredEnvVars": [
      "DORIS_HOST",
      "DORIS_PORT",
      "DORIS_USER",
      "DORIS_PASSWORD"
    ],
    "optionalParams": [
      "PYTHONPATH",
      "PORT",
      "DEBUG"
    ],
    "usageInstructions": "1. Install uv and set up a virtual environment. 2. Clone the repository and navigate to its directory. 3. Run 'uv sync' to install dependencies. 4. Set the required environment variables (DORIS_HOST, DORIS_PORT, DORIS_USER, DORIS_PASSWORD). 5. Start the server using 'mcp dev mcp_doris/mcp_server.py'. 6. Visit http://localhost:5173 in your browser to interact with the server.",
    "category": "Data Storage",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "motherduck": {
    "name": "MotherDuck's DuckDB MCP Server",
    "githubLink": "https://github.com/motherduckdb/mcp-server-motherduck",
    "package": "mcp-server-motherduck",
    "description": "An MCP server implementation that interacts with DuckDB and MotherDuck databases, providing SQL analytics capabilities to AI Assistants and IDEs.",
    "installCommand": "uvx mcp-server-motherduck",
    "requiredEnvVars": [
      "motherduck_token"
    ],
    "optionalParams": [
      "--transport",
      "--port",
      "--db-path",
      "--read-only",
      "--home-dir",
      "--saas-mode",
      "--json-response"
    ],
    "usageInstructions": "1. Install uv using 'pip install uv' or 'brew install uv'. 2. For MotherDuck, sign up for an account, generate an access token, and store it securely. 3. Run the server using 'uvx mcp-server-motherduck' with appropriate parameters. For example: 'uvx mcp-server-motherduck --transport stream --db-path md: --motherduck-token YOUR_TOKEN'.",
    "category": "Databases",
    "stars": 240,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "mongodb-atlas": {
    "name": "MongoDB Atlas MCP Server",
    "githubLink": "https://github.com/mongodb-developer/mcp-mongodb-atlas",
    "package": "mcp-mongodb-atlas",
    "description": "An MCP server for managing MongoDB Atlas projects, including cluster creation, user setup, network access, and connection string retrieval.",
    "installCommand": "npm install mcp-mongodb-atlas",
    "requiredEnvVars": [
      "ATLAS_PUBLIC_KEY",
      "ATLAS_PRIVATE_KEY"
    ],
    "optionalParams": [
      "autoApprove",
      "disabled",
      "args",
      "command",
      "env",
      "debug",
      "logLevel"
    ],
    "usageInstructions": "To use the server, set the ATLAS_PUBLIC_KEY and ATLAS_PRIVATE_KEY environment variables and run 'npx mcp-mongodb-atlas'. Alternatively, pass the keys as arguments. For integration with tools like Cline, Cursor, or Claude Desktop, configure the server in the respective settings file with the command 'npx mcp-mongodb-atlas' and the required environment variables.",
    "category": "Cloud Services",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "bigquery": {
    "name": "MCP BigQuery Server",
    "githubLink": "https://github.com/monochromegane/mcp-bigquery-server",
    "package": "monochromegane/tap/mcp-bigquery-server",
    "description": "A server that allows querying BigQuery tables using MCP, written in Go.",
    "installCommand": "brew tap monochromegane/tap && brew install monochromegane/tap/mcp-bigquery-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "--project",
      "--dataset"
    ],
    "usageInstructions": "1. Install using brew. 2. Configure .cursor/mcp.json with server details including project and dataset(s). 3. Start using available tools like list_allowed_datasets, list_tables, get_table_schema, dry_run_query.",
    "category": "Data Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "youtube-music": {
    "name": "YouTube Music MCP Server",
    "githubLink": "https://github.com/mondweep/youtube-music-mcp-server",
    "package": "youtube-music-mcp-server",
    "description": "An MCP server enabling AI models to control YouTube Music playback through Google Chrome.",
    "installCommand": "git clone https://github.com/mondweep/youtube-music-mcp-server && cd youtube-music-mcp-server && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "command path in claude_desktop_config.json"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'. 2. Build the server using 'npm run build'. 3. Configure Claude Desktop by adding the server path to '~/Library/Application Support/Claude/claude_desktop_config.json' or '%APPDATA%/Claude/claude_desktop_config.json'.",
    "category": "Media",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "mobile": {
    "name": "Mobile MCP Server",
    "githubLink": "https://github.com/mobile-next/mobile-mcp",
    "package": "@mobilenext/mobile-mcp",
    "description": "A Model Context Protocol (MCP) server that enables scalable mobile automation and development through a platform-agnostic interface for iOS and Android devices, simulators, and emulators.",
    "installCommand": "npx -y @mobilenext/mobile-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "MCP_PORT",
      "MCP_HOST",
      "DEBUG",
      "MOBILE_MCP_LOG_LEVEL",
      "MOBILE_MCP_DEVICE_ID",
      "MOBILE_MCP_APP_PACKAGE"
    ],
    "usageInstructions": "1. Ensure prerequisites are installed: Xcode command line tools, Android Platform Tools, Node.js v22+. 2. Run the install command. 3. Connect your iOS or Android device/emulator/simulator. 4. Use an MCP-compatible agent (e.g., Claude Code, Cline) to interact with the server and execute mobile workflows.",
    "category": "Mobile Automation",
    "stars": 1275,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/17u3ru7lg64.png"
  },
  "asset-price": {
    "name": "Asset Price MCP Server",
    "githubLink": "https://github.com/mk965/asset-price-mcp",
    "package": "@mk965/asset-price-mcp",
    "description": "An MCP server for retrieving and displaying current asset price information, including precious metals and cryptocurrencies.",
    "installCommand": "npx -y @smithery/cli install @mk965/asset-price-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this server, configure it in your code editor or AI client configuration file. For Claude Desktop, add the configuration as shown in the README. The server can be run directly using 'npx -y asset-price-mcp'.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/bs91bzxesdg.png"
  },
  "strapi": {
    "name": "Strapi MCP Server",
    "githubLink": "https://github.com/misterboe/strapi-mcp-server",
    "package": "@bschauer/strapi-mcp-server",
    "description": "A Model Context Protocol server for interacting with Strapi CMS, enabling AI assistants to perform content operations through a standardized interface.",
    "installCommand": "npx -y @bschauer/strapi-mcp-server@2.6.0",
    "requiredEnvVars": [
      "api_url",
      "api_key"
    ],
    "optionalParams": [
      "version",
      "DEBUG",
      "LOG_LEVEL",
      "MAX_UPLOAD_SIZE",
      "PORT",
      "TIMEOUT"
    ],
    "usageInstructions": "1. Create a configuration file at `~/.mcp/strapi-mcp-server.config.json` with your Strapi API URL and JWT token.\n2. Use the provided JavaScript functions like `strapi_rest()` and `strapi_upload_media()` to interact with your Strapi instance.\n3. Ensure you handle authentication and version compatibility in your configuration.\n4. Refer to the documentation for filtering, sorting, and pagination parameters in REST API operations.",
    "category": "API Integration",
    "stars": 35,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "todoist": {
    "name": "Todoist MCP",
    "githubLink": "https://github.com/miottid/todoist-mcp",
    "package": "@miottid/todoist-mcp",
    "description": "A Model Context Protocol (MCP) server that integrates with Todoist, allowing interaction with Todoist's API to manage tasks, projects, sections, comments, labels, and collaboration features.",
    "installCommand": "npx -y @smithery/cli install @miottid/todoist-mcp --client claude",
    "requiredEnvVars": [
      "TODOIST_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "TASK_FILTER",
      "PROJECT_FILTER"
    ],
    "usageInstructions": "1. Install the Claude desktop app and ensure it supports MCP.\n2. Get your Todoist API key from Todoist's Developer settings.\n3. Clone the repository and build the server using 'npm install' and 'npm run build'.\n4. Configure the 'claude_desktop_config.json' file with the MCP server command and environment variables.\n5. Launch the Claude desktop app and interact with Todoist via natural language commands.",
    "category": "Productivity",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "task": {
    "name": "Task API Server - MCP TypeScript Implementation",
    "githubLink": "https://github.com/milkosten/task-mcp-server",
    "package": "mcp-template-ts",
    "description": "A Model Context Protocol (MCP) implementation for Task Management API written in TypeScript, providing both STDIO and HTTP+SSE interfaces for task management operations.",
    "installCommand": "git clone https://github.com/milkosten/task-mcp-server.git && cd task-mcp-server && npm install",
    "requiredEnvVars": [
      "TASK_MANAGER_API_BASE_URL",
      "TASK_MANAGER_API_KEY"
    ],
    "optionalParams": [
      "TASK_MANAGER_HTTP_PORT",
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'.\n2. Create an .env file with your Task API credentials.\n3. Build the project using 'npm run build'.\n4. Run the server in STDIO mode with 'npm start' or HTTP mode with 'npm run start:http'.\n5. Use the provided client examples for integration with CLI/AI or web interfaces.",
    "category": "Productivity",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "ddg": {
    "name": "DuckDuckGo MCP Server",
    "githubLink": "https://github.com/misanthropic-ai/ddg-mcp",
    "package": "ddg-mcp",
    "description": "A server providing DuckDuckGo search capabilities through the Model Context Protocol.",
    "installCommand": "uv install ddg-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "region",
      "safesearch",
      "timelimit",
      "max_results",
      "size",
      "color",
      "type_image",
      "layout",
      "license_image",
      "resolution",
      "duration",
      "license_videos",
      "model"
    ],
    "usageInstructions": "After installation, configure the server for Claude Desktop by modifying claude_desktop_config.json. Use 'uvx ddg-mcp' for published servers or 'uv run ddg-mcp' for development. The server provides various search tools (text, image, news, video) and AI chat capabilities through DuckDuckGo.",
    "category": "API Integration",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "aistor": {
    "name": "AIStor MCP Server",
    "githubLink": "https://github.com/minio/mcp-server-aistor",
    "package": "quay.io/minio/aistor/mcp-server-aistor:latest",
    "description": "An MCP server for interacting with AIStor object stores, providing various operations like listing buckets, managing objects, and administrative functions.",
    "installCommand": "podman run -d --name aistor-mcp-server -v /Users/YOUR_USERNAME/Downloads:/Downloads -e MINIO_ENDPOINT=REPLACE_WITH_ENDPOINT -e MINIO_ACCESS_KEY=REPLACE_WITH_ACCESS_KEY -e MINIO_SECRET_KEY=REPLACE_WITH_SECRET_KEY -e MINIO_USE_SSL=true -p8090:8090 quay.io/minio/aistor/mcp-server-aistor:latest --allowed-directories /Downloads --allow-admin --allow-delete --allow-write --http --http-port 8090",
    "requiredEnvVars": [
      "MINIO_ENDPOINT",
      "MINIO_ACCESS_KEY",
      "MINIO_SECRET_KEY"
    ],
    "optionalParams": [
      "--max-keys",
      "--allow-write",
      "--allow-delete",
      "--allow-admin"
    ],
    "usageInstructions": "1. Ensure Docker or Podman is installed. 2. Run the installCommand with your actual MINIO_ENDPOINT, MINIO_ACCESS_KEY, and MINIO_SECRET_KEY. 3. Configure your MCP client with the server URL http://localhost:8090/mcp. 4. Use commands like 'List all buckets on my AIStor server' or 'Upload document.pdf from Downloads to bucket my-bucket'.",
    "category": "Data Storage",
    "stars": 27,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/fsjw25fu36.png"
  },
  "biodiversity": {
    "name": "Biodiversity Model Context Protocol Server",
    "githubLink": "https://github.com/mikkohei13/mcp-biodiversity",
    "package": "mcp-biodiversity",
    "description": "MCP server for biodiversity data integration with Claude Desktop",
    "installCommand": "powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\" && uv pip install mcp && mcp install server.py",
    "requiredEnvVars": [],
    "optionalParams": [
      "auto-reload flag for development"
    ],
    "usageInstructions": "1. Install Python and uv using the provided commands\n2. Activate virtual environment: .venv\\Scripts\\activate\n3. Install server: mcp install server.py\n4. Run server: mcp run server.py or python -m uvicorn server:mcp --reload for development\n5. For development with Inspector: mcp dev server.py (requires Node & npx)",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "ai-image-gen": {
    "name": "Image Generation MCP Server",
    "githubLink": "https://github.com/mikeyny/ai-image-gen-mcp",
    "package": "ai-image-gen-mcp",
    "description": "An MCP server that generates images using Replicate's black-forest-labs/flux-schnell model, supporting configurable parameters like resolution, aspect ratio, and quality.",
    "installCommand": "git clone https://github.com/mikeyny/ai-image-gen-mcp && cd ai-image-gen-mcp && npm install",
    "requiredEnvVars": [
      "REPLICATE_API_TOKEN"
    ],
    "optionalParams": [
      "go_fast",
      "megapixels",
      "num_outputs",
      "aspect_ratio",
      "output_format",
      "output_quality",
      "num_inference_steps"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with `npm install`. 2. Set your Replicate API token in `src/imageService.ts` or via a `.env` file. 3. Build the project with `npm run build`. 4. Run the server with `node ./dist/server.js`. 5. Use an MCP client to send image generation requests with required parameters like `prompt` and `output_dir`.",
    "category": "AI/ML",
    "stars": 121,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "home-assistant": {
    "name": "Home Assistant MCP Server",
    "githubLink": "https://github.com/miguelg719/home-assistant-mcp",
    "package": "home-assistant-server",
    "description": "An MCP server integrating with Home Assistant for smart home control",
    "installCommand": "uvx home-assistant-server",
    "requiredEnvVars": [
      "HOMEASSISTANT_TOKEN",
      "HOMEASSISTANT_BASE_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install using 'uvx home-assistant-server'. 2. Create a .env file with HOMEASSISTANT_TOKEN and HOMEASSISTANT_BASE_URL. 3. Configure Claude Desktop by adding the server configuration to claude_desktop_config.json.",
    "category": "Home Automation",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "substack": {
    "name": "MCP Substack Server",
    "githubLink": "https://github.com/michalnaka/mcp-substack",
    "package": "mcp-substack",
    "description": "An MCP server for downloading and parsing Substack posts, integrating with Claude.ai desktop app.",
    "installCommand": "git clone https://github.com/michalnaka/mcp-substack.git && cd mcp-substack && npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Configure Claude desktop app by adding mcp-substack configuration to ~/Library/Application Support/Claude/claude_desktop_config.json. 2. Start the server using 'npm start'. 3. In Claude desktop app, use the command: 'Could you download and summarize this Substack post: [URL]'",
    "category": "API Integration",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "semanticworkbench": {
    "name": "Semantic Workbench",
    "githubLink": "https://github.com/microsoft/semanticworkbench",
    "package": "semanticworkbench",
    "description": "A versatile tool for prototyping intelligent assistants with a user-friendly interface for creating conversations, configuring settings, and integrating various assistant services.",
    "installCommand": "git clone https://github.com/microsoft/semanticworkbench.git && cd semanticworkbench && docker run -i --rm -p 4000:4000 -v ${PWD}:/app -w /app python:3.10 bash -c 'pip install -r workbench-service/requirements.txt && pip install -r workbench-app/requirements.txt'",
    "requiredEnvVars": [
      "LLM_API_KEY",
      "DATABASE_URL",
      "WORKBENCH_SERVICE_URL"
    ],
    "optionalParams": [
      "DEBUG",
      "LOG_LEVEL",
      "MAX_CONCURRENT_REQUESTS",
      "ENABLE_CONTENT_MODERATION",
      "ASSISTANT_SERVICE_PORT"
    ],
    "usageInstructions": "1. Clone the repository and navigate to the directory. 2. Start the workbench service using Docker with the provided command. 3. Open your browser and navigate to https://localhost:4000. 4. Create an assistant using the dashboard and start a conversation. 5. Optional: configure additional assistant services from the examples directory.",
    "category": "AI/ML",
    "stars": 321,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "metricool": {
    "name": "Metricool MCP Server",
    "githubLink": "https://github.com/metricool/mcp-metricool",
    "package": "mcp-metricool",
    "description": "An MCP server that connects AI agents to the Metricool API for social media metrics analysis, campaign data access, and post scheduling.",
    "installCommand": "uvx mcp-metricool",
    "requiredEnvVars": [
      "METRICOOL_USER_TOKEN",
      "METRICOOL_USER_ID"
    ],
    "optionalParams": [
      "init_date",
      "end_date",
      "blog_id",
      "network",
      "post_content",
      "scheduled_time"
    ],
    "usageInstructions": "1. Create a Metricool account and obtain API access (Advanced Tier). 2. Install uv and git. 3. Configure Claude Desktop by creating a claude_desktop_config.json file with the required environment variables. 4. Run the server using 'uvx mcp-metricool'. 5. Use the available tools to access social media metrics, analyze data, and schedule posts.",
    "category": "Analytics",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/toi8u57h7y.png"
  },
  "metamcp": {
    "name": "MetaMCP MCP Server",
    "githubLink": "https://github.com/metatool-ai/mcp-server-metamcp",
    "package": "@metamcp/mcp-server-metamcp",
    "description": "A proxy server that joins multiple MCP servers into one, fetching configurations from MetaMCP App and routing requests to the correct underlying server.",
    "installCommand": "npx -y @smithery/cli install @metatool-ai/mcp-server-metamcp --client claude",
    "requiredEnvVars": [
      "METAMCP_API_KEY"
    ],
    "optionalParams": [
      "METAMCP_API_BASE_URL",
      "USE_DOCKER_HOST",
      "METAMCP_STDERR"
    ],
    "usageInstructions": "After installation, run 'mcp-server-metamcp --metamcp-api-key <your-api-key>' for stdio server, or use '--transport sse' or '--transport streamable-http' for different transport options. Configure stderr handling with '--stderr' or 'METAMCP_STDERR' environment variable.",
    "category": "API Integration",
    "stars": 135,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "sqlite": {
    "name": "SQLite MCP Server",
    "githubLink": "https://github.com/mekanixms/sqlite-mcp-server",
    "package": "mcp",
    "description": "A Model Context Protocol (MCP) server that provides comprehensive SQLite database management and analysis capabilities for LLMs.",
    "installCommand": "pip install mcp pandas && curl -O https://raw.githubusercontent.com/mekanixms/sqlite-mcp-server/main/sqlite_mcp.py",
    "requiredEnvVars": [
      "DB_PATH"
    ],
    "optionalParams": [
      "Claude Desktop integration",
      "custom server name",
      "analysis_type"
    ],
    "usageInstructions": "1. Install Python 3.8+ and SQLite. 2. Run the install command to get the server script. 3. Set the DB_PATH environment variable to your SQLite database file. 4. For Claude Desktop integration, add the server configuration to claude_desktop_config.json with the correct paths. 5. Use the server to explore schemas, execute queries, and perform data analysis.",
    "category": "Data Storage",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "meilisearch": {
    "name": "Meilisearch MCP Server",
    "githubLink": "https://github.com/meilisearch/meilisearch-mcp",
    "package": "meilisearch-mcp",
    "description": "A Model Context Protocol server enabling MCP-compatible clients to interact with Meilisearch, managing search indices and performing searches through natural conversation.",
    "installCommand": "pip install meilisearch-mcp",
    "requiredEnvVars": [
      "MEILI_HTTP_ADDR"
    ],
    "optionalParams": [
      "MEILI_MASTER_KEY"
    ],
    "usageInstructions": "1. Install using 'pip install meilisearch-mcp' or 'uvx -n meilisearch-mcp'. 2. Configure Claude Desktop by adding the server configuration to 'claude_desktop_config.json'. 3. Start Meilisearch using Docker or Homebrew. Environment variables MEILI_HTTP_ADDR and optionally MEILI_MASTER_KEY can be set for default connection settings.",
    "category": "API Integration",
    "stars": 106,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "mcp2tavily": {
    "name": "MCP2Tavily",
    "githubLink": "https://github.com/mcp2everything/mcp2tavily",
    "package": "mcp2tavily",
    "description": "MCP protocol server implementing web search functionality using Tavily API",
    "installCommand": "git clone https://github.com/mcp2everything/mcp2tavily.git && cd mcp2tavily && uv venv && source .venv/bin/activate && uv sync",
    "requiredEnvVars": [
      "TAVILY_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create .env file with TAVILY_API_KEY\n2. Run 'fastmcp install mcp2tavily.py' for Claude extension\n3. Use 'fastmcp dev mcp2tavily.py' for development mode",
    "category": "AI/ML",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "gitlab-code-review": {
    "name": "GitLab MCP for Code Review",
    "githubLink": "https://github.com/mehmetakinn/gitlab-mcp-code-review",
    "package": "gitlab-mcp-code-review",
    "description": "An MCP server for integrating AI assistants like Claude with GitLab's merge requests, enabling code review through the GitLab API.",
    "installCommand": "git clone https://github.com/mehmetakinn/gitlab-mcp-code-review.git && cd gitlab-mcp-code-review && python -m venv .venv && source .venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [
      "GITLAB_TOKEN"
    ],
    "optionalParams": [
      "GITLAB_HOST",
      "GITLAB_API_VERSION",
      "LOG_LEVEL",
      "DEBUG",
      "REQUEST_TIMEOUT",
      "MAX_RETRIES"
    ],
    "usageInstructions": "1. Clone the repository and create a virtual environment. 2. Install dependencies using pip. 3. Create a .env file with your GitLab personal access token and optional settings. 4. Configure the MCP server in Cursor IDE or Claude Desktop App using the provided JSON configuration. 5. Use the available tools to interact with GitLab merge requests, such as fetching diffs, adding comments, and approving merge requests.",
    "category": "Development Tools",
    "stars": 16,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "mcp2brave": {
    "name": "MCP2Brave Server",
    "githubLink": "https://github.com/mcp2everything/mcp2brave",
    "package": "mcp2brave",
    "description": "An MCP protocol server using Brave API for web search functionality",
    "installCommand": "git clone https://github.com/mcp2everything/mcp2brave.git && cd mcp2brave && uv venv && .venv/bin/activate && uv sync",
    "requiredEnvVars": [
      "Brave_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create .env file with Brave_API_KEY\n2. Run 'fastmcp install mcp2brave.py' to install as Claude extension\n3. Use 'fastmcp dev mcp2brave.py' for development mode",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "honk": {
    "name": "Minimal MCP Server in Nix",
    "githubLink": "https://github.com/mccartykim/honk",
    "package": "github:mccartykim/minimal-mcp-in-nix",
    "description": "A simple MCP server demo providing stub location and current time functionality",
    "installCommand": "nix run github:mccartykim/minimal-mcp-in-nix",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this MCP server, add the following to your Claude config: 'minimal-mcp-in-nix': { 'command': 'nix', 'args': [ 'run', 'github:mccartykim/minimal-mcp-in-nix' ] }",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "community-servers": {
    "name": "MCP Get Community Servers",
    "githubLink": "https://github.com/mcp-get/community-servers",
    "package": "@michaellatman/mcp-get",
    "description": "A collection of community-maintained Model Context Protocol (MCP) servers providing tools for LLM.txt file search, HTTP requests, and macOS system operations.",
    "installCommand": "npx @michaellatman/mcp-get@latest install <server-name>",
    "requiredEnvVars": [],
    "optionalParams": [
      "server-name",
      "custom HTTP headers",
      "request body",
      "timeout settings"
    ],
    "usageInstructions": "1. Install a server using the MCP Get CLI with the command: npx @michaellatman/mcp-get@latest install <server-name>. 2. For development, run 'npm install' followed by 'npm run watch' for automatic recompilation. 3. Use the installed server according to its specific functionality (e.g., for HTTP requests or macOS operations).",
    "category": "Development Tools",
    "stars": 53,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "goose": {
    "name": "Goose FM",
    "githubLink": "https://github.com/mccartykim/goose",
    "package": "github:mccartykim/goose_fm",
    "description": "A simple MCP server demonstration using an RTL-SDR dongle and antenna to tune into radio stations and play them via speakers.",
    "installCommand": "nix run github:mccartykim/goose_fm",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Ensure you have a compatible RTL-SDR dongle connected.\n2. Run the server using the provided install command.\n3. Configure your AI assistant (e.g., Claude desktop) to use the server with the specified JSON configuration.\n4. Known issue: Nix flake may not properly encapsulate dependencies like sox and rtl_fm.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "mcp2serial": {
    "name": "MCP2Serial",
    "githubLink": "https://github.com/mcp2everything/mcp2serial",
    "package": "mcp2serial",
    "description": "MCP2Serial 是一个通过 Model Context Protocol (MCP) 将串口设备与 AI 大模型连接的项目，实现用自然语言控制硬件设备。",
    "installCommand": "curl -O https://raw.githubusercontent.com/mcp2everything/mcp2serial/main/install_ubuntu.py && python3 install_ubuntu.py",
    "requiredEnvVars": [
      "serial.port",
      "serial.baud_rate",
      "commands.set_pwm.command"
    ],
    "optionalParams": [
      "serial.timeout",
      "serial.read_timeout",
      "serial.response_start_string",
      "commands.set_pwm.need_parse",
      "commands.set_pwm.prompts"
    ],
    "usageInstructions": "1. 安装后配置 config.yaml 文件，指定串口参数和命令。2. 在 MCP 客户端（如 Claude Desktop 或 Cline）中添加 mcp2serial 服务配置。3. 启动客户端并使用自然语言与串口设备交互。",
    "category": "AI/ML",
    "stars": 21,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "thinking": {
    "name": "MCP Thinking Server",
    "githubLink": "https://github.com/mattzcarey/mcp-thinking",
    "package": "mcp-thinking",
    "description": "Extracts the reasoning process of the Deepseek R1 model and integrates it with MCP clients like Claude Desktop.",
    "installCommand": "bun install && bun setup",
    "requiredEnvVars": [
      "DEEPSEEK_API_KEY"
    ],
    "optionalParams": [
      "LOG_LEVEL",
      "PORT",
      "DEBUG",
      "MAX_TOKENS"
    ],
    "usageInstructions": "After installation, run `bun setup` and input your Deepseek API key. Open Claude Desktop to use the reasoning model. For testing, copy `.env.test.example` to `.env.test` and run `bun test`.",
    "category": "AI/ML",
    "stars": 52,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "arc": {
    "name": "ARC Model Context Protocol (MCP) Server",
    "githubLink": "https://github.com/maxmurphySF/arc-mcp-server",
    "package": "arc-mcp-server",
    "description": "An MCP server that bridges AI models with ARC's enterprise application framework, enabling AI assistants to leverage ARC capabilities.",
    "installCommand": "git clone https://github.com/sourcefuse/arc-mcp-server.git && cd arc-mcp-server && npm install && npm run build && npm start",
    "requiredEnvVars": [],
    "optionalParams": [
      "query",
      "category",
      "maxResults",
      "action",
      "token",
      "name",
      "features",
      "models",
      "projectPath",
      "platform",
      "options"
    ],
    "usageInstructions": "1. Clone the repository and cd into it. 2. Run 'npm install' to install dependencies. 3. Run 'npm run build' to build the project. 4. Run 'npm start' to start the server. 5. Configure Claude Desktop to connect to the MCP server by editing its configuration file.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/xpk765zshkq.png"
  },
  "aqicn": {
    "name": "AQICN MCP Server",
    "githubLink": "https://github.com/mattmarcin/aqicn-mcp",
    "package": "@mattmarcin/aqicn-mcp",
    "description": "MCP server providing real-time air quality data from the World Air Quality Index project",
    "installCommand": "npx -y @smithery/cli install @mattmarcin/aqicn-mcp --client claude",
    "requiredEnvVars": [
      "AQICN_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create .env file with AQICN_API_KEY=your_api_key_here\n2. Run server using 'mcp dev aqicn_server.py' for development or 'python aqicn_server.py' for direct execution\n3. Use available tools: city_aqi, geo_aqi, search_station",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.047Z",
    "logo": ""
  },
  "brightsy": {
    "name": "Brightsy MCP Server",
    "githubLink": "https://github.com/mattlevine/brightsy-mcp",
    "package": "brightsy-mcp",
    "description": "A Model Context Protocol (MCP) server that connects to a Brightsy AI agent, allowing it to be used as a tool in an MCP client.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "BRIGHTSY_AGENT_ID",
      "BRIGHTSY_API_KEY"
    ],
    "optionalParams": [
      "BRIGHTSY_TOOL_NAME",
      "--tool-name",
      "--message",
      "TOOL_NAME",
      "message"
    ],
    "usageInstructions": "1. Set the required environment variables BRIGHTSY_AGENT_ID and BRIGHTSY_API_KEY, or pass them as command-line arguments. 2. Start the server using `npm start` with the agent ID and API key as arguments. 3. Optionally, customize the tool name using `--tool-name` or the `BRIGHTSY_TOOL_NAME` environment variable. 4. Use the MCP client to call the registered tool with a message array.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "senechal": {
    "name": "Senechal MCP Server",
    "githubLink": "https://github.com/mattjoyce/senechal-mcp",
    "package": "senechal-mcp-server",
    "description": "An MCP server providing health data from the Senechal API to LLM applications.",
    "installCommand": "git clone https://github.com/mattjoyce/senechal-mcp.git && cd senechal-mcp && python -m venv venv && source venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [
      "SENECHAL_API_KEY",
      "SENECHAL_API_BASE_URL"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Copy .env.example to .env and configure SENECHAL_API_KEY and SENECHAL_API_BASE_URL.\n2. Run the server using 'python senechal_mcp_server.py'.\n3. Test with 'python example_client.py' in another terminal.\n4. For Claude Desktop integration, use 'mcp install senechal_mcp_server.py'.",
    "category": "Health Data Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "cursor-installer": {
    "name": "Cursor MCP Installer",
    "githubLink": "https://github.com/matthewdcage/cursor-mcp-installer",
    "package": "cursor-mcp-installer-free",
    "description": "A Model Context Protocol (MCP) server for installing and configuring other MCP servers within Cursor IDE.",
    "installCommand": "npm install -g cursor-mcp-installer-free@0.1.3",
    "requiredEnvVars": [],
    "optionalParams": [
      "MCP Installer configuration parameters",
      "OpenAPI schema file paths",
      "local directory paths for MCP servers"
    ],
    "usageInstructions": "1. Install using 'npm install -g cursor-mcp-installer-free@0.1.3'.\n2. Add the MCP Installer to your Cursor configuration by editing the ~/.cursor/mcp.json file with the provided JSON configuration.\n3. Restart Cursor IDE.\n4. Use Claude to install MCP servers by prompting with commands like 'Install the web search MCP server' or 'Install the MCP server for OpenAPI schema exploration with my-schema.yaml'.",
    "category": "Development Tools",
    "stars": 59,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/kyjpkg2cahe.jpeg"
  },
  "govee": {
    "name": "Govee MCP Server",
    "githubLink": "https://github.com/mathd/govee",
    "package": "@mathd/govee_mcp_server",
    "description": "An MCP server for controlling Govee LED devices through the Govee API.",
    "installCommand": "npx -y @smithery/cli install @mathd/govee_mcp_server --client claude",
    "requiredEnvVars": [
      "GOVEE_API_KEY",
      "GOVEE_DEVICE_ID",
      "GOVEE_SKU"
    ],
    "optionalParams": [],
    "usageInstructions": "Create a .env file with GOVEE_API_KEY, GOVEE_DEVICE_ID, and GOVEE_SKU. Use 'govee-cli' for direct device control or integrate with MCP clients like Cline.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "bun-s3": {
    "name": "Bun S3 MCP Service",
    "githubLink": "https://github.com/mattbarlow-sg/bun-s3-mcp",
    "package": "bun-s3-mcp",
    "description": "An MCP service using Bun's S3 bindings to save and load code snippets to S3 as markdown files, integrating with Claude Desktop.",
    "installCommand": "git clone https://github.com/mattbarlow-sg/bun-s3-mcp && cd bun-s3-mcp && bun install",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY",
      "AWS_BUCKET_NAME"
    ],
    "optionalParams": [
      "AWS_REGION",
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "After installation, configure your AWS credentials and bucket name. Start the server with 'bun run start'. Ensure Bun is installed (curl -fsSL https://bun.sh/install | bash). For production, configure appropriate AWS permissions.",
    "category": "Cloud Services",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "taboola": {
    "name": "Taboola MCP Connector",
    "githubLink": "https://github.com/matlafu/taboola",
    "package": "taboola_mcp",
    "description": "An MCP tool that connects Taboola Advertising API with AI assistants like Claude, enabling natural language querying of campaign data.",
    "installCommand": "git clone https://github.com/matlafu/taboola && cd taboola && pip install -r requirements.txt",
    "requiredEnvVars": [
      "TABOOLA_CLIENT_ID",
      "TABOOLA_CLIENT_SECRET"
    ],
    "optionalParams": [
      "TABOOLA_ACCOUNT_ID",
      "TABOOLA_CAMPAIGN_ID",
      "TABOOLA_CREATIVE_ID",
      "TABOOLA_AD_ID"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using pip.\n2. Create a .env file with your Taboola API credentials.\n3. Add the connector to Cursor's MCP configuration by editing .cursor/mcp.json.\n4. Restart Cursor and verify the connection by asking a simple question like 'List my Taboola accounts'.\n5. Use natural language queries to analyze campaign data, such as 'Show me my campaign performance for the last 30 days'.",
    "category": "Analytics",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/m0h2g9p54p.avif"
  },
  "thoughtful-claude": {
    "name": "Thoughtful Claude - DeepSeek R1 Reasoning Server",
    "githubLink": "https://github.com/martinbowling/thoughtful-claude",
    "package": "thoughtful-claude",
    "description": "An MCP server integrating DeepSeek R1's advanced reasoning engine with Claude's thought process.",
    "installCommand": "git clone https://github.com/martinbowling/thoughtful-claude.git && cd thoughtful-claude && pip install \"mcp[cli]\" httpx python-dotenv && echo \"DEEPSEEK_API_KEY=your_key_here\" > .env && mcp install server.py -f .env",
    "requiredEnvVars": [
      "DEEPSEEK_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Create a .env file with your DeepSeek API key.\n3. Run 'mcp install server.py -f .env' to register the server with Claude Desktop.\n4. Start using Claude with the integrated DeepSeek R1 reasoning capabilities.",
    "category": "AI/ML",
    "stars": 54,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "scaflog-zoho": {
    "name": "scaflog-zoho-mcp-server",
    "githubLink": "https://github.com/mastercode-io/scaflog-zoho-mcp-server",
    "package": "scaflog-zoho-mcp-server",
    "description": "An MCP server for managing a simple note storage system with integration into Zoho Creator, supporting note:// URIs, note summarization, and adding notes as a tool.",
    "installCommand": "uvx scaflog-zoho-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "style"
    ],
    "usageInstructions": "1. Install the server using the command: uvx scaflog-zoho-mcp-server.\n2. Configure the server in Claude Desktop by adding the MCP server configuration under 'mcpServers'.\n3. Use the 'add-note' tool to add new notes with 'name' and 'content' parameters.\n4. Use the 'summarize-notes' prompt with an optional 'style' argument (brief/detailed) to generate summaries of all stored notes.\n5. For development, clone the repository and run the server locally using the provided configuration.",
    "category": "Productivity",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "serper": {
    "name": "Serper Search and Scrape MCP Server",
    "githubLink": "https://github.com/marcopesani/mcp-server-serper",
    "package": "serper-search-scrape-mcp-server",
    "description": "An MCP server providing web search and webpage scraping capabilities using Serper API, integrating with Claude Desktop.",
    "installCommand": "npx -y @smithery/cli install @marcopesani/mcp-server-serper --client claude",
    "requiredEnvVars": [
      "SERPER_API_KEY"
    ],
    "optionalParams": [
      "region",
      "language",
      "location",
      "autocorrect",
      "site",
      "filetype",
      "inurl",
      "intitle",
      "related",
      "cache",
      "before",
      "after",
      "exact",
      "exclude",
      "or"
    ],
    "usageInstructions": "1. Set SERPER_API_KEY environment variable with your Serper API key.\n2. Configure the server in Claude Desktop by adding the server config to claude_desktop_config.json.\n3. For other clients like Cline and Cursor, follow their respective configuration instructions.",
    "category": "API Integration",
    "stars": 72,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "podman": {
    "name": "Podman MCP Server",
    "githubLink": "https://github.com/manusa/podman-mcp-server",
    "package": "podman-mcp-server",
    "description": "A powerful and flexible MCP server for container runtimes supporting Podman and Docker.",
    "installCommand": "npm install -g podman-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "--sse-port"
    ],
    "usageInstructions": "To use the Podman MCP server, configure it in your application or IDE by specifying the command as `npx podman-mcp-server@latest` or run it directly using the installed binary. For advanced configuration, use the `--sse-port` flag to specify a custom port for Server-Sent Events.",
    "category": "DevOps",
    "stars": 19,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "freeagent": {
    "name": "FreeAgent MCP Server",
    "githubLink": "https://github.com/markpitt/freeagent-mcp",
    "package": "freeagent-mcp",
    "description": "A Claude MCP server for managing FreeAgent timeslips and timers, allowing Claude to interact with your FreeAgent account to track time, manage timers, and handle timeslip operations.",
    "installCommand": "git clone https://github.com/markpitt/freeagent-mcp.git && cd freeagent-mcp && npm install",
    "requiredEnvVars": [
      "FREEAGENT_CLIENT_ID",
      "FREEAGENT_CLIENT_SECRET",
      "FREEAGENT_ACCESS_TOKEN",
      "FREEAGENT_REFRESH_TOKEN"
    ],
    "optionalParams": [
      "from_date",
      "to_date",
      "updated_since",
      "view",
      "user",
      "task",
      "project",
      "nested",
      "comment"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using the install command. 2. Set your FreeAgent OAuth credentials as environment variables. 3. Add the server to your MCP settings with the provided JSON configuration. 4. Use the server to manage timeslips and timers via the specified JSON commands.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "verge-news": {
    "name": "The Verge News MCP Server",
    "githubLink": "https://github.com/manimohans/verge-news-mcp",
    "package": "@manimohans/verge-news-mcp",
    "description": "An MCP server that provides tools to fetch and search news from The Verge's RSS feed.",
    "installCommand": "git clone https://github.com/manimohans/verge-news-mcp.git && cd verge-news-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "keyword",
      "days"
    ],
    "usageInstructions": "1. Run the server using 'npm start'. 2. Configure Claude for Desktop by adding the server configuration to claude_desktop_config.json. 3. Alternatively, use with Smithery by running 'smithery use https://github.com/manimohans/verge-news-mcp'.",
    "category": "News/Information Retrieval",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "together": {
    "name": "Image Generation MCP Server",
    "githubLink": "https://github.com/manascb1344/together-mcp-server",
    "package": "together-mcp",
    "description": "An MCP server for generating high-quality images using the Flux.1 Schnell model via Together AI.",
    "installCommand": "npm install together-mcp",
    "requiredEnvVars": [
      "TOGETHER_API_KEY"
    ],
    "optionalParams": [
      "model",
      "width",
      "height",
      "steps",
      "n",
      "response_format",
      "image_path"
    ],
    "usageInstructions": "1. Install using 'npm install together-mcp'. 2. Configure MCP server with TOGETHER_API_KEY. 3. Use 'generate_image' tool with required 'prompt' parameter.",
    "category": "AI/ML",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "farcaster": {
    "name": "Farcaster MCP Server",
    "githubLink": "https://github.com/manimohans/farcaster-mcp",
    "package": "farcaster-mcp",
    "description": "An MCP server that provides tools to interact with the Farcaster network, allowing AI models to fetch casts, search channels, and analyze content.",
    "installCommand": "git clone https://github.com/manimohans/farcaster-mcp.git && cd farcaster-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "limit"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using the install command. 2. Run the server with 'npm start'. 3. For integration with Claude for Desktop, add the server configuration to the 'claude_desktop_config.json' file. 4. Use the available tools 'get-user-casts', 'get-username-casts', and 'get-channel-casts' with appropriate parameters to fetch Farcaster data.",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "n8n-workflow-builder": {
    "name": "n8n Workflow Builder MCP Server",
    "githubLink": "https://github.com/makafeli/n8n-workflow-builder",
    "package": "n8n-workflow-builder",
    "description": "An MCP server for managing n8n workflows, providing tools to list, create, update, delete, activate, and deactivate workflows.",
    "installCommand": "git clone https://github.com/makafeli/n8n-workflow-builder.git && cd n8n-workflow-builder && npm install",
    "requiredEnvVars": [
      "N8N_HOST",
      "N8N_API_KEY"
    ],
    "optionalParams": [
      "command",
      "args",
      "disabled",
      "alwaysAllow",
      "autoApprove"
    ],
    "usageInstructions": "1. Clone the repository and navigate to the project directory. 2. Install dependencies using 'npm install'. 3. Build the project with 'npm run build'. 4. Start the server using 'npm start'. 5. Configure the 'cline_mcp_settings.json' file with the required environment variables (N8N_HOST and N8N_API_KEY). 6. Use the provided tools and resources to manage workflows and executions.",
    "category": "Development Tools",
    "stars": 277,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "elevenlabs": {
    "name": "ElevenLabs MCP Server",
    "githubLink": "https://github.com/mamertofabian/elevenlabs-mcp-server",
    "package": "elevenlabs-mcp-server",
    "description": "An MCP server integrating ElevenLabs text-to-speech API with features for audio generation, voice management, and history tracking.",
    "installCommand": "npx -y @smithery/cli install elevenlabs-mcp-server --client claude",
    "requiredEnvVars": [
      "ELEVENLABS_API_KEY",
      "ELEVENLABS_VOICE_ID"
    ],
    "optionalParams": [
      "ELEVENLABS_MODEL_ID",
      "ELEVENLABS_STABILITY",
      "ELEVENLABS_SIMILARITY_BOOST",
      "ELEVENLABS_STYLE",
      "ELEVENLABS_OUTPUT_DIR"
    ],
    "usageInstructions": "1. Configure MCP settings in cline_mcp_settings.json\n2. Set required environment variables: ELEVENLABS_API_KEY and ELEVENLABS_VOICE_ID\n3. For development: clone repository, create .env file with credentials, and run with uv",
    "category": "AI/ML",
    "stars": 99,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "everything-search": {
    "name": "Everything Search MCP Server",
    "githubLink": "https://github.com/mamertofabian/mcp-everything-search",
    "package": "mcp-server-everything-search",
    "description": "An MCP server that provides fast file searching capabilities across Windows, macOS, and Linux using platform-specific tools like Everything SDK, mdfind, and locate.",
    "installCommand": "npx -y @smithery/cli install mcp-server-everything-search --client claude",
    "requiredEnvVars": [
      "EVERYTHING_SDK_PATH"
    ],
    "optionalParams": [
      "max_results",
      "match_path",
      "match_case",
      "match_whole_word",
      "match_regex",
      "sort_by"
    ],
    "usageInstructions": "1. Install the required platform-specific prerequisites (Everything SDK on Windows, locate/plocate on Linux, or mdfind on macOS). 2. Set the EVERYTHING_SDK_PATH environment variable on Windows to the path of the Everything64.dll file. 3. Run the server using the command specified in your claude_desktop_config.json. 4. Use the 'search' tool with query parameters to search for files and folders.",
    "category": "File Management",
    "stars": 211,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "ayd": {
    "name": "MCP Ayd Server",
    "githubLink": "https://github.com/macrat/mcp-ayd-server",
    "package": "mcp-ayd-server",
    "description": "MCP server for Ayd, enabling integration with AI assistants like Claude Desktop.",
    "installCommand": "git clone https://github.com/macrat/mcp-ayd-server && cd mcp-ayd-server && go build",
    "requiredEnvVars": [],
    "optionalParams": [
      "args",
      "command path"
    ],
    "usageInstructions": "1. Download the latest binary from the release page. 2. Configure your client's configuration file with the command path and arguments. 3. Run the client app and interact with the assistant.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "ragrabbit": {
    "name": "RagRabbit MCP Server",
    "githubLink": "https://github.com/madarco/ragrabbit",
    "package": "@ragrabbit/mcp",
    "description": "Self-hosted AI search and MCP server for documentation retrieval using semantic search",
    "installCommand": "npx @ragrabbit/mcp http://<RagRabbit install>/ <name of your documentation>",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "AUTH_USERNAME",
      "AUTH_PASSWORD",
      "AUTH_SECRET"
    ],
    "optionalParams": [
      "RESEND_AUTH",
      "RESEND_ALLOWED_EMAILS",
      "SIMULATE_EMAILS",
      "buttonText",
      "searchPlaceholder"
    ],
    "usageInstructions": "1. Deploy on Vercel with required environment variables. 2. Configure Claude Desktop or Cursor IDE to use the MCP server with 'npx @ragrabbit/mcp'. 3. Use the chat widget or search input in your application.",
    "category": "AI/ML",
    "stars": 109,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "searxng": {
    "name": "SearXNG MCP Server",
    "githubLink": "https://github.com/maccam912/searxng-mcp-server",
    "package": "searxng-mcp-server",
    "description": "An MCP server for SearXNG, enabling AI assistants to search the web through SearXNG instances.",
    "installCommand": "uv sync && uv run server.py --url https://searxng.example.com",
    "requiredEnvVars": [],
    "optionalParams": [
      "--url"
    ],
    "usageInstructions": "1. Install using 'uv sync'. 2. Run with 'uv run server.py --url <your-searxng-url>'. 3. Configure in MCP using the provided JSON configuration. Alternatively, use Docker: 'docker build -t searxng-mcp-server . && docker run -p8080:8080 searxng-mcp-server'",
    "category": "Web Scraping",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "fathom-analytics": {
    "name": "MCP Fathom Analytics",
    "githubLink": "https://github.com/mackenly/mcp-fathom-analytics",
    "package": "mcp-fathom-analytics",
    "description": "An MCP server for accessing Fathom Analytics data through an AI assistant",
    "installCommand": "npx -y mcp-fathom-analytics",
    "requiredEnvVars": [
      "FATHOM_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure in Claude Desktop using JSON config with FATHOM_API_KEY environment variable",
    "category": "Analytics",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "websearch-tools": {
    "name": "WebSearch",
    "githubLink": "https://github.com/m4s1t4/webSearch-Tools",
    "package": "websearch",
    "description": "A powerful web search and content extraction tool built with Python, leveraging the Firecrawl API for advanced web scraping, searching, and content analysis capabilities.",
    "installCommand": "git clone https://github.com/m4s1t4/webSearch-Tools && cd webSearch-Tools && uv venv && uv sync",
    "requiredEnvVars": [
      "FIRECRAWL_API_KEY"
    ],
    "optionalParams": [
      "OPENAI_API_KEY",
      "TAVILY_API_KEY"
    ],
    "usageInstructions": "1. Install uv and set up a virtual environment. 2. Clone the repository and install dependencies. 3. Create a .env file with your API keys. 4. Configure the server for use with Claude for Desktop by adding the 'websearch' server configuration to the 'mcpServers' section in the configuration file. 5. Restart Claude for Desktop to access the WebSearch tools. Available tools include Search, Extract Information, Crawl Websites, and Scrape Content.",
    "category": "Web Scraping",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "yapi": {
    "name": "Yapi Auto MCP Server",
    "githubLink": "https://github.com/lzsheng/Yapi-MCP",
    "package": "yapi-auto-mcp",
    "description": "一个基于 Model Context Protocol 的服务器，专为 YApi 接口管理平台设计，允许在支持 MCP 的 AI 工具中直接操作 YApi 接口文档。",
    "installCommand": "npx -y yapi-auto-mcp --stdio --yapi-base-url=https://your-yapi-domain.com --yapi-token=projectId:your_token_here",
    "requiredEnvVars": [
      "YAPI_BASE_URL",
      "YAPI_TOKEN"
    ],
    "optionalParams": [
      "YAPI_CACHE_TTL",
      "YAPI_LOG_LEVEL",
      "PORT"
    ],
    "usageInstructions": "1. 获取 YApi Token 并配置到环境变量或命令行参数中。\n2. 在支持 MCP 的 AI 工具（如 Cursor）中配置 MCP 服务器，使用 npx 或本地开发模式启动服务。\n3. 在 AI 工具中直接搜索、查看、创建和更新 YApi 接口文档。",
    "category": "API Integration",
    "stars": 16,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "claude-repl": {
    "name": "Claude REPL Server",
    "githubLink": "https://github.com/lyuhau/claude-mcp-repl",
    "package": "claude-mcp-repl",
    "description": "A Python-based REPL server enhancing Claude with Python execution, shell commands, and file manipulation capabilities.",
    "installCommand": "git clone https://github.com/lyuhau/claude-mcp-repl.git && cd claude-mcp-repl && poetry install",
    "requiredEnvVars": [],
    "optionalParams": [
      "Claude Desktop config file settings"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'poetry install' or 'uv pip install -r pyproject.toml'. 2. Configure Claude Desktop by adding the MCP server configuration to the config file located at %APPDATA%/Roaming/Claude/claude_desktop_config.json (Windows) or respective OS-specific path. 3. Start using the REPL server with Python, shell commands, and file manipulation tools.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "brightdata": {
    "name": "Bright Data MCP",
    "githubLink": "https://github.com/luminati-io/brightdata-mcp",
    "package": "@brightdata/mcp",
    "description": "Enables LLMs, agents, and apps to access, discover, and extract real-time web data seamlessly, with features like web unlocking and browser automation.",
    "installCommand": "npx -y @brightdata/mcp",
    "requiredEnvVars": [
      "API_TOKEN"
    ],
    "optionalParams": [
      "WEB_UNLOCKER_ZONE",
      "BROWSER_ZONE",
      "RATE_LIMIT"
    ],
    "usageInstructions": "1. Install Node.js and ensure `npx` is available. 2. Set the `API_TOKEN` environment variable with your Bright Data API token. 3. Optionally configure `WEB_UNLOCKER_ZONE`, `BROWSER_ZONE`, and `RATE_LIMIT` for advanced settings. 4. Run `npx @brightdata/mcp` to start the server.",
    "category": "Web Scraping",
    "stars": 838,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/x1hx87p3o5o.png"
  },
  "voice-call": {
    "name": "Voice Call MCP Server",
    "githubLink": "https://github.com/lukaskai/voice-call-mcp-server",
    "package": "voice-call-mcp-server",
    "description": "A Model Context Protocol (MCP) server that enables AI assistants like Claude to initiate and manage voice calls using Twilio and OpenAI's GPT-4o Realtime model.",
    "installCommand": "git clone https://github.com/lukaskai/voice-call-mcp-server.git && cd voice-call-mcp-server && npm install && npm run build",
    "requiredEnvVars": [
      "TWILIO_ACCOUNT_SID",
      "TWILIO_AUTH_TOKEN",
      "TWILIO_NUMBER",
      "OPENAI_API_KEY",
      "NGROK_AUTHTOKEN"
    ],
    "optionalParams": [
      "RECORD_CALLS"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Set required environment variables (Twilio credentials, OpenAI API key, ngrok authtoken). 3. Configure Claude Desktop with the MCP server command and environment variables. 4. Use Claude to initiate voice calls by specifying phone numbers and conversation context. Ensure all phone numbers are in E.164 format and be mindful of Twilio and OpenAI rate limits.",
    "category": "Communication",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "mitmproxy": {
    "name": "mitmproxy-mcp",
    "githubLink": "https://github.com/lucasoeth/mitmproxy-mcp",
    "package": "mitmproxy-mcp",
    "description": "A Model Context Protocol (MCP) server that implements a simple note storage system with custom URI scheme, prompts for summarizing notes, and a tool for adding new notes.",
    "installCommand": "uvx mitmproxy-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "style (for summarize-notes prompt: 'brief' or 'detailed')"
    ],
    "usageInstructions": "1. Install using the provided install command. 2. Configure the server in the Claude Desktop configuration file under 'mcpServers'. 3. Use the 'add-note' tool to add notes with 'name' and 'content' arguments. 4. Use the 'summarize-notes' prompt with an optional 'style' argument for note summaries. 5. Debug using the MCP Inspector with the command: npx @modelcontextprotocol/inspector uv --directory [project-path] run mitmproxy-mcp.",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "digitalocean": {
    "name": "MCP DigitalOcean Server",
    "githubLink": "https://github.com/luc-io/mcp-digitalocean-server",
    "package": "mcp-digitalocean-server",
    "description": "A Model Context Protocol implementation that integrates with DigitalOcean for server management.",
    "installCommand": "git clone https://github.com/luc-io/mcp-digitalocean-server && cd mcp-digitalocean-server && pip install -r requirements.txt",
    "requiredEnvVars": [
      "DIGITALOCEAN_TOKEN"
    ],
    "optionalParams": [
      "MCP_SERVER_PORT",
      "MCP_SERVER_HOST"
    ],
    "usageInstructions": "1. Clone the repository and navigate into the directory. 2. Copy `.env.example` to `.env` and fill in your DigitalOcean API token. 3. Install dependencies using `pip install -r requirements.txt`. 4. Run the server with `python src/server.py`. Ensure the required environment variables are set in the `.env` file.",
    "category": "Cloud Services",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "ddgs": {
    "name": "MCP DuckDuckGo Search Server",
    "githubLink": "https://github.com/lowlyocean/mcp-ddgs",
    "package": "mcp-ddgs",
    "description": "A Model Context Protocol (MCP) server that enables searching via DuckDuckGo, based on Open-WebUI's built-in Web Search feature and using Server-Sent Events (SSE) for transport.",
    "installCommand": "git clone https://github.com/lowlyocean/mcp-ddgs && cd mcp-ddgs && pip install -r requirements.txt",
    "requiredEnvVars": [
      "DDGS_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "HOST",
      "DEBUG",
      "MAX_RESULTS"
    ],
    "usageInstructions": "After installation, set the DDGS_API_KEY environment variable with your DuckDuckGo API key. Start the server using the provided script. By default, it runs on localhost at port 8000. You can customize the host and port using the HOST and PORT environment variables.",
    "category": "Web Scraping",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "wecom-bot": {
    "name": "WeCom Bot MCP Server",
    "githubLink": "https://github.com/loonghao/wecom-bot-mcp-server",
    "package": "wecom-bot-mcp-server",
    "description": "An MCP-compliant server for sending messages to WeCom (WeChat Work) groups via bot integrations, supporting text, markdown, images, and files.",
    "installCommand": "pip install wecom-bot-mcp-server",
    "requiredEnvVars": [
      "WECOM_WEBHOOK_URL"
    ],
    "optionalParams": [
      "MCP_LOG_LEVEL",
      "MCP_LOG_FILE"
    ],
    "usageInstructions": "1. Install the package using pip. 2. Set the WECOM_WEBHOOK_URL environment variable with your WeCom bot webhook URL. 3. Run the server using 'wecom-bot-mcp-server'. 4. Use the provided Python API to send messages, files, or images to WeCom groups. Optional: configure logging with MCP_LOG_LEVEL and MCP_LOG_FILE.",
    "category": "Communication",
    "stars": 44,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "vikunja": {
    "name": "Vikunja MCP Server",
    "githubLink": "https://github.com/lowlyocean/mcp-vikunja",
    "package": "mcp-vikunja",
    "description": "Simple Model Context Protocol server for setting Vikunja reminders",
    "installCommand": "npm install mcp-vikunja",
    "requiredEnvVars": [
      "VIKUNJA_API_TOKEN",
      "VIKUNJA_API_URL"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "Create a .env file with required environment variables (VIKUNJA_API_TOKEN, VIKUNJA_API_URL). Configure PORT and LOG_LEVEL if needed. Run the server using the installation command's resulting CLI tool",
    "category": "Project Management",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "lumbretravel": {
    "name": "LumbreTravel MCP Server",
    "githubLink": "https://github.com/lumile/lumbretravel-mcp",
    "package": "@lumile/lumbretravel-mcp",
    "description": "An MCP server providing access to LumbreTravel API for managing travel programs and activities.",
    "installCommand": "npx -y @smithery/cli install @lumile/lumbretravel-mcp --client claude",
    "requiredEnvVars": [
      "CLIENT_ID",
      "CLIENT_SECRET",
      "EMAIL",
      "PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Get LumbreTravel Client ID and Client Secret from https://developers.mercadolibre.com/. 2. Configure Claude Desktop with the MCP server details. 3. For local installation: clone the repository, run 'npm install', and 'npm run build'.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "kube": {
    "name": "Kubernetes MCP Server",
    "githubLink": "https://github.com/lochgeo/kube-mcp",
    "package": "kube-mcp",
    "description": "An MCP server that integrates with Kubernetes using Minikube and interacts with Codename Goose AI agent",
    "installCommand": "uvx kube-mcp",
    "requiredEnvVars": [
      "GOOGLE_API_KEY"
    ],
    "optionalParams": [
      "Kubernetes configuration parameters"
    ],
    "usageInstructions": "1. Get a Gemini API Key from https://aistudio.google.com/\n2. Install Codename Goose and configure it using `goose configure`\n3. Clone this repository and test using `mcp dev server.py`\n4. Install Minikube and configure cluster access\n5. Start a Goose session with `goose session --with-builtin developer --with-extension \"uvx kube-mcp\"`",
    "category": "DevOps",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "stocks": {
    "name": "YFinance Trader MCP Tool",
    "githubLink": "https://github.com/luigiajah/mcp-stocks",
    "package": "yfinance-trader",
    "description": "An MCP tool providing stock market data and trading capabilities using yfinance library.",
    "installCommand": "pip install git+https://github.com/luigiajah/mcp-stocks.git",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Ensure Python3.10+ is installed. 2. Clone the repository and install dependencies using 'pip install -r requirements.txt' or 'pip install .'. 3. In Cursor, go to Settings > MCP, add new server with command 'python3 /path/to/yfinance-trader/main.py'.",
    "category": "API Integration",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "devdocs": {
    "name": "DevDocs MCP Implementation",
    "githubLink": "https://github.com/llmian-space/devdocs-mcp",
    "package": "devdocs-mcp",
    "description": "A Model Context Protocol (MCP) implementation for documentation management and integration, providing a structured framework for documentation processing, resource templates, and testing.",
    "installCommand": "git clone https://github.com/llmian-space/devdocs-mcp && cd devdocs-mcp && pip install -r src/requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "CACHE_SIZE",
      "MAX_CONNECTIONS"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using pip install -r src/requirements.txt.\n2. Run tests with pytest tests/property/test_templates.py.\n3. Implement new features following the TDD approach and update documentation accordingly.\n4. Use the resource template system for URI-based documentation access and parameter validation.",
    "category": "Documentation Management",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "arango": {
    "name": "ArangoDB MCP Server",
    "githubLink": "https://github.com/lucas-deangelis/arango-mcp-server",
    "package": "arango-mcp-server",
    "description": "An implementation of the Model Context Protocol for ArangoDB, enabling interaction with ArangoDB databases through MCP tools and resources.",
    "installCommand": "npm install -g arango-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "ARANGODB_URL",
      "ARANGODB_USERNAME",
      "ARANGODB_PASSWORD"
    ],
    "usageInstructions": "To use the ArangoDB MCP Server, add the following configuration to your claude_desktop_config.json: \n{\n  \"mcpServers\": {\n    \"arangodb-account\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"arango-mcp-server\",\n        \"http://localhost:8529\",\n        \"root\",\n        \"root\"\n      ]\n    }\n  }\n}\nFor development, clone the repository, run `npm install`, `npm run dev:setup`, and then `npm run dev`.",
    "category": "Databases",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "simple-files-vectorstore": {
    "name": "Simple Files Vectorstore",
    "githubLink": "https://github.com/lishenxydlgzs/simple-files-vectorstore",
    "package": "@lishenxydlgzs/simple-files-vectorstore",
    "description": "An MCP server that provides semantic search capabilities across files by creating vector embeddings of file contents and watching specified directories.",
    "installCommand": "npm install -g @lishenxydlgzs/simple-files-vectorstore",
    "requiredEnvVars": [
      "WATCH_DIRECTORIES",
      "WATCH_CONFIG_FILE"
    ],
    "optionalParams": [
      "CHUNK_SIZE",
      "CHUNK_OVERLAP",
      "IGNORE_FILE"
    ],
    "usageInstructions": "Add the server to your MCP settings file with the command 'npx -y @lishenxydlgzs/simple-files-vectorstore' and specify the directories to watch using WATCH_DIRECTORIES or WATCH_CONFIG_FILE. Optional parameters like CHUNK_SIZE, CHUNK_OVERLAP, and IGNORE_FILE can be configured for customization.",
    "category": "Search & Knowledge Management",
    "stars": 24,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "git-tools": {
    "name": "MCP Git Tools",
    "githubLink": "https://github.com/lileeei/mcp-git-tools",
    "package": "mcp-git-tools",
    "description": "A Model Context Protocol (MCP) server that provides Git operations as tools, including status, branches, commit history, and more.",
    "installCommand": "git clone https://github.com/lileeei/mcp-git-tools.git && cd mcp-git-tools && cargo build",
    "requiredEnvVars": [],
    "optionalParams": [
      "repo_path",
      "max_count",
      "branch",
      "since",
      "until",
      "author",
      "remote",
      "force",
      "staged",
      "commit",
      "path",
      "update",
      "all",
      "hard",
      "target"
    ],
    "usageInstructions": "1. Clone the repository and build it using `cargo build`. 2. Run the server with `cargo run --bin mcp-git-server`. 3. Use the provided Rust client code to call Git tools via the MCP protocol. 4. Integrate into your own MCP server by registering the Git tools using `register_git_tools`.",
    "category": "Version Control",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "emotion": {
    "name": "mcp-emotions",
    "githubLink": "https://github.com/leovoon/mcp-emotion",
    "package": "mcp-emotions",
    "description": "A JavaScript-based MCP server project for emotion-related functionality, built using Bun runtime.",
    "installCommand": "bun install && bun run index.ts",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After installing dependencies with 'bun install', run the server using 'bun run index.ts'. This project was initialized with Bun v1.2.4 and requires the Bun runtime to execute.",
    "category": "Other",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "bluesky-context": {
    "name": "Bluesky Context Server",
    "githubLink": "https://github.com/laulauland/bluesky-context-server",
    "package": "@laulauland/bluesky-context-server",
    "description": "A simple MCP server that enables MCP clients to query Bluesky instances for context.",
    "installCommand": "npx -y @smithery/cli install @laulauland/bluesky-context-server --client claude",
    "requiredEnvVars": [
      "BLUESKY_APP_KEY",
      "BLUESKY_IDENTIFIER"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install the server using the provided command or manually place the code on your system.\n2. Configure the Claude Desktop app to use the server by editing the config.json file with the correct command path and environment variables.\n3. Set the required environment variables: BLUESKY_APP_KEY and BLUESKY_IDENTIFIER.",
    "category": "API Integration",
    "stars": 24,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "playwright-cdp": {
    "name": "MCP Playwright CDP",
    "githubLink": "https://github.com/lars-hagen/mcp-playwright-cdp",
    "package": "@lars-hagen/mcp-playwright-cdp",
    "description": "A Model Context Protocol server that provides browser automation capabilities using Playwright with Chrome DevTools Protocol (CDP) support, enabling LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.",
    "installCommand": "npx -y @smithery/cli install @lars-hagen/mcp-playwright-cdp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT (defaults to standard port)",
      "DEBUG (enables debug logging)",
      "CHROME_PATH (custom path to Chrome executable)"
    ],
    "usageInstructions": "1. Install via the provided command. 2. Configure your Claude Desktop with the server command and path. 3. Launch Chrome with remote debugging enabled using `--remote-debugging-port=9222`. 4. The server will connect to the running Chrome instance or launch a new one. 5. Use the server to automate browser interactions, take screenshots, and execute JavaScript.",
    "category": "Browser Automation",
    "stars": 25,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "liveblocks": {
    "name": "Liveblocks MCP Server",
    "githubLink": "https://github.com/liveblocks/liveblocks-mcp-server",
    "package": "@liveblocks/liveblocks-mcp-server",
    "description": "MCP server allowing AI to interact with Liveblocks REST API for managing rooms, threads, comments, and more.",
    "installCommand": "npx -y @smithery/cli install @liveblocks/liveblocks-mcp-server --client cursor --key [your_secret_key]",
    "requiredEnvVars": [
      "LIVEBLOCKS_SECRET_KEY"
    ],
    "optionalParams": [
      "--client"
    ],
    "usageInstructions": "1. Get your Liveblocks secret key from https://liveblocks.io/dashboard. 2. Run installation command with your secret key. 3. Configure client settings (Cursor, Claude Desktop, or VS Code) by adding server details with your secret key.",
    "category": "AI/ML",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/1wetk9hkh3z.png"
  },
  "rust-docs": {
    "name": "Rust Docs MCP Server",
    "githubLink": "https://github.com/laptou/rust-docs-mcp-server",
    "package": "rust-docs-mcp-server",
    "description": "An MCP server providing access to Rust documentation from docs.rs for AI tools.",
    "installCommand": "git clone https://github.com/laptou/rust-docs-mcp-server.git && cd rust-docs-mcp-server && bun install && bun run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and cd into it. 2. Run 'bun install' to install dependencies. 3. Run 'bun run build' to build the server. 4. Run 'bun run start' to start the server. Configure an MCP client to connect to this server.",
    "category": "Development Tools",
    "stars": 21,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "last9": {
    "name": "Last9 MCP Server",
    "githubLink": "https://github.com/last9/last9-mcp-server",
    "package": "@last9/mcp-server",
    "description": "An MCP server implementation for Last9 that enables AI agents to access real-time production context.",
    "installCommand": "npm install -g @last9/mcp-server",
    "requiredEnvVars": [
      "LAST9_BASE_URL",
      "LAST9_AUTH_TOKEN",
      "LAST9_REFRESH_TOKEN"
    ],
    "optionalParams": [
      "limit",
      "lookback_minutes",
      "start_time_iso",
      "end_time_iso",
      "span_name",
      "service",
      "severity"
    ],
    "usageInstructions": "Configure the MCP server with required environment variables (LAST9_BASE_URL, LAST9_AUTH_TOKEN, LAST9_REFRESH_TOKEN) and integrate with supported IDEs (Claude, Cursor, Windsurf, VS Code) by modifying their respective configuration files.",
    "category": "DevOps",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/b8hq9cm9oxi.jpg"
  },
  "ssh-tools": {
    "name": "SSH Tools MCP",
    "githubLink": "https://github.com/lightfate/ssh-tools-mcp",
    "package": "ssh-tools-mcp",
    "description": "An MCP server for SSH tools that allows connecting to remote servers and executing commands.",
    "installCommand": "git clone https://github.com/lightfate/ssh-tools-mcp && cd ssh-tools-mcp && pip install -r requirements.txt && python ssh_server.py",
    "requiredEnvVars": [],
    "optionalParams": [
      "hostname",
      "username",
      "password",
      "port",
      "command"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Run the server using 'python ssh_server.py'.\n3. Use the provided tools: connect_ssh, run_command, disconnect_ssh.\nEnsure the target server allows SSH password authentication.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "xcode-diagnostics": {
    "name": "Xcode Diagnostics MCP Plugin",
    "githubLink": "https://github.com/leftspin/mcp-xcode-diagnostics",
    "package": "mcp-xcode-diagnostics",
    "description": "An MCP plugin for extracting and viewing errors and warnings from Xcode build logs, providing diagnostics functionality to AI assistants.",
    "installCommand": "pip install mcp-xcode-diagnostics",
    "requiredEnvVars": [],
    "optionalParams": [
      "project_dir_name",
      "include_warnings"
    ],
    "usageInstructions": "After installation, use the plugin with any MCP-compatible client. The plugin requires macOS, Xcode installed, and Python 3.6+. It lists Xcode projects with build logs and extracts diagnostics from the latest build log.",
    "category": "Development Tools",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "telegram": {
    "name": "Telegram MCP Server",
    "githubLink": "https://github.com/lane83/mcp-telegram",
    "package": "mcp-telegram",
    "description": "An MCP server providing Telegram integration for sending messages and secure chat ID validation.",
    "installCommand": "git clone https://github.com/lane83/mcp-telegram.git && cd mcp-telegram && npm install && npm run build",
    "requiredEnvVars": [
      "TELEGRAM_BOT_TOKEN",
      "TELEGRAM_CHAT_ID"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and follow setup instructions in userInstructions/telegram_server_setup.md\n2. Configure your Telegram bot token and chat ID\n3. Run: npm start",
    "category": "Communication",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "langfuse": {
    "name": "Langfuse Prompt Management MCP Server",
    "githubLink": "https://github.com/langfuse/mcp-server-langfuse",
    "package": "@langfuse/mcp-server-langfuse",
    "description": "MCP server for Langfuse Prompt Management, enabling access and management of Langfuse prompts through the Model Context Protocol.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "LANGFUSE_PUBLIC_KEY",
      "LANGFUSE_SECRET_KEY",
      "LANGFUSE_BASEURL"
    ],
    "optionalParams": [
      "cursor",
      "name",
      "arguments"
    ],
    "usageInstructions": "1. Install dependencies with `npm install`. 2. Build the server with `npm run build`. 3. Add the server to your MCP clients (e.g., Claude Desktop or Cursor) by specifying the command `node build/index.js` with the required environment variables: LANGFUSE_PUBLIC_KEY, LANGFUSE_SECRET_KEY, and LANGFUSE_BASEURL. 4. Use the MCP server to list and retrieve Langfuse prompts via the MCP Prompts specification.",
    "category": "AI/ML",
    "stars": 108,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "client-configuration": {
    "name": "MCP Client Configuration Server",
    "githubLink": "https://github.com/landicefu/mcp-client-configuration-server",
    "package": "@landicefu/mcp-client-configuration-server",
    "description": "Manages configurations for different MCP clients by retrieving, listing, adding, and removing server configurations from client configuration files.",
    "installCommand": "npm install -g @landicefu/mcp-client-configuration-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "client",
      "server_name",
      "json_config",
      "allow_override"
    ],
    "usageInstructions": "1. Install the server using 'npm install -g @landicefu/mcp-client-configuration-server'.\n2. Add it to your MCP settings configuration as shown in the README.\n3. Use the provided tools (get_configuration_path, get_configuration, list_servers, get_server_configuration, add_server_configuration, remove_server_configuration) to manage server configurations.\n4. Example: Copy an MCP server configuration from one client to another by retrieving and adding the configuration with the same settings.",
    "category": "Configuration Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "divide-and-conquer": {
    "name": "Divide and Conquer MCP Server",
    "githubLink": "https://github.com/landicefu/divide-and-conquer-mcp-server",
    "package": "@landicefu/divide-and-conquer-mcp-server",
    "description": "An MCP server that enables AI agents to break down complex tasks into manageable pieces using a structured JSON format for task tracking and context preservation.",
    "installCommand": "npx -y @smithery/cli install @landicefu/divide-and-conquer-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "task_description",
      "context_for_all_tasks",
      "initial_checklist",
      "metadata",
      "include_descriptions"
    ],
    "usageInstructions": "1. Add the server to your MCP configuration using the provided JSON format. 2. Initialize a new task with `initialize_task` and add checklist items using `add_checklist_item`. 3. Use tools like `get_checklist_summary` and `get_current_task_details` to monitor progress and retrieve task details. 4. For local development, clone the repository, install dependencies, and build the server.",
    "category": "Development Tools",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "comfy": {
    "name": "Comfy MCP Server",
    "githubLink": "https://github.com/lalanikarim/comfy-mcp-server",
    "package": "comfy-mcp-server",
    "description": "A server using FastMCP framework to generate images based on prompts via a remote Comfy server.",
    "installCommand": "uvx comfy-mcp-server",
    "requiredEnvVars": [
      "COMFY_URL",
      "COMFY_WORKFLOW_JSON_FILE",
      "PROMPT_NODE_ID",
      "OUTPUT_NODE_ID",
      "OUTPUT_MODE"
    ],
    "optionalParams": [
      "OLLAMA_API_BASE",
      "PROMPT_LLM"
    ],
    "usageInstructions": "1. Set required environment variables: COMFY_URL, COMFY_WORKFLOW_JSON_FILE, PROMPT_NODE_ID, OUTPUT_NODE_ID, and OUTPUT_MODE.\n2. Optionally set OLLAMA_API_BASE and PROMPT_LLM if using Ollama for prompt generation.\n3. Run the server using: uvx comfy-mcp-server\n4. Use the generate_image function to create images from prompts or generate_prompt to create prompts from topics.",
    "category": "AI/ML",
    "stars": 25,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "cryptopanic": {
    "name": "cryptopanic-mcp-server",
    "githubLink": "https://github.com/kukapay/cryptopanic-mcp-server",
    "package": "cryptopanic-mcp-server",
    "description": "Provides the latest cryptocurrency news to AI agents using the CryptoPanic API.",
    "installCommand": "git clone https://github.com/kukapay/cryptopanic-mcp-server && cd cryptopanic-mcp-server && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "CRYPTOPANIC_API_PLAN",
      "CRYPTOPANIC_API_KEY"
    ],
    "optionalParams": [
      "kind",
      "num_pages"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Obtain a CryptoPanic API plan and key from https://cryptopanic.com/developers/api/. 3. Add the server entry to your configuration file with the correct API credentials and server path. 4. Run the server using the provided command in the configuration.",
    "category": "API Integration",
    "stars": 43,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "paypal-java": {
    "name": "PayPal Java MCP Server",
    "githubLink": "https://github.com/kumartheashwani/paypal-java-mcp-server",
    "package": "paypal-java-mcp-server",
    "description": "A Java implementation of a PayPal MCP (Merchant Capability Platform) server that provides tools for analyzing and improving payment processing.",
    "installCommand": "mvn clean package && java -jar target/paypal-java-mcp-server-0.0.1-SNAPSHOT.jar",
    "requiredEnvVars": [],
    "optionalParams": [
      "server.port",
      "logging.level.com.example.mcpserver"
    ],
    "usageInstructions": "1. Clone the repository and navigate to the project directory.\n2. Build the application using `mvn clean package`.\n3. Run the server in web mode with `java -jar target/paypal-java-mcp-server-0.0.1-SNAPSHOT.jar`.\n4. For JSON-RPC over stdio mode, use `java -Dspring.profiles.active=stdio -Dspring.main.web-application-type=NONE -Djsonrpc.stdio.interactive=true -jar target/paypal-java-mcp-server-0.0.1-SNAPSHOT-stdio.jar`.\n5. Use the provided `test-stdio.sh` script to test the stdio interface.\n6. For non-interactive environments, use the `start-non-interactive.sh` script.\n7. For Docker deployment, run `./run-docker.sh`.\n8. Configure the server using `application.properties` for settings like server port and logging levels.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "ephor": {
    "name": "LLM Responses MCP Server",
    "githubLink": "https://github.com/kstrikis/ephor-mcp",
    "package": "bun install",
    "description": "An MCP server that allows multiple AI agents to share and read each other's responses to the same prompt.",
    "installCommand": "git clone https://github.com/kstrikis/ephor-mcp && cd ephor-mcp && bun install",
    "requiredEnvVars": [],
    "optionalParams": [
      "prompt"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'bun install'.\n2. Build the TypeScript code with 'bun run build'.\n3. Start the server in development mode with 'bun run dev'.\n4. Use the 'submit-response' and 'get-responses' tools to interact with the server.\n5. For deployment, run the 'deploy.sh' script on an EC2 instance or use Docker with 'docker-compose up -d'.",
    "category": "AI/ML",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "duckdb": {
    "name": "MCP Server for DuckDB",
    "githubLink": "https://github.com/ktanaka101/mcp-server-duckdb",
    "package": "mcp-server-duckdb",
    "description": "An MCP server implementation for interacting with DuckDB databases, enabling database operations like querying and schema inspection.",
    "installCommand": "uvx mcp-server-duckdb",
    "requiredEnvVars": [],
    "optionalParams": [
      "--db-path",
      "--readonly",
      "--keep-connection"
    ],
    "usageInstructions": "To use this server, first install it using 'uvx mcp-server-duckdb'. Then configure it in Claude Desktop's configuration file with the db-path parameter. For example: 'uvx mcp-server-duckdb --db-path ~/mcp-server-duckdb/data/data.db'. The --readonly flag can be used to prevent write operations.",
    "category": "Databases",
    "stars": 129,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "file-finder": {
    "name": "File Finder MCP Server",
    "githubLink": "https://github.com/kyan9400/file-finder-mcp",
    "package": "mcp",
    "description": "A Python-based MCP server that integrates with Cline in VSCode to search files in the file system.",
    "installCommand": "git clone https://github.com/kyan9400/file-finder-mcp.git && cd file-finder-mcp && pip install mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "Cline configuration settings"
    ],
    "usageInstructions": "1. Clone the repository and install the mcp package. 2. Configure Cline by editing cline_config.json. 3. Run the server manually using 'python file_finder_server.py' or let Cline start it automatically. Requires Python3.9+, mcp package, and VSCode with Cline extension.",
    "category": "File Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "whale-tracker": {
    "name": "Whale Tracker MCP Server",
    "githubLink": "https://github.com/kukapay/whale-tracker-mcp",
    "package": "@kukapay/whale-tracker-mcp",
    "description": "An MCP server for tracking cryptocurrency whale transactions using the Whale Alert API.",
    "installCommand": "npx -y @smithery/cli install @kukapay/whale-tracker-mcp --client claude",
    "requiredEnvVars": [
      "WHALE_ALERT_API_KEY"
    ],
    "optionalParams": [
      "blockchain",
      "min_value",
      "limit"
    ],
    "usageInstructions": "1. Install via Smithery or clone the repository and install dependencies using 'uv add \"mcp[cli]\" httpx python-dotenv' or 'pip install mcp httpx python-dotenv'. 2. Create a .env file with WHALE_ALERT_API_KEY. 3. Run 'mcp dev whale_tracker.py --with-editable .' for development or 'mcp install whale_tracker.py --name \"WhaleTracker\" -f .env' for Claude Desktop integration.",
    "category": "API Integration",
    "stars": 24,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "devrev": {
    "name": "DevRev MCP Server",
    "githubLink": "https://github.com/kpsunil97/devrev-mcp-server",
    "package": "devrev-mcp",
    "description": "A Model Context Protocol server for DevRev that enables searching and retrieving information using the DevRev APIs.",
    "installCommand": "uvx devrev-mcp",
    "requiredEnvVars": [
      "DEVREV_API_KEY"
    ],
    "optionalParams": [
      "command",
      "args",
      "env"
    ],
    "usageInstructions": "1. Create a DevRev account at https://app.devrev.ai/signup.\n2. Import data from sources like Salesforce or Zendesk.\n3. Generate an API access token from https://developer.devrev.ai/public/about/authentication#personal-access-token-usage.\n4. Set the DEVREV_API_KEY environment variable with your access token.\n5. Configure the server in the Claude Desktop app by adding the MCP server configuration as shown in the README.",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "discord-chat": {
    "name": "mcp-discord-chat",
    "githubLink": "https://github.com/koladev32/mcp-discord-chat",
    "package": "mcp-discord-chat",
    "description": "An MCP server that implements a note storage system with a custom note:// URI scheme, a 'summarize-notes' prompt, and an 'add-note' tool for managing notes.",
    "installCommand": "uvx mcp-discord-chat",
    "requiredEnvVars": [
      "UV_PUBLISH_TOKEN",
      "UV_PUBLISH_USERNAME",
      "UV_PUBLISH_PASSWORD"
    ],
    "optionalParams": [
      "style (for summarize-notes prompt)"
    ],
    "usageInstructions": "1. Install the server using `uvx mcp-discord-chat`.\n2. Configure the server in Claude Desktop by adding the `mcpServers` configuration with the appropriate command and arguments.\n3. Use the 'add-note' tool to add new notes with 'name' and 'content' parameters.\n4. Use the 'summarize-notes' prompt with an optional 'style' argument (brief/detailed) to generate summaries.\n5. For debugging, use the MCP Inspector with the command: `npx @modelcontextprotocol/inspector uv --directory /Users/speakeasy-projects/mcp-discord-chat run mcp-discord-chat`.",
    "category": "Communication",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "ynab": {
    "name": "MCP YNAB Server",
    "githubLink": "https://github.com/klauern/mcp-ynab",
    "package": "mcp-ynab",
    "description": "An MCP server implementation that provides access to YNAB (You Need A Budget) functionality through the Model Context Protocol, allowing users to view account balances, create transactions, and access YNAB data.",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [
      "YNAB_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Obtain a YNAB API key from your YNAB Developer Settings and set it as an environment variable (e.g., `YNAB_API_KEY=your_api_key`).\n2. Run the server in development mode with `task dev` or install for production with `task install`.\n3. Use the provided tools and resources to interact with YNAB data, such as `ynab://accounts` for listing accounts or `create_transaction` for creating new transactions.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "remote": {
    "name": "MCP Remote Server",
    "githubLink": "https://github.com/lallen30/mcp-remote-server",
    "package": "mcp-remote-server",
    "description": "Node.js implementation of MCP server providing React Native coding standards and examples",
    "installCommand": "git clone https://github.com/lallen30/mcp-remote-server.git && cd mcp-remote-server && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "TIMEOUT"
    ],
    "usageInstructions": "Start the server with 'npm start'. Configure MCP clients like Windsurf IDE by updating mcp_config.json with the server command and args.",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "anthropic-code-analyzer": {
    "name": "Anthropic MCP Code Analyzer",
    "githubLink": "https://github.com/kivo360/anthropic-mcp-code-analyzer",
    "package": "anthropic-mcp-code-analyzer",
    "description": "MCP server that analyzes open source projects and generates intelligent merge strategies using Claude",
    "installCommand": "git clone https://github.com/kivo360/anthropic-mcp-code-analyzer.git && cd anthropic-mcp-code-analyzer && npm install",
    "requiredEnvVars": [
      "ANTHROPIC_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Start the server: npm start\n2. Analyze repositories using: curl -X POST http://localhost:3000/analyze -H 'Content-Type: application/json' -d '{\"sourceRepo\": \"https://github.com/user/source-repo.git\", \"targetRepo\": \"https://github.com/user/target-repo.git\"}'",
    "category": "Development Tools",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "kibela": {
    "name": "Kibela MCP Server",
    "githubLink": "https://github.com/kiwamizamurai/mcp-kibela-server",
    "package": "@kiwamizamurai/mcp-kibela-server",
    "description": "MCP server implementation for Kibela API integration, enabling LLMs to interact with Kibela content",
    "installCommand": "npm install -g @kiwamizamurai/mcp-kibela-server",
    "requiredEnvVars": [
      "KIBELA_TEAM",
      "KIBELA_TOKEN"
    ],
    "optionalParams": [
      "coediting",
      "isArchived",
      "sortBy",
      "userIds",
      "folderIds",
      "limit",
      "include_image_data",
      "parentFolderId",
      "groupId",
      "folderId",
      "noteId",
      "path"
    ],
    "usageInstructions": "1. Set KIBELA_TEAM and KIBELA_TOKEN environment variables with your Kibela credentials\n2. Add the server configuration to your ~/.cursor/mcp.json file\n3. Use the available tools like kibela_search_notes, kibela_get_my_notes, etc. to interact with Kibela content\n4. For Docker usage, build the image with 'docker build -t mcp-kibela-server .' and configure accordingly",
    "category": "Knowledge Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "shopify-py": {
    "name": "Shopify Python MCP Server",
    "githubLink": "https://github.com/kishimoto-banana/shopify-py-mcp",
    "package": "shopify-py-mcp",
    "description": "Shopify APIと連携するMCPサーバーで、Claude DesktopからShopifyの商品情報を取得・操作できます。",
    "installCommand": "cd shopify-py-mcp && uv sync --dev --all-extras",
    "requiredEnvVars": [
      "SHOPIFY_SHOP_URL",
      "SHOPIFY_API_KEY",
      "SHOPIFY_API_PASSWORD"
    ],
    "optionalParams": [
      "SHOPIFY_API_VERSION",
      "limit",
      "product_id",
      "title",
      "body_html",
      "vendor",
      "product_type",
      "tags",
      "status",
      "variants",
      "options",
      "images"
    ],
    "usageInstructions": "1. 環境変数 `SHOPIFY_SHOP_URL`, `SHOPIFY_API_KEY`, `SHOPIFY_API_PASSWORD` を設定します。\n2. `uv sync --dev --all-extras` で依存関係をインストールします。\n3. Claude Desktopの設定ファイルにMCPサーバーの設定を追加し、商品一覧取得や商品作成などの操作を行います。\n4. デバッグには `npx @modelcontextprotocol/inspector uv --directory [path] run shopify-py-mcp` を使用します。",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "book-fetch": {
    "name": "Book Fetch MCP",
    "githubLink": "https://github.com/kinshukk/book-fetch-mcp",
    "package": "book-fetch-mcp",
    "description": "A Model Context Protocol (MCP) server that allows users to interact with any published book directly within Claude or other MCP clients.",
    "installCommand": "git clone https://github.com/kinshukk/book-fetch-mcp && cd book-fetch-mcp && uv pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "PATH_TO_PARENT_DIR"
    ],
    "usageInstructions": "1. Clone the repository and navigate to the project directory. 2. Install dependencies using uv. 3. Add the server configuration to your `claude_desktop_config.json` as specified in the README. 4. Run the server using the provided command in the configuration.",
    "category": "Knowledge Management",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "weather": {
    "name": "Weather MCP Server",
    "githubLink": "https://github.com/khandelwaltushar/weather-mcp-server",
    "package": "weather-mcp-server",
    "description": "An MCP server that provides weather data integration",
    "installCommand": "npm install -g weather-mcp-server",
    "requiredEnvVars": [
      "WEATHER_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Set WEATHER_API_KEY environment variable\n2. Run 'weather-mcp-server' command\n3. Configure PORT if needed (default: 8080)",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "for-sensor-device": {
    "name": "MCP Server for sensor device",
    "githubLink": "https://github.com/kmwebnet/MCP-Server-for-sensor-device",
    "package": "mcp-server-for-sensor-device",
    "description": "A Node.js MCP server that simulates a CO2 sensor device and interacts with Raspberry Pi Pico via USB.",
    "installCommand": "git clone https://github.com/kmwebnet/MCP-Server-for-sensor-device.git && cd MCP-Server-for-sensor-device && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "claude_desktop_config.json configuration"
    ],
    "usageInstructions": "1. Configure claude_desktop_config.json correctly. 2. Run 'node index.js' to start the server. Ensure Node.js is installed and dependencies are installed via 'npm install'.",
    "category": "System Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "mongo": {
    "name": "MCP MongoDB Server",
    "githubLink": "https://github.com/kiliczsh/mcp-mongo-server",
    "package": "mcp-mongo-server",
    "description": "A Model Context Protocol server that enables LLMs to interact with MongoDB databases, providing capabilities for inspecting collection schemas and executing MongoDB operations through a standardized interface.",
    "installCommand": "npm install -g mcp-mongo-server",
    "requiredEnvVars": [
      "MCP_MONGODB_URI"
    ],
    "optionalParams": [
      "MCP_MONGODB_READONLY",
      "--read-only",
      "-r",
      "objectIdMode"
    ],
    "usageInstructions": "Start the server by providing a MongoDB connection URI. Use environment variables for configuration, especially for CI/CD pipelines or Docker. For read-only mode, set MCP_MONGODB_READONLY to 'true' or use the --read-only flag. Integration with tools like Claude Desktop, Windsurf, and Cursor is supported via configuration files.",
    "category": "Data Storage",
    "stars": 243,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "mysql-java": {
    "name": "MySQL MCP Server",
    "githubLink": "https://github.com/kioyong/mysql-mcp-server-java",
    "package": "mcp-mysql-server-1.0.0.jar",
    "description": "Spring Boot server implementing Model Context Protocol (MCP) for MySQL database operations, allowing query execution, table listing, and schema retrieval.",
    "installCommand": "git clone https://github.com/kioyong/mysql-mcp-server-java.git && cd mysql-mcp-server-java && mvn install",
    "requiredEnvVars": [
      "SPRING_DATASOURCE_URL"
    ],
    "optionalParams": [
      "sql",
      "tableName"
    ],
    "usageInstructions": "1. Clone the repository and build using Maven. 2. Configure the MCP server config file with the correct Java command and environment variables. 3. Set SPRING_DATASOURCE_URL environment variable with your MySQL connection string.",
    "category": "Database",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "trinity": {
    "name": "Trinity-MCP Server",
    "githubLink": "https://github.com/kklab-com/trinity-mcp",
    "package": "trinity-mcp",
    "description": "An MCP server implementation providing JSON-RPC interface for various tools and capabilities",
    "installCommand": "git clone https://github.com/kklab-com/trinity-mcp && cd trinity-mcp && ./trinity-mcp -t <token>",
    "requiredEnvVars": [
      "token"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository: git clone https://github.com/kklab-com/trinity-mcp\n2. Navigate to the directory: cd trinity-mcp\n3. Start the server with a token: ./trinity-mcp -t <your_token>\n4. Use JSON-RPC methods like initialize, tools/list, and tools/call",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "yt-dlp": {
    "name": "yt-dlp-mcp",
    "githubLink": "https://github.com/kevinwatt/yt-dlp-mcp",
    "package": "@kevinwatt/yt-dlp-mcp",
    "description": "An MCP server that integrates with yt-dlp to provide video, audio, and subtitle download capabilities for LLMs.",
    "installCommand": "npx -y @kevinwatt/yt-dlp-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "resolution",
      "language"
    ],
    "usageInstructions": "1. Install yt-dlp for your OS (Windows: winget install yt-dlp, macOS: brew install yt-dlp, Linux: pip install yt-dlp).\n2. Add the server to Dive Desktop using the provided JSON configuration.\n3. Use the server to download videos, audio, subtitles, or transcripts by providing video URLs and optional parameters like resolution or language.\n4. For manual use, run 'npx @kevinwatt/yt-dlp-mcp'.",
    "category": "Media",
    "stars": 44,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "webhook": {
    "name": "MCP Webhook Server",
    "githubLink": "https://github.com/kevinwatt/mcp-webhook",
    "package": "@kevinwatt/mcp-webhook",
    "description": "An MCP server implementation that integrates with webhooks, providing message sending capabilities.",
    "installCommand": "npx -y @smithery/cli install @kevinwatt/mcp-webhook --client claude",
    "requiredEnvVars": [
      "WEBHOOK_URL"
    ],
    "optionalParams": [
      "username",
      "avatar_url"
    ],
    "usageInstructions": "1. Install via Smithery using the provided command. 2. Configure in Dive Desktop by adding MCP Server with the given JSON configuration. 3. Set WEBHOOK_URL environment variable. 4. Use LLM commands like 'Send a message to webhook: Hello World!'",
    "category": "API Integration",
    "stars": 22,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "choose": {
    "name": "Choose MCP Server",
    "githubLink": "https://github.com/keurcien/choose-mcp-server",
    "package": "choose-mcp-server",
    "description": "A Model Context Protocol (MCP) server for integrating with Google Cloud and dbt, allowing users to query datasets and models via the Claude Desktop Client.",
    "installCommand": "brew install uv && uvx choose-mcp-server",
    "requiredEnvVars": [
      "PROJECT_ID",
      "DATASETS"
    ],
    "optionalParams": [
      "DBT_MANIFEST_FILEPATH"
    ],
    "usageInstructions": "1. Download and install the Claude Desktop Client from https://claude.ai/download.\n2. Install uv via Homebrew with `brew install uv`.\n3. Install the MCP server using `uvx choose-mcp-server`.\n4. Edit the `claude_desktop_config.json` file in `~/Library/Application Support/Claude` to include the MCP server configuration with the required environment variables.\n5. Log into Google Cloud with `gcloud auth login --update-adc`.\n6. Open Claude Desktop and start asking questions.",
    "category": "Cloud Services",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "applemusic": {
    "name": "MCP-AppleMusic",
    "githubLink": "https://github.com/kennethreitz/mcp-applemusic",
    "package": "mcp-applemusic",
    "description": "A FastMCP server implementation for controlling Apple Music (formerly iTunes) on macOS through AppleScript commands.",
    "installCommand": "brew install uv && uvx -n mcp-applemusic",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Ensure Python 3.13+ is installed.\n2. Install Apple Music on macOS.\n3. Add the server configuration to `claude_desktop_config.json` as described in the README.\n4. Start the server using `python server.py`.\n5. Use the provided commands like `itunes_play()`, `itunes_pause()`, etc., to interact with Apple Music.",
    "category": "Media",
    "stars": 39,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "gmail-gas": {
    "name": "MCP Gmail Server",
    "githubLink": "https://github.com/kazuph/mcp-gmail-gas",
    "package": "@kazuph/mcp-gmail-gas",
    "description": "Model Context Protocol server for Gmail integration via Google Apps Script, enabling MCP clients like Claude Desktop to interact with Gmail accounts.",
    "installCommand": "npm install -g @kazuph/mcp-gmail-gas",
    "requiredEnvVars": [
      "GAS_ENDPOINT",
      "VALID_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Deploy the Google Apps Script with the provided `code.gs` file and obtain the deployment URL. 2. Generate a random API key for security. 3. Configure Claude Desktop by adding the `GAS_ENDPOINT` and `VALID_API_KEY` environment variables to its configuration file. 4. Use available tools like `gmail_search_messages`, `gmail_get_message`, and `gmail_download_attachment` to interact with Gmail.",
    "category": "API Integration",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "docs-rag": {
    "name": "mcp-docs-rag",
    "githubLink": "https://github.com/kazuph/mcp-docs-rag",
    "package": "@kazuph/mcp-docs-rag",
    "description": "A TypeScript-based MCP server implementing a RAG system for querying documents stored in a local directory, including Git repositories and text files, using Google's Gemini API for indexing and querying.",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [
      "GEMINI_API_KEY",
      "DOCS_PATH"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "MAX_DOCUMENTS",
      "CACHE_SIZE"
    ],
    "usageInstructions": "1. Set the GEMINI_API_KEY environment variable with your Google Gemini API key. 2. Set the DOCS_PATH environment variable to the directory where documents will be stored. 3. Add the server configuration to your Claude Desktop config file as shown in the README. 4. Use Claude to add documents (GitHub repos or text files) and query them using RAG.",
    "category": "Knowledge Management",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "backlog": {
    "name": "mcp-backlog-server",
    "githubLink": "https://github.com/katsuhirohonda/mcp-backlog-server",
    "package": "mcp-backlog-server",
    "description": "This is a TypeScript-based server that integrates Backlog with the Model Context Protocol (MCP), providing access to Backlog projects, issues, and wiki pages through MCP resources, tools, and prompts.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "BACKLOG_API_KEY",
      "BACKLOG_SPACE_URL"
    ],
    "optionalParams": [
      "件数",
      "並び順",
      "ステータス",
      "担当者",
      "ページネーション",
      "プロジェクト",
      "キーワード"
    ],
    "usageInstructions": "1. Install dependencies using 'npm install'.\n2. Set the required environment variables BACKLOG_API_KEY and BACKLOG_SPACE_URL.\n3. Build the server with 'npm run build' or use 'npm run watch' for development with auto-rebuild.\n4. Add the server configuration to Claude Desktop's config file as specified in the 'インストール' section.\n5. Use MCP tools and prompts to access Backlog projects, issues, and wiki pages.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "taskmanager": {
    "name": "MCP TaskManager",
    "githubLink": "https://github.com/kazuph/mcp-taskmanager",
    "package": "@kazuph/mcp-taskmanager",
    "description": "Model Context Protocol server for task management, allowing Claude Desktop to manage and execute tasks in a queue-based system.",
    "installCommand": "npx -y @kazuph/mcp-taskmanager",
    "requiredEnvVars": [],
    "optionalParams": [
      "action",
      "tasks",
      "taskId",
      "getNext"
    ],
    "usageInstructions": "1. Install Node.js18+ and Claude Desktop. 2. Configure Claude Desktop by adding the MCP TaskManager to the configuration file at ~/Library/Application Support/Claude/claude_desktop_config.json. 3. Use the TaskManager with actions: plan, execute, or complete.",
    "category": "Productivity",
    "stars": 141,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "github-pera1": {
    "name": "GitHub MCP Server for Pera1",
    "githubLink": "https://github.com/kazuph/mcp-github-pera1",
    "package": "@kazuph/mcp-github-pera1",
    "description": "An MCP server connecting GitHub code to Claude.ai using Pera1 service",
    "installCommand": "npx -y @kazuph/mcp-github-pera1",
    "requiredEnvVars": [],
    "optionalParams": [
      "url",
      "dir",
      "ext",
      "mode",
      "branch",
      "file"
    ],
    "usageInstructions": "Add the server to your MCP config file at ~/Library/Application Support/Claude/claude_desktop_config.json with 'npx' command and '-y @kazuph/mcp-github-pera1' args, then ask Claude about GitHub repositories using supported parameters",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "cairo-coder": {
    "name": "Cairo Coder MCP Server",
    "githubLink": "https://github.com/kasarlabs/cairo-coder-mcp",
    "package": "@kasarlabs/cairo-coder-mcp",
    "description": "A Model Context Protocol (MCP) server for Cairo and Starknet development assistance via the Cairo Coder API.",
    "installCommand": "npx -y @kasarlabs/cairo-coder-mcp",
    "requiredEnvVars": [
      "CAIRO_CODER_API_KEY"
    ],
    "optionalParams": [
      "CAIRO_CODER_API_ENDPOINT"
    ],
    "usageInstructions": "1. Install using the command: npx -y @kasarlabs/cairo-coder-mcp.\n2. Set the required environment variable CAIRO_CODER_API_KEY with your API key.\n3. Optionally, use CAIRO_CODER_API_ENDPOINT to connect to a local or custom Cairo Coder API endpoint.\n4. Use the MCP client to interact with the server by sending JSON requests with queries and optional context.",
    "category": "AI/ML",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/ar3dss1hvn4.png"
  },
  "hoverfly": {
    "name": "Hoverfly MCP Server",
    "githubLink": "https://github.com/kapishmalik/hoverfly-mcp-server",
    "package": "docker.io/kapish88/hoverfly-mcp-server",
    "description": "A Spring Boot-based Model Context Protocol (MCP) server that exposes Hoverfly as a programmable tool for AI assistants, enabling dynamic mocking of third-party APIs for development and testing.",
    "installCommand": "docker run -i --rm -p 8500:8500 -p 8888:8888 -v /path/to/your/data:/opt/hoverfly-mcp/simulation-data docker.io/kapish88/hoverfly-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "-v /path/to/your/data:/opt/hoverfly-mcp/simulation-data",
      "-p 8500:8500",
      "-p 8888:8888"
    ],
    "usageInstructions": "1. Ensure Docker is installed and running.\n2. Mount a volume at /path/to/your/data for simulation persistence.\n3. Run the Docker command to start the server.\n4. Add the server configuration to your .mcp.json or mcp.config.json file as shown in the README.\n5. Use the exposed MCP tools to manage Hoverfly simulations and mocks.",
    "category": "Development Tools",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/12m6s8fhva0b.png"
  },
  "fred": {
    "name": "FRED MCP Server",
    "githubLink": "https://github.com/kablewy/fred-mcp-server",
    "package": "fred-mcp-server",
    "description": "An MCP server implementation for accessing Federal Reserve Economic Data (FRED) API, providing tools to search and retrieve economic data series.",
    "installCommand": "git clone https://github.com/kablewy/fred-mcp-server && cd fred-mcp-server && npm install",
    "requiredEnvVars": [
      "FRED_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Copy `.env.example` to `.env` and add your FRED API key.\n3. For development: `npm run dev`.\n4. For production: `npm run build && npm start`.",
    "category": "API Integration",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "splunk": {
    "name": "Splunk MCP Tool",
    "githubLink": "https://github.com/livehybrid/splunk-mcp",
    "package": "splunk-mcp",
    "description": "A FastMCP-based tool for interacting with Splunk Enterprise/Cloud through natural language, providing search, index management, user management, and KV store operations.",
    "installCommand": "git clone https://github.com/livehybrid/splunk-mcp.git && cd splunk-mcp && poetry install",
    "requiredEnvVars": [
      "SPLUNK_HOST",
      "SPLUNK_PORT",
      "SPLUNK_USERNAME",
      "SPLUNK_PASSWORD"
    ],
    "optionalParams": [
      "SPLUNK_SCHEME",
      "VERIFY_SSL",
      "FASTMCP_LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with Poetry. 2. Copy and configure the .env file with your Splunk credentials. 3. Run the server in SSE mode (default), API mode, or STDIO mode using the appropriate command. For Docker usage, pull the image and run with environment variables configured.",
    "category": "API Integration",
    "stars": 50,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "azuredevops-bridge": {
    "name": "MCP Azure DevOps Bridge",
    "githubLink": "https://github.com/krishh-amilineni/mcp-azuredevops-bridge",
    "package": "mcp-azuredevops-bridge",
    "description": "A Model Context Protocol (MCP) integration server for Azure DevOps, enabling work item management, wiki documentation, sprint planning, and handling attachments and discussions.",
    "installCommand": "git clone https://github.com/krishh-amilineni/mcp-azuredevops-bridge.git && cd mcp-azuredevops-bridge && go build",
    "requiredEnvVars": [
      "AZURE_DEVOPS_ORG",
      "AZDO_PAT",
      "AZURE_DEVOPS_PROJECT"
    ],
    "optionalParams": [
      "AZURE_DEVOPS_WIKI_ID",
      "AZURE_DEVOPS_TEAM_PROJECT",
      "AZURE_DEVOPS_LOG_LEVEL"
    ],
    "usageInstructions": "1. Install Go 1.23 or later. 2. Clone the repository and build the project. 3. Set the required environment variables: AZURE_DEVOPS_ORG, AZDO_PAT, and AZURE_DEVOPS_PROJECT. 4. Add the server to your Windsurf/Cursor configuration with the full path to the binary and the required environment variables. 5. Use the server to manage work items, wiki pages, sprints, and attachments in Azure DevOps.",
    "category": "API Integration",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "coder-toolbox": {
    "name": "Coder Toolbox MCP Server",
    "githubLink": "https://github.com/lamemind/coder-toolbox-mcp-server",
    "package": "coder-toolbox-mcp-server",
    "description": "A utility toolkit for enhancing interaction between Claude and code, providing tools for code analysis, manipulation, and testing workflows.",
    "installCommand": "npm install -g coder-toolbox-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "LOG_LEVEL",
      "PORT"
    ],
    "usageInstructions": "After installation, configure the server by setting any desired optional parameters. Start the server and use the provided API endpoints for various code manipulation tasks.",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "imcp": {
    "name": "iMCP",
    "githubLink": "https://github.com/loopwork-ai/iMCP",
    "package": "loopwork/tap/iMCP",
    "description": "A macOS app that connects personal data with AI through Model Context Protocol (MCP) servers.",
    "installCommand": "brew install --cask loopwork/tap/iMCP",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Download and install iMCP using the provided command. 2. Open the app and activate required services through the menu bar icon. 3. Configure Claude Desktop by going to Settings > Developer > Edit Config. 4. Connect iMCP to Claude Desktop through the app menu or manual configuration. 5. Approve the connection when prompted in Claude Desktop.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/6gimvfgx1ps.svg"
  },
  "generate-pr": {
    "name": "Generate PR MCP",
    "githubLink": "https://github.com/kpndevroot/generate-pr-mcp",
    "package": "generate-pr-mcp",
    "description": "A Model Context Protocol server that automatically generates detailed Pull Request descriptions from code changes.",
    "installCommand": "npm install -g generate-pr-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run 'mcp-server' if installed globally, or 'npx generate-pr-mcp' to use with npx. The tool must be run in a git repository directory.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/5zdzhvqf0ml.jpeg"
  },
  "youtube-transcript": {
    "name": "YouTube Transcript Server",
    "githubLink": "https://github.com/kimtaeyoon83/mcp-server-youtube-transcript",
    "package": "@kimtaeyoon83/mcp-server-youtube-transcript",
    "description": "A Model Context Protocol server that enables retrieval of transcripts from YouTube videos through a simple interface.",
    "installCommand": "npx -y @smithery/cli install @kimtaeyoon83/mcp-server-youtube-transcript --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "lang"
    ],
    "usageInstructions": "To use the server, call the `get_transcript` tool with a YouTube video URL or video ID. Optionally specify a language code (e.g., 'en', 'ko'). Example: `await server.callTool('get_transcript', { url: 'https://www.youtube.com/watch?v=VIDEO_ID', lang: 'en' });`.",
    "category": "API Integration",
    "stars": 256,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "mamp-mysql": {
    "name": "MySQL MCP Server",
    "githubLink": "https://github.com/kerongon/mcp-server-mamp-mysql",
    "package": "mcp-server-mamp-mysql",
    "description": "An MCP server providing MySQL database access functionality with features like listing database tables and executing read-only SQL queries.",
    "installCommand": "git clone https://github.com/kerongon/mcp-server-mamp-mysql && cd mcp-server-mamp-mysql && npm install && npm run build",
    "requiredEnvVars": [
      "MYSQL_HOST",
      "MYSQL_USER",
      "MYSQL_PASS",
      "MYSQL_DB"
    ],
    "optionalParams": [
      "MYSQL_PORT",
      "MYSQL_SOCKET",
      "MYSQL_POOL_LIMIT"
    ],
    "usageInstructions": "After installation, configure the required MySQL environment variables. The server will start automatically when initialized by the MCP system. Ensure you have MySQL server accessible with the provided credentials.",
    "category": "Databases",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "browser-tabs": {
    "name": "MCP Browser Tabs",
    "githubLink": "https://github.com/kazuph/mcp-browser-tabs",
    "package": "@kazuph/mcp-browser-tabs",
    "description": "Model Context Protocol server for retrieving and managing Chrome browser tabs information, allowing MCP clients like Claude Desktop to fetch and control open Chrome tabs.",
    "installCommand": "npm install -g @kazuph/mcp-browser-tabs",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG"
    ],
    "usageInstructions": "To use this tool with Claude Desktop, add the following to your Claude Desktop configuration (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"tools\": {\n    \"browser-tabs\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kazuph/mcp-browser-tabs\"]\n    }\n  }\n}\n```\n\nEnsure the following setup is complete:\n1. Enable Accessibility for Chrome in System Settings (Privacy & Security > Accessibility).\n2. Install Node.js 18+ and Google Chrome.\n3. Install tsx via `npm install -g tsx`.\n\nAvailable tools:\n- `get_tabs`: Retrieves all open Chrome tabs grouped by window.\n- `close_tab`: Closes a specific tab using window and tab indices.",
    "category": "Browser Automation",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "lichess": {
    "name": "Lichess MCP",
    "githubLink": "https://github.com/karayaman/lichess-mcp",
    "package": "@karayaman/lichess-mcp",
    "description": "An MCP server that enables natural language interaction with the Lichess chess platform for game play, analysis, account management, and tournament participation.",
    "installCommand": "npx -y @smithery/cli install @karayaman/lichess-mcp --client claude",
    "requiredEnvVars": [
      "LICHESS_TOKEN"
    ],
    "optionalParams": [
      "DEBUG"
    ],
    "usageInstructions": "1. Install the server using the provided command. 2. Set your Lichess API token via environment variables or the `set_token` tool. 3. Use the available tools for account management, game play, analysis, and tournaments. 4. For Claude Desktop integration, configure the server in the `claude_desktop_config.json` file with the `lichess-mcp` command and your API token.",
    "category": "API Integration",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "kagimcp": {
    "name": "Kagi MCP Server",
    "githubLink": "https://github.com/kagisearch/kagimcp",
    "package": "kagimcp",
    "description": "A Model Context Protocol (MCP) server that integrates with Kagi's search and summarization APIs, enabling tools like Claude Desktop to perform search and summarization tasks.",
    "installCommand": "npx -y @smithery/cli install kagimcp --client claude",
    "requiredEnvVars": [
      "KAGI_API_KEY"
    ],
    "optionalParams": [
      "KAGI_SUMMARIZER_ENGINE",
      "FASTMCP_LOG_LEVEL"
    ],
    "usageInstructions": "1. Install uv for your system. 2. Use the install command provided. 3. Configure the server in claude_desktop_config.json with the KAGI_API_KEY and optional KAGI_SUMMARIZER_ENGINE. 4. Pose a query requiring search or summarization in Claude Desktop.",
    "category": "API Integration",
    "stars": 125,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "webflow": {
    "name": "Webflow MCP Server",
    "githubLink": "https://github.com/kapilduraphe/webflow-mcp-server",
    "package": "@kapilduraphe/webflow-mcp-server",
    "description": "MCP server enabling Claude to interact with Webflow's APIs",
    "installCommand": "npx -y @smithery/cli install @kapilduraphe/webflow-mcp-server --client claude",
    "requiredEnvVars": [
      "WEBFLOW_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create a Webflow API Token. 2. Configure Claude Desktop configuration file with server details. 3. Set WEBFLOW_API_TOKEN environment variable. 4. Restart Claude Desktop.",
    "category": "API Integration",
    "stars": 18,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "snak": {
    "name": "Snak Agent Engine",
    "githubLink": "https://github.com/kasarlabs/snak",
    "package": "@snakagent/starknet-agent-kit",
    "description": "A powerful AI Agent engine for Starknet, available as NPM package and backend server",
    "installCommand": "git clone https://github.com/kasarlabs/snak.git && cd snak && pnpm install",
    "requiredEnvVars": [
      "STARKNET_PUBLIC_ADDRESS",
      "STARKNET_PRIVATE_KEY",
      "STARKNET_RPC_URL",
      "SERVER_API_KEY",
      "POSTGRES_USER",
      "POSTGRES_HOST",
      "POSTGRES_DB",
      "POSTGRES_PASSWORD",
      "POSTGRES_PORT"
    ],
    "optionalParams": [
      "LANGSMITH_TRACING",
      "LANGSMITH_ENDPOINT",
      "LANGSMITH_API_KEY",
      "LANGSMITH_PROJECT",
      "NODE_ENV",
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "GEMINI_API_KEY",
      "DEEPSEEK_API_KEY"
    ],
    "usageInstructions": "1. Create .env file from .env.example and fill required values\n2. Configure AI models in config/models/default.models.json\n3. Create agent configuration in config/agents/default.agent.json\n4. Run with 'pnpm run start' for prompt mode or 'pnpm run start:server' for server mode",
    "category": "AI/ML",
    "stars": 94,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/dzvdyv1vvbo.png"
  },
  "qrcode": {
    "name": "MCP QR Code Server",
    "githubLink": "https://github.com/jwalsh/mcp-server-qrcode",
    "package": "@jwalsh/mcp-server-qrcode",
    "description": "A Model Context Protocol (MCP) server that generates QR codes for various content types including URLs, WiFi credentials, contact information, and calendar events.",
    "installCommand": "npm install -g @jwalsh/mcp-server-qrcode",
    "requiredEnvVars": [],
    "optionalParams": [
      "size",
      "errorCorrection",
      "format"
    ],
    "usageInstructions": "After installation, the server can be used with MCP clients like Claude Desktop or Emacs with mcp.el. For example, in Emacs, use `mcp-call-tool` with the `generate-qrcode` method and specify content and format. For direct CLI usage, use `npx -y @jwalsh/mcp-server-qrcode` and send JSON-RPC commands to generate QR codes.",
    "category": "Development Tools",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "biomart": {
    "name": "Biomart MCP Server",
    "githubLink": "https://github.com/jzinno/biomart-mcp",
    "package": "@jzinno/biomart-mcp",
    "description": "An MCP server that interfaces with Biomart databases using pybiomart, providing tools for mart and dataset discovery, attribute and filter exploration, data retrieval, and ID translation.",
    "installCommand": "npx -y @smithery/cli install @jzinno/biomart-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "command",
      "args"
    ],
    "usageInstructions": "To use the Biomart MCP server, first install it via Smithery using the provided command. For development, clone the repository, create a virtual environment using 'uv venv', activate it, and run 'uv sync' or 'uv add mcp[cli] pybiomart'. The server can be run in dev mode using 'mcp dev biomart-mcp.py'. Configuration for Cursor involves adding an MCP server entry in either the global config or a project-specific '.cursor/mcp.json' file.",
    "category": "API Integration",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "api-expert": {
    "name": "MCP API Connect",
    "githubLink": "https://github.com/jwaldor/mcp-api-expert",
    "package": "mcp-api-connect",
    "description": "An MCP server that connects to any REST API by using provided API documentation and API keys in a message.",
    "installCommand": "npm i -g mcp-api-connect",
    "requiredEnvVars": [
      "API_KEY",
      "API_DOCUMENTATION_URL"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "MAX_REQUESTS",
      "TIMEOUT"
    ],
    "usageInstructions": "1. Install the package globally using 'npm i -g mcp-api-connect'.\n2. Run the setup command with 'mcpapiconnect install'.\n3. Restart Claude Desktop to apply changes.\n4. Provide API documentation and API keys in a message to connect to the desired REST API.",
    "category": "API Integration",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "untappd": {
    "name": "Untappd Model Context Protocol Server",
    "githubLink": "https://github.com/jtucker/mcp-untappd-server",
    "package": "mcp-untappd-server",
    "description": "A simple MCP server written in Node.js to query the Untappd API for beer information and user check-ins.",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "UNTAPPD_CLIENT_ID",
      "UNTAPPD_CLIENT_SECRET"
    ],
    "usageInstructions": "1. Install dependencies and build the server using `npm install && npm run build`. 2. Configure the server in your Claude Desktop config file by specifying the path to `build/index.js`. 3. Set optional environment variables `UNTAPPD_CLIENT_ID` and `UNTAPPD_CLIENT_SECRET` for API authentication. 4. Use the server to query Untappd via the supported tools: `search_beer`, `get_beer_info`, and `get_user_checkins`.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "scrape-copilot": {
    "name": "Puppeteer MCP Server",
    "githubLink": "https://github.com/jwaldor/mcp-scrape-copilot",
    "package": "@modelcontextprotocol/server-puppeteer",
    "description": "An MCP server providing browser automation capabilities using Puppeteer for LLM interactions.",
    "installCommand": "npx -y @modelcontextprotocol/server-puppeteer",
    "requiredEnvVars": [],
    "optionalParams": [
      "DOCKER_CONTAINER"
    ],
    "usageInstructions": "Configure using Claude Desktop configuration. For Docker: { \"mcpServers\": { \"puppeteer\": { \"command\": \"docker\", \"args\": [\"run\", \"-i\", \"--rm\", \"--init\", \"-e\", \"DOCKER_CONTAINER=true\", \"mcp/puppeteer\"] } } }. For NPX: { \"mcpServers\": { \"puppeteer\": { \"command\": \"npx\", \"args\": [\"-y\", \"@modelcontextprotocol/server-puppeteer\"] } } }",
    "category": "Browser Automation",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "laravel": {
    "name": "Laravel Helpers MCP",
    "githubLink": "https://github.com/jsonallen/laravel-mcp",
    "package": "laravel-mcp",
    "description": "A collection of Laravel helper tools for Cursor IDE integration, enhancing development workflow and debugging capabilities.",
    "installCommand": "git clone https://github.com/jsonallen/laravel-mcp.git && cd laravel-mcp && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "LARAVEL_PATH"
    ],
    "optionalParams": [
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "1. Clone the repository and install requirements. 2. Create a shell script wrapper at ~/bin/run-laravel-mcp. 3. Make the script executable. 4. Ensure ~/bin is in your PATH. 5. Set LARAVEL_PATH to your Laravel project path in the wrapper script.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "mcpunk": {
    "name": "MCPunk",
    "githubLink": "https://github.com/jurasofish/mcpunk",
    "package": "mcpunk",
    "description": "MCPunk is an MCP server that lets you explore and understand codebases through conversation by breaking files into logical chunks and giving the LLM tools to search and query these chunks.",
    "installCommand": "uvx mcpunk",
    "requiredEnvVars": [],
    "optionalParams": [
      "command path in claude_desktop_config.json"
    ],
    "usageInstructions": "1. Install uv from https://docs.astral.sh/uv/getting-started/installation/\n2. Configure Claude Desktop by adding 'mcpunk' to claude_desktop_config.json\n3. Restart Claude Desktop\n4. Use commands like 'configure_project', 'list_all_files_in_project', 'find_files_by_chunk_content' in chat",
    "category": "Development Tools",
    "stars": 50,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "sketch-context": {
    "name": "Sketch Context MCP",
    "githubLink": "https://github.com/jshmllr/Sketch-Context-MCP",
    "package": "sketch-context-mcp",
    "description": "A Model Context Protocol (MCP) server that integrates Sketch designs with IDEs like Cursor, enabling design-to-code workflows through real-time communication and component access.",
    "installCommand": "npm install -g sketch-context-mcp",
    "requiredEnvVars": [
      "SKETCH_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "LOCAL_SKETCH_PATH",
      "DEBUG_LEVEL",
      "--port",
      "--stdio"
    ],
    "usageInstructions": "1. Install the server globally with `npm install -g sketch-context-mcp`.\n2. Start the server with `sketch-context-mcp --local-file=/path/to/your/file.sketch` or use `npx sketch-context-mcp`.\n3. Install the Sketch plugin from the releases page and connect it to the server via the plugin interface.\n4. In Cursor IDE, add the MCP server URL `http://localhost:3333/sse` to enable design-to-code interactions.\n5. Use commands like `get_file`, `list_components`, and `create_rectangle` to interact with Sketch files from Cursor.",
    "category": "Design Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/ymq90al2l0n.png"
  },
  "file-modifier": {
    "name": "MCP Server File Modifier",
    "githubLink": "https://github.com/jpinillagoshawk/mcp-server-file-modifier",
    "package": "mcp-server-file-modifier",
    "description": "A Model Context Protocol server for file modifications, allowing operations like adding, replacing, and deleting content in files using AI assistants.",
    "installCommand": "npm install -g mcp-server-file-modifier",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "After installation, run `mcp-server-file-modifier` to start the server. By default, it will listen on port 3000. You can customize the port by setting the PORT environment variable if needed.",
    "category": "File Management",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "globalping": {
    "name": "Globalping MCP Server",
    "githubLink": "https://github.com/jsdelivr/globalping-mcp-server",
    "package": "mcp-remote",
    "description": "Enables AI models to interact with Globalping's global network measurement platform through natural language.",
    "installCommand": "npx mcp-remote https://mcp.globalping.dev/sse",
    "requiredEnvVars": [],
    "optionalParams": [
      "GLOBALPING_CLIENT_ID"
    ],
    "usageInstructions": "To use the Globalping MCP Server, configure it with compatible AI tools like Claude Desktop, Anthropic Console, or Cursor by adding the remote MCP server URL. For development, add Globalping OAuth credentials using 'npx wrangler secret put GLOBALPING_CLIENT_ID'.",
    "category": "API Integration",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/gb7472hoo6.png"
  },
  "tmux": {
    "name": "Tmux MCP Server",
    "githubLink": "https://github.com/jonrad/tmux-mcp",
    "package": "git+https://github.com/jonrad/tmux-mcp",
    "description": "A proof-of-concept Model Context Protocol (MCP) server that provides programmatic control over tmux sessions.",
    "installCommand": "uvx --from git+https://github.com/jonrad/tmux-mcp tmux-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this server, configure your MCP client with the following JSON configuration:\n\n\"mcpServers\": {\n    \"tmux\": {\n      \"command\": \"uvx\",\n      \"args\": [\"--from\", \"git+https://github.com/jonrad/tmux-mcp\", \"tmux-mcp\"]\n    }\n}\n\nThis server allows running arbitrary tmux commands, such as reading pane contents or sending keys. Use it for development or testing purposes only, as it is not intended for production use.",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "browser-use": {
    "name": "MCP Browser Automation Server",
    "githubLink": "https://github.com/jonnyhoff/mcp-browser-use",
    "package": "mcp-browser-use",
    "description": "An MCP server that provides browser automation capabilities through a simple API using natural language commands.",
    "installCommand": "git clone https://github.com/jonnyhoff/mcp-browser-use && cd mcp-browser-use && poetry install",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and navigate to the project directory. 2. Install dependencies using Poetry. 3. Create a `.env` file with your OpenAI API key. 4. Run the server using `poetry run python main.py`. 5. Use the `/run_browser_task` endpoint to execute browser automation tasks via natural language commands.",
    "category": "Browser Automation",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "timeplus": {
    "name": "Timeplus MCP Server",
    "githubLink": "https://github.com/jovezhong/mcp-timeplus",
    "package": "mcp-timeplus",
    "description": "An MCP server for Timeplus that enables SQL queries, database listing, and Kafka topic management.",
    "installCommand": "uvx mcp-timeplus",
    "requiredEnvVars": [
      "TIMEPLUS_HOST",
      "TIMEPLUS_USER",
      "TIMEPLUS_PASSWORD"
    ],
    "optionalParams": [
      "TIMEPLUS_PORT",
      "TIMEPLUS_SECURE",
      "TIMEPLUS_VERIFY",
      "TIMEPLUS_CONNECT_TIMEOUT",
      "TIMEPLUS_SEND_RECEIVE_TIMEOUT",
      "TIMEPLUS_READ_ONLY",
      "TIMEPLUS_KAFKA_CONFIG"
    ],
    "usageInstructions": "1. Install using 'uvx mcp-timeplus'. 2. Configure environment variables in Claude Desktop config or .env file. 3. Restart Claude Desktop. For development: 1. Run 'docker compose up -d' in test-services directory. 2. Create .env file with required variables. 3. Run 'uv sync' and 'source .venv/bin/activate'. 4. Start server with 'mcp dev mcp_timeplus/mcp_server.py'.",
    "category": "API Integration",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "comfy-ui": {
    "name": "Comfy UI MCP Server",
    "githubLink": "https://github.com/jonpojonpo/comfy-ui-mcp-server",
    "package": "comfy-ui-mcp-server",
    "description": "An MCP server for connecting to a local Comfy UI, providing note storage and summarization features.",
    "installCommand": "uvx comfy-ui-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "style"
    ],
    "usageInstructions": "To use this server, configure it in Claude Desktop by adding an entry to the claude_desktop_config.json file. For development, use 'uv sync' to sync dependencies, 'uv build' to build distributions, and 'uv publish' to publish to PyPI. Debugging can be done using the MCP Inspector via 'npx @modelcontextprotocol/inspector uv --directory <path> run comfy-ui-mcp-server'.",
    "category": "Development Tools",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "juliadoc": {
    "name": "Julia Documentation MCP Server",
    "githubLink": "https://github.com/jonathanfischer97/juliadoc-mcp",
    "package": "@jonathanfischer97/server-juliadoc",
    "description": "An MCP server that serves Julia documentation and source code to Claude Desktop, supporting functions, types, modules, and packages.",
    "installCommand": "npm install -g @jonathanfischer97/server-juliadoc",
    "requiredEnvVars": [
      "JULIA_PROJECT"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "JULIA_PATH"
    ],
    "usageInstructions": "1. Install Node.js 16+ and Julia 1.9+.\n2. Add the server to your Claude Desktop config (`~/Library/Application Support/Claude/claude_desktop_config.json`) with the `JULIA_PROJECT` environment variable set to your Julia project path.\n3. Start the server using `npx -y @jonathanfischer97/server-juliadoc` or run it locally with `npm start` after cloning the repository.",
    "category": "Knowledge Management",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "mongodb": {
    "name": "MongoDB MCP Server",
    "githubLink": "https://github.com/jonfreeland/mongodb-mcp",
    "package": "mongodb-mcp",
    "description": "An MCP server providing read-only access to MongoDB databases through standardized MCP tools and resources.",
    "installCommand": "git clone https://github.com/jonfreeland/mongodb-mcp.git && cd mongodb-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "MONGODB_URI"
    ],
    "optionalParams": [
      "MONGODB_DEFAULT_DATABASE"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Build the server using 'npm run build'.\n3. Configure environment variables MONGODB_URI and optionally MONGODB_DEFAULT_DATABASE.\n4. Integrate with Claude Desktop, Claude Web, or Claude Code as described in the README.",
    "category": "Databases",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "sqlite-npx": {
    "name": "MCP SQLite Server",
    "githubLink": "https://github.com/johnnyoshika/mcp-server-sqlite-npx",
    "package": "mcp-server-sqlite-npx",
    "description": "A Node.js implementation of the Model Context Protocol SQLite server for Claude Desktop integration",
    "installCommand": "npx -y @smithery/cli install mcp-server-sqlite-npx --client claude",
    "requiredEnvVars": [
      "PATH",
      "NODE_PATH"
    ],
    "optionalParams": [
      "database.db path"
    ],
    "usageInstructions": "To use with Claude Desktop, add configuration to claude_desktop_config.json with npx command and database path. For manual testing, use 'npx @modelcontextprotocol/inspector node dist/index.js /absolute/path/to/database.db'",
    "category": "AI/ML",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "netskope": {
    "name": "Netskope NPA MCP Server",
    "githubLink": "https://github.com/johnneerdael/netskope-mcp",
    "package": "@johnneerdael/netskope-mcp",
    "description": "A Model Context Protocol (MCP) server for managing Netskope Network Private Access (NPA) infrastructure through Large Language Models (LLMs).",
    "installCommand": "npm install @johnneerdael/netskope-mcp",
    "requiredEnvVars": [
      "NETSKOPE_BASE_URL",
      "NETSKOPE_API_KEY"
    ],
    "optionalParams": [
      "fields"
    ],
    "usageInstructions": "1. Install the package using `npm install @johnneerdael/netskope-mcp`.\n2. Set the required environment variables: `NETSKOPE_BASE_URL` and `NETSKOPE_API_KEY`.\n3. Add the MCP server configuration to your MCP settings file with the appropriate command and environment variables.\n4. Use the provided tools like `getAlertConfig`, `updateAlertConfig`, `listLocalBrokers`, and `createLocalBroker` to manage your Netskope NPA infrastructure.",
    "category": "Security",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "joesandboxmcp": {
    "name": "Joe Sandbox MCP Server",
    "githubLink": "https://github.com/joesecurity/joesandboxMCP",
    "package": "joesandboxMCP",
    "description": "An MCP server for interacting with Joe Sandbox Cloud, providing analysis and IOC extraction capabilities.",
    "installCommand": "git clone https://github.com/joesecurity/joesandboxMCP.git && cd joesandboxMCP && uv venv && uv pip install -e .",
    "requiredEnvVars": [
      "JBXAPIKEY",
      "ACCEPTTAC"
    ],
    "optionalParams": [],
    "usageInstructions": "After installation, configure the MCP server by setting up the environment variables JBXAPIKEY and ACCEPTTAC. Then, launch the server using the command 'uv run main.py'. Refer to the example configuration for details on integrating with MCP-compatible applications.",
    "category": "Security",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/trj3wqqz0o9.png"
  },
  "md-webcrawl": {
    "name": "MD Webcrawler MCP Server",
    "githubLink": "https://github.com/jmh108/md-webcrawl-mcp",
    "package": "fastmcp",
    "description": "A Python-based MCP web crawler for extracting and saving website content in markdown format.",
    "installCommand": "git clone https://github.com/jmh108/md-webcrawl-mcp && cd md-webcrawl-mcp && uv pip install fastmcp && pip install -r requirements.txt",
    "requiredEnvVars": [
      "OUTPUT_PATH"
    ],
    "optionalParams": [
      "MAX_CONCURRENT_REQUESTS",
      "REQUEST_TIMEOUT"
    ],
    "usageInstructions": "1. Set the `OUTPUT_PATH` environment variable to your preferred output directory. 2. Run the server using `fastmcp run server.py`. 3. Use `mcp call` commands like `extract_content` or `scan_linked_content` to interact with the server. 4. For development, use `fastmcp dev server.py --with-editable .`.",
    "category": "Web Scraping",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "dart": {
    "name": "Dart MCP Server",
    "githubLink": "https://github.com/jmanhype/dart-mcp-server",
    "package": "@jmanhype/dart-mcp-server",
    "description": "A Model Context Protocol (MCP) server implementation for Dart, providing task management, document handling, and workspace organization capabilities through MCP tools.",
    "installCommand": "npx -y @smithery/cli install @jmanhype/dart-mcp-server --client claude",
    "requiredEnvVars": [
      "DART_TOKEN"
    ],
    "optionalParams": [
      "PYTHONPATH",
      "PYTHON_PATH"
    ],
    "usageInstructions": "1. Clone the repository: git clone https://github.com/jmanhype/dart-mcp-server && cd dart-mcp-server\n2. Install dependencies: npm install\n3. Set up Python environment: python -m venv .venv && source .venv/bin/activate && pip install dart-sdk\n4. Configure environment variables: cp .env.example .env && edit .env with your DART_TOKEN\n5. Build TypeScript code: npm run build\n6. Start the server: npm start",
    "category": "Task Management",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "readability-python": {
    "name": "MCP Server Readability Parser",
    "githubLink": "https://github.com/jmh108/MCP-server-readability-python",
    "package": "MCP-server-readability-python",
    "description": "A Python MCP server that extracts webpage content into clean Markdown using Readability algorithm.",
    "installCommand": "git clone https://github.com/jmh108/MCP-server-readability-python.git && cd MCP-server-readability-python && python -m venv venv && source venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "url"
    ],
    "usageInstructions": "1. Start the server: 'fastmcp run server.py'. 2. Example request: 'curl -X POST http://localhost:8000/tools/extract_content -H \"Content-Type: application/json\" -d '{\"url\": \"https://example.com/article\"}''. Configure MCP server settings as described in the README.",
    "category": "Web Scraping",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "sanity": {
    "name": "Sanity MCP Server",
    "githubLink": "https://github.com/jlmelis/sanity-mcp-server",
    "package": "sanity-mcp-server",
    "description": "MCP server for interacting with Sanity.io content from Claude Desktop",
    "installCommand": "git clone https://github.com/jlmelis/sanity-mcp-server.git && cd sanity-mcp-server && npm install",
    "requiredEnvVars": [
      "SANITY_PROJECT_ID",
      "SANITY_DATASET",
      "SANITY_TOKEN"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Create .env file with Sanity credentials. 2. Configure Claude Desktop: Settings > MCP Servers > Add server with command: node src/sanity-mcp-server.ts",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "florence2": {
    "name": "Florence-2 MCP Server",
    "githubLink": "https://github.com/jkawamoto/mcp-florence2",
    "package": "git+https://github.com/jkawamoto/mcp-florence2",
    "description": "An MCP server for processing images using Florence-2 to extract text via OCR or generate descriptive captions.",
    "installCommand": "uvx --from git+https://github.com/jkawamoto/mcp-florence2 mcp-florence2",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Install using the provided command. 2. Use the 'ocr' tool to extract text from an image or URL with the 'src' argument. 3. Use the 'caption' tool to generate captions for an image or URL with the 'src' argument.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "webscrapemcpserver": {
    "name": "Web Crawler MCP Server",
    "githubLink": "https://github.com/jitsmaster/web-crawler-mcp",
    "package": "web-crawler-mcp",
    "description": "An MCP server that provides web crawling functionality through a configurable API.",
    "installCommand": "git clone https://github.com/jitsmaster/web-crawler-mcp.git && cd web-crawler-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "CRAWL_LINKS",
      "MAX_DEPTH",
      "REQUEST_DELAY",
      "TIMEOUT",
      "MAX_CONCURRENT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Create a .env file with configuration options. 3. Run 'npm start' to start the server. 4. Configure MCP settings to use the server.",
    "category": "Web Scraping",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "json-db-collection": {
    "name": "MCP JSON Document Collection Server",
    "githubLink": "https://github.com/jimpick/mcp-json-db-collection-server",
    "package": "mcp-json-db-collection-server",
    "description": "A Model Context Protocol (MCP) server that allows creation and management of multiple JSON document databases using Fireproof, with support for CRUD operations, querying, and cloud synchronization.",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT (default: 8080)",
      "FIREPROOF_CLOUD_URL (for cloud sync)",
      "FIREPROOF_CLOUD_TOKEN (for cloud authentication)",
      "DATABASE_DIR (for local database storage)"
    ],
    "usageInstructions": "1. Clone or download the repository.\n2. Run `npm install` to install dependencies.\n3. Run `npm run build` to build the server.\n4. Configure the server by adding it to the Claude Desktop config file as described in the README.\n5. Use the MCP interface to create and manage JSON document databases, and optionally sync them to the Fireproof Cloud.",
    "category": "Data Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "elastic-semantic-search": {
    "name": "Elasticsearch Semantic Search MCP Server",
    "githubLink": "https://github.com/jedrazb/elastic-semantic-search-mcp-server",
    "package": "elastic-semantic-search-mcp-server",
    "description": "A Python-based MCP server for semantic search of Search Labs blog posts indexed in Elasticsearch.",
    "installCommand": "git clone https://github.com/jedrazb/elastic-semantic-search-mcp-server && cd elastic-semantic-search-mcp-server && pip install -r requirements.txt",
    "requiredEnvVars": [
      "ES_URL",
      "ES_AP_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "ELASTICSEARCH_INDEX",
      "CRAWLER_CONFIG_PATH"
    ],
    "usageInstructions": "1. Set up Elasticsearch and generate an API key with crawler permissions. 2. Create a `.env` file with `ES_URL` and `ES_AP_KEY`. 3. Run the server using `make dev`. 4. Access the MCP Inspector at http://localhost:5173. 5. Optionally, integrate with Claude Desktop using `make install-claude-config`. 6. Follow the crawler setup instructions to index Search Labs blog posts.",
    "category": "Search & Semantic Tools",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "jentic-tools": {
    "name": "Jentic MCP Server",
    "githubLink": "https://github.com/jentic/jentic-tools",
    "package": "jentic",
    "description": "Jentic MCP empowers AI agent builders to discover and integrate external APIs and workflows rapidly without writing or maintaining API-specific code.",
    "installCommand": "pip install uv && uvx --from git+https://github.com/jentic/jentic-tools.git@main#subdirectory=mcp mcp",
    "requiredEnvVars": [
      "JENTIC_UUID"
    ],
    "optionalParams": [
      "DISCORD_BOTTOKEN"
    ],
    "usageInstructions": "1. Obtain Jentic UUID using 'pip install jentic' and 'jentic register --email <your_email>'. 2. Configure MCP client with Jentic MCP server using 'uvx'. 3. Set JENTIC_UUID in mcp_config.json. 4. Use MCP tools like search_apis, load_execution_info, and execute.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/x2oaaixow2.png"
  },
  "pure-model-context-protocol": {
    "name": "Pure Storage Model Context Protocol Server",
    "githubLink": "https://github.com/jboothomas/pure-model-context-protocol",
    "package": "pure-mcp-server",
    "description": "A simple MCP server to interact with Pure Storage FlashBlade arrays, retrieving real-time information such as array details, volumes, and hosts.",
    "installCommand": "git clone https://github.com/jboothomas/pure-model-context-protocol && cd pure-model-context-protocol && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "PURE_API_TOKEN",
      "PURE_ARRAY_ENDPOINT"
    ],
    "optionalParams": [
      "LOG_LEVEL",
      "PORT",
      "DEBUG",
      "MAX_RETRIES"
    ],
    "usageInstructions": "After installation, configure the server by setting the required environment variables (PURE_API_TOKEN and PURE_ARRAY_ENDPOINT). Run the server using the command: `uv run pure-mcp-server`. For development, update the claude_desktop_config.json file to include the server configuration as shown in the README.",
    "category": "Data Storage",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "smartlead-local": {
    "name": "Smartlead Simplified MCP Server",
    "githubLink": "https://github.com/jean-technologies/smartlead-mcp-server-local",
    "package": "smartlead-mcp-server",
    "description": "A simplified interface to the Smartlead API for AI assistants and automation tools to interact with email marketing features.",
    "installCommand": "npm install smartlead-mcp-server@1.2.1",
    "requiredEnvVars": [
      "SMARTLEAD_API_KEY"
    ],
    "optionalParams": [
      "--api-key"
    ],
    "usageInstructions": "1. Install using 'npm install smartlead-mcp-server@1.2.1'. 2. For Claude: 'npx smartlead-mcp-server start'. 3. For n8n: 'npx smartlead-mcp-server sse'. First run will prompt for Smartlead API Key. Use 'npx smartlead-mcp-server config' to set up credentials non-interactively with '--api-key' option.",
    "category": "API Integration",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/re7w3n3wl8.webp"
  },
  "document-reader": {
    "name": "MCP Document Reader",
    "githubLink": "https://github.com/jbchouinard/mcp-document-reader",
    "package": "mcp-document-reader",
    "description": "An MCP server for interacting with PDF and EPUB documents, primarily used with Windsurf IDE by Codeium.",
    "installCommand": "git clone https://github.com/jbchouinard/mcp-document-reader.git && cd mcp-document-reader && poetry install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After installation, configure the MCP server by running 'poetry run mcp-document-reader' or build and install with pipx. Configure Windsurf IDE with the appropriate command and args.",
    "category": "Development Tools",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "clanki": {
    "name": "Clanki - Claude's Anki Integration",
    "githubLink": "https://github.com/jasperket/clanki",
    "package": "clanki",
    "description": "An MCP server enabling AI assistants like Claude to interact with Anki flashcard decks through the Model Context Protocol.",
    "installCommand": "git clone https://github.com/jasperket/clanki.git && cd clanki && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Ensure Anki is installed and running with AnkiConnect plugin enabled.\n2. Configure Claude for Desktop by editing claude_desktop_config.json with the server path.\n3. Run the server using 'node build/index.js'.",
    "category": "Productivity",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "vibe-worldbuilding": {
    "name": "Vibe Worldbuilding MCP",
    "githubLink": "https://github.com/jasnonaz/vibe-worldbuilding-mcp",
    "package": "vibe-worldbuilding-mcp",
    "description": "A Model Context Protocol (MCP) server that enables detailed fictional world creation with Claude, including taxonomies, interconnected entries, AI-generated images, and navigable websites.",
    "installCommand": "pip install -e . && npm install",
    "requiredEnvVars": [
      "FAL_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install dependencies using 'pip install -e . && npm install'.\n2. Set the FAL_KEY environment variable for image generation.\n3. Configure the MCP server in your Claude Desktop configuration with the command 'python3 ./vibe_worldbuilding_server.py' and the FAL_KEY environment variable.\n4. Ask Claude to create a world, e.g., 'Create a fantasy world about floating islands'.\n5. Explore the generated world with interconnected entries, images, and a navigable website.",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "webmcp": {
    "name": "WebMCP",
    "githubLink": "https://github.com/jasonjmcghee/WebMCP",
    "package": "@jason.today/webmcp",
    "description": "A tool that allows websites to act as MCP servers, enabling client-side LLMs to access tools, resources, and prompts from websites without sharing API keys.",
    "installCommand": "npx -y @jason.today/webmcp@latest --config claude",
    "requiredEnvVars": [
      "MCP_SERVER_TOKEN"
    ],
    "optionalParams": [
      "--config",
      "--mcp",
      "--docker",
      "--new",
      "-q"
    ],
    "usageInstructions": "1. Install using `npx -y @jason.today/webmcp@latest --config [mcp_client]`.\n2. Generate an MCP token using your model and paste it on a WebMCP-enabled website.\n3. The website will register and provide a session for tool interaction.\n4. Disconnect by closing the browser tab, clicking 'disconnect', or shutting down the server with `npx @jason.today/webmcp -q`.\n5. Configuration files are stored in `~/.webmcp`.",
    "category": "API Integration",
    "stars": 51,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "image-generation-cloudflare": {
    "name": "image-generation-mcp-cloudflare",
    "githubLink": "https://github.com/janwilmake/image-generation-mcp-cloudflare",
    "package": "image-generation-mcp-cloudflare",
    "description": "An MCP server for image generation that integrates with Cloudflare services.",
    "installCommand": "git clone https://github.com/janwilmake/image-generation-mcp-cloudflare.git && cd image-generation-mcp-cloudflare && npm install",
    "requiredEnvVars": [
      "CLOUDFLARE_API_TOKEN",
      "CLOUDFLARE_ACCOUNT_ID",
      "MCP_SERVER_PORT"
    ],
    "optionalParams": [
      "IMAGE_GENERATION_MODEL",
      "MAX_IMAGE_RESOLUTION",
      "CACHE_TTL",
      "DEBUG_MODE"
    ],
    "usageInstructions": "After installation, set the required environment variables (CLOUDFLARE_API_TOKEN, CLOUDFLARE_ACCOUNT_ID, and MCP_SERVER_PORT). Start the server using 'npm start'. Optionally configure advanced settings like the image generation model or cache TTL for performance tuning.",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "draw-things-cursor": {
    "name": "Draw Things MCP",
    "githubLink": "https://github.com/jaokuohsuan/draw-things-mcp-cursor",
    "package": "draw-things-mcp-cursor",
    "description": "Draw Things API integration for Cursor using Model Context Protocol (MCP)",
    "installCommand": "npm install -g draw-things-mcp-cursor",
    "requiredEnvVars": [
      "Draw Things API running on http://127.0.0.1:7888"
    ],
    "optionalParams": [
      "prompt",
      "negative_prompt",
      "width",
      "height",
      "steps",
      "model",
      "sampler"
    ],
    "usageInstructions": "1. Install using 'npm install -g draw-things-mcp-cursor' or run directly with 'npx draw-things-mcp-cursor'. 2. Configure Cursor by editing ~/.cursor/claude_desktop_config.json. 3. Use in Cursor: 'generateImage({\"prompt\": \"a cute cat\"})'. Ensure Draw Things API is running before use.",
    "category": "AI/ML",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "forevervm": {
    "name": "foreverVM",
    "githubLink": "https://github.com/jamsocket/forevervm",
    "package": "forevervm",
    "description": "foreverVM provides an API for running arbitrary, stateful Python code securely using machines and instructions.",
    "installCommand": "npx forevervm login",
    "requiredEnvVars": [
      "FOREVERVM_TOKEN"
    ],
    "optionalParams": [
      "tags",
      "memory_mb"
    ],
    "usageInstructions": "1. Log in using 'npx forevervm login'.\n2. Start a REPL with 'npx forevervm repl'.\n3. Reconnect to a machine with 'npx forevervm repl [machine_name]'.\n4. List machines with 'npx forevervm machine list'.\n5. Use the SDK to create and manage machines programmatically with tags and memory limits.",
    "category": "Development Tools",
    "stars": 204,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "hitchcode": {
    "name": "MCP Server Template for Cursor IDE",
    "githubLink": "https://github.com/jankowtf/mcp-hitchcode",
    "package": "mcp-hitchcode",
    "description": "A template for creating custom tools for Cursor IDE using Model Context Protocol (MCP)",
    "installCommand": "git clone https://github.com/kirill-markin/weaviate-mcp-server.git && cd weaviate-mcp-server && uv pip install -e \".[dev]\"",
    "requiredEnvVars": [],
    "optionalParams": [
      "MCP_SERVER_PORT",
      "MCP_SERVER_HOST",
      "DEBUG",
      "MCP_USER_AGENT"
    ],
    "usageInstructions": "After installation, run the server using 'uv run mcp-hitchcode'. To connect to Cursor IDE: open Cursor Settings, go to Features, add new MCP server, and use the appropriate command or URL (http://localhost:8000/sse for SSE transport).",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "gatherer": {
    "name": "Magic: The Gathering MCP Tool Server",
    "githubLink": "https://github.com/james2037/mcp-gatherer",
    "package": "mcp-gatherer",
    "description": "A Model Context Protocol server for accessing Magic: The Gathering card data, rules, and set information.",
    "installCommand": "git clone https://github.com/james2037/mcp-gatherer.git && cd mcp-gatherer && composer install",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Ensure PHP 8.1+ and Composer are installed.\n2. Clone the repository and install dependencies with `composer install`.\n3. Run the server with `php mcp_server.php`.\n4. Configure your MCP client (e.g., Claude Desktop) to use the server by specifying the command and path to `mcp_server.php` in the configuration file.",
    "category": "Knowledge Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "statsource": {
    "name": "Statsource MCP Server",
    "githubLink": "https://github.com/jamie7893/statsource-mcp",
    "package": "mcp-server-stats",
    "description": "A Model Context Protocol server providing statistical analysis capabilities for LLMs.",
    "installCommand": "pip install mcp-server-stats",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "DB_CONNECTION_STRING",
      "DB_SOURCE_TYPE"
    ],
    "usageInstructions": "After installation, configure environment variables (API_KEY, DB_CONNECTION_STRING, DB_SOURCE_TYPE) and run using 'mcp-server-stats' or 'python -m mcp_server_stats'. For Docker, use 'docker run -i --rm -e API_KEY=your_key -e DB_CONNECTION_STRING=your_connection_string jamie78933/statsource-mcp'.",
    "category": "Data Storage",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "claude": {
    "name": "Claude-MCP Servers",
    "githubLink": "https://github.com/jamcam-me/Claude-MCP",
    "package": "claude-mcp",
    "description": "A collection of Model Context Protocol (MCP) servers for various capabilities including filesystem access, GitHub interaction, web search, and more.",
    "installCommand": "git clone https://github.com/jamcam-me/Claude-MCP.git && cd Claude-MCP && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "API_KEYS"
    ],
    "usageInstructions": "To start all servers: npm start. To start individual servers: npm run start:<server-name>. Configure Claude Desktop by modifying claude_desktop_config.json with the appropriate server commands and args.",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "umami": {
    "name": "Umami Analytics MCP Server",
    "githubLink": "https://github.com/jakeyShakey/umami",
    "package": "analytics-service",
    "description": "A Model Context Protocol (MCP) server that connects Claude to Umami analytics data, enabling analysis of website performance, user behavior, and real-time visitor activity.",
    "installCommand": "pip install uv && git clone https://github.com/jakeyShakey/umami && cd umami && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "UMAMI_API_URL",
      "UMAMI_USERNAME",
      "UMAMI_PASSWORD",
      "UMAMI_TEAM_ID"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "MAX_SESSIONS",
      "EMBEDDING_MODEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with 'pip install uv && git clone https://github.com/jakeyShakey/umami && cd umami && uv pip install -r requirements.txt'.\n2. Configure the MCP server in Claude Desktop by adding the 'analytics_service' entry to your config file with the correct path and environment variables.\n3. Enable the 'Analysis tool' in Feature Preview within Claude Desktop for enhanced dashboard capabilities.\n4. Use the 'Create Dashboard Prompt' or interact naturally with Claude to request specific analytics insights.",
    "category": "Analytics",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "json-schema": {
    "name": "JSON Schema MCP Server",
    "githubLink": "https://github.com/jaho5/json-schema-mcp",
    "package": "mcp",
    "description": "An MCP server that manages JSON schemas and creates instances from them.",
    "installCommand": "pip install 'mcp[cli]'",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Run the server: python server.py\n2. Use tools like create_schema and create_instance to manage schemas and create instances",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "cli-exec": {
    "name": "mcp-cli-exec",
    "githubLink": "https://github.com/jakenuts/mcp-cli-exec",
    "package": "mcp-cli-exec",
    "description": "A CLI command execution MCP server that runs shell commands with structured output, supporting single or multiple commands in a specified working directory.",
    "installCommand": "npm install -g mcp-cli-exec",
    "requiredEnvVars": [],
    "optionalParams": [
      "workingDirectory",
      "timeout",
      "commands",
      "command",
      "logLevel",
      "debug"
    ],
    "usageInstructions": "1. Install the package globally using 'npm install -g mcp-cli-exec'.\n2. For VSCode Cline extension, add the server configuration to the appropriate settings file as described in the README.\n3. For Claude Desktop, add the server configuration to the appropriate config file as described in the README.\n4. Execute commands using the 'cli-exec' or 'cli-exec-raw' tools with structured JSON input.\n5. For development, run 'pnpm install', 'pnpm run build', and use 'pnpm run inspector' for debugging.",
    "category": "Development Tools",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "solarwinds": {
    "name": "SolarWinds Logs MCP Server",
    "githubLink": "https://github.com/jakenuts/mcp-solarwinds",
    "package": "mcp-solarwinds",
    "description": "An MCP server for accessing and visualizing SolarWinds Observability logs",
    "installCommand": "npm install -g mcp-solarwinds",
    "requiredEnvVars": [
      "SOLARWINDS_API_TOKEN"
    ],
    "optionalParams": [
      "filter",
      "entityId",
      "startTime",
      "endTime",
      "pageSize",
      "direction",
      "interval",
      "use_utc",
      "format"
    ],
    "usageInstructions": "Configure SOLARWINDS_API_TOKEN either through MCP settings file or as an environment variable. Use 'npx mcp-solarwinds' for running without global installation. For local testing, create a .env file with your API token and run 'node examples/local-test.js'",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "obsidian-tools": {
    "name": "Obsidian MCP Tools",
    "githubLink": "https://github.com/jacksteamdev/obsidian-mcp-tools",
    "package": "obsidian-mcp-tools",
    "description": "Enables AI applications like Claude Desktop to securely access and work with your Obsidian vault through the Model Context Protocol (MCP).",
    "installCommand": "git clone https://github.com/jacksteamdev/obsidian-mcp-tools && cd obsidian-mcp-tools && bun install && bun run build",
    "requiredEnvVars": [
      "OBSIDIAN_API_KEY",
      "CLAUDE_API_KEY",
      "MCP_SERVER_PORT"
    ],
    "optionalParams": [
      "MCP_LOG_LEVEL",
      "MCP_SERVER_HOST",
      "OBSIDIAN_VAULT_PATH",
      "CLAUDE_MAX_TOKENS"
    ],
    "usageInstructions": "1. Install the plugin from Obsidian's Community Plugins.\n2. Enable the plugin in Obsidian settings.\n3. Open plugin settings and click 'Install Server' to download and configure the MCP server.\n4. Ensure the Local REST API plugin is configured with an API key.\n5. Start the MCP server and verify Claude Desktop is configured to use it.\n6. Use the logs in {vault}/.obsidian/plugins/obsidian-mcp-tools/logs for troubleshooting.",
    "category": "Knowledge Management",
    "stars": 216,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "codechecker": {
    "name": "CodeChecker MCP",
    "githubLink": "https://github.com/jacklandis29/codechecker-mcp",
    "package": "codechecker-mcp",
    "description": "A code review tool for Cursor IDE using OpenAI's GPT models for intelligent code analysis",
    "installCommand": "git clone https://github.com/jacklandis29/codechecker-mcp.git && cd codechecker-mcp && python -m venv venv && source venv/bin/activate && pip install -e .",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "--transport",
      "--port"
    ],
    "usageInstructions": "1. Create .env file with OPENAI_API_KEY\n2. Start server: python main.py --transport sse --port 8000\n3. Configure Cursor IDE with endpoint http://127.0.0.1:8000/sse",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "elastic-memory": {
    "name": "MCP Memory",
    "githubLink": "https://github.com/j3k0/mcp-elastic-memory",
    "package": "npm install",
    "description": "A persistent memory system for AI conversations using Elasticsearch, providing long-term context retention for LLMs.",
    "installCommand": "git clone https://github.com/mcp-servers/mcp-servers.git && cd mcp-servers/memory && npm install",
    "requiredEnvVars": [
      "ES_NODE",
      "GROQ_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "MEMORY_ZONE",
      "LOG_LEVEL",
      "MAX_CONTEXT_LENGTH"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Start Elasticsearch using Docker (npm run es:start) or set ES_NODE to your Elasticsearch instance. 3. Build the project (npm run build). 4. Configure the launch.sh script with your Groq API key. 5. Add the command to Claude Desktop for integration. Use the admin CLI for memory management tasks like search, entity details, and backups.",
    "category": "AI/ML",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "claude-pytorch-treehugger": {
    "name": "PyTorch HUD API MCP Server",
    "githubLink": "https://github.com/izaitsevfb/claude-pytorch-treehugger",
    "package": "git+https://github.com/izaitsevfb/claude-pytorch-treehugger.git",
    "description": "A Python library and MCP server for interacting with PyTorch HUD API, providing CI/CD data, job logs, and analytics.",
    "installCommand": "pip install git+https://github.com/izaitsevfb/claude-pytorch-treehugger.git",
    "requiredEnvVars": [],
    "optionalParams": [
      "MCP configuration parameters as described in CLAUDE.md and mcp-guide.md"
    ],
    "usageInstructions": "1. Install using: pip install git+https://github.com/izaitsevfb/claude-pytorch-treehugger.git\n2. Configure MCP server: claude mcp add hud pytorch-hud\n3. Start server: python -m pytorch_hud\nFor development: pip install -r requirements.txt, then python -m unittest discover test for tests",
    "category": "AI/ML",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "alchemy-sdk": {
    "name": "Alchemy MCP Plugin",
    "githubLink": "https://github.com/itsanishjain/alchemy-sdk-mcp",
    "package": "@itsanishjain/alchemy-sdk-mcp",
    "description": "MCP plugin providing integration with Alchemy SDK for blockchain and NFT operations",
    "installCommand": "npx -y @smithery/cli install @itsanishjain/alchemy-sdk-mcp --client claude",
    "requiredEnvVars": [
      "ALCHEMY_API_KEY"
    ],
    "optionalParams": [
      "client"
    ],
    "usageInstructions": "1. Install via Smithery using the install command. 2. For manual installation: npm install, npm run build, configure ALCHEMY_API_KEY in settings.json, then npm start",
    "category": "Blockchain",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "contentful": {
    "name": "Contentful MCP Server",
    "githubLink": "https://github.com/ivo-toby/contentful-mcp",
    "package": "@ivotoby/contentful-management-mcp-server",
    "description": "An MCP server implementation that integrates with Contentful's Content Management API, providing comprehensive content management capabilities including CRUD operations, space management, content types, and bulk operations.",
    "installCommand": "npx -y @ivotoby/contentful-management-mcp-server",
    "requiredEnvVars": [
      "CONTENTFUL_MANAGEMENT_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "CONTENTFUL_HOST",
      "ENABLE_HTTP_SERVER",
      "HTTP_PORT",
      "HTTP_HOST",
      "SPACE_ID",
      "ENVIRONMENT_ID",
      "APP_ID",
      "PRIVATE_KEY"
    ],
    "usageInstructions": "1. Create a Contentful account and generate a Content Management API token.\n2. Set the `CONTENTFUL_MANAGEMENT_ACCESS_TOKEN` environment variable with your token.\n3. Optionally configure additional environment variables like `SPACE_ID` and `ENVIRONMENT_ID` for scoping operations.\n4. Use the MCP server to perform content management operations such as entry and asset management, space and environment management, and bulk operations.\n5. For advanced use with Claude Desktop, add the server to your `claude_desktop_config.json` with the appropriate command and environment variables.",
    "category": "Content Management",
    "stars": 50,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "litellm": {
    "name": "LiteLLM MCP Server",
    "githubLink": "https://github.com/itsDarianNgo/mcp-server-litellm",
    "package": "mcp-server-litellm",
    "description": "An MCP server that integrates LiteLLM to handle text completions using OpenAI models.",
    "installCommand": "pip install mcp-server-litellm",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "LITELLM_MODEL",
      "LITELLM_TEMPERATURE",
      "LITELLM_MAX_TOKENS"
    ],
    "usageInstructions": "After installation, set the required environment variable OPENAI_API_KEY with your OpenAI API key. Optionally configure LITELLM_MODEL (default: gpt-3.5-turbo), LITELLM_TEMPERATURE (default: 0.7), and LITELLM_MAX_TOKENS (default: 1000). Start the server and send text completion requests via the MCP protocol.",
    "category": "AI/ML",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "langchain-ts-client": {
    "name": "LangChain.js MCP Client",
    "githubLink": "https://github.com/isaacwasserman/mcp-langchain-ts-client",
    "package": "mcp-langchain-ts-client",
    "description": "A LangChain.js client for Model Context Protocol, enabling integration with LangChain.js tools and MCP APIs.",
    "installCommand": "npm install mcp-langchain-ts-client",
    "requiredEnvVars": [],
    "optionalParams": [
      "command",
      "args"
    ],
    "usageInstructions": "Initialize the MCPToolkit with serverParams, then extract and use LangChain.js compatible tools. Ensure @modelcontextprotocol/server-everything is available via npx.",
    "category": "AI/ML",
    "stars": 34,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": ""
  },
  "memory-bank": {
    "name": "Memory Bank MCP Server",
    "githubLink": "https://github.com/ipospelov/mcp-memory-bank",
    "package": "git+https://github.com/ipospelov/mcp-memory-bank",
    "description": "An MCP server that implements the Cline's Memory Bank pattern for structured documentation in AI assistant environments.",
    "installCommand": "git clone https://github.com/ipospelov/mcp-memory-bank && cd mcp-memory-bank && python -m venv venv && source venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "project_summary",
      "file_name"
    ],
    "usageInstructions": "After installation, configure the server in your mcp.json file by specifying the command and arguments. Use the server to generate Memory Bank templates, analyze projects, or retrieve structure details. For example, run 'python src/mcp_memory_bank/main.py' to start the server locally.",
    "category": "Knowledge Management",
    "stars": 59,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/zsule4ne7pi.ico"
  },
  "ip2location-io": {
    "name": "IP2Location.io MCP Server",
    "githubLink": "https://github.com/ip2location/mcp-ip2location-io",
    "package": "ip2location/mcp-ip2location-io",
    "description": "A Model Context Protocol (MCP) server that provides geolocation data for IPv4 and IPv6 addresses using the IP2Location.io API.",
    "installCommand": "git clone https://github.com/ip2location/mcp-ip2location-io && cd mcp-ip2location-io && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "IP2LOCATION_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and navigate into the directory. 2. Install dependencies using uv. 3. Set the IP2LOCATION_API_KEY environment variable with your API key. 4. Add the server configuration to claude_desktop_config.json as described in the README. 5. Restart Claude Desktop to use the server. Query geolocation data by asking questions like 'Where is the location of (IP)?' in a chat.",
    "category": "Location Services",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.048Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/g6itg425j9b.png"
  },
  "instant": {
    "name": "Instant",
    "githubLink": "https://github.com/instantdb/instant",
    "package": "@instantdb/react",
    "description": "Instant is a modern Firebase alternative that provides a real-time database for frontend applications, handling data fetching, permissions, offline caching, and multiplayer features automatically.",
    "installCommand": "npm install @instantdb/react",
    "requiredEnvVars": [
      "NEXT_PUBLIC_APP_ID"
    ],
    "optionalParams": [
      "permissions",
      "presence",
      "offline caching",
      "custom query shapes",
      "InstaQL query options"
    ],
    "usageInstructions": "1. Sign up at https://instantdb.com to create an app and get your `NEXT_PUBLIC_APP_ID`. 2. Install the SDK using `npm install @instantdb/react`. 3. Initialize the database with `init({ appId: process.env.NEXT_PUBLIC_APP_ID })`. 4. Use `db.useQuery` to read data and `db.transact` to write data. 5. Refer to the documentation at https://instantdb.com/docs for advanced features like permissions, presence, and offline support.",
    "category": "Web Scraping",
    "stars": 8937,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/fxnh29j101v.svg"
  },
  "textin": {
    "name": "TextIn OCR MCP Server",
    "githubLink": "https://github.com/intsig-textin/textin-mcp",
    "package": "@intsig/server-textin",
    "description": "TextIn OCR MCP Server is a tool for extracting text and performing OCR on documents, including document text recognition, ID recognition, and invoice recognition.",
    "installCommand": "npx -y @intsig/server-textin",
    "requiredEnvVars": [
      "APP_ID",
      "APP_SECRET"
    ],
    "optionalParams": [
      "MCP_SERVER_REQUEST_TIMEOUT"
    ],
    "usageInstructions": "1. Register for a TextIn account at https://www.textin.com/user/login?from=github_mcp. 2. Get APP_ID and APP_SECRET following https://www.textin.com/doc/guide/account/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96app%20id?status=first. 3. Set APP_ID and APP_SECRET as environment variables. 4. Run the server using 'npx -y @intsig/server-textin'.",
    "category": "API Integration",
    "stars": 16,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/eo21xyhfnli.png"
  },
  "iplocate": {
    "name": "IPLocate MCP Server",
    "githubLink": "https://github.com/iplocate/mcp-server-iplocate",
    "package": "@iplocate/mcp-server",
    "description": "MCP server providing comprehensive IP address intelligence including geolocation, network information, privacy detection, and abuse contacts through IPLocate.io API.",
    "installCommand": "npx -y @iplocate/mcp-server",
    "requiredEnvVars": [
      "IPLOCATE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Configure your MCP client (Cursor, Claude Desktop, or VS Code) with the provided configuration examples.\n2. Set IPLOCATE_API_KEY environment variable with your API key from IPLocate.io.\n3. For manual running: use 'npx -y @iplocate/mcp-server' or install globally with 'npm install -g @iplocate/mcp-server'.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/ehj444wjf66.png"
  },
  "elasticsearch7": {
    "name": "Elasticsearch 7.x MCP Server",
    "githubLink": "https://github.com/imlewc/elasticsearch7-mcp-server",
    "package": "@imlewc/elasticsearch7-mcp-server",
    "description": "An MCP server for Elasticsearch 7.x, providing compatibility with Elasticsearch 7.x versions.",
    "installCommand": "npx -y @smithery/cli install @imlewc/elasticsearch7-mcp-server --client claude",
    "requiredEnvVars": [
      "ELASTIC_HOST",
      "ELASTIC_USERNAME",
      "ELASTIC_PASSWORD"
    ],
    "optionalParams": [
      "MCP_PORT"
    ],
    "usageInstructions": "1. Set environment variables ELASTIC_HOST, ELASTIC_USERNAME, and ELASTIC_PASSWORD. 2. Start the server using the install command. 3. Use an MCP client to connect to the server at localhost:9999 (or the specified MCP_PORT). 4. Use supported MCP methods like es-ping, es-info, and es-search to interact with Elasticsearch.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "ytrnscrpt": {
    "name": "YouTube Transcript MCP Server",
    "githubLink": "https://github.com/index01d/ytrnscrpt-mcp-server",
    "package": "ytrnscrpt-mcp-server",
    "description": "MCP server that enables Claude to fetch and analyze YouTube video transcripts",
    "installCommand": "git clone https://github.com/index01d/ytrnscrpt-mcp-server && cd ytrnscrpt-mcp-server && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Configure Claude Desktop by editing ~/Library/Application Support/Claude/claude_desktop_config.json with the server configuration. 2. Restart Claude Desktop. 3. Ask Claude to fetch a YouTube transcript by saying 'Get me the transcript for [YouTube URL]'",
    "category": "AI/ML",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "serpapi": {
    "name": "SerpApi MCP Server",
    "githubLink": "https://github.com/ilyazub/serpapi-mcp-server",
    "package": "mcp",
    "description": "An MCP server that integrates with SerpApi to perform searches across various search engines and retrieve live and archived results.",
    "installCommand": "pip install mcp serpapi python-dotenv",
    "requiredEnvVars": [
      "SERPAPI_API_KEY"
    ],
    "optionalParams": [
      "query",
      "engine",
      "location"
    ],
    "usageInstructions": "1. Save server code in server.py. 2. Create .env with SERPAPI_API_KEY. 3. Run 'python server.py'. 4. Configure Claude_desktop_config.json to integrate with MCP client.",
    "category": "API Integration",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "party-time": {
    "name": "Party Time MCP Server",
    "githubLink": "https://github.com/idyll/party-time-mcp",
    "package": "party-time-mcp",
    "description": "A simple MCP server that responds with 'It's Party Time' when asked about the current time, implementing the Machine Conversation Protocol (MCP) for tool integration.",
    "installCommand": "git clone https://github.com/idyll/party-time-mcp && cd party-time-mcp && mix deps.get && mix escript.build && chmod +x ./party_time_mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and build the executable using 'mix deps.get' and 'mix escript.build'.\n2. Configure Claude Desktop by adding the server's executable path to 'claude_desktop_config.json'.\n3. Restart Claude Desktop and ask 'What time is it?' to test the server.\n4. Ensure the executable has execute permissions with 'chmod +x ./party_time_mcp'.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "iaptic": {
    "name": "MCP Server for Iaptic",
    "githubLink": "https://github.com/iaptic/mcp-server-iaptic",
    "package": "mcp-server-iaptic",
    "description": "A Model Context Protocol server for interacting with the Iaptic API, allowing AIs like Claude to access customer, purchase, transaction, and statistical data.",
    "installCommand": "npx -y @smithery/cli install mcp-server-iaptic --client claude",
    "requiredEnvVars": [
      "--api-key",
      "--app-name"
    ],
    "optionalParams": [
      "limit",
      "offset",
      "startdate",
      "enddate",
      "customerId",
      "purchaseId",
      "appName",
      "apiKey"
    ],
    "usageInstructions": "To use this server, install it via the provided command or manually using npm. Configure it with your Iaptic API key and app name. Add it to your Claude Desktop configuration file for integration with AI tools. Use the available tools to query customers, purchases, transactions, statistics, and events.",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "opensearch": {
    "name": "OpenSearch MCP Server",
    "githubLink": "https://github.com/ibrooksSDX/mcp-server-opensearch",
    "package": "mcp-server-opensearch",
    "description": "An MCP server for OpenSearch, acting as a semantic memory layer on top of OpenSearch database.",
    "installCommand": "npx -y @smithery/cli install @ibrooksSDX/mcp-server-opensearch --client claude",
    "requiredEnvVars": [
      "OPENSEARCH_HOST",
      "OPENSEARCH_HOSTPORT",
      "INDEX_NAME"
    ],
    "optionalParams": [
      "opensearch-url",
      "opensearch-api-key",
      "index-name"
    ],
    "usageInstructions": "To use with Claude Desktop, configure 'claude_desktop_config.json' with appropriate command and args. Alternatively, use 'uv run fastmcp install demo.py' for FastMCP UI installation.",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "fileforge": {
    "name": "FileForge",
    "githubLink": "https://github.com/iMAGRAY/FileForge",
    "package": "github:iMAGRAY/FileForge",
    "description": "An MCP server that provides advanced file and code operations with vector embeddings support, including file management, code analysis, and intelligent path handling.",
    "installCommand": "npx --yes github:iMAGRAY/FileForge node src/fileforge.cjs",
    "requiredEnvVars": [
      "NODE_PATH"
    ],
    "optionalParams": [
      "file_path",
      "new_content",
      "start_line",
      "chunk_size",
      "embedding_cache_path",
      "log_level"
    ],
    "usageInstructions": "1. Add the provided JSON configuration to your MCP client. 2. Use the available tools for file operations, code analysis, and vector embeddings. 3. For local installation, clone the repository, install dependencies, and configure the MCP client to point to the local server.",
    "category": "File Management",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/wpktgxticw.webp"
  },
  "excalidraw": {
    "name": "Excalidraw MCP Server",
    "githubLink": "https://github.com/i-tozer/excalidraw-mcp",
    "package": "excalidraw-mcp",
    "description": "An MCP server providing API functionality for operating on Excalidraw drawings, including CRUD operations and export to various formats.",
    "installCommand": "git clone https://github.com/i-tozer/excalidraw-mcp.git && cd excalidraw-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "After installation, start the server using 'npm start'. The server provides various API endpoints for managing Excalidraw drawings and exporting them to different formats. Ensure you have Node.js installed.",
    "category": "Development Tools",
    "stars": 22,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "nodejs-debugger": {
    "name": "MCP Node.js Debugger",
    "githubLink": "https://github.com/hyperdrive-eng/mcp-nodejs-debugger",
    "package": "@hyperdrive-eng/mcp-nodejs-debugger",
    "description": "An MCP server that provides Cursor or Claude Code access to Node.js at runtime for debugging purposes",
    "installCommand": "npm install -g @hyperdrive-eng/mcp-nodejs-debugger",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "NODE_OPTIONS"
    ],
    "usageInstructions": "1. Add to Cursor by editing ~/.cursor/mcp.json with the specified configuration\n2. For Claude Code, use 'claude mcp add nodejs-debugger npx @hyperdrive-eng/mcp-nodejs-debugger'\n3. Run Node.js server in debug mode with 'node --inspect {file.js}'\n4. Use Cursor or Claude Code to debug runtime errors",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/l4ev5kypabq.png"
  },
  "hasura": {
    "name": "Advanced Hasura GraphQL MCP Server",
    "githubLink": "https://github.com/husamabusafa/hasura",
    "package": "mcp-hasura-advanced",
    "description": "This Model Context Protocol (MCP) server provides an interface for AI agents to interact with a Hasura GraphQL endpoint, enabling them to discover API structure, execute queries and mutations, preview data, perform aggregations, and check service health.",
    "installCommand": "git clone https://github.com/husamabusafa/hasura && cd hasura && pnpm install && pnpm run build",
    "requiredEnvVars": [
      "HASURA_GRAPHQL_ENDPOINT"
    ],
    "optionalParams": [
      "ADMIN_SECRET"
    ],
    "usageInstructions": "1. Clone the repository and navigate to the directory.\n2. Install dependencies using pnpm install.\n3. Build the server with pnpm run build.\n4. Run the server using pnpm start <HASURA_GRAPHQL_ENDPOINT> [ADMIN_SECRET] or node dist/index.js <HASURA_GRAPHQL_ENDPOINT> [ADMIN_SECRET].\n5. Configure MCP clients like Cursor or Claude Desktop with the server command, arguments, and working directory.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/srvqp5i2gl.png"
  },
  "brave": {
    "name": "Brave MCP Server",
    "githubLink": "https://github.com/human-spider/mcp-server-brave",
    "package": "mcp-server-brave",
    "description": "An MCP server implementation for Brave browser integration",
    "installCommand": "npm install mcp-server-brave && mcp-server-brave --help",
    "requiredEnvVars": [
      "BRAVE_API_KEY",
      "MCP_SERVER_PORT"
    ],
    "optionalParams": [
      "LOG_LEVEL",
      "DEBUG",
      "VERBOSE"
    ],
    "usageInstructions": "After installation, configure BRAVE_API_KEY environment variable. Run 'mcp-server-brave start' to begin serving. Use '--help' for additional configuration options.",
    "category": "Browser Automation",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "wordware": {
    "name": "Wordware MCP Server",
    "githubLink": "https://github.com/hugobiais/wordware-mcp",
    "package": "wordware-mcp",
    "description": "The Wordware MCP server allows you to run Wordware apps locally, enabling integration of Wordware's AI flows into your local development environment for testing and development.",
    "installCommand": "npx wordware-mcp",
    "requiredEnvVars": [
      "WORDWARE_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Run `npx wordware-mcp` to start the interactive setup and enter your Wordware API key. 2. Start the server with `npx wordware-mcp start`. 3. Access your Wordware apps via `http://localhost:3000/api/run/{app_id}`. 4. For global installation, use `npm install -g wordware-mcp` and run `wordware-mcp` with optional parameters like `--api-key` and `--port`.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "metabase": {
    "name": "Metabase MCP Server",
    "githubLink": "https://github.com/hyeongjun-dev/metabase-mcp-server",
    "package": "@hyeongjun-dev/metabase-mcp-server",
    "description": "An MCP server integrating AI assistants with Metabase analytics platform.",
    "installCommand": "npx -y @smithery/cli@latest run @hyeongjun-dev/metabase-mcp-server",
    "requiredEnvVars": [
      "METABASE_URL",
      "METABASE_API_KEY or METABASE_USER_EMAIL and METABASE_PASSWORD"
    ],
    "optionalParams": [
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Set required environment variables (METABASE_URL and either METABASE_API_KEY or METABASE_USER_EMAIL/METABASE_PASSWORD). 2. Configure Claude Desktop by editing claude_desktop_config.json. 3. Use npx command or Docker: 'docker run -e METABASE_URL=https://your-metabase.com -e METABASE_API_KEY=your_api_key metabase-mcp-server'",
    "category": "API Integration",
    "stars": 17,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/mc1rrdhrrvk.svg"
  },
  "arxiv": {
    "name": "ArXiv MCP Server",
    "githubLink": "https://github.com/blazickjp/arxiv-mcp-server",
    "package": "arxiv-mcp-server",
    "description": "Enables AI assistants to search and access arXiv papers through a simple MCP interface.",
    "installCommand": "uv tool install arxiv-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "ARXIV_STORAGE_PATH"
    ],
    "usageInstructions": "Configure storage path by setting ARXIV_STORAGE_PATH environment variable (defaults to ~/.arxiv-mcp-server/papers). Add server configuration to MCP client config file as shown in README.",
    "category": "AI/ML",
    "stars": 1376,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "claude-trello": {
    "name": "Claude MCP Trello",
    "githubLink": "https://github.com/hrs-asano/claude-mcp-trello",
    "package": "claude-mcp-trello",
    "description": "A Model Context Protocol (MCP) server that provides tools for interacting with Trello boards, including card and list management, activity tracking, and rate-limited API access.",
    "installCommand": "git clone https://github.com/hrs-asano/claude-mcp-trello.git && cd claude-mcp-trello && npm install",
    "requiredEnvVars": [
      "TRELLO_API_KEY",
      "TRELLO_TOKEN",
      "TRELLO_BOARD_ID"
    ],
    "optionalParams": [
      "limit",
      "PORT",
      "DEBUG",
      "TRELLO_LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with `npm install`.\n2. Build the project with `npm run build`.\n3. Set the required environment variables: TRELLO_API_KEY, TRELLO_TOKEN, and TRELLO_BOARD_ID.\n4. Integrate with Claude Desktop by configuring the MCP server in the claude_desktop_config.json file as described in the README.\n5. Run the server and use the provided tools to interact with Trello boards.",
    "category": "Project Management",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "tts-say": {
    "name": "MCP TTS Say",
    "githubLink": "https://github.com/hirokidaichi/mcp-tts-say",
    "package": "mcp-tts-say",
    "description": "MCPサーバーを利用して、テキストを音声に変換し、ローカル環境で再生するツール。OpenAIのTTS SDKを使用して高品質な音声合成を実現します。",
    "installCommand": "git clone https://github.com/hirokidaichi/mcp-tts-say.git && cd mcp-tts-say && npm install",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. `.env`ファイルを作成し、`OPENAI_API_KEY`を設定します。\n2. `npm run dev`で開発モードを実行します。\n3. `npm test`でテストを実行し、`npm run lint`でリントチェックを行います。\n4. `npm run inspect`でMCP Inspectorを使用してデバッグできます。",
    "category": "AI/ML",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "highlight-youtube": {
    "name": "YouTube MCP Server",
    "githubLink": "https://github.com/highlight-ing/highlight-youtube-mcp",
    "package": "highlight-youtube-mcp",
    "description": "An MCP server that extracts transcripts from YouTube videos using the Highlight AI MCP SDK.",
    "installCommand": "npm install -g highlight-youtube-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "videoUrl"
    ],
    "usageInstructions": "After installation, run the server. It will start listening for requests on stdio. Provide a YouTube video URL to the get_youtube_transcript method to retrieve the transcript. Ensure Node.js >=18.0.0 is installed.",
    "category": "Media",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "conductor-tasks": {
    "name": "Conductor Tasks",
    "githubLink": "https://github.com/hridaya423/conductor-tasks",
    "package": "conductor-tasks",
    "description": "AI-powered task manager for development workflows, integrating with multiple LLMs and providing task generation, expansion, and visualization features.",
    "installCommand": "npm install -g conductor-tasks",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "GOOGLE_API_KEY",
      "DEFAULT_LLM_PROVIDER"
    ],
    "optionalParams": [
      "MISTRAL_API_KEY",
      "GROQ_API_KEY",
      "PERPLEXITY_API_KEY",
      "OPENROUTER_API_KEY",
      "XAI_API_KEY",
      "AZURE_API_KEY"
    ],
    "usageInstructions": "1. Install globally using 'npm install -g conductor-tasks'. 2. Set required environment variables (e.g., OPENAI_API_KEY) in a .env file or export them. 3. Initialize with 'conductor-tasks init'. 4. Use commands like 'conductor-tasks parse-prd', 'conductor-tasks list', 'conductor-tasks get', 'conductor-tasks update', 'conductor-tasks generate-steps', and 'conductor-tasks visualize' to manage tasks.",
    "category": "Development Tools",
    "stars": 48,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "box": {
    "name": "Box MCP Server",
    "githubLink": "https://github.com/hmk/box-mcp-server",
    "package": "box-mcp-server",
    "description": "An MCP server for Box file management and search capabilities",
    "installCommand": "npx box-mcp-server",
    "requiredEnvVars": [
      "BOX_USER_ID",
      "BOX_JWT_BASE64 | BOX_JWT_CONFIG_PATH | BOX_JWT | BOX_DEV_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "To use this server, first set up a Box developer account and create an application. Configure JWT or Developer Token authorization. For development, clone the repository, install dependencies with 'npm install', and run 'npm run watch'. Use 'dotenv npx @modelcontextprotocol/inspector node dist/index.js' to start the development server.",
    "category": "File Management",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "honeycomb": {
    "name": "Honeycomb MCP",
    "githubLink": "https://github.com/honeycombio/honeycomb-mcp",
    "package": "honeycomb-mcp",
    "description": "A Model Context Protocol (MCP) server for interacting with Honeycomb observability data, enabling LLMs to analyze and query datasets across multiple environments.",
    "installCommand": "pnpm install && pnpm run build",
    "requiredEnvVars": [
      "HONEYCOMB_API_KEY"
    ],
    "optionalParams": [
      "HONEYCOMB_ENV_PROD_API_KEY",
      "HONEYCOMB_ENV_STAGING_API_KEY",
      "HONEYCOMB_API_ENDPOINT",
      "HONEYCOMB_CACHE_ENABLED",
      "HONEYCOMB_CACHE_DEFAULT_TTL",
      "HONEYCOMB_CACHE_DATASET_TTL",
      "HONEYCOMB_CACHE_COLUMN_TTL",
      "HONEYCOMB_CACHE_BOARD_TTL",
      "HONEYCOMB_CACHE_SLO_TTL",
      "HONEYCOMB_CACHE_TRIGGER_TTL",
      "HONEYCOMB_CACHE_MARKER_TTL",
      "HONEYCOMB_CACHE_RECIPIENT_TTL",
      "HONEYCOMB_CACHE_AUTH_TTL",
      "HONEYCOMB_CACHE_MAX_SIZE"
    ],
    "usageInstructions": "1. Install using `pnpm install && pnpm run build`. 2. Configure the MCP server by setting the `HONEYCOMB_API_KEY` in the `env` block of your MCP config. 3. For multiple environments, set environment-specific keys like `HONEYCOMB_ENV_PROD_API_KEY`. 4. EU customers must set `HONEYCOMB_API_ENDPOINT` to `https://api.eu1.honeycomb.io/`. 5. Caching can be configured using optional environment variables like `HONEYCOMB_CACHE_ENABLED` and `HONEYCOMB_CACHE_DEFAULT_TTL`. 6. Use the server with compatible clients like Claude Desktop, Cursor, or Windsurf.",
    "category": "Analytics",
    "stars": 28,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "highlight-github": {
    "name": "GitHub MCP Server",
    "githubLink": "https://github.com/highlight-ing/highlight-github-mcp",
    "package": "highlight-github-mcp",
    "description": "A Model Context Protocol (MCP) server that retrieves diff content from GitHub Pull Requests using the GitHub REST API.",
    "installCommand": "npm install highlight-github-mcp",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "owner",
      "repo",
      "pr_number"
    ],
    "usageInstructions": "1. Set the GITHUB_TOKEN environment variable with a GitHub Personal Access Token. 2. Use the get_diff_pr tool by providing the repository owner, repository name, and pull request number as parameters. 3. The server returns an object containing the diff content from the specified PR.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "tripadvisor": {
    "name": "TripAdvisor Vacation Planner MCP Server",
    "githubLink": "https://github.com/hhw67865/tripadvisor-mcp-server",
    "package": "mcp[cli]",
    "description": "MCP server providing access to TripAdvisor data for vacation planning, finding attractions, restaurants, and hotels.",
    "installCommand": "git clone https://github.com/hhw67865/tripadvisor-mcp-server.git && cd tripadvisor-mcp-server && uv venv && .venv/bin/activate && uv add \"mcp[cli]\"",
    "requiredEnvVars": [
      "TRIPADVISOR_API_KEY"
    ],
    "optionalParams": [
      "PATH_TO_YOUR_PROJECT"
    ],
    "usageInstructions": "1. Clone the repository and set up the virtual environment. 2. Set TRIPADVISOR_API_KEY environment variable. 3. Run the server using 'mcp run server.py'. 4. Configure Claude Desktop with the provided JSON configuration, replacing 'PATH_TO_YOUR_PROJECT' with the actual project path and 'YOUR_API_KEY_HERE' with your TripAdvisor API key.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "isitdown": {
    "name": "mcp-server-isitdown",
    "githubLink": "https://github.com/hesreallyhim/mcp-server-isitdown",
    "package": "@hesreallyhim/mcp-server-isitdown",
    "description": "An MCP server that checks if a website is currently down by querying www.isitdownrightnow.com.",
    "installCommand": "git clone https://github.com/hesreallyhim/mcp-server-isitdown.git && cd mcp-server-isitdown && uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "root_domain"
    ],
    "usageInstructions": "Run the server using `mcp-server-isitdown` or `python -m mcp_server_isitdown`. Use the `get_website_status` tool by providing a `root_domain` input to check if a website is up or down. Example: `get_website_status('example.com')`.",
    "category": "Web Scraping",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "windsurf-supabase": {
    "name": "Windsurf Supabase MCP Server",
    "githubLink": "https://github.com/hertzfelt/windsurf-supabase-mcp",
    "package": "windsurf-supabase-mcp",
    "description": "A Windsurf-optimized MCP server for Supabase integration, enhancing error handling, response formatting, and SQL query processing.",
    "installCommand": "git clone https://github.com/hertzfelt/windsurf-supabase-mcp.git && cd windsurf-supabase-mcp && npm install",
    "requiredEnvVars": [
      "SUPABASE_URL",
      "SUPABASE_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "After installation, configure your Supabase connection by setting SUPABASE_URL and SUPABASE_KEY environment variables. Use the provided tools like postgrestRequest and sqlToRest for database interactions.",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "heroku": {
    "name": "Heroku MCP Server",
    "githubLink": "https://github.com/heroku/heroku-mcp-server",
    "package": "@heroku/mcp-server",
    "description": "A Model Context Protocol (MCP) server that enables large language models to interact with the Heroku Platform, providing tools for application management and API access.",
    "installCommand": "npx -y @heroku/mcp-server",
    "requiredEnvVars": [
      "HEROKU_API_KEY"
    ],
    "optionalParams": [
      "HEROKU_API_KEY (optional if using `heroku mcp:start`)",
      "custom configuration for specific clients"
    ],
    "usageInstructions": "1. Install the Heroku CLI (v10.8.1+). 2. Set the HEROKU_API_KEY environment variable with your Heroku authorization token. 3. Configure your MCP client (e.g., Cursor, Zed, or VSCode) to use the command `heroku mcp:start` or `npx -y @heroku/mcp-server`. 4. Launch the server and interact with Heroku Platform resources through your MCP-enabled client.",
    "category": "API Integration",
    "stars": 51,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/jpnyjjlq7if.png"
  },
  "onesies": {
    "name": "onesies",
    "githubLink": "https://github.com/samsel/onesies",
    "package": "Not available as a package",
    "description": "A collection of small-sized personal projects",
    "installCommand": "git clone https://github.com/samsel/onesies && cd onesies",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Clone the repository and explore the collection of small projects. No specific setup or configuration is mentioned in the README.",
    "category": "Other",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "simple": {
    "name": "MCP Manager",
    "githubLink": "https://github.com/kmhari/mcp-simple",
    "package": "@oglabs/mcp",
    "description": "Modern web interface and CLI tool for managing MCP (Model Context Protocol) server configurations with features like server browsing, installation, configuration editing, and environment variable management.",
    "installCommand": "npm install -g @oglabs/mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT (defaults to 3333)",
      "DEBUG (enables debug mode)",
      "ENV_FILE (specifies a custom .env file)"
    ],
    "usageInstructions": "Launch the web interface with `@oglabs/mcp --web` to access server management features. Use `@oglabs/mcp --server` to run the MCP server mode for AI-powered server recommendations and analysis. For CLI-only usage, run `@oglabs/mcp`.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "apple": {
    "name": "Apple MCP Server",
    "githubLink": "https://github.com/supermemoryai/apple-mcp",
    "package": "@dhravya/apple-mcp",
    "description": "Apple-native tools for the Model Context Protocol (MCP), enabling integration with various Apple apps and services.",
    "installCommand": "npx -y @smithery/cli@latest install @Dhravya/apple-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "--client"
    ],
    "usageInstructions": "1. Install using 'npx -y @smithery/cli@latest install @Dhravya/apple-mcp --client claude'. 2. Configure claude_desktop_config.json with MCP server details. 3. Ask Claude to use the 'apple-mcp' tool with commands like 'send a message to John Doe' or 'create a reminder to Buy groceries for tomorrow at 5pm'.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.635Z",
    "logo": ""
  },
  "mcpsqlserver": {
    "name": "SQL Server MCP Server for Windsurf IDE",
    "githubLink": "https://github.com/ian-cowley/MCPSqlServer",
    "package": "MCPSqlServer",
    "description": "A standalone MCP server providing SQL Server integration for Windsurf IDE.",
    "installCommand": "git clone https://github.com/ian-cowley/MCPSqlServer.git && cd MCPSqlServer && dotnet build",
    "requiredEnvVars": [
      "ConnectionStrings:DefaultConnection"
    ],
    "optionalParams": [
      "LogPath",
      "DebugMode"
    ],
    "usageInstructions": "1. Build the project using 'dotnet build'. 2. Configure appsettings.json with your SQL Server details. 3. Update Windsurf MCP configuration to point to the built executable.",
    "category": "Databases",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "titan": {
    "name": "Titan Memory MCP Server",
    "githubLink": "https://github.com/henryhawke/mcp-titan",
    "package": "mcp-titan",
    "description": "An MCP server providing neural memory tools for LLMs like Claude3.7 Sonnet, featuring memory management and persistence.",
    "installCommand": "git clone https://github.com/henryhawke/mcp-titan.git && cd mcp-titan && npm install && npm run build && npm start",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and cd into it. 2. Run 'npm install' to install dependencies. 3. Run 'npm run build' to build the project. 4. Run 'npm start' to start the MCP server. 5. Configure Cursor or Claude Desktop to connect to the server at http://localhost:8080.",
    "category": "AI/ML",
    "stars": 59,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "jenkins": {
    "name": "Jenkins Server MCP",
    "githubLink": "https://github.com/hekmon8/Jenkins-server-mcp",
    "package": "jenkins-server-mcp",
    "description": "An MCP server for interacting with Jenkins CI/CD servers, enabling AI assistants to check build statuses, trigger builds, and retrieve build logs.",
    "installCommand": "git clone https://github.com/hekmon8/jenkins-server-mcp.git && cd jenkins-server-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "JENKINS_URL",
      "JENKINS_USER",
      "JENKINS_TOKEN"
    ],
    "optionalParams": [
      "jobPath",
      "buildNumber",
      "parameters"
    ],
    "usageInstructions": "Configure environment variables (JENKINS_URL, JENKINS_USER, JENKINS_TOKEN) in MCP settings file. Use tools like get_build_status, trigger_build, and get_build_log through MCP client.",
    "category": "DevOps",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "discord": {
    "name": "Discord MCP Server",
    "githubLink": "https://github.com/hanweg/mcp-discord",
    "package": "@hanweg/mcp-discord",
    "description": "An MCP server providing Discord integration for MCP clients like Claude Desktop.",
    "installCommand": "npx -y @smithery/cli install @hanweg/mcp-discord --client claude",
    "requiredEnvVars": [
      "DISCORD_TOKEN"
    ],
    "optionalParams": [
      "command",
      "args",
      "env"
    ],
    "usageInstructions": "1. Set up Discord bot via Discord Developer Portal. 2. Configure Claude Desktop settings with bot token. 3. Use Smithery CLI or manual installation via git clone and uv pip install.",
    "category": "API Integration",
    "stars": 98,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "sqlexpress": {
    "name": "SQL Server Express MCP Server",
    "githubLink": "https://github.com/hanweg/mcp-sqlexpress",
    "package": "mcp-sqlexpress",
    "description": "An MCP server for interacting with Microsoft SQL Server Express, supporting Windows and SQL Server authentication.",
    "installCommand": "git clone https://github.com/hanweg/mcp-sqlexpress && cd mcp-sqlexpress && uv venv && .venv\\Scripts\\activate && uv pip install --editable .",
    "requiredEnvVars": [
      "--server",
      "--auth",
      "--allowed-databases"
    ],
    "optionalParams": [
      "--username",
      "--password",
      "--trusted-connection",
      "--trust-server-certificate"
    ],
    "usageInstructions": "1. Clone the repository and create a virtual environment. 2. Install dependencies using 'uv pip install --editable .'. 3. Configure the 'claude_desktop_config.json' with the server command and arguments. 4. For Windows authentication, set '--auth windows' and '--trusted-connection yes'. For SQL Server authentication, set '--auth sql' and provide '--username' and '--password'.",
    "category": "Data Storage",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "sqlite-explorer-fastmcp": {
    "name": "SQLite Explorer MCP Server",
    "githubLink": "https://github.com/hannesrudolph/sqlite-explorer-fastmcp-mcp-server",
    "package": "fastmcp",
    "description": "An MCP server that provides safe, read-only access to SQLite databases through Model Context Protocol (MCP), built with the FastMCP framework.",
    "installCommand": "git clone https://github.com/hannesrudolph/sqlite-explorer-fastmcp-mcp-server.git && cd sqlite-explorer-fastmcp-mcp-server && pip install -r requirements.txt",
    "requiredEnvVars": [
      "SQLITE_DB_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Set the SQLITE_DB_PATH environment variable to the path of your SQLite database. 3. Use the 'fastmcp install' command or configure the Cline VSCode plugin to run the server. 4. Use the exposed MCP tools (read_query, list_tables, describe_table) to interact with the database.",
    "category": "Data Storage",
    "stars": 74,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "openapi-schema": {
    "name": "OpenAPI Schema Model Context Protocol Server",
    "githubLink": "https://github.com/hannesj/mcp-openapi-schema",
    "package": "mcp-openapi-schema",
    "description": "An MCP server that exposes OpenAPI schema information to Large Language Models like Claude, allowing exploration of API specifications.",
    "installCommand": "npx -y mcp-openapi-schema",
    "requiredEnvVars": [],
    "optionalParams": [
      "path/to/openapi.yaml",
      "--help",
      "--scope"
    ],
    "usageInstructions": "Run using 'npx -y mcp-openapi-schema [path/to/schema.yaml]'. For Claude Desktop integration, edit claude_desktop_config.json. For Claude Code, use 'claude mcp add [name] npx -y mcp-openapi-schema [path/to/schema.yaml]'",
    "category": "API Integration",
    "stars": 32,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "pptx": {
    "name": "MCP PPTX Server",
    "githubLink": "https://github.com/h4ck4life/mcp-pptx-server",
    "package": "mcp-pptx-server",
    "description": "A FastMCP server for creating and manipulating PowerPoint presentations.",
    "installCommand": "fastmcp install .\\server.py",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After installation, use the FastMCP framework to interact with the server for PowerPoint creation and manipulation tasks. Ensure the FastMCP environment is properly configured for execution.",
    "category": "File Management",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "stata": {
    "name": "Stata MCP Extension for VS Code and Cursor",
    "githubLink": "https://github.com/hanlulong/stata-mcp",
    "package": "DeepEcon.stata-mcp",
    "description": "Provides Stata integration for Visual Studio Code and Cursor IDE using the Model Context Protocol (MCP), enabling execution of Stata commands, syntax highlighting, and AI assistant integration.",
    "installCommand": "code --install-extension DeepEcon.stata-mcp",
    "requiredEnvVars": [
      "stata-vscode.stataPath",
      "stata-vscode.mcpServerHost",
      "stata-vscode.mcpServerPort"
    ],
    "optionalParams": [
      "stata-vscode.autoStartServer",
      "stata-vscode.debugMode",
      "stata-vscode.forcePort",
      "stata-vscode.clineConfigPath",
      "stata-vscode.runFileTimeout",
      "stata-vscode.stataEdition",
      "stata-vscode.logFileLocation",
      "stata-vscode.customLogDirectory"
    ],
    "usageInstructions": "1. Install the extension via VS Code or Cursor. 2. Open a Stata .do file. 3. Run commands using Ctrl+Shift+Enter (Mac: Cmd+Shift+Enter) for selected code or Ctrl+Shift+D (Mac: Cmd+Shift+D) for the entire file. 4. Configure settings like Stata path, server host, and log file location in VS Code/Cursor settings.",
    "category": "Development Tools",
    "stars": 51,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/oi1csr3pb2i.png"
  },
  "tpapi": {
    "name": "ThemeParks.wiki API MCP Server",
    "githubLink": "https://github.com/habuma/tpapi-mcp-server",
    "package": "habuma/tpapi-mcp-server",
    "description": "MCP Server exposing ThemeParks.wiki API data for theme park operating hours, attraction wait times, and show times.",
    "installCommand": "./gradlew build && ./gradlew bootBuildImage --imageName=habuma/tpapi-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Build the server using './gradlew build'. 2. Optionally build Docker image using './gradlew bootBuildImage --imageName=habuma/tpapi-mcp-server'. 3. Configure Claude Desktop by adding 'mcpServers' configuration to 'claude_desktop_config.json' with correct paths to Java and the JAR file.",
    "category": "API Integration",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "research": {
    "name": "Research MCP Server",
    "githubLink": "https://github.com/h-yanagawa/research-mcp-server",
    "package": "research-mcp-server",
    "description": "An MCP server that integrates with Notion to retrieve survey data and create survey pages.",
    "installCommand": "git clone https://github.com/h-yanagawa/research-mcp-server.git && cd research-mcp-server && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "NOTION_TOKEN",
      "NOTION_ROOT_DATABASE_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository.\n2. Obtain a Notion token from Notion Integrations.\n3. Create a database page in Notion and retrieve the database ID.\n4. Create a `.env` file with NOTION_TOKEN and NOTION_ROOT_DATABASE_ID.\n5. Configure Claude Desktop Client by adding MCP server definition to `claude_desktop.json`.\n6. Restart Claude Desktop Client.\n7. Use Claude to perform a survey and review results.",
    "category": "AI/ML",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "pubmedmcp": {
    "name": "PubMed MCP Server",
    "githubLink": "https://github.com/grll/pubmedmcp",
    "package": "pubmedmcp",
    "description": "An MCP server for searching and fetching biomedical literature from PubMed.",
    "installCommand": "uvx pubmedmcp@latest",
    "requiredEnvVars": [
      "UV_PRERELEASE",
      "UV_PYTHON"
    ],
    "optionalParams": [
      "PATH"
    ],
    "usageInstructions": "Add pubmedmcp configuration to claude_desktop_config.json. Ensure uv is installed and 'uvx' is available in PATH. Configure UV_PRERELEASE and UV_PYTHON environment variables.",
    "category": "Knowledge Management",
    "stars": 44,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "transistor": {
    "name": "Transistor MCP Server",
    "githubLink": "https://github.com/gxjansen/Transistor-MCP",
    "package": "Transistor-MCP",
    "description": "This MCP server provides tools to interact with the Transistor.fm API, allowing you to manage podcasts, episodes, and view analytics.",
    "installCommand": "git clone https://github.com/gxjansen/Transistor-MCP && cd Transistor-MCP && npm install",
    "requiredEnvVars": [
      "TRANSISTOR_API_KEY"
    ],
    "optionalParams": [
      "page",
      "per",
      "private",
      "query",
      "status",
      "order",
      "include",
      "fields",
      "start_date",
      "end_date",
      "show_id",
      "episode_id",
      "webhook_id",
      "event_name",
      "url"
    ],
    "usageInstructions": "1. Clone the repository using 'git clone https://github.com/gxjansen/Transistor-MCP'.\n2. Navigate to the directory and run 'npm install' to install dependencies.\n3. Add the server to your MCP settings configuration file with your Transistor API key as shown in the README.\n4. Use the provided tools to interact with the Transistor.fm API, such as listing shows, managing episodes, and retrieving analytics.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "google-search": {
    "name": "Google Search MCP Server",
    "githubLink": "https://github.com/gradusnikov/google-search-mcp-server",
    "package": "@gradusnikov/google-search-mcp-server",
    "description": "A Model Context Protocol (MCP) server that provides Google Custom Search functionality.",
    "installCommand": "npx -y @smithery/cli install @gradusnikov/google-search-mcp-server --client claude",
    "requiredEnvVars": [
      "GOOGLE_API_KEY",
      "GOOGLE_CSE_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create a `.env` file with `GOOGLE_API_KEY` and `GOOGLE_CSE_ID`.\n2. Start the server using MCP: `mcp run google_search_mcp_server.py`.\n3. Alternatively, add the server to the Claude Desktop app configuration file with the provided command example.",
    "category": "API Integration",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "pubmed-search": {
    "name": "PubMedSearch MCP Server",
    "githubLink": "https://github.com/gradusnikov/pubmed-search-mcp-server",
    "package": "@gradusnikov/pubmed-search-mcp-server",
    "description": "An MCP server providing tools to search and retrieve academic papers from PubMed database.",
    "installCommand": "npx -y @smithery/cli install @gradusnikov/pubmed-search-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "configuration options in .env file"
    ],
    "usageInstructions": "1. Start the server in development mode: 'mcp dev pubmed_search_mcp_server.py'. 2. Add server configuration to Claude Desktop app config.json. Ensure Python and required packages (fastmcp, requests, python-dotenv) are installed.",
    "category": "Knowledge Management",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "difyworkflow": {
    "name": "MCP Dify Workflow Server",
    "githubLink": "https://github.com/gotoolkits/mcp-difyworkflow-server",
    "package": "mcp-difyworkflow-server",
    "description": "An MCP server that implements query and invocation of Dify workflows.",
    "installCommand": "git clone https://github.com/gotoolkits/mcp-difyworkflow-server.git && cd mcp-difyworkflow-server && make build",
    "requiredEnvVars": [
      "DIFY_WORKFLOW_NAME",
      "DIFY_API_KEYS"
    ],
    "optionalParams": [
      "base-url"
    ],
    "usageInstructions": "Configure the server by specifying DIFY_WORKFLOW_NAME and DIFY_API_KEYS in the env section of the MCP configuration file. Use commands like 'list_workflows' to list authorized workflows and 'execute_workflow' to execute a specified workflow.",
    "category": "AI/ML",
    "stars": 53,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "graphlit": {
    "name": "Graphlit MCP Server",
    "githubLink": "https://github.com/graphlit/graphlit-mcp-server",
    "package": "graphlit-mcp-server",
    "description": "Model Context Protocol (MCP) Server for Graphlit Platform that enables integration between MCP clients and Graphlit service for knowledge management across developer and product management tools.",
    "installCommand": "npx -y graphlit-mcp-server",
    "requiredEnvVars": [
      "GRAPHLIT_ORGANIZATION_ID",
      "GRAPHLIT_ENVIRONMENT_ID",
      "GRAPHLIT_JWT_SECRET"
    ],
    "optionalParams": [
      "Port configuration",
      "Debug mode",
      "Custom API endpoints",
      "Authentication token expiration time"
    ],
    "usageInstructions": "1. Install Node.js (18.x or higher)\n2. Create a Graphlit account and get your credentials from https://portal.graphlit.dev\n3. Set environment variables GRAPHLIT_ORGANIZATION_ID, GRAPHLIT_ENVIRONMENT_ID, and GRAPHLIT_JWT_SECRET\n4. Run 'npx -y graphlit-mcp-server' to start the server\n5. Use with MCP clients like Cursor, Windsurf, Goose, or Cline",
    "category": "Knowledge Management",
    "stars": 325,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "gotohuman": {
    "name": "gotoHuman MCP Server",
    "githubLink": "https://github.com/gotohuman/gotohuman-mcp-server",
    "package": "@gotohuman/mcp-server",
    "description": "A Model Context Protocol (MCP) server that enables human-in-the-loop workflows for AI agents and agentic workflows with customizable approval UI, built-in authentication, webhooks, notifications, and team features.",
    "installCommand": "npx -y @gotohuman/mcp-server",
    "requiredEnvVars": [
      "GOTOHUMAN_API_KEY"
    ],
    "optionalParams": [
      "assignToUsers",
      "metadata"
    ],
    "usageInstructions": "1. Install the server using the command: `npx -y @gotohuman/mcp-server`. 2. Set the `GOTOHUMAN_API_KEY` environment variable with your API key. 3. Use the provided tools (`list-forms`, `get-form-schema`, `request-human-review-with-form`) to manage human approval workflows. 4. For local development, run `npm install`, `npm run build`, and configure the server in your MCP client (e.g., Cursor, Claude, or Windsurf) using the provided JSON configuration.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/8j4xxg9relb.jpg"
  },
  "filesys": {
    "name": "Filesystem MCP Server",
    "githubLink": "https://github.com/gomcpgo/filesys",
    "package": "github.com/gomcpgo/filesys",
    "description": "A secure Model Context Protocol (MCP) server that provides filesystem operations with controlled access to specified directories.",
    "installCommand": "go get github.com/gomcpgo/filesys",
    "requiredEnvVars": [
      "MCP_ALLOWED_DIRS"
    ],
    "optionalParams": [],
    "usageInstructions": "Set allowed directories using the environment variable: export MCP_ALLOWED_DIRS=\"/path1,/path2,/path with spaces/dir3\". Add to claude_desktop_config.json with the command path and environment variables. Use the provided tools for file and directory operations.",
    "category": "File Management",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "gologin": {
    "name": "GoLogin MCP Server",
    "githubLink": "https://github.com/gologinapp/gologin-mcp",
    "package": "@gologinapp/gologin-mcp",
    "description": "Manage GoLogin browser profiles and automation through AI conversations",
    "installCommand": "npx -y @gologinapp/gologin-mcp",
    "requiredEnvVars": [
      "API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Configure in Claude Desktop or Cursor using mcpServers configuration\n2. Set API_TOKEN environment variable with your GoLogin API token\n3. Restart the client to connect to the MCP server",
    "category": "Browser Automation",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "genai-toolbox": {
    "name": "MCP Toolbox for Databases",
    "githubLink": "https://github.com/googleapis/genai-toolbox",
    "package": "github.com/googleapis/genai-toolbox",
    "description": "An open source MCP server for databases that simplifies development, improves performance, and enhances security by handling complexities like connection pooling and authentication.",
    "installCommand": "export VERSION=0.8.0 && curl -O https://storage.googleapis.com/genai-toolbox/v$VERSION/linux/amd64/toolbox && chmod +x toolbox",
    "requiredEnvVars": [],
    "optionalParams": [
      "--tools-file"
    ],
    "usageInstructions": "1. Configure a tools.yaml file to define your tools.\n2. Run the server using: ./toolbox --tools-file \"tools.yaml\"\n3. Integrate with your application using the appropriate Client SDK (Python, LangChain, LlamaIndex, etc.)",
    "category": "Database Tools",
    "stars": 1735,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/z598h6gf9nb.png"
  },
  "wp": {
    "name": "WordPress MCP Server",
    "githubLink": "https://github.com/glendaviesnz/wp-mcp",
    "package": "wp-mcp",
    "description": "A Python-based MCP server implementation for WordPress",
    "installCommand": "uv venv && source .venv/bin/activate && uv pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "claude_desktop_config.json configuration: mcpServers.wordpress.command and mcpServers.wordpress.args"
    ],
    "usageInstructions": "1. Clone the repository\n2. Run `uv venv && source .venv/bin/activate && uv pip install -r requirements.txt`\n3. Configure claude_desktop_config.json with the correct path to wp.py\n4. Run the server with `uv run wp.py` (automatically managed by Claude)",
    "category": "API Integration",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "audius-atris": {
    "name": "Atris MCP for Audius",
    "githubLink": "https://github.com/glassBead-tc/audius-mcp-atris",
    "package": "audius-mcp-atris",
    "description": "An MCP server providing comprehensive access to the Audius music platform via LLMs with 105 tools covering ~95% of the Audius Protocol API.",
    "installCommand": "npm install audius-mcp-atris",
    "requiredEnvVars": [
      "AUDIUS_API_KEY",
      "AUDIUS_API_SECRET",
      "AUDIUS_ENVIRONMENT"
    ],
    "optionalParams": [
      "SERVER_NAME",
      "SERVER_VERSION"
    ],
    "usageInstructions": "1. Install the package using `npm install audius-mcp-atris`.\n2. Create a `.env` file with your Audius API credentials.\n3. Start the server with `npm start`.\n4. For development, use `npm run dev`.\n5. Configure your LLM application (e.g., Claude) to use the server via the provided JSON configuration format.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "hive": {
    "name": "Hive MCP Server",
    "githubLink": "https://github.com/gluneau/hive-mcp-server",
    "package": "@gluneau/hive-mcp-server",
    "description": "An MCP server that enables AI assistants to interact with the Hive blockchain through the Model Context Protocol, allowing operations like fetching account data, voting, creating posts, and sending encrypted messages.",
    "installCommand": "npx -y @gluneau/hive-mcp-server",
    "requiredEnvVars": [
      "HIVE_USERNAME",
      "HIVE_POSTING_KEY",
      "HIVE_ACTIVE_KEY",
      "HIVE_MEMO_KEY"
    ],
    "optionalParams": [
      "category",
      "limit",
      "operation_filter",
      "from",
      "weight",
      "tags",
      "title",
      "body"
    ],
    "usageInstructions": "1. Set required environment variables for authentication (HIVE_USERNAME, HIVE_POSTING_KEY, HIVE_ACTIVE_KEY, HIVE_MEMO_KEY).\n2. Use the MCP Inspector with `npx @modelcontextprotocol/inspector npx @gluneau/hive-mcp-server` for interactive testing.\n3. Integrate with AI assistants like Claude Desktop, Windsurf, or Cursor by adding the server to their configuration files with the appropriate environment variables.\n4. Use the server to perform actions such as fetching account info, creating posts, voting, and sending encrypted messages.",
    "category": "Blockchain Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "kokoro-tts": {
    "name": "Kokoro TTS MCP Server",
    "githubLink": "https://github.com/giannisanni/kokoro-tts-mcp",
    "package": "kokoro-tts-mcp",
    "description": "A Model Context Protocol (MCP) server that provides text-to-speech capabilities using the Kokoro TTS engine, enabling easy integration of speech synthesis into applications.",
    "installCommand": "curl -LsSf https://astral.sh/uv/install.sh | sh && uv venv && source .venv/bin/activate && uv pip install .",
    "requiredEnvVars": [],
    "optionalParams": [
      "voice",
      "speed",
      "save_path",
      "play_audio"
    ],
    "usageInstructions": "1. Install the server using the provided install command.\n2. Use the MCP client to connect to the 'kokoro-tts' server.\n3. Call the 'generate_speech' tool with the required 'text' parameter and optional parameters like 'voice', 'speed', 'save_path', and 'play_audio'.\n4. Ensure audio playback tools (start, afplay, aplay) are available on your system for audio playback.",
    "category": "AI/ML",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "postiz-app": {
    "name": "Postiz AI Social Media Scheduling Tool",
    "githubLink": "https://github.com/gitroomhq/postiz-app",
    "package": "postiz-app",
    "description": "Self-hosted social media scheduling tool with AI features, analytics, and team collaboration capabilities",
    "installCommand": "git clone https://github.com/gitroomhq/postiz-app.git && cd postiz-app && npm install && npm run build",
    "requiredEnvVars": [
      "DATABASE_URL",
      "REDIS_URL"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "ENABLE_DEBUG"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies\n2. Configure PostgreSQL and Redis connections\n3. Follow the Quick Start Guide at https://docs.postiz.com/quickstart for detailed setup",
    "category": "Productivity",
    "stars": 22400,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/a8hispu0dti.png"
  },
  "coding-standards": {
    "name": "Coding Standards MCP Server",
    "githubLink": "https://github.com/ggerve/coding-standards-mcp",
    "package": "mcp",
    "description": "MCP server providing coding style guidelines and best practices for Java, Python, and React.",
    "installCommand": "mcp install server.py",
    "requiredEnvVars": [],
    "optionalParams": [
      "port"
    ],
    "usageInstructions": "1. Install MCP package: pip install mcp\n2. Install UV package manager (recommended)\n3. Configure MCP client by adding server configuration to ~/.codeium/windsurf/mcp_config.json\n4. Run in development mode: mcp dev server.py",
    "category": "Development Tools",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "ashra": {
    "name": "Ashra MCP Server",
    "githubLink": "https://github.com/getrupt/ashra-mcp",
    "package": "ashra-mcp",
    "description": "A Model Context Protocol server for Ashra, integrating with Claude AI",
    "installCommand": "git clone https://github.com/getrupt/ashra-mcp.git && cd ashra-mcp && yarn && yarn build",
    "requiredEnvVars": [
      "ASHRA_API_KEY"
    ],
    "optionalParams": [
      "command",
      "args",
      "env"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'yarn'. 2. Build the project with 'yarn build'. 3. Configure Claude by creating 'claude_desktop_config.json' in the appropriate directory with the required 'ASHRA_API_KEY'.",
    "category": "AI/ML",
    "stars": 29,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/o9tfdlsaej9.svg"
  },
  "graphiti": {
    "name": "Graphiti",
    "githubLink": "https://github.com/getzep/graphiti",
    "package": "graphiti-core",
    "description": "Graphiti is a framework for building and querying temporally-aware knowledge graphs, specifically tailored for AI agents operating in dynamic environments.",
    "installCommand": "pip install graphiti-core",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "NEO4J_URI",
      "NEO4J_USER",
      "NEO4J_PASSWORD",
      "GEMINI_API_KEY",
      "ANTHROPIC_API_KEY",
      "GROQ_API_KEY"
    ],
    "usageInstructions": "1. Install Graphiti using pip or uv. 2. Set up Neo4j or FalkorDB as the graph database backend. 3. Configure the required OpenAI API key. 4. Optionally set API keys for other LLM providers (Gemini, Anthropic, Groq). 5. Use the Graphiti framework to build and query knowledge graphs for AI agents.",
    "category": "AI/ML",
    "stars": 12133,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/slm36e7sk1.png"
  },
  "lightning-tools": {
    "name": "Lightning Tools MCP Server",
    "githubLink": "https://github.com/getAlby/lightning-tools-mcp-server",
    "package": "@getalby/lightning-tools-mcp-server",
    "description": "An MCP server that provides lightning address interaction and common lightning tools for integration with LLMs. Works with Alby's NWC MCP Server.",
    "installCommand": "npx -y @getalby/lightning-tools-mcp-server",
    "requiredEnvVars": [
      "NWC_CONNECTION_STRING"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install Node.js 20+ and Yarn.\n2. Use the install command: npx -y @getalby/lightning-tools-mcp-server.\n3. Set the NWC_CONNECTION_STRING environment variable with your NWC connection string.\n4. Add the server configuration to your claude_desktop_config.json or Cline prompt as shown in the README.\n5. Optionally, build from source with yarn install, yarn build, and test with yarn inspect.",
    "category": "Lightning Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "jessica": {
    "name": "Project Jessica (ElevenLabs TTS MCP)",
    "githubLink": "https://github.com/georgi-io/jessica",
    "package": "jessica",
    "description": "MCP server integrating ElevenLabs Text-to-Speech with Cursor through Model Context Protocol",
    "installCommand": "git clone https://github.com/georgi-io/jessica.git && cd jessica && python -m venv .venv && source .venv/bin/activate && poetry install && cp .env.example .env",
    "requiredEnvVars": [
      "ELEVENLABS_API_KEY"
    ],
    "optionalParams": [
      "HOST",
      "PORT",
      "DEBUG",
      "RELOAD",
      "VITE_API_URL",
      "VITE_WS_URL"
    ],
    "usageInstructions": "1. Clone repository and cd into it\n2. Create and activate virtual environment\n3. Install backend dependencies using Poetry\n4. Configure .env with ElevenLabs API key\n5. Install pre-commit hooks\n6. Start backend server\n7. Configure Cursor MCP settings to connect to http://localhost:9020/sse",
    "category": "AI/ML",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "linear-go": {
    "name": "Linear MCP Server",
    "githubLink": "https://github.com/geropl/linear-mcp-go",
    "package": "linear-mcp-go",
    "description": "An MCP server for Linear, providing tools to interact with the Linear API through the MCP protocol.",
    "installCommand": "curl -L -o ./linear-mcp-go $(curl -s https://api.github.com/repos/geropl/linear-mcp-go/releases/latest | jq -r '.assets[] | select(.name | contains(\"$(uname -s | tr '[:upper:]' '[:lower:]')\")) | .browser_download_url') && chmod +x ./linear-mcp-go",
    "requiredEnvVars": [
      "LINEAR_API_KEY"
    ],
    "optionalParams": [
      "--write-access",
      "--auto-approve",
      "--tool"
    ],
    "usageInstructions": "1. Set LINEAR_API_KEY environment variable: export LINEAR_API_KEY=your_linear_api_key\n2. Run the server: ./linear-mcp-go serve\n3. For write access: ./linear-mcp-go serve --write-access",
    "category": "API Integration",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "gemini": {
    "name": "Gemini MCP Server",
    "githubLink": "https://github.com/georgejeffers/gemini-mcp-server",
    "package": "@georgejeffers/gemini-mcp-server",
    "description": "A TypeScript implementation of a Model Context Protocol (MCP) server that integrates with Google's Gemini Pro model.",
    "installCommand": "npx -y @smithery/cli install @georgejeffers/gemini-mcp-server --client claude",
    "requiredEnvVars": [
      "GEMINI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install the server via Smithery using the provided command.\n2. Set the GEMINI_API_KEY environment variable with your Google Gemini API key.\n3. Configure Claude Desktop with the provided JSON configuration to use the server.\n4. The server will be available in Claude Desktop's MCP server list.",
    "category": "AI/ML",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "switchbot": {
    "name": "SwitchBot MCP Server",
    "githubLink": "https://github.com/genm/switchbot-mcp",
    "package": "@genm/switchbot-mcp",
    "description": "An MCP server providing SwitchBot device control capabilities to AI assistants.",
    "installCommand": "npm install @genm/switchbot-mcp",
    "requiredEnvVars": [
      "SWITCHBOT_TOKEN",
      "SWITCHBOT_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install SwitchBot app and create account. 2. Get token and secret from Developer Options. 3. Configure claude_desktop_config.json with command, args, and env variables. 4. Set SWITCHBOT_TOKEN and SWITCHBOT_SECRET environment variables.",
    "category": "AI/ML",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "git-go": {
    "name": "Git MCP Server (Go)",
    "githubLink": "https://github.com/geropl/git-mcp-go",
    "package": "github.com/geropl/git-mcp-go",
    "description": "A Model Context Protocol (MCP) server for Git repository interaction and automation, written in Go. It provides tools to read, search, and manipulate Git repositories via Large Language Models.",
    "installCommand": "go install github.com/geropl/git-mcp-go@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "--repository, -r <paths>",
      "--mode <shell|go-git>",
      "--write-access",
      "--verbose, -v",
      "--auto-approve <tool-list|allow-read-only|allow-local-only>",
      "--tool <cline|roo-code>"
    ],
    "usageInstructions": "1. Install the server using `go install github.com/geropl/git-mcp-go@latest`.\n2. Use `git-mcp-go serve` to start the server with one or more repositories.\n3. Use `git-mcp-go setup` to configure the server for use with an AI assistant like Cline.\n4. The server supports multiple repositories and provides tools for Git operations such as status, diff, commit, push, and more.\n5. For remote operations, enable `--write-access`.\n6. Use `--auto-approve` to allow specific tools to run without user approval.",
    "category": "Version Control",
    "stars": 18,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "workers": {
    "name": "workers-mcp",
    "githubLink": "https://github.com/geelen/workers-mcp",
    "package": "workers-mcp",
    "description": "Model Context Protocol (MCP) server implementation for Cloudflare Workers",
    "installCommand": "npm install workers-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "The project has been moved to https://github.com/cloudflare/workers-mcp. Please refer to the new repository for installation and usage instructions.",
    "category": "API Integration",
    "stars": 20,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "discord-webhook": {
    "name": "MCP Server Discord Webhook",
    "githubLink": "https://github.com/genm/mcp-server-discord-webhook",
    "package": "@genpm/mcp-server-discord-webhook",
    "description": "An MCP server for posting messages to Discord webhooks using the send_message tool.",
    "installCommand": "npm install @genpm/mcp-server-discord-webhook",
    "requiredEnvVars": [
      "DISCORD_WEBHOOK_URL"
    ],
    "optionalParams": [
      "username",
      "avatar_url"
    ],
    "usageInstructions": "1. Install the package using `npm install @genpm/mcp-server-discord-webhook`. 2. Add the server configuration to your MCP configuration file as shown in the README. 3. Set the `DISCORD_WEBHOOK_URL` environment variable to your Discord webhook URL. 4. Use the `send_message` tool with required `content` and optional `username` and `avatar_url` parameters.",
    "category": "Communication",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "memory-file": {
    "name": "MCP Server Memory File",
    "githubLink": "https://github.com/g0t4/mcp-server-memory-file",
    "package": "mcp-server-memory",
    "description": "An MCP server that interacts with a memory text file to help Claude with inter-chat context.",
    "installCommand": "npm install -g mcp-server-memory",
    "requiredEnvVars": [],
    "optionalParams": [
      "memory_file_path"
    ],
    "usageInstructions": "To use this server, install it globally using npm, then configure it to point to your memory text file. The server provides tools for managing memories mid-chat, such as memory_add, memory_search, memory_delete, and memory_list.",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "bitbucket": {
    "name": "Bitbucket Server MCP",
    "githubLink": "https://github.com/garc33/bitbucket-server-mcp-server",
    "package": "@garc33/bitbucket-server-mcp-server",
    "description": "MCP server for Bitbucket Server Pull Request management, providing tools to interact with the Bitbucket Server API through the Model Context Protocol.",
    "installCommand": "npx -y @smithery/cli install @garc33/bitbucket-server-mcp-server --client claude",
    "requiredEnvVars": [
      "BITBUCKET_DEFAULT_PROJECT"
    ],
    "optionalParams": [
      "limit",
      "start",
      "project",
      "description",
      "message",
      "strategy",
      "parentId",
      "contextLines"
    ],
    "usageInstructions": "1. Set BITBUCKET_DEFAULT_PROJECT if you want to use a default project. 2. Use commands like list_projects, list_repositories, create_pull_request, etc., with appropriate parameters. 3. For detailed usage examples, refer to the 'Usage Examples' section in the README.",
    "category": "API Integration",
    "stars": 22,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "commands": {
    "name": "MCP Server Commands",
    "githubLink": "https://github.com/g0t4/mcp-server-commands",
    "package": "mcp-server-commands",
    "description": "An MCP server that allows LLMs to run shell commands and return stdout/stderr.",
    "installCommand": "npm install -g mcp-server-commands",
    "requiredEnvVars": [],
    "optionalParams": [
      "--verbose"
    ],
    "usageInstructions": "To use with Claude Desktop, configure the server in claude_desktop_config.json. For HTTP interface, use 'uvx mcpo --port 3010 --api-key \"supersecret\" -- npx mcp-server-commands'. Logs are written to ~/Library/Logs/Claude/mcp-server-mcp-server-commands.log by default.",
    "category": "Development Tools",
    "stars": 169,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "macos-defaults": {
    "name": "mcp-server-macos-defaults",
    "githubLink": "https://github.com/g0t4/mcp-server-macos-defaults",
    "package": "mcp-server-macos-defaults",
    "description": "MCP server for reading and writing macOS defaults (settings) using command-line tools like defaults read/write.",
    "installCommand": "uvx mcp-server-macos-defaults",
    "requiredEnvVars": [],
    "optionalParams": [
      "command",
      "args"
    ],
    "usageInstructions": "1. Install using `uvx mcp-server-macos-defaults`.\n2. Use the provided tools like `defaults-read`, `defaults-write`, `list-domains`, and `find` to interact with macOS defaults.\n3. For development, clone the repository and run `uv run mcp-server-macos-defaults`.\n4. For debugging, use the MCP Inspector by running `npx @modelcontextprotocol/inspector uv --directory /path/to/mcp-server-macos-defaults run mcp-server-macos-defaults`.",
    "category": "System Integration",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "futuur": {
    "name": "Futuur API MCP Integration",
    "githubLink": "https://github.com/futuur/Futuur-MCP",
    "package": "@futuur/futuur-mcp",
    "description": "A TypeScript-based Model Context Protocol (MCP) server that integrates with the Futuur API to handle market data, categories, user information, and betting operations.",
    "installCommand": "npx -y @smithery/cli install @futuur/futuur-mcp --client cursor",
    "requiredEnvVars": [
      "FUTUUR_PUBLIC_KEY",
      "FUTUUR_PRIVATE_KEY"
    ],
    "optionalParams": [
      "DEBUG"
    ],
    "usageInstructions": "1. Install Node.js (LTS version) and npm/yarn. 2. Install the package using the install command. 3. Build the project with `npm run build`. 4. Run the server with `npx mcprunner FUTUUR_PUBLIC_KEY=... FUTUUR_PRIVATE_KEY=... -- node [path]/build/index.js`. Replace the keys with your actual Futuur API credentials.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/mz59a45vj2b.png"
  },
  "inked": {
    "name": "Inked MCP Server",
    "githubLink": "https://github.com/frgmt0/mcp-inked",
    "package": "@frgmt/inked",
    "description": "A powerful MCP server for memory management with Claude apps, featuring fast text search and optional AI-powered semantic search.",
    "installCommand": "npm install -g @frgmt/inked",
    "requiredEnvVars": [],
    "optionalParams": [
      "--use-embeddings",
      "--use-reranking"
    ],
    "usageInstructions": "After installation, add to your MCP server configuration using 'npx @frgmt/inked' in the command field. Configure Claude settings to use the inked Read tool with 'ALL' to load memories and Write tool to save important information.",
    "category": "AI/ML",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "headline-vibes": {
    "name": "Headline Vibes Analysis MCP Server",
    "githubLink": "https://github.com/fred-em/headline-vibes",
    "package": "headline-vibes",
    "description": "An MCP server that analyzes sentiment in news headlines from major US publications, providing sentiment scoring and source distribution information.",
    "installCommand": "git clone https://github.com/fred-em/headline-vibes.git && cd headline-vibes && npm install && npm run build",
    "requiredEnvVars": [
      "NEWS_API_KEY"
    ],
    "optionalParams": [
      "input"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Configure your NewsAPI key in the MCP settings file. 3. Use the analyze_headlines tool with natural language dates or specific dates.",
    "category": "API Integration",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "pdfsearch-zed": {
    "name": "PDF Search for Zed",
    "githubLink": "https://github.com/freespirit/pdfsearch-zed",
    "package": "pdfsearch-zed",
    "description": "A Zed extension that enables semantic search through PDF documents and integrates results into Zed's AI Assistant.",
    "installCommand": "git clone https://github.com/freespirit/pdfsearch-zed.git && cd pdfsearch-zed/pdf_rag && uv venv && uv sync",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "extension_path",
      "file1.pdf",
      "dir1",
      "file2.md"
    ],
    "usageInstructions": "1. Clone the repository and set up the Python environment. 2. Set the OPENAI_API_KEY in src/pdf_rag/.env. 3. Build the search database using uv run src/pdf_rag/rag.py build with file/directory arguments. 4. Configure Zed's context_servers with the extension path. 5. Use /pdfsearch in Zed's AI Assistant panel to search PDFs.",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "custom": {
    "name": "custom_mcp_servers",
    "githubLink": "https://github.com/francesliang/custom",
    "package": "custom",
    "description": "A custom Model Context Protocol (MCP) server implementation for specialized use cases.",
    "installCommand": "git clone https://github.com/francesliang/custom && cd custom && pip install -r requirements.txt",
    "requiredEnvVars": [
      "API_KEY",
      "DATABASE_URL",
      "SECRET_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "MAX_CONNECTIONS",
      "LOG_LEVEL"
    ],
    "usageInstructions": "After installation, set the required environment variables (API_KEY, DATABASE_URL, SECRET_KEY). Start the server using 'python main.py'. Customize optional parameters like PORT and DEBUG for configuration.",
    "category": "Other",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "hex": {
    "name": "Hex MCP Server",
    "githubLink": "https://github.com/franccesco/hex-mcp",
    "package": "hex-mcp",
    "description": "MCP server for Hex that implements various tools for managing Hex projects",
    "installCommand": "uv add hex-mcp",
    "requiredEnvVars": [
      "HEX_API_KEY"
    ],
    "optionalParams": [
      "HEX_API_URL"
    ],
    "usageInstructions": "After installation, configure using 'hex-mcp config --api-key \"your_hex_api_key\"' or set HEX_API_KEY environment variable. For Cursor integration, create .cursor/mcp.json with appropriate command configuration.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "bloomy": {
    "name": "Bloomy MCP",
    "githubLink": "https://github.com/franccesco/bloomy-mcp",
    "package": "bloomy-mcp",
    "description": "A Model Context Protocol (MCP) server that connects to Bloom Growth's GraphQL API, enabling AI assistants to perform operations against the platform.",
    "installCommand": "git clone https://github.com/franccesco/bloomy-mcp && cd bloomy-mcp && python -m venv .venv && source .venv/bin/activate && uv pip install -e .",
    "requiredEnvVars": [
      "BLOOM_API_URL",
      "BLOOM_API_TOKEN"
    ],
    "optionalParams": [
      "BLOOM_API_TIMEOUT",
      "BLOOM_DEBUG",
      "BLOOM_LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and set up a Python virtual environment. 2. Install the package in development mode using `uv pip install -e .` or `pip install -e .`. 3. Create a `.env` file with `BLOOM_API_URL` and `BLOOM_API_TOKEN`. 4. Start the server with `bloomy-server`. For Cursor integration, configure the server with the command `uv run --project /path/to/your/repo/ --env-file /path/to/your/repo/.env bloomy-server`. Use the MCP inspector tool with `npx @modelcontextprotocol/inspector bloomy-server` for development.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "dicom": {
    "name": "DICOM MCP Server",
    "githubLink": "https://github.com/fluxinc/dicom-mcp-server",
    "package": "mcp[cli]",
    "description": "An MCP server for DICOM connectivity testing that allows listing DICOM nodes and performing C-ECHO operations.",
    "installCommand": "pip install uv && uv pip install mcp[cli]",
    "requiredEnvVars": [],
    "optionalParams": [
      "nodes.yaml configuration parameters (e.g., node names, AE titles, IPs, ports)"
    ],
    "usageInstructions": "1. Install UV: pip install uv\n2. Install MCP server: uv pip install mcp[cli]\n3. Configure nodes.yaml with DICOM node information\n4. Run server: uv run server.py\n5. Use MCP commands like list_dicom_nodes(), dicom_cecho_by_name(), or dicom_cecho() through Claude's MCP interface",
    "category": "System Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "foursquare-places": {
    "name": "Foursquare Places MCP Server",
    "githubLink": "https://github.com/foursquare/foursquare-places-mcp",
    "package": "foursquare-places-mcp",
    "description": "MCP server providing access to Foursquare Places API for location-based services and AI agent integration",
    "installCommand": "git clone https://github.com/foursquare/foursquare-places-mcp.git && cd foursquare-places-mcp/fsq-server-python && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "FOURSQUARE_SERVICE_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "1. Clone the repository: git clone https://github.com/foursquare/foursquare-places-mcp.git\n2. Create a Foursquare Service API Key following https://docs.foursquare.com/developer/docs/manage-service-api-keys\n3. Set FOURSQUARE_SERVICE_API_KEY environment variable\n4. Follow instructions in fsq-server-python/README.md for Python setup using uv\n5. Download and install Claude Desktop App from https://claude.ai/download",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/4an0stwpws8.jpeg"
  },
  "folderr": {
    "name": "Folderr MCP Server",
    "githubLink": "https://github.com/folderr-tech/folderr-mcp-server",
    "package": "@folderr/folderr-mcp-server",
    "description": "A Model Context Protocol (MCP) server that provides tools to interact with Folderr's API, specifically for managing and communicating with Folderr Assistants.",
    "installCommand": "npm install @folderr/folderr-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "Authentication token (via login or API key)",
      "Base URL for the Folderr API"
    ],
    "usageInstructions": "1. Add the server to your MCP settings with the command: `npx -y @folderr/folderr-mcp-server`.\n2. Use the provided tools for authentication and assistant management:\n   - `login` with email and password.\n   - `set_api_token` with an API token from Folderr's developers section.\n3. The server stores its configuration in a `config.json` file, including the authentication token and API base URL.\n4. All assistant-related tools require authentication before use.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "teams": {
    "name": "Teams MCP Server",
    "githubLink": "https://github.com/floriscornel/teams-mcp",
    "package": "@floriscornel/teams-mcp",
    "description": "An MCP server providing integration with Microsoft Graph APIs for Microsoft Teams, users, and organizational data.",
    "installCommand": "npx -y @floriscornel/teams-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "format"
    ],
    "usageInstructions": "1. Install using: npx -y @floriscornel/teams-mcp@latest\n2. Authenticate with Microsoft Graph using: npx @floriscornel/teams-mcp@latest authenticate\n3. Configure in Cursor/Claude/VS Code using the provided JSON configuration\n4. Requires Node.js 18+, Microsoft 365 account, and Azure App Registration with Microsoft Graph permissions",
    "category": "API Integration",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/z5v6nf94z5j.png"
  },
  "better-fetch": {
    "name": "Better Fetch",
    "githubLink": "https://github.com/flutterninja9/better-fetch",
    "package": "@flutterninja9/better-fetch",
    "description": "A powerful Model Context Protocol (MCP) server that intelligently fetches and processes web content with nested URL crawling capabilities, transforming documentation sites into structured markdown for AI consumption.",
    "installCommand": "npx -y @smithery/cli install @flutterninja9/better-fetch --client claude",
    "requiredEnvVars": [
      "NODE_ENV"
    ],
    "optionalParams": [
      "maxDepth",
      "maxPages",
      "sameDomainOnly",
      "excludePatterns",
      "includePatterns",
      "timeout"
    ],
    "usageInstructions": "1. Install via Smithery with the provided command. 2. Clone the repository and run `npm install` followed by `npm run build`. 3. Configure your MCP client with the server path. 4. Use the `fetch_website_nested` or `fetch_website_single` tools with appropriate parameters for crawling or single-page extraction.",
    "category": "Web Scraping",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/r34lce2mte.png"
  },
  "sargoth": {
    "name": "Sargoth Mermaid Renderer MCP Server",
    "githubLink": "https://github.com/floor-licker/sargoth-mcp",
    "package": "sargoth-mcp",
    "description": "AI-powered Mermaid diagram generation MCP server for converting natural language to professional visuals",
    "installCommand": "git clone https://github.com/floor-licker/sargoth-mcp && cd sargoth-mcp && pip install -r requirements.txt && chmod +x mcp_server.py",
    "requiredEnvVars": [],
    "optionalParams": [
      "MERMAID_API_URL"
    ],
    "usageInstructions": "1. Configure AI assistant (Claude Desktop) with the MCP server path\n2. Start the MCP server: python mcp_server.py\n3. Use AI assistant to generate diagrams with commands like 'Create a sequence diagram showing how a user logs into a web application'",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/r9a5ye2nfjh.svg"
  },
  "authenticator": {
    "name": "Authenticator App MCP Server",
    "githubLink": "https://github.com/firstorderai/authenticator",
    "package": "authenticator-mcp",
    "description": "A secure Model Context Protocol (MCP) server that enables AI agents to retrieve 2FA codes and passwords from the Authenticator App, allowing automated login processes while maintaining security.",
    "installCommand": "npx -y authenticator-mcp --access-token=YOUR-KEY",
    "requiredEnvVars": [
      "AUTHENTICATOR_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "--access-token"
    ],
    "usageInstructions": "1. Install the Authenticator App · 2FA desktop version. 2. Create an access token in the Authenticator App settings under the MCP Server section. 3. Configure your AI agent's MCP server configuration with the command: `npx -y authenticator-mcp --access-token=YOUR-KEY`. 4. Use the AI agent to request 2FA codes or passwords for specific websites and accounts.",
    "category": "Authentication",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/jba9js6him.png"
  },
  "opnsense": {
    "name": "OPNsense MCP Server",
    "githubLink": "https://github.com/floriangrousset/opnsense-mcp-server",
    "package": "opnsense-mcp-server",
    "description": "A Python server implementing Anthropic's Model Context Protocol (MCP) to manage OPNsense firewalls using natural language through AI clients like Claude Desktop.",
    "installCommand": "git clone https://github.com/floriangrousset/opnsense-mcp-server && cd opnsense-mcp-server && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "OPNSENSE_URL",
      "OPNSENSE_API_KEY",
      "OPNSENSE_API_SECRET"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Configure OPNsense API credentials. 3. Set up Claude Desktop with the MCP server configuration. 4. Use natural language commands to interact with your OPNsense firewall through the AI client.",
    "category": "Security",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/p8n2i5iptd.png"
  },
  "genkit": {
    "name": "Genkit AI Framework",
    "githubLink": "https://github.com/firebase/genkit",
    "package": "@genkit-ai/core",
    "description": "An open-source framework for building full-stack AI-powered applications with unified interface for multiple AI models",
    "installCommand": "npm install -g genkit-cli && npm install @genkit-ai/core",
    "requiredEnvVars": [
      "GENKIT_API_KEY",
      "MODEL_PROVIDER_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "1. Install Genkit CLI: npm install -g genkit-cli\n2. Initialize Genkit with your model provider API key\n3. Use Genkit SDK to build AI features\n4. Deploy to Firebase, Google Cloud Run, or other environments",
    "category": "AI/ML",
    "stars": 2522,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "fetchserp-node": {
    "name": "FetchSERP MCP Server",
    "githubLink": "https://github.com/fetchSERP/fetchserp-mcp-server-node",
    "package": "fetchserp-mcp-server",
    "description": "MCP server exposing FetchSERP API for SEO, SERP analysis, web scraping, and keyword research",
    "installCommand": "npx fetchserp-mcp-server",
    "requiredEnvVars": [
      "FETCHSERP_API_TOKEN"
    ],
    "optionalParams": [
      "MCP_HTTP_MODE"
    ],
    "usageInstructions": "1. Get FetchSERP API token from https://www.fetchserp.com \n2. Configure MCP client with npx/github registry or Docker \n3. Set FETCHSERP_API_TOKEN environment variable \n4. Optional: Run in HTTP mode by setting MCP_HTTP_MODE=true",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "findmine": {
    "name": "FindMine Shopping Stylist",
    "githubLink": "https://github.com/findmine/findmine-mcp",
    "package": "findmine-mcp",
    "description": "An MCP server that integrates FindMine's product styling and outfitting recommendations with Claude and other MCP-compatible applications.",
    "installCommand": "npx findmine-mcp",
    "requiredEnvVars": [
      "FINDMINE_APP_ID"
    ],
    "optionalParams": [
      "FINDMINE_API_URL",
      "FINDMINE_API_VERSION",
      "FINDMINE_DEFAULT_REGION",
      "FINDMINE_DEFAULT_LANGUAGE",
      "FINDMINE_CACHE_ENABLED",
      "FINDMINE_CACHE_TTL_MS",
      "NODE_ENV"
    ],
    "usageInstructions": "1. Set the required environment variable FINDMINE_APP_ID with your FindMine application ID. 2. Run the server using the install command. 3. Use the provided API examples to interact with the server. For development, run in NODE_ENV=development to use sample data.",
    "category": "Productivity",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "iterm": {
    "name": "iterm-mcp",
    "githubLink": "https://github.com/ferrislucas/iterm-mcp",
    "package": "iterm-mcp",
    "description": "A Model Context Protocol server that provides access to your iTerm session, allowing models to inspect and interact with terminal output.",
    "installCommand": "npx -y iterm-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Ensure iTerm2 is running.\n2. Add the server configuration to your Claude Desktop config file (as shown in the README).\n3. Run the server via `npx -y iterm-mcp`.\n4. Use the MCP Inspector for debugging by running `yarn run inspector` and accessing the provided URL.",
    "category": "Development Tools",
    "stars": 381,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "placid": {
    "name": "Placid.app MCP Server",
    "githubLink": "https://github.com/felores/placid-mcp-server",
    "package": "@felores/placid-mcp-server",
    "description": "An MCP server implementation for integrating with Placid.app's API, providing tools for listing templates and generating images and videos.",
    "installCommand": "npx -y @smithery/cli install @felores/placid-mcp-server --client claude",
    "requiredEnvVars": [
      "PLACID_API_TOKEN"
    ],
    "optionalParams": [
      "collection_id",
      "custom_data",
      "tags",
      "audio",
      "audio_duration",
      "audio_trim_start",
      "audio_trim_end"
    ],
    "usageInstructions": "1. Install using the install command. 2. Configure PLACID_API_TOKEN environment variable with your Placid API token. 3. Add the server configuration to your Claude Desktop or Cline settings. 4. Use the provided tools like placid_list_templates, placid_generate_video, and placid_generate_image.",
    "category": "API Integration",
    "stars": 12,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "office": {
    "name": "MCP Server Office",
    "githubLink": "https://github.com/famano/mcp-server-office",
    "package": "mcp-server-office",
    "description": "An MCP server providing tools to read and write Microsoft Word (docx) files.",
    "installCommand": "pip install mcp-server-office",
    "requiredEnvVars": [],
    "optionalParams": [
      "path",
      "content",
      "edits",
      "paragraph_index",
      "search",
      "replace",
      "inserts",
      "text"
    ],
    "usageInstructions": "1. Install using 'pip install mcp-server-office'. 2. Start the server with 'mcp-server-office'. Alternatively, use 'uvx mcp-server-office' if uv is available. Requires Python >=3.12 and dependencies mcp[cli] >=1.2.0 and python-docx >=1.1.2.",
    "category": "File Management",
    "stars": 19,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "search1api": {
    "name": "Search1API MCP Server",
    "githubLink": "https://github.com/fatwang2/search1api-mcp",
    "package": "search1api-mcp",
    "description": "A Model Context Protocol (MCP) server that provides search and crawl functionality using Search1API, including web search, news search, and content extraction.",
    "installCommand": "git clone https://github.com/fatwang2/search1api-mcp.git && cd search1api-mcp && npm install",
    "requiredEnvVars": [
      "SEARCH1API_KEY"
    ],
    "optionalParams": [
      "max_results",
      "search_service",
      "crawl_results",
      "include_sites",
      "exclude_sites",
      "time_range"
    ],
    "usageInstructions": "1. Clone the repository and navigate into the directory. 2. Set the SEARCH1API_KEY environment variable or create a .env file with your API key. 3. Run 'npm install' to install dependencies. 4. Run 'npm start' to start the server. For integration with LibreChat, follow the Docker setup instructions in the README.",
    "category": "Web Scraping",
    "stars": 141,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "intercom": {
    "name": "MCP Intercom Server",
    "githubLink": "https://github.com/fabian1710/mcp-intercom",
    "package": "mcp-intercom",
    "description": "A Model Context Protocol (MCP) server that provides access to Intercom conversations and chats for querying and analysis.",
    "installCommand": "git clone https://github.com/fabian1710/mcp-intercom.git && cd mcp-intercom && npm install",
    "requiredEnvVars": [
      "INTERCOM_API_KEY"
    ],
    "optionalParams": [
      "createdAt",
      "updatedAt",
      "sourceType",
      "state",
      "open",
      "read"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Copy `.env.example` to `.env` and add your Intercom API key. 3. Build the server with `npm run build`. 4. Start the server with `npm start`. 5. Configure Claude for Desktop with the server path and API key. 6. Use the `search-conversations` tool with optional filters like date ranges, source type, and conversation state.",
    "category": "API Integration",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "f2c": {
    "name": "F2C MCP Server",
    "githubLink": "https://github.com/f2c-ai/f2c-mcp",
    "package": "@f2c/mcp",
    "description": "MCP server for Figma Design to Code conversion using F2C",
    "installCommand": "npm install @f2c/mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "Figma API tokens or configuration options"
    ],
    "usageInstructions": "Configure the server in an MCP-supported IDE, open chat in agent mode, paste Figma Node link, and enter requirements",
    "category": "Design Tools",
    "stars": 171,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/aodhdez6z0k.png"
  },
  "explorium": {
    "name": "Explorium MCP Server",
    "githubLink": "https://github.com/explorium-ai/mcp-explorium",
    "package": "explorium-mcp-server",
    "description": "An MCP server for interacting with Explorium API, enabling AI assistants to access business and prospect data.",
    "installCommand": "pip install explorium-mcp-server",
    "requiredEnvVars": [
      "EXPLORIUM_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "After installation, create a .env file with EXPLORIUM_API_KEY=your_api_key. For development, clone the repository, set up the environment using 'uv sync --group dev', and run 'mcp dev local_dev_server.py'. Configure AI assistants like Claude Desktop or Cursor to use the server.",
    "category": "API Integration",
    "stars": 25,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "file-merger": {
    "name": "File Merger MCP Server",
    "githubLink": "https://github.com/exoticknight/mcp-file-merger",
    "package": "@exoticknight/mcp-file-merger",
    "description": "A utility to merge multiple files into one, with features like fast merging, security, and detailed reporting.",
    "installCommand": "git clone https://github.com/exoticknight/mcp-file-merger.git && cd mcp-file-merger && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "/path/to/allowed/dir"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using the provided install command. 2. Configure the allowed directory by specifying the path in the command arguments. 3. Use the merge_files tool to combine files by providing input paths and an output path. 4. Optionally, use list_allowed_directories to check accessible directories.",
    "category": "File Management",
    "stars": 15,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "steam": {
    "name": "MCP Steam Server",
    "githubLink": "https://github.com/exi/mcp-steam",
    "package": "exi-mcp-steam",
    "description": "An MCP server that integrates with Steam API, providing functionality related to Steam user data and interactions.",
    "installCommand": "./gradlew :bootJar",
    "requiredEnvVars": [
      "YOUR_STEAM_ID",
      "YOUR_STEAM_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "To use this server, first build the project using './gradlew :bootJar'. Then, configure claude_desktop_config.json with your Steam ID and API key. The server is run using the command specified in the config file, pointing to the generated JAR file.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "mistral-ocr": {
    "name": "MCP Mistral OCR Server",
    "githubLink": "https://github.com/everaldo/mcp-mistral-ocr",
    "package": "@everaldo/mcp-mistral-ocr",
    "description": "An MCP server providing OCR capabilities using Mistral AI's OCR API, supporting local files and URLs.",
    "installCommand": "docker build -t mcp-mistral-ocr . && docker run -e MISTRAL_API_KEY=your_api_key -e OCR_DIR=/data/ocr -v /path/to/local/files:/data/ocr mcp-mistral-ocr",
    "requiredEnvVars": [
      "MISTRAL_API_KEY",
      "OCR_DIR"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Configure Claude Desktop by adding the mcpServers configuration to claude_desktop_config.json. 2. Set MISTRAL_API_KEY and OCR_DIR environment variables. 3. Use tools like process_local_file or process_url_file to process files.",
    "category": "AI/ML",
    "stars": 26,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "claude-task-master": {
    "name": "Task Master",
    "githubLink": "https://github.com/eyaltoledano/claude-task-master",
    "package": "task-master-ai",
    "description": "A task management system for AI-driven development with Claude, designed to work seamlessly with Cursor AI.",
    "installCommand": "npx -y --package=task-master-ai task-master-ai",
    "requiredEnvVars": [
      "ANTHROPIC_API_KEY",
      "PERPLEXITY_API_KEY",
      "OPENAI_API_KEY",
      "GOOGLE_API_KEY",
      "MISTRAL_API_KEY",
      "OPENROUTER_API_KEY",
      "XAI_API_KEY",
      "AZURE_OPENAI_API_KEY",
      "OLLAMA_API_KEY"
    ],
    "optionalParams": [
      "Main model configuration",
      "Research model configuration",
      "Fallback model configuration"
    ],
    "usageInstructions": "1. Add the Task Master MCP configuration to your editor's MCP config file (e.g., `~/.cursor/mcp.json`).\n2. Replace placeholder API keys with your actual keys.\n3. Enable Task Master in your editor's MCP settings.\n4. Initialize Task Master in your project via the AI chat pane with 'Initialize taskmaster-ai in my project'.\n5. Configure models using the AI chat pane with 'Change the main, research and fallback models to <model_name>'.\n6. Create a PRD at `.taskmaster/docs/prd.txt` for new projects or use `scripts/prd.txt` for existing projects.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "things-fastmcp": {
    "name": "Things MCP Server",
    "githubLink": "https://github.com/excelsier/things-fastmcp",
    "package": "things-mcp",
    "description": "An MCP server that connects Claude Desktop with the Things task management app, allowing AI-powered task creation, analysis, and management.",
    "installCommand": "uv pip install things-mcp",
    "requiredEnvVars": [
      "THINGS_AUTH_TOKEN"
    ],
    "optionalParams": [
      "THINGS_MCP_PORT",
      "THINGS_MCP_LOG_LEVEL",
      "THINGS_MCP_CACHE_TTL",
      "THINGS_MCP_MAX_RETRIES",
      "THINGS_MCP_RETRY_DELAY"
    ],
    "usageInstructions": "1. Install Python 3.12+ and enable Things URL scheme in Settings -> General.\n2. Install via pip: 'pip install things-mcp' or use the manual installation steps.\n3. Set the THINGS_AUTH_TOKEN environment variable or use the configuration tool.\n4. Configure Claude Desktop to use the Things MCP server by editing the configuration file.\n5. Restart Claude Desktop and use natural language queries to manage tasks.",
    "category": "Productivity",
    "stars": 22,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "miro": {
    "name": "MCP-MIRO Server",
    "githubLink": "https://github.com/evalstate/mcp-miro",
    "package": "@llmindset/mcp-miro",
    "description": "A Model Context Protocol server to connect to the MIRO Whiteboard Application, enabling board manipulation, sticky creation, and bulk operations.",
    "installCommand": "npx -y @smithery/cli install @llmindset/mcp-miro --client claude",
    "requiredEnvVars": [
      "MIRO-OAUTH-KEY"
    ],
    "optionalParams": [
      "--token"
    ],
    "usageInstructions": "To use with Claude Desktop, configure the server in claude_desktop_config.json. On MacOS: ~/Library/Application Support/Claude/claude_desktop_config.json, On Windows: %APPDATA%/Claude/claude_desktop_config.json. Pass OAuth key as an environment variable or using the '--token' argument.",
    "category": "Productivity",
    "stars": 62,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "python-memory": {
    "name": "Memory MCP Server",
    "githubLink": "https://github.com/evangstav/python-memory-mcp-server",
    "package": "mcp",
    "description": "A Model Context Protocol (MCP) server that provides knowledge graph functionality for managing entities, relations, and observations in memory with strict validation rules.",
    "installCommand": "mcp install main.py -v MEMORY_FILE_PATH=/path/to/memory.jsonl",
    "requiredEnvVars": [
      "MEMORY_FILE_PATH"
    ],
    "optionalParams": [
      "entityType",
      "relation_type",
      "query",
      "names",
      "entity",
      "observation"
    ],
    "usageInstructions": "The server provides tools for managing a knowledge graph, including creating entities, adding observations, creating relations, searching memory, and deleting entities or relations. Use the provided Python code examples to interact with the server. Ensure the MEMORY_FILE_PATH is set for the server to function. The server supports validation rules for entity names, types, and relations.",
    "category": "Knowledge Management",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "personal": {
    "name": "Personal MCP Server",
    "githubLink": "https://github.com/evangstav/personal-mcp",
    "package": "@smithery/cli",
    "description": "A Model Context Protocol server for personal health and well-being tracking, providing tools for workout logging, nutrition management, and journaling with AI-assisted analysis through Claude integration.",
    "installCommand": "npx -y @smithery/cli install personal-mcp --client claude",
    "requiredEnvVars": [
      "CLAUDE_API_KEY",
      "DATABASE_URL"
    ],
    "optionalParams": [
      "--name",
      "--db-path",
      "--dev",
      "--inspect",
      "-v, --verbose"
    ],
    "usageInstructions": "1. Install the server using the provided command. 2. Set required environment variables like CLAUDE_API_KEY and DATABASE_URL. 3. Run the server with 'personal-mcp run'. 4. Use 'personal-mcp dev' for development mode or 'personal-mcp inspect' for debugging. 5. For Claude Desktop integration, run 'personal-mcp install --claude-desktop'.",
    "category": "Health and Well-being",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "rs": {
    "name": "mcp-rs",
    "githubLink": "https://github.com/ethereumdegen/mcp-rs",
    "package": "mcp-rs",
    "description": "A Rust implementation of the Model Context Protocol (MCP) server, providing all core features of the original TypeScript implementation including authentication, middleware, and flexible transport options.",
    "installCommand": "cargo add mcp-rs",
    "requiredEnvVars": [],
    "optionalParams": [
      "authentication_handler",
      "middleware",
      "transport_type",
      "server_name",
      "server_version"
    ],
    "usageInstructions": "1. Add `mcp-rs` to your Cargo.toml as a dependency. 2. Use the `Emcp` struct to create a new server instance. 3. Add tools, middleware, or authentication handlers as needed. 4. Start the server using the `start` method. Examples are provided in the repository for basic usage, authentication, middleware, and transport configuration.",
    "category": "API Integration",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "hfspace": {
    "name": "MCP HF Space Server",
    "githubLink": "https://github.com/evalstate/mcp-hfspace",
    "package": "@llmindset/mcp-hfspace",
    "description": "MCP server connecting to Hugging Face Spaces for AI model interactions",
    "installCommand": "npx -y @llmindset/mcp-hfspace",
    "requiredEnvVars": [
      "HF_TOKEN"
    ],
    "optionalParams": [
      "--work-dir",
      "--hf-token",
      "--desktop-mode"
    ],
    "usageInstructions": "Configure in claude_desktop_config.json with command and args, set working directory and Hugging Face token as needed",
    "category": "AI/ML",
    "stars": 323,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "okx": {
    "name": "OKX MCP Server",
    "githubLink": "https://github.com/esshka/okx-mcp",
    "package": "okx-mcp-server",
    "description": "An MCP server providing real-time cryptocurrency price data from OKX exchange through tools like get_candlesticks and get_price.",
    "installCommand": "git clone https://github.com/esshka/okx-mcp.git && cd okx-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "instrument",
      "bar",
      "limit"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'. 2. Build the server using 'npm run build'. 3. Configure the server in your MCP settings by adding the command and args. Example configuration for cline_mcp_settings.json: { \"mcpServers\": { \"okx\": { \"command\": \"node\", \"args\": [\"/path/to/okx-mcp-server/build/index.js\"], \"disabled\": false, \"autoApprove\": [] } } }",
    "category": "API Integration",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "hn": {
    "name": "Hacker News MCP Server",
    "githubLink": "https://github.com/erithwik/mcp-hn",
    "package": "mcp-hn",
    "description": "An MCP server providing tools to fetch information from Hacker News, including story and user data.",
    "installCommand": "uvx mcp-hn",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this MCP server with Claude Desktop, update the claude_desktop_config.json file with the server configuration. For MacOS, the file is located at ~/Library/Application\\ Support/Claude/claude_desktop_config.json. For Windows, it's at %APPDATA%/Claude/claude_desktop_config.json. Add the following configuration: { \"mcpServers\": { \"mcp-hn\": { \"command\": \"uvx\", \"args\": [\"mcp-hn\"] } } }",
    "category": "API Integration",
    "stars": 44,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "epsilla": {
    "name": "MCP Epsilla Server",
    "githubLink": "https://github.com/epsilla-cloud/mcp-epsilla",
    "package": "mcp-epsilla",
    "description": "A Model Context Protocol (MCP) server that integrates with Epsilla for database operations such as table creation, data insertion, querying, and deletion.",
    "installCommand": "npm install mcp-epsilla",
    "requiredEnvVars": [
      "EPSILLA_API_KEY",
      "EPSILLA_DATABASE_URL"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "MAX_CONNECTIONS"
    ],
    "usageInstructions": "After installation, set the EPSILLA_API_KEY and EPSILLA_DATABASE_URL environment variables. Start the server using the provided CLI command. Use the exposed API endpoints to perform database operations like create/delete/list table, insert/query/get/delete data.",
    "category": "Data Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "linkedin-runner": {
    "name": "LinkedIn MCP Runner",
    "githubLink": "https://github.com/ertiqah/linkedin-mcp-runner",
    "package": "linkedin-mcp-runner",
    "description": "An MCP server that enables GPT-based assistants to analyze and generate LinkedIn content based on a user's public profile and posts.",
    "installCommand": "npx -y linkedin-mcp-runner",
    "requiredEnvVars": [
      "LINKEDIN_ACCESS_TOKEN",
      "USER_PROFILE_ID"
    ],
    "optionalParams": [
      "MCP_PORT",
      "DEBUG_MODE",
      "MAX_POSTS_TO_ANALYZE",
      "CACHE_TTL"
    ],
    "usageInstructions": "1. Authenticate with LiGo at ligo.ertiqah.com. 2. Generate and run the installation command provided. 3. Use Claude or ChatGPT to interact with the server for post analysis, rewriting, and brainstorming. Example: 'Analyze my last 5 posts. What’s working? Give me ideas on what I should write next.'",
    "category": "AI/ML",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/33kfk1h0s8j.png"
  },
  "google-workspace": {
    "name": "Google Workspace MCP Server",
    "githubLink": "https://github.com/epaproditus/google-workspace-mcp-server",
    "package": "google-workspace-mcp-server",
    "description": "An MCP server providing Gmail and Google Calendar API interactions through a standardized interface.",
    "installCommand": "git clone https://github.com/epaproditus/google-workspace-mcp-server.git && cd google-workspace-mcp-server && npm install",
    "requiredEnvVars": [
      "GOOGLE_CLIENT_ID",
      "GOOGLE_CLIENT_SECRET",
      "GOOGLE_REFRESH_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone repository and install dependencies.\n2. Create credentials.json with OAuth credentials.\n3. Run node get-refresh-token.js to obtain refresh token.\n4. Configure MCP settings in your IDE/app configuration file.\n5. Build and run the server using 'npm run build'.",
    "category": "API Integration",
    "stars": 24,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "gcp": {
    "name": "GCP MCP",
    "githubLink": "https://github.com/eniayomi/gcp-mcp",
    "package": "gcp-mcp",
    "description": "A Model Context Protocol (MCP) server that enables AI assistants like Claude to interact with your Google Cloud Platform environment using natural language queries.",
    "installCommand": "git clone https://github.com/eniayomi/gcp-mcp && cd gcp-mcp && npm install",
    "requiredEnvVars": [
      "GOOGLE_APPLICATION_CREDENTIALS"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "MAX_RETRIES",
      "PROJECT_ID",
      "REGION",
      "DEBUG"
    ],
    "usageInstructions": "1. Set up GCP credentials using `gcloud auth application-default login`.\n2. Configure your AI assistant (Claude Desktop, Cursor, or Windsurf) with the MCP server command.\n3. Use natural language queries to interact with GCP resources, such as listing projects, checking billing status, or viewing logs.",
    "category": "Cloud Services",
    "stars": 115,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/ancluhehsyn.webp"
  },
  "pagespeed": {
    "name": "MCP Server for Google PageSpeed Insights",
    "githubLink": "https://github.com/enemyrr/mcp-server-pagespeed",
    "package": "mcp-server-pagespeed",
    "description": "An MCP server providing Google PageSpeed Insights analysis through a standardized interface.",
    "installCommand": "npx mcp-server-pagespeed",
    "requiredEnvVars": [],
    "optionalParams": [
      "url"
    ],
    "usageInstructions": "1. Run 'npx mcp-server-pagespeed' to start the server.\n2. Use the 'analyze_pagespeed' tool with a URL argument in your MCP client.",
    "category": "Web Scraping",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "relay": {
    "name": "MCP Relay",
    "githubLink": "https://github.com/emiliobool/MCP-Relay",
    "package": "mcp-relay",
    "description": "MCP server that relays messages to Discord channels and receives responses",
    "installCommand": "git clone https://github.com/emiliobool/MCP-Relay.git && cd MCP-Relay && npm install",
    "requiredEnvVars": [
      "DISCORD_TOKEN",
      "DISCORD_CHANNEL_ID"
    ],
    "optionalParams": [
      "timeout"
    ],
    "usageInstructions": "1. Create Discord application and bot. 2. Invite bot to server. 3. Get channel ID. 4. Configure MCP settings with DISCORD_TOKEN and DISCORD_CHANNEL_ID. Use send-message tool with required parameters: type, title, content. Optional: actions, timeout.",
    "category": "Communication",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "endaoment-postgres": {
    "name": "Model Context Protocol PostgreSQL Server",
    "githubLink": "https://github.com/endaoment/endaoment-postgres-mcp",
    "package": "endaoment-postgres-mcp",
    "description": "An MCP server that connects to a PostgreSQL database, allowing AI models to interact with the database through a standardized protocol.",
    "installCommand": "git clone https://github.com/endaoment/endaoment-postgres-mcp && cd endaoment-postgres-mcp && npm install",
    "requiredEnvVars": [
      "DB_USER",
      "DB_PASSWORD",
      "DB_HOST",
      "DB_PORT",
      "DB_NAME"
    ],
    "optionalParams": [
      "DB_CREDENTIALS",
      "credentials-var",
      "verbose"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using the install command.\n2. Create a `.env` file in the project root directory and set the `DB_CREDENTIALS` environment variable with your PostgreSQL credentials in JSON format.\n3. Start the server using `node server.js` or `npm start`.\n4. Use the `--verbose` or `-v` flag for detailed logging.\n5. Integrate with Cursor by adding the server as an MCP server with the command `node /full/path/to/server.js`.",
    "category": "Database",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "inbox-zero": {
    "name": "Inbox Zero - AI Email Assistant",
    "githubLink": "https://github.com/elie222/inbox-zero",
    "package": "inbox-zero",
    "description": "An AI-powered email assistant and open-source email client that helps users manage and reduce their email workload efficiently.",
    "installCommand": "git clone https://github.com/elie222/inbox-zero && cd inbox-zero && cp apps/web/.env.example apps/web/.env && cd apps/web && pnpm install",
    "requiredEnvVars": [
      "NEXTAUTH_SECRET",
      "GOOGLE_CLIENT_ID",
      "GOOGLE_CLIENT_SECRET",
      "GOOGLE_ENCRYPT_SECRET",
      "GOOGLE_ENCRYPT_SALT",
      "UPSTASH_REDIS_URL",
      "UPSTASH_REDIS_TOKEN",
      "GOOGLE_PUBSUB_TOPIC_NAME",
      "DATABASE_URL"
    ],
    "optionalParams": [
      "OLLAMA_BASE_URL",
      "NEXT_PUBLIC_OLLAMA_MODEL",
      "MAX_DURATION"
    ],
    "usageInstructions": "1. Clone the repository and navigate to the project directory.\n2. Copy the .env.example file to .env and fill in the required environment variables.\n3. Install dependencies using pnpm install.\n4. Set up Google OAuth credentials and Redis configuration as described in the README.\n5. Run the application using the appropriate development or production command.\n6. Access the application via the provided local development server or deploy using Vercel.",
    "category": "Productivity",
    "stars": 8241,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/tl1axjj3je.jpg"
  },
  "pr": {
    "name": "MCP PR Reviewer Server",
    "githubLink": "https://github.com/elhadjaoui/pr",
    "package": "mcp[cli]",
    "description": "An MCP server that reviews Pull Requests, adds comments, and saves reviews to Google Drive.",
    "installCommand": "pip install mcp[cli] && pip install requests python-dotenv pydrive",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "GOOGLE_PARENT_FOLDER_ID"
    ],
    "usageInstructions": "1. Clone the repository. 2. Create a .env file with GITHUB_TOKEN and optional GOOGLE_PARENT_FOLDER_ID. 3. Configure Claude Desktop with the provided JSON config. 4. Run the server using 'uv run pr-analyzer.py' or 'python pr-analyzer.py'.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "freshservice": {
    "name": "Freshservice MCP Server",
    "githubLink": "https://github.com/effytech/freshservice",
    "package": "@effytech/freshservice_mcp",
    "description": "MCP server integrating Freshservice with AI models for IT service management operations",
    "installCommand": "npx -y @smithery/cli install @effytech/freshservice_mcp --client claude",
    "requiredEnvVars": [
      "FRESHSERVICE_APIKEY",
      "FRESHSERVICE_DOMAIN"
    ],
    "optionalParams": [
      "port",
      "log_level",
      "timeout"
    ],
    "usageInstructions": "1. Generate Freshservice API key from admin panel\n2. Configure claude_desktop_config.json with API key and domain\n3. Use Claude to perform Freshservice operations",
    "category": "IT Service Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/nd098knh65.jpg"
  },
  "ej-gdrive": {
    "name": "ej-mcp-server-gdrive",
    "githubLink": "https://github.com/ejoyee/ej-mcp-server-gdrive",
    "package": "@modelcontextprotocol/server-gdrive",
    "description": "An MCP server that integrates with Google Drive to allow listing, reading, and searching over files, including support for Google Workspace files (Docs, Sheets, etc.)",
    "installCommand": "npx -y @modelcontextprotocol/server-gdrive",
    "requiredEnvVars": [
      "GDRIVE_OAUTH_PATH",
      "GDRIVE_CREDENTIALS_PATH"
    ],
    "optionalParams": [
      "GDRIVE_CREDENTIALS_PATH",
      "GDRIVE_OAUTH_PATH",
      "PORT"
    ],
    "usageInstructions": "1. Create a Google Cloud project and enable the Google Drive API.\n2. Configure an OAuth consent screen and create an OAuth Client ID for a Desktop App.\n3. Download the OAuth JSON file and rename it to 'gcp-oauth.keys.json'.\n4. Run the server with 'node ./dist auth' to authenticate and save credentials.\n5. Use the server in your app's configuration with either Docker or NPX as shown in the README.",
    "category": "Cloud Services",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "freshdesk": {
    "name": "Freshdesk MCP Server",
    "githubLink": "https://github.com/effytech/freshdesk",
    "package": "@effytech/freshdesk_mcp",
    "description": "An MCP server implementation that integrates with Freshdesk, enabling AI models to interact with Freshdesk modules and perform various support operations.",
    "installCommand": "npx -y @smithery/cli install @effytech/freshdesk_mcp --client claude",
    "requiredEnvVars": [
      "FRESHDESK_API_KEY",
      "FRESHDESK_DOMAIN"
    ],
    "optionalParams": [
      "page",
      "per_page",
      "email",
      "requester_id",
      "custom_fields",
      "additional_fields"
    ],
    "usageInstructions": "1. Generate your Freshdesk API key from the Freshdesk admin panel.\n2. Set up your domain and authentication details.\n3. Add the configuration to your `claude_desktop_config.json` with the `FRESHDESK_API_KEY` and `FRESHDESK_DOMAIN` environment variables.\n4. Use the server to perform Freshdesk operations like creating tickets, updating tickets, and managing agents and contacts.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/8kyegdixrjs.jpg"
  },
  "mcpterm": {
    "name": "mcpterm",
    "githubLink": "https://github.com/dwrtz/mcpterm",
    "package": "mcpterm",
    "description": "An MCP tool server providing stateful, TUI-compatible terminal sessions, working well with Claude Desktop.",
    "installCommand": "git clone https://github.com/dwrtz/mcpterm.git && cd mcpterm && make && sudo mv bin/mcpterm /usr/local/bin/mcpterm",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and build using 'make'. 2. Move the mcpterm binary to a directory in your PATH. 3. Configure Claude Desktop by editing claude_desktop_config.json to include mcpterm as an MCP server. 4. Restart Claude Desktop to use the tools provided by mcpterm.",
    "category": "Development Tools",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "garmin": {
    "name": "Garmin Connect MCP Server",
    "githubLink": "https://github.com/dshvadskiy/garmin",
    "package": "garmin_mcp_server",
    "description": "Server for interacting with Garmin Connect API to manage workouts and health metrics",
    "installCommand": "uv sync && mcp install garmin_mcp_server.py",
    "requiredEnvVars": [
      "GARMIN_EMAIL",
      "GARMIN_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create .env file from .env_template\n2. Run 'python example.py' to generate Garmin Connect token\n3. Use 'mcp dev garmin_mcp_server.py' for development\n4. Register server with 'mcp install garmin_mcp_server.py'",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "instagram-next": {
    "name": "Instagram MCP Server",
    "githubLink": "https://github.com/duhlink/instagram-server-next-mcp",
    "package": "instagram-mcp-server",
    "description": "An MCP server for fetching Instagram posts using Chrome's existing login session",
    "installCommand": "git clone https://github.com/duhlink/instagram-server-next-mcp.git && cd instagram-server-next-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "CHROME_USER_DATA_DIR"
    ],
    "optionalParams": [
      "saveDir",
      "delayBetweenPosts",
      "limit"
    ],
    "usageInstructions": "1. Set CHROME_USER_DATA_DIR environment variable to your Chrome profile path. 2. Run the server using: CHROME_USER_DATA_DIR=/path/to/chrome/profile npm start. 3. Use JSON-RPC2.0 requests to call tools like get_instagram_posts.",
    "category": "Web Scraping",
    "stars": 27,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "siri-shortcuts": {
    "name": "Siri Shortcuts MCP Server",
    "githubLink": "https://github.com/dvcrn/mcp-server-siri-shortcuts",
    "package": "mcp-server-siri-shortcuts",
    "description": "This MCP server provides access to Siri shortcuts functionality via the Model Context Protocol (MCP), allowing listing, opening, and running shortcuts from the macOS Shortcuts app.",
    "installCommand": "npx -y mcp-server-siri-shortcuts",
    "requiredEnvVars": [],
    "optionalParams": [
      "GENERATE_SHORTCUT_TOOLS",
      "INJECT_SHORTCUT_LIST"
    ],
    "usageInstructions": "To use this server, add it to your MCP client configuration with the command `npx mcp-server-siri-shortcuts`. You can optionally set environment variables `GENERATE_SHORTCUT_TOOLS` and `INJECT_SHORTCUT_LIST` to customize behavior. The server provides base tools like `list_shortcuts`, `open_shortcut`, and `run_shortcut`, and dynamically generates tools for each available shortcut.",
    "category": "Productivity",
    "stars": 145,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "dynatrace": {
    "name": "Dynatrace MCP Server",
    "githubLink": "https://github.com/dynatrace-oss/dynatrace-mcp",
    "package": "@dynatrace-oss/dynatrace-mcp-server",
    "description": "A remote MCP server that integrates with the Dynatrace observability platform to provide real-time data for development workflows.",
    "installCommand": "npx -y @dynatrace-oss/dynatrace-mcp-server@latest",
    "requiredEnvVars": [
      "DT_ENVIRONMENT",
      "OAUTH_CLIENT_ID",
      "OAUTH_CLIENT_SECRET"
    ],
    "optionalParams": [
      "SLACK_CONNECTION_ID",
      "USE_APP_SETTINGS",
      "USE_WORKFLOWS"
    ],
    "usageInstructions": "1. Set up a Dynatrace OAuth client and obtain the client ID and secret.\n2. Configure the required environment variables: DT_ENVIRONMENT, OAUTH_CLIENT_ID, and OAUTH_CLIENT_SECRET.\n3. Optionally configure optional variables like SLACK_CONNECTION_ID, USE_APP_SETTINGS, and USE_WORKFLOWS.\n4. Add the server to your MCP client (e.g., VS Code, Claude, Amazon Q Developer CLI) using the provided JSON configuration.\n5. Use the server to query Dynatrace data, analyze problems, and automate workflows.",
    "category": "Analytics",
    "stars": 94,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/mm6ri6e87b.png"
  },
  "endoflife": {
    "name": "EOL MCP Server",
    "githubLink": "https://github.com/ducthinh993/mcp-server-endoflife",
    "package": "mcp-server-endoflife",
    "description": "An MCP server that checks software end-of-life (EOL) dates and support status using the endoflife.date API, enabling AI assistants like Claude to provide accurate software lifecycle and security information.",
    "installCommand": "git clone https://github.com/ducthinh993/mcp-server-endoflife && cd mcp-server-endoflife && npm install && npm run build && npm link",
    "requiredEnvVars": [],
    "optionalParams": [
      "Custom API endpoints for endoflife.date (if needed)",
      "Logging level or verbosity settings",
      "Port or host configuration for the server"
    ],
    "usageInstructions": "1. Install Node.js v18 or higher.\n2. Clone the repository and install dependencies.\n3. Build the project and create a global npm link.\n4. Configure Claude Desktop by adding the EOL server configuration to claude_desktop_config.json with the command 'npx' and the path to the build/index.js file.\n5. Restart Claude Desktop to verify the server is connected using the 🔌 icon.",
    "category": "Analytics",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "arcknowledge": {
    "name": "MCP ArcKnowledge Server",
    "githubLink": "https://github.com/dragonjump/mcp-arcknowledge",
    "package": "@dragonjump/mcp-ARCknowledge",
    "description": "An MCP server for managing custom webhook endpoints (knowledgebase) and querying registered document sources.",
    "installCommand": "npx -y @smithery/cli install @dragonjump/mcp-ARCknowledge --client claude",
    "requiredEnvVars": [
      "DOCUMENT_SOURCES_PATH"
    ],
    "optionalParams": [
      "knowledge_document_sources.json configuration"
    ],
    "usageInstructions": "1. Clone the repository: git clone https://github.com/dragonjump/mcp-arcknowledge && cd mcp-arcknowledge\n2. Configure endpoints by modifying knowledge_document_sources.json\n3. Create client configuration (claude_desktop_config.json for Claude or mcp.json for Cursor)\n4. Run the server using: fastmcp dev main.py or fastmcp install main.py",
    "category": "Knowledge Management",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/tvckwzzweiq.jpg"
  },
  "mixpanel": {
    "name": "Mixpanel MCP",
    "githubLink": "https://github.com/dragonkhoi/mixpanel-mcp",
    "package": "@dragonkhoi/mixpanel-mcp",
    "description": "A Model Context Protocol (MCP) server that interfaces with the Mixpanel API, allowing users to query events data, retention, and funnels from any MCP client like Cursor or Claude Desktop.",
    "installCommand": "npx -y @smithery/cli install @dragonkhoi/mixpanel-mcp --client claude",
    "requiredEnvVars": [
      "YOUR_SERVICE_ACCT_USERNAME",
      "YOUR_SERVICE_ACCT_PASSWORD",
      "YOUR_MIXPANEL_PROJECT_ID"
    ],
    "optionalParams": [
      "client (e.g., claude)"
    ],
    "usageInstructions": "1. Go to Mixpanel Organization Settings to set up a Service Account and retrieve the username, password, and project ID.\n2. Install the server using the provided install command.\n3. For local execution, clone the repo, run `npm run build`, and execute the command with the service account credentials and project ID.\n4. Use an MCP client like Cursor or Claude Desktop to query Mixpanel data (e.g., retention, events, funnels).",
    "category": "Analytics",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "compresto": {
    "name": "Compresto MCP Server",
    "githubLink": "https://github.com/dqhieu/compresto-mcp",
    "package": "@dqhieu/compresto-mcp",
    "description": "An MCP server providing AI assistants with real-time Compresto usage statistics",
    "installCommand": "git clone https://github.com/dqhieu/compresto-mcp && cd compresto-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "command",
      "args"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Configure MCP settings with the server path. 3. Run with 'node build/index.js'",
    "category": "AI/ML",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/hv1orz8jdub.png"
  },
  "kospi-kosdaq-stock": {
    "name": "kospi-kosdaq-stock-server",
    "githubLink": "https://github.com/dragon1086/kospi-kosdaq-stock-server",
    "package": "kospi-kosdaq-stock-server",
    "description": "An MCP server that provides KOSPI/KOSDAQ stock data using FastMCP, including OHLCV, market capitalization, fundamental data, and trading volume by investor type.",
    "installCommand": "uv pip install kospi-kosdaq-stock-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "adjusted (boolean, for get_stock_ohlcv)"
    ],
    "usageInstructions": "1. Install the package using the command: uv pip install kospi-kosdaq-stock-server.\n2. Configure the MCP server in your claude_desktop_config.json file by adding the server configuration under the 'mcpServers' object.\n3. Restart Claude for the changes to take effect.\n4. Use the server in Claude by invoking the appropriate tools such as load_all_tickers, get_stock_ohlcv, get_stock_market_cap, get_stock_fundamental, and get_stock_trading_volume with the required parameters.",
    "category": "Data Storage",
    "stars": 37,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "dotenvx": {
    "name": "dotenvx",
    "githubLink": "https://github.com/dotenvx/dotenvx",
    "package": "@dotenvx/dotenvx",
    "description": "A cross-platform environment variable manager that works with any language, framework, or platform, providing multi-environment support and encrypted environment variables.",
    "installCommand": "npm install @dotenvx/dotenvx --save",
    "requiredEnvVars": [],
    "optionalParams": [
      "HELLO",
      "PORT",
      "DOTENVX_ENV",
      "DOTENVX_FILE",
      "DOTENVX_DEBUG"
    ],
    "usageInstructions": "After installation, use `require('@dotenvx/dotenvx').config()` in your code to load environment variables from a .env file. For CLI usage, install globally via curl, brew, or other methods and use `dotenvx run -- [command]` to execute commands with environment variables loaded.",
    "category": "Development Tools",
    "stars": 3966,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/who5zc6e4y.png"
  },
  "memory-service": {
    "name": "MCP Memory Service",
    "githubLink": "https://github.com/doobidoo/mcp-memory-service",
    "package": "@doobidoo/mcp-memory-service",
    "description": "An MCP server providing semantic memory and persistent storage capabilities for Claude Desktop using ChromaDB and sentence transformers.",
    "installCommand": "git clone https://github.com/doobidoo/mcp-memory-service.git && cd mcp-memory-service && python -m venv venv && source venv/bin/activate && python install.py",
    "requiredEnvVars": [
      "MCP_MEMORY_CHROMA_PATH",
      "MCP_MEMORY_BACKUPS_PATH"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "Configure Claude Desktop by adding memory service configuration to claude_desktop_config.json. Use natural language commands to store, retrieve, and delete memories.",
    "category": "AI/ML",
    "stars": 441,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "dbutils": {
    "name": "MCP Database Utilities",
    "githubLink": "https://github.com/donghao1393/mcp-dbutils",
    "package": "mcp-dbutils",
    "description": "A versatile MCP service enabling AI to access various databases securely through unified connection configurations.",
    "installCommand": "pip install mcp-dbutils",
    "requiredEnvVars": [],
    "optionalParams": [
      "DB_CONNECTION_CONFIG"
    ],
    "usageInstructions": "1. Install using 'pip install mcp-dbutils'. 2. Create a YAML configuration file with database connection details. 3. Connect the configuration to your AI client. 4. Start interacting with your database using provided tools like dbutils-list-connections, dbutils-list-tables, etc.",
    "category": "Database Tools",
    "stars": 76,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "airtable": {
    "name": "Airtable MCP Server",
    "githubLink": "https://github.com/domdomegg/airtable-mcp-server",
    "package": "airtable-mcp-server",
    "description": "A Model Context Protocol server that provides read and write access to Airtable databases, enabling LLMs to inspect database schemas and manipulate records.",
    "installCommand": "npm install -g airtable-mcp-server",
    "requiredEnvVars": [
      "AIRTABLE_API_KEY"
    ],
    "optionalParams": [
      "maxRecords",
      "filterByFormula",
      "fieldIds",
      "detailLevel",
      "description",
      "name",
      "options"
    ],
    "usageInstructions": "1. Install the server globally using 'npm install -g airtable-mcp-server'.\n2. Set your Airtable API key as the AIRTABLE_API_KEY environment variable.\n3. Configure the server in your 'claude_desktop_config.json' file with the command 'npx -y airtable-mcp-server'.\n4. Use the provided tools to interact with Airtable bases, tables, and records.",
    "category": "API Integration",
    "stars": 194,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "bybit": {
    "name": "MCP Bybit API Interface",
    "githubLink": "https://github.com/dlwjdtn535/mcp-bybit-server",
    "package": "@dlwjdtn535/mcp-bybit-server",
    "description": "Provides a convenient interface to interact with the Bybit API using MCP tools, allowing market data fetching, account management, and order execution.",
    "installCommand": "npx -y @smithery/cli install @dlwjdtn535/mcp-bybit-server --client claude",
    "requiredEnvVars": [
      "ACCESS_KEY",
      "SECRET_KEY"
    ],
    "optionalParams": [
      "TESTNET"
    ],
    "usageInstructions": "1. Set environment variables: ACCESS_KEY, SECRET_KEY (and optionally TESTNET). 2. Configure your MCP settings file with the server command and environment variables. 3. Run the server using the specified command (e.g., uv run or Docker). 4. Use the provided tools (get_orderbook, get_kline, etc.) to interact with the Bybit API.",
    "category": "API Integration",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/92sn5u1lnq5.png"
  },
  "memory-dashboard": {
    "name": "MCP Memory Dashboard",
    "githubLink": "https://github.com/doobidoo/mcp-memory-dashboard",
    "package": "mcp-memory-dashboard",
    "description": "A professional desktop application for managing and interacting with the MCP Memory Service, providing semantic memory management, search, and analytics with Docker ChromaDB integration for enhanced performance.",
    "installCommand": "git clone https://github.com/doobidoo/mcp-memory-dashboard.git && cd mcp-memory-dashboard && npm install",
    "requiredEnvVars": [
      "VITE_MEMORY_SERVICE_PATH",
      "VITE_MEMORY_CHROMA_PATH",
      "VITE_MEMORY_BACKUPS_PATH",
      "VITE_CLAUDE_CONFIG_PATH"
    ],
    "optionalParams": [
      "VITE_USE_DIRECT_CHROMA_ACCESS"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using the install command. 2. Create a `.env` file with the required environment variables for your system (macOS/Linux or Windows). 3. Set `VITE_USE_DIRECT_CHROMA_ACCESS=true` to enable Docker ChromaDB mode for improved performance. 4. Run `npm start` to launch the application. Ensure Docker is installed and configured if using Docker mode. For Windows, use double backslashes or forward slashes in file paths and configure PowerShell execution policy if needed.",
    "category": "Data Storage",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "minima": {
    "name": "Minima",
    "githubLink": "https://github.com/dmayboroda/minima",
    "package": "@smithery/cli",
    "description": "Minima is an open source RAG on-premises container that integrates with ChatGPT and MCP, supporting fully local RAG functionality.",
    "installCommand": "npx -y @smithery/cli install minima --client claude",
    "requiredEnvVars": [
      "LOCAL_FILES_PATH",
      "EMBEDDING_MODEL_ID",
      "EMBEDDING_SIZE",
      "OLLAMA_MODEL",
      "RERANKER_MODEL"
    ],
    "optionalParams": [
      "USER_ID",
      "PASSWORD"
    ],
    "usageInstructions": "1. Create a .env file with required variables. 2. For fully local installation: docker compose -f docker-compose-ollama.yml --env-file .env up --build. 3. For ChatGPT enabled: docker compose -f docker-compose-chatgpt.yml --env-file .env up --build. 4. For MCP integration: docker compose -f docker-compose-mcp.yml --env-file .env up --build. Ensure Python >= 3.10 and 'uv' is installed for MCP usage.",
    "category": "AI/ML",
    "stars": 751,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "dev": {
    "name": "MCP Development Server",
    "githubLink": "https://github.com/dillip285/mcp-dev-server",
    "package": "mcp-dev-server",
    "description": "An MCP server enabling Claude to manage software development projects with complete project context awareness and Docker-based code execution.",
    "installCommand": "pip install mcp-dev-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Install using 'pip install mcp-dev-server'. 2. Configure Claude Desktop by adding the server configuration to claude_desktop_config.json. 3. Ensure Python3.12+, Docker, and Git are installed.",
    "category": "Development Tools",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.049Z",
    "logo": ""
  },
  "rest-api": {
    "name": "MCP REST API Tester",
    "githubLink": "https://github.com/dkmaker/mcp-rest-api",
    "package": "dkmaker-mcp-rest-api",
    "description": "A TypeScript-based MCP server for testing REST APIs through Cline, supporting various HTTP methods and authentication types.",
    "installCommand": "npm install -g dkmaker-mcp-rest-api",
    "requiredEnvVars": [
      "REST_BASE_URL"
    ],
    "optionalParams": [
      "AUTH_BASIC_USERNAME",
      "AUTH_BASIC_PASSWORD",
      "AUTH_BEARER",
      "AUTH_APIKEY_HEADER_NAME",
      "AUTH_APIKEY_VALUE",
      "REST_ENABLE_SSL_VERIFY",
      "REST_RESPONSE_SIZE_LIMIT",
      "HEADER_*"
    ],
    "usageInstructions": "1. Install globally using npm. 2. Configure Cline custom instructions. 3. Add server to MCP configuration with required environment variables (REST_BASE_URL) and optional authentication parameters.",
    "category": "API Integration",
    "stars": 48,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "test": {
    "name": "Log Analysis with SQLite MCP Server",
    "githubLink": "https://github.com/direkt/mcp-test",
    "package": "@smithery/cli",
    "description": "A Model Context Protocol (MCP) SQLite server for querying log data stored in an SQLite database, with tools to create the database from compressed log files.",
    "installCommand": "python3 -m venv venv && source venv/bin/activate && pip3 install -r requirements.txt",
    "requiredEnvVars": [
      "databasePath"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Place compressed log files (.gz) in the project directory.\n2. Run `python3 create_log_db.py` to create the SQLite database.\n3. Configure the MCP SQLite server in Cursor by:\n   - Going to Cursor Settings\n   - Navigating to MCP\n   - Adding a new MCP server\n   - Naming it 'SQLlite'\n   - Setting the type to 'command'\n   - Using the command: `npx -y @smithery/cli@latest run mcp-server-sqlite-npx --config \"{\\\"databasePath\\\":\\\"/path/to/thedatbase/logs.db\\\"}\"`\n4. Use `query_logs.py` to directly query the SQLite database.",
    "category": "Data Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "cockroachdb": {
    "name": "CockroachDB MCP Server",
    "githubLink": "https://github.com/dhartunian/cockroachdb-mcp-server",
    "package": "cockroachdb-mcp-server",
    "description": "MCP server that connects to CockroachDB, exposing database schemas and running SQL queries",
    "installCommand": "git clone https://github.com/dhartunian/cockroachdb-mcp-server.git && cd cockroachdb-mcp-server && pnpm install && npx tsc",
    "requiredEnvVars": [
      "DATABASE_URL"
    ],
    "optionalParams": [
      "AUTH_TOKEN",
      "PORT"
    ],
    "usageInstructions": "1. Configure database URL and optional auth token. 2. Run with: node dist/server.js postgres://user:password@host:port/database [auth_token]. 3. Configure Claude for Desktop or Cline with the server.js path and connection details.",
    "category": "Databases",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "digma": {
    "name": "Digma Code Observability MCP Server",
    "githubLink": "https://github.com/digma-ai/digma-mcp-server",
    "package": "digma-mcp-server",
    "description": "A Model Context Protocol (MCP) server implementation that enables agents to access observability insights using Digma for code observability and dynamic code analysis.",
    "installCommand": "npx -y supergateway --sse https://<DIGMA_API_URL>/mcp/<DIGMA_API_TOKEN>/sse",
    "requiredEnvVars": [
      "DIGMA_API_URL",
      "DIGMA_API_TOKEN"
    ],
    "optionalParams": [
      "Environment",
      "Runtime Analysis Settings",
      "Code Review Protocol",
      "Performance Impact Threshold"
    ],
    "usageInstructions": "1. Sign up for early access at https://digma.ai/mcp/ to obtain your DIGMA_API_URL and DIGMA_API_TOKEN.\n2. Configure your MCP client (e.g., Claude, Cursor) to use the Digma MCP server by setting the URL as `https://<DIGMA_API_URL>/mcp/<DIGMA_API_TOKEN>/sse`.\n3. For command-line usage, use SuperGateway with the command: `npx -y supergateway --sse https://<DIGMA_API_URL>/mcp/<DIGMA_API_TOKEN>/sse`.\n4. Add a rules file to your `.cursor/rules` directory to define structured code review protocols based on runtime data.",
    "category": "Code Review & Observability",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/6tccmhlggqj.png"
  },
  "devhub-cms": {
    "name": "DevHub CMS MCP",
    "githubLink": "https://github.com/devhub/devhub-cms-mcp",
    "package": "devhub-cms-mcp",
    "description": "A Model Context Protocol (MCP) integration for managing content in the DevHub CMS system, enabling LLMs to interact with the CMS without direct API access.",
    "installCommand": "uvx devhub-cms-mcp",
    "requiredEnvVars": [
      "DEVHUB_API_KEY",
      "DEVHUB_API_SECRET",
      "DEVHUB_BASE_URL"
    ],
    "optionalParams": [
      "DEVHUB_API_TOKEN (if applicable)",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "1. Install uv (https://github.com/astral-sh/uv) if not already installed.\n2. Set the required environment variables: DEVHUB_API_KEY, DEVHUB_API_SECRET, and DEVHUB_BASE_URL.\n3. Run the server using the command: uvx devhub-cms-mcp.\n4. Configure the MCP in Claude Desktop or Cursor by adding the server configuration to the respective config file or using the CLI command as described in the README.\n5. Use the available tools for business and location management, content management, and media management as outlined in the documentation.",
    "category": "Content Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/4h967aops0z.png"
  },
  "debugg-ai": {
    "name": "Debugg AI MCP Server",
    "githubLink": "https://github.com/debugg-ai/debugg-ai-mcp",
    "package": "@debugg-ai/debugg-ai-mcp",
    "description": "AI-driven browser automation and E2E test server implementing the Model Context Protocol (MCP)",
    "installCommand": "npx -y @debugg-ai/debugg-ai-mcp",
    "requiredEnvVars": [
      "DEBUGGAI_API_KEY",
      "DEBUGGAI_LOCAL_PORT"
    ],
    "optionalParams": [
      "TEST_USERNAME_EMAIL",
      "TEST_USER_PASSWORD",
      "DEBUGGAI_LOCAL_REPO_NAME",
      "DEBUGGAI_LOCAL_BRANCH_NAME",
      "DEBUGGAI_LOCAL_REPO_PATH",
      "DEBUGGAI_LOCAL_FILE_PATH"
    ],
    "usageInstructions": "1. Create a free account and generate an API Key at https://debugg.ai\n2. Run the server using 'npx -y @debugg-ai/debugg-ai-mcp' or Docker command\n3. Configure environment variables as needed\n4. Integrate with MCP-compatible clients like Claude Desktop",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/uperclu3b8.svg"
  },
  "qdrant-memory": {
    "name": "MCP Qdrant Memory Server",
    "githubLink": "https://github.com/delorenj/mcp-qdrant-memory",
    "package": "@delorenj/mcp-qdrant-memory",
    "description": "MCP server providing knowledge graph implementation with semantic search capabilities using Qdrant vector database and OpenAI embeddings",
    "installCommand": "npm install @delorenj/mcp-qdrant-memory",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "QDRANT_URL",
      "QDRANT_COLLECTION_NAME"
    ],
    "optionalParams": [
      "QDRANT_API_KEY",
      "PORT",
      "LOG_LEVEL",
      "MAX_SEARCH_RESULTS"
    ],
    "usageInstructions": "1. Set required environment variables: OPENAI_API_KEY, QDRANT_URL, QDRANT_COLLECTION_NAME\n2. Optionally set QDRANT_API_KEY if authentication is enabled\n3. Run the server with: node dist/index.js\n4. Use MCP client to call tools like create_entities, create_relations, and search_similar\n5. For Docker deployment, build with 'docker build -t mcp-qdrant-memory .' and run with required environment variables",
    "category": "Knowledge Management",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "mcprfkgw": {
    "name": "MCP Gateway for Voitta",
    "githubLink": "https://github.com/debedb/mcprfkgw",
    "package": "mcp-voitta-gateway",
    "description": "This MCP server provides a gateway to the Voitta library, allowing you to use Voitta's capabilities through the Model Context Protocol (MCP). It supports both STDIO and SSE transports.",
    "installCommand": "git clone https://github.com/debedb/mcprfkgw && cd mcprfkgw && pip install -r requirements.txt",
    "requiredEnvVars": [
      "CONFIG_PATH"
    ],
    "optionalParams": [
      "FASTMCP_HTTP",
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Configure the Voitta configuration file path using the CONFIG_PATH environment variable. 3. Run the server using `python server.py` for STDIO transport or `FASTMCP_HTTP=1 PORT=10000 python server.py` for HTTP/SSE transport. 4. Use the MCP Inspector to test and debug the server by connecting via STDIO or SSE.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "mysql-query": {
    "name": "MySQL Query MCP Server",
    "githubLink": "https://github.com/devakone/mysql-query-mcp-server",
    "package": "mysql-query-mcp-server",
    "description": "An MCP server providing read-only MySQL database queries for AI assistants.",
    "installCommand": "npm install -g mysql-query-mcp-server",
    "requiredEnvVars": [
      "LOCAL_DB_HOST",
      "LOCAL_DB_USER",
      "LOCAL_DB_PASS",
      "LOCAL_DB_NAME",
      "DEVELOPMENT_DB_HOST",
      "DEVELOPMENT_DB_USER",
      "DEVELOPMENT_DB_PASS",
      "DEVELOPMENT_DB_NAME",
      "STAGING_DB_HOST",
      "STAGING_DB_USER",
      "STAGING_DB_PASS",
      "STAGING_DB_NAME",
      "PRODUCTION_DB_HOST",
      "PRODUCTION_DB_USER",
      "PRODUCTION_DB_PASS",
      "PRODUCTION_DB_NAME"
    ],
    "optionalParams": [
      "DEBUG",
      "MCP_MYSQL_SSL",
      "MCP_MYSQL_REJECT_UNAUTHORIZED",
      "[ENV]_DB_PORT",
      "[ENV]_DB_SSL"
    ],
    "usageInstructions": "1. Install globally using 'npm install -g mysql-query-mcp-server' or run with 'npx mysql-query-mcp-server'. 2. Configure your AI tool with the MCP server details in .cursor/mcp.json. 3. Set required environment variables for database credentials. 4. Configure additional settings like DEBUG and SSL options as needed.",
    "category": "Database",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "clever-demo": {
    "name": "MCP Clever Demo",
    "githubLink": "https://github.com/davlgd/mcp-clever-demo",
    "package": "mcp-clever-demo",
    "description": "An MCP server built with the JavaScript SDK that integrates Clever Cloud tools for use in MCP clients.",
    "installCommand": "npx -y mcp-clever-demo",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this server in an MCP client, configure it with the command `npx -y mcp-clever-demo`. For local development, run the server using the MCP Inspector with the command `npx @modelcontextprotocol/inspector npx mcp-clever-demo`.",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "jupiter": {
    "name": "MCP Jupiter Server",
    "githubLink": "https://github.com/dcSpark/mcp-server-jupiter",
    "package": "@mcp-dockmaster/mcp-server-jupiter",
    "description": "An MCP server providing Claude with access to Jupiter's swap API on Solana blockchain",
    "installCommand": "npm install -g @mcp-dockmaster/mcp-server-jupiter",
    "requiredEnvVars": [],
    "optionalParams": [
      "Claude Desktop configuration parameters"
    ],
    "usageInstructions": "1. Configure Claude Desktop by editing claude_desktop_config.json to include the MCP server configuration. 2. Restart Claude Desktop. 3. Use Claude to interact with Jupiter's swap API by asking for quotes, building swap transactions, or sending swap transactions.",
    "category": "Blockchain/DeFi Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "git-forensics": {
    "name": "Git Forensics MCP",
    "githubLink": "https://github.com/davidorex/git-forensics-mcp",
    "package": "@modelcontextprotocol/git-forensics-mcp",
    "description": "A specialized MCP server for deep git repository investigation and analysis, providing insights into repository history and development patterns.",
    "installCommand": "npm install -g @modelcontextprotocol/git-forensics-mcp",
    "requiredEnvVars": [
      "repoPath"
    ],
    "optionalParams": [
      "branches",
      "outputPath",
      "timeRange",
      "files"
    ],
    "usageInstructions": "1. Install Git and Node.js. 2. Run the server using MCP-compatible client. 3. Configure repoPath and other parameters as needed.",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "git-file-forensics": {
    "name": "Git File Forensics MCP",
    "githubLink": "https://github.com/davidorex/git-file-forensics",
    "package": "git-file-forensics",
    "description": "An MCP tool for deep git file-level forensics that analyzes file histories, changes, and patterns.",
    "installCommand": "git clone https://github.com/davidorex/git-file-forensics && cd git-file-forensics && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "repoPath",
      "file",
      "outputPath",
      "commit",
      "versions"
    ],
    "usageInstructions": "1. Clone and build the server. 2. Configure MCP settings with the server path. 3. Use tools like track_file_versions, analyze_file_diff, analyze_file_context, analyze_file_semantics via MCP protocol. Requires Node.js and Git to be installed.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "on-aws-bedrock": {
    "name": "MCP on AWS Bedrock",
    "githubLink": "https://github.com/davidshtian/MCP-on-AWS-Bedrock",
    "package": "uv run fetch_url_mcp_server.py",
    "description": "A simple and clear example for implementing and understanding Anthropic's Model Context Protocol (MCP) with AWS Bedrock.",
    "installCommand": "git clone https://github.com/davidshtian/MCP-on-AWS-Bedrock && cd MCP-on-AWS-Bedrock && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY",
      "AWS_DEFAULT_REGION"
    ],
    "optionalParams": [
      "PORT",
      "TRANSPORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Set AWS credentials as environment variables. 3. Run the server with `uv run fetch_url_mcp_server.py` for default stdio or with `--transport streamable-http` for HTTP transport. 4. Use the appropriate client script (`client_stdio.py` or `client_streamablehttp.py`) to interact with the server.",
    "category": "API Integration",
    "stars": 51,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "snowflake-service": {
    "name": "MCP Snowflake Service",
    "githubLink": "https://github.com/datawiz168/mcp-snowflake-service",
    "package": "@datawiz168/mcp-service-snowflake",
    "description": "An MCP server providing Claude access to Snowflake databases with automatic connection management and query execution.",
    "installCommand": "npx -y @smithery/cli install @datawiz168/mcp-service-snowflake --client claude",
    "requiredEnvVars": [
      "SNOWFLAKE_USER",
      "SNOWFLAKE_PASSWORD",
      "SNOWFLAKE_ACCOUNT",
      "SNOWFLAKE_DATABASE",
      "SNOWFLAKE_WAREHOUSE"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Configure Claude Desktop by adding 'mcpServers' entry to claude_desktop_config.json. 2. Create .env file with Snowflake credentials. 3. The server will start automatically with Claude Desktop.",
    "category": "Database",
    "stars": 38,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/0zcv3459unjm.png"
  },
  "scast": {
    "name": "SCAST",
    "githubLink": "https://github.com/davidkingzyb/SCAST",
    "package": "SCAST",
    "description": "SCAST is a programmatic tool that converts code into UML diagrams and flowcharts using static analysis and visualization libraries like Mermaid and D3. It supports integration as an MCP server for code analysis and visualization.",
    "installCommand": "git clone https://github.com/davidkingzyb/SCAST.git && cd SCAST && npm install",
    "requiredEnvVars": [
      "YOUR_INSTALL_DIR",
      "YOUR_WORKSPACE"
    ],
    "optionalParams": [
      "OTHER_ALLOWED_DIR"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with `npm install`. 2. Configure the MCP server in your client with the provided JSON configuration. 3. Use `scast_analysis` and `scast_retriever` tools for code analysis and visualization. 4. For deployment, run `npm run server`. Ensure Ollama is installed for AI integration.",
    "category": "Development Tools",
    "stars": 23,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/7m9k0ox4pz2.webp"
  },
  "toy": {
    "name": "Toy MCP Server",
    "githubLink": "https://github.com/dannylee1020/toy-mcp",
    "package": "toy-mcp",
    "description": "A simple Model Context Protocol (MCP) server-client architecture that fetches data from the HackerNews API.",
    "installCommand": "npm install toy-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG"
    ],
    "usageInstructions": "After installation, start the server using the provided CLI command. The server will fetch data from the HackerNews API. You can customize the server behavior using optional environment variables like PORT and DEBUG.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "kpu": {
    "name": "KeywordsPeopleUse MCP Server",
    "githubLink": "https://github.com/data-skunks/kpu-mcp",
    "package": "kpu-mcp",
    "description": "An MCP server implementation integrating with KeywordsPeopleUse for keyword research features.",
    "installCommand": "git clone https://github.com/data-skunks/kpu-mcp.git && cd kpu-mcp && npm install",
    "requiredEnvVars": [
      "KPU_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Get your API key from KeywordsPeopleUse Settings. 3. Create a .env file with KPU_API_KEY=your_api_key. 4. Configure Cursor or Claude Desktop with the appropriate MCP server settings using the path to the index.js file.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/dl3s8cg0xve.png"
  },
  "astra-db": {
    "name": "Astra DB MCP Server",
    "githubLink": "https://github.com/datastax/astra-db-mcp",
    "package": "@datastax/astra-db-mcp",
    "description": "A Model Context Protocol (MCP) server for interacting with Astra DB, allowing Large Language Models (LLMs) to act as agents for database operations.",
    "installCommand": "npm install -g @datastax/astra-db-mcp",
    "requiredEnvVars": [
      "ASTRA_DB_APPLICATION_TOKEN",
      "ASTRA_DB_API_ENDPOINT"
    ],
    "optionalParams": [
      "ASTRA_DB_KEYSPACE"
    ],
    "usageInstructions": "To use the Astra DB MCP Server, first install it globally using 'npm install -g @datastax/astra-db-mcp'. Then, configure your MCP client (e.g., Claude Desktop or Cursor) with the server by providing the required environment variables: ASTRA_DB_APPLICATION_TOKEN and ASTRA_DB_API_ENDPOINT. Optionally, specify ASTRA_DB_KEYSPACE if you need to connect to a specific keyspace. Add the server configuration to your MCP client's settings as described in the README for integration.",
    "category": "Database",
    "stars": 27,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "multi-agent-with": {
    "name": "LangGraph Coding Agent Team with MCP",
    "githubLink": "https://github.com/danmas0n/multi-agent-with-mcp",
    "package": "@modelcontextprotocol/server-filesystem",
    "description": "A multi-agent coding team using LangGraph and Model Context Protocol (MCP) for collaborative coding tasks",
    "installCommand": "pip install -e . && cd gateway && pip install -e . && cd ..",
    "requiredEnvVars": [
      "LLM_MODEL",
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "OPENROUTER_API_KEY",
      "GOOGLE_API_KEY"
    ],
    "optionalParams": [
      "OPENROUTER_BASE_URL"
    ],
    "usageInstructions": "1. Configure environment variables in .env file\n2. Configure MCP servers in gateway/config.json\n3. Start gateway server: cd gateway && python -m mcp_gateway.server\n4. Open project in LangGraph Studio",
    "category": "Development Tools",
    "stars": 33,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "fillout": {
    "name": "Fillout.io MCP Server",
    "githubLink": "https://github.com/danielma-tic/fillout-mcp-server",
    "package": "@modelcontextprotocol/server-fillout",
    "description": "MCP Server for the Fillout.io API, enabling form management, response handling, and analytics for digital forms and surveys.",
    "installCommand": "npx -y @modelcontextprotocol/server-fillout",
    "requiredEnvVars": [
      "FILLOUT_API_KEY"
    ],
    "optionalParams": [
      "limit",
      "offset",
      "formId",
      "name",
      "description",
      "type",
      "required",
      "choices",
      "filters",
      "pageSize",
      "afterDate",
      "beforeDate",
      "status",
      "calculations"
    ],
    "usageInstructions": "1. Obtain a Fillout.io API key from your account settings.\n2. Set the FILLOUT_API_KEY environment variable with your key.\n3. Use the server to manage forms, submit responses, and retrieve analytics.\n4. For Docker usage, run: docker run -e FILLOUT_API_KEY=your-key mcp/fillout.\n5. For local development, install dependencies with npm install and run with npm run dev.",
    "category": "Web Scraping",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "decent-sampler-drums": {
    "name": "Decent Sampler Drums MCP Server",
    "githubLink": "https://github.com/dandeliongold/mcp-decent-sampler-drums",
    "package": "@dandeliongold/mcp-decent-sampler-drums",
    "description": "An MCP server for generating Decent Sampler drum kit configurations with features like WAV analysis and XML generation.",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "samplesDirectory"
    ],
    "usageInstructions": "1. Install dependencies: npm install\n2. Build the server: npm run build\n3. Configure Claude Desktop config file with:\n{\n  \"mcpServers\": {\n    \"decent-sampler-drums\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@dandeliongold/mcp-decent-sampler-drums\"\n      ],\n      \"env\": {}\n    }\n  }\n}\n4. Reference 'simple_preset_guidelines' or 'advanced_preset_guidelines' prompts for usage",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "nostrdb": {
    "name": "nostrdb-mcp",
    "githubLink": "https://github.com/damus-io/nostrdb-mcp",
    "package": "nostrdb-mcp",
    "description": "A Model Context Protocol server that enables LLMs to use the `ndb` nostrdb command line tool for local nostr queries.",
    "installCommand": "npm install -g goose && npx -y nostrdb-mcp",
    "requiredEnvVars": [
      "PATH (must include `ndb` executable)"
    ],
    "optionalParams": [
      "GOOSE_PROVIDER (for configuring goose with the MCP server)"
    ],
    "usageInstructions": "1. Ensure `ndb` is installed and available on your PATH by compiling it from the nostrdb repo. 2. Install goose globally with `npm install -g goose`. 3. Configure goose with `goose configure` and add the provider using `npx -y nostrdb-mcp`. 4. Start a session with `goose session --with-extension npx -y nostrdb-mcp` to test the server.",
    "category": "Communication",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "daisys": {
    "name": "Daisys MCP Server",
    "githubLink": "https://github.com/daisys-ai/daisys-mcp",
    "package": "daisys-mcp",
    "description": "MCP server integrating with Daisys AI services for audio processing",
    "installCommand": "uvx daisys-mcp",
    "requiredEnvVars": [
      "DAISYS_EMAIL",
      "DAISYS_PASSWORD",
      "DAISYS_BASE_STORAGE_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Get Daisys account and credentials. 2. Configure MCP client with Daisys credentials and storage path. For macOS: 'brew install portaudio'. For Linux: 'sudo apt install portaudio19-dev libjack-dev'.",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/dxhjohum1ef.png"
  },
  "devdb-vscode": {
    "name": "DevDb",
    "githubLink": "https://github.com/damms005/devdb-vscode",
    "package": "damms005.devdb",
    "description": "A VS Code extension that auto-loads database and provides database affordances for development and debugging.",
    "installCommand": "code --install-extension damms005.devdb",
    "requiredEnvVars": [],
    "optionalParams": [
      "database configuration settings"
    ],
    "usageInstructions": "1. Ensure VS Code is installed (version 1.83 or newer). 2. Install DevDb extension from VS Code marketplace. 3. Open a project using a supported database. 4. Use 'Cmd + K + D' to toggle DevDb view panel or 'Cmd + K + G' to go to a table.",
    "category": "Development Tools",
    "stars": 998,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/hfajagzfck.png"
  },
  "userfuls": {
    "name": "Useful Model Context Protocol Servers (MCPs)",
    "githubLink": "https://github.com/daltonnyx/userful-mcps",
    "package": "useful-mcps",
    "description": "A collection of standalone Python scripts implementing Model Context Protocol (MCP) servers for various utility functions such as YouTube data extraction, Word document processing, PlantUML rendering, Mermaid rendering, and RSS feed to markdown conversion.",
    "installCommand": "git clone https://github.com/daltonnyx/userful-mcps.git && cd useful-mcps && pip install uv",
    "requiredEnvVars": [
      "MERMAID_CHART_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "PLANTUML_SERVER_URL",
      "YTDLP_LANGUAGE",
      "YTDLP_OUTPUT_PATH"
    ],
    "usageInstructions": "1. Clone the repository and install uv. 2. Run each MCP server using `uv run --directory <path/to/mcp> <script_name>`. For example: `uv run --directory ./ytdlp ytdlp_mcp`. 3. Configure your MCP client with the provided JSON configurations for each server. 4. Set required environment variables like MERMAID_CHART_ACCESS_TOKEN before running the Mermaid server.",
    "category": "Development Tools",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "docsmcp": {
    "name": "DocsMCP",
    "githubLink": "https://github.com/da1z/docsmcp",
    "package": "docsmcp",
    "description": "An MCP server providing documentation access to LLMs from local files or remote URLs.",
    "installCommand": "npx -y docsmcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "--source"
    ],
    "usageInstructions": "Configure DocsMCP in Cursor by creating a .cursor/mcp.json file or in VS Code by creating a .vscode/mcp.json file. Use 'npx -y docsmcp' with appropriate arguments like '--source=Model Context Protocol (MCP)|https://modelcontextprotocol.io/llms-full.txt'",
    "category": "Knowledge Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/jju5koo646c.png"
  },
  "logseq": {
    "name": "Logseq MCP Server",
    "githubLink": "https://github.com/dailydaniel/logseq-mcp",
    "package": "mcp-server-logseq",
    "description": "A Model Context Protocol server that provides direct integration with Logseq's knowledge base, enabling LLMs to interact with Logseq graphs, create pages, manage blocks, and organize information programmatically.",
    "installCommand": "pip install mcp-server-logseq",
    "requiredEnvVars": [
      "LOGSEQ_API_TOKEN",
      "LOGSEQ_API_URL"
    ],
    "optionalParams": [
      "--url",
      "--api-key",
      "is_page_block",
      "before",
      "custom_uuid",
      "journal",
      "format",
      "include_children",
      "repo",
      "select_block",
      "pos"
    ],
    "usageInstructions": "1. Generate an API token in Logseq under API → Authorization tokens.\n2. Set the LOGSEQ_API_TOKEN and LOGSEQ_API_URL environment variables.\n3. Run the server using `python -m mcp_server_logseq`.\n4. Use the provided JSON configuration in an MCP client (e.g., Claude Desktop) to connect to the server with the specified command and environment variables.",
    "category": "Knowledge Management",
    "stars": 20,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "lattice-hq": {
    "name": "Lattice HQ MCP Server",
    "githubLink": "https://github.com/cyrilnoah1/lattice-hq-mcp",
    "package": "lattice-hq-mcp-server",
    "description": "An MCP server for Lattice HQ that enables AI models to interact with Lattice performance management platform.",
    "installCommand": "npm install -g lattice-hq-mcp-server",
    "requiredEnvVars": [
      "LATTICE_API_TOKEN",
      "LATTICE_API_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Get Lattice API token from Settings → Integrations → API or contact Lattice Support.\n2. Run: LATTICE_API_URL=https://your-company.latticehq.com lattice-hq-mcp-server --api-key=YOUR-TOKEN --stdio\n3. For Claude Desktop, add configuration to claude_desktop_config.json.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/qhqm7lehu5e.jpeg"
  },
  "elasticsearch": {
    "name": "Elasticsearch MCP Server",
    "githubLink": "https://github.com/da1y/mcp-server-elasticsearch",
    "package": "@modelcontextprotocol/server-elasticsearch",
    "description": "A Model Context Protocol server for Elasticsearch clusters that enables LLMs to manage indices and execute queries.",
    "installCommand": "npx -y @modelcontextprotocol/server-elasticsearch",
    "requiredEnvVars": [
      "ELASTICSEARCH_URL"
    ],
    "optionalParams": [
      "discovery.type",
      "xpack.security.enabled",
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install the package using `npx -y @modelcontextprotocol/server-elasticsearch`.\n2. Set the `ELASTICSEARCH_URL` environment variable to your Elasticsearch endpoint.\n3. Optionally configure additional parameters like `discovery.type` or `xpack.security.enabled` if needed.\n4. Add the server to the `mcpServers` section of your `claude_desktop_config.json` to use with Claude Desktop.\n5. Run Elasticsearch locally using the provided Docker command if needed.",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "cycode-cli": {
    "name": "Cycode CLI",
    "githubLink": "https://github.com/cycodehq/cycode-cli",
    "package": "cycode",
    "description": "Cycode Command Line Interface for scanning repositories for secrets, infrastructure misconfigurations, software composition analysis vulnerabilities, and static application security testing issues.",
    "installCommand": "pip3 install cycode",
    "requiredEnvVars": [
      "CYCODE_CLIENT_ID",
      "CYCODE_CLIENT_SECRET"
    ],
    "optionalParams": [
      "Cycode API URL",
      "Cycode APP URL"
    ],
    "usageInstructions": "1. Install using 'pip3 install cycode'. 2. Authenticate using 'cycode auth' or 'cycode configure'. 3. Set environment variables CYCODE_CLIENT_ID and CYCODE_CLIENT_SECRET if needed.",
    "category": "Security",
    "stars": 88,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/htyyk7ueggt.png"
  },
  "cyclops": {
    "name": "Cyclops MCP Server",
    "githubLink": "https://github.com/cyclops-ui/mcp-cyclops",
    "package": "github.com/cyclops-ui/mcp-cyclops",
    "description": "Cyclops MCP allows AI agents to manage Kubernetes applications by abstracting Kubernetes complexity into high-level resources.",
    "installCommand": "GOBIN=\"$HOME/go/bin\" go install github.com/cyclops-ui/mcp-cyclops/cmd/mcp-cyclops@latest",
    "requiredEnvVars": [
      "KUBECONFIG",
      "CYCLOPS_MODULE_NAMESPACE"
    ],
    "optionalParams": [
      "CYCLOPS_KUBE_CONTEXT",
      "CYCLOPS_HELM_RELEASE_NAMESPACE",
      "CYCLOPS_MODULE_TARGET_NAMESPACE"
    ],
    "usageInstructions": "1. Ensure Cyclops is installed in your Kubernetes cluster.\n2. Download the Cyclops MCP server binary using the install command.\n3. Configure the server using environment variables like KUBECONFIG and CYCLOPS_MODULE_NAMESPACE.\n4. Expose the server via kubectl port-forward and connect it to an AI agent using the provided JSON configuration.",
    "category": "DevOps",
    "stars": 27,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/bgukswtporb.png"
  },
  "abp-io": {
    "name": "ABP.IO MCP Server",
    "githubLink": "https://github.com/cyrilnoah1/abp-io-mcp",
    "package": "abp-io-mcp-server",
    "description": "A comprehensive Model Context Protocol (MCP) server for ABP.IO that enables AI models to interact with ABP applications, providing 48+ tools for managing modules, entities, users, tenants, UI development, and more.",
    "installCommand": "npx -y abp-io-mcp-server",
    "requiredEnvVars": [
      "ABP_API_KEY",
      "ABP_BASE_URL"
    ],
    "optionalParams": [
      "--stdio",
      "--api-key",
      "--base-url",
      "--info-only-mode"
    ],
    "usageInstructions": "1. Use npx to run the server directly: `npx abp-io-mcp-server --api-key=YOUR_API_KEY --base-url=https://your-abp-app.com --stdio`.\n2. For global installation: `npm install -g abp-io-mcp-server`.\n3. For local development: Clone the repo, install dependencies with `npm install`, build with `npm run build`, and run with `npm run dev`.\n4. Configure environment variables `ABP_API_KEY` and `ABP_BASE_URL` for authentication and base URL.\n5. Use the server with Claude Desktop or other MCP clients by configuring the `mcpServers` section in the client's config file.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/n903jrdblia.png"
  },
  "toolkit": {
    "name": "toolkit-mcp-server",
    "githubLink": "https://github.com/cyanheads/toolkit-mcp-server",
    "package": "@cyanheads/toolkit-mcp-server",
    "description": "A Model Context Protocol server providing LLM Agents with system utilities and tools, including IP geolocation, network diagnostics, system monitoring, cryptographic operations, and QR code generation.",
    "installCommand": "npm install @cyanheads/toolkit-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "NODE_ENV"
    ],
    "usageInstructions": "1. Install the package using `npm install @cyanheads/toolkit-mcp-server`. 2. Add the server to your MCP client settings with the command `node` and the path to the server's build file. 3. Use the provided tools for network, system, security, and generator operations as shown in the example code snippets.",
    "category": "System Integration",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "llm-context.py": {
    "name": "LLM Context",
    "githubLink": "https://github.com/cyberchitta/llm-context.py",
    "package": "llm-context",
    "description": "A tool for injecting relevant project content into Large Language Model chat interfaces, supporting both CLI and MCP protocol integration.",
    "installCommand": "uv tool install \"llm-context>=0.3.0\"",
    "requiredEnvVars": [],
    "optionalParams": [
      "configuration file settings (see docs/user-guide.md)"
    ],
    "usageInstructions": "1. Initialize project: lc-init\n2. Select files: lc-sel-files\n3. Generate context: lc-context\n4. For MCP with Claude Desktop, configure claude_desktop_config.json as described in Quickstart section",
    "category": "Development Tools",
    "stars": 241,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "postgres": {
    "name": "Postgres MCP Pro",
    "githubLink": "https://github.com/crystaldba/postgres-mcp",
    "package": "postgres-mcp",
    "description": "An open source Model Context Protocol (MCP) server for Postgres database management with features like index tuning, query plans, and health checks.",
    "installCommand": "uv pip install postgres-mcp",
    "requiredEnvVars": [
      "DATABASE_URI"
    ],
    "optionalParams": [
      "--access-mode"
    ],
    "usageInstructions": "1. Install using 'uv pip install postgres-mcp' or Docker. 2. Configure Claude Desktop or other MCP client with the server details. 3. Set DATABASE_URI environment variable with Postgres connection string. 4. Choose access mode: unrestricted for development or restricted for production.",
    "category": "Databases",
    "stars": 622,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/3ticy7h11ql.png"
  },
  "scryfall": {
    "name": "Scryfall MCP Server",
    "githubLink": "https://github.com/cryppadotta/scryfall-mcp",
    "package": "scryfall-mcp-server",
    "description": "An MCP server that provides access to the Scryfall API for Magic: The Gathering card data, rulings, and pricing.",
    "installCommand": "npx scryfall-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "--sse",
      "PORT",
      "HOST"
    ],
    "usageInstructions": "Run the server in stdio mode with `npx scryfall-mcp-server` or in SSE mode with `npx scryfall-mcp-server --sse`. For Docker usage, build with `docker build -t mcp/scryfall .` and run in stdio or SSE mode as needed. Connect via stdio or use the SSE endpoint at `http://localhost:3000/sse`.",
    "category": "API Integration",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "snapshot": {
    "name": "MCP Snapshot Server",
    "githubLink": "https://github.com/crazyrabbitLTC/mcp-snapshot-server",
    "package": "mcp-snapshot-server",
    "description": "A Model Context Protocol server for interacting with Snapshot.org, providing tools to query Snapshot spaces, proposals, and users.",
    "installCommand": "npm install mcp-snapshot-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "limit",
      "skip",
      "first",
      "category",
      "search",
      "state"
    ],
    "usageInstructions": "1. Install the package using `npm install mcp-snapshot-server`. 2. Configure the server in your Claude Desktop config file by specifying the command and path to the built `index.js`. 3. Use available tools like `getSpaces`, `getProposals`, `getProposal`, `getRankedSpaces`, and `getUser` with optional parameters to query Snapshot data.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "expert": {
    "name": "MCP Expert Server",
    "githubLink": "https://github.com/crazyrabbitLTC/mcp-expert-server",
    "package": "mcp-expert-server",
    "description": "An MCP server providing intelligent query generation and documentation assistance using Claude AI.",
    "installCommand": "git clone https://github.com/crazyrabbitLTC/mcp-expert-server.git && cd mcp-expert-server && npm install && npm run build && npm run setup",
    "requiredEnvVars": [
      "ANTHROPIC_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Create a .env file with ANTHROPIC_API_KEY\n2. Add API documentation files to docs/ directory\n3. Optionally customize prompts in prompts/ directory\n4. Start server with 'npm start'",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "twitter": {
    "name": "X (Twitter) MCP Server",
    "githubLink": "https://github.com/crazyrabbitLTC/mcp-twitter-server",
    "package": "mcp-twitter-server",
    "description": "A comprehensive Model Context Protocol server implementation for X (Twitter) API integration with professional workflow automation and enhanced research capabilities.",
    "installCommand": "git clone https://github.com/crazyrabbitLTC/mcp-twitter-server.git && cd mcp-twitter-server && npm install",
    "requiredEnvVars": [
      "X_API_KEY",
      "X_API_SECRET",
      "X_ACCESS_TOKEN",
      "X_ACCESS_TOKEN_SECRET"
    ],
    "optionalParams": [
      "SOCIALDATA_API_KEY",
      "SOCIALDATA_BASE_URL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Create .env file from .env.example and configure your Twitter API credentials.\n3. Run 'npm run build' and then 'npm start' to start the server.\n4. Test the server using JSON-RPC calls as shown in the README.",
    "category": "API Integration",
    "stars": 16,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "higress-ai-search": {
    "name": "Higress AI-Search MCP Server",
    "githubLink": "https://github.com/cr7258/higress-ai-search-mcp-server",
    "package": "higress-ai-search-mcp-server",
    "description": "An MCP server providing AI search capabilities through Higress ai-search feature, enhancing AI model responses with real-time search results.",
    "installCommand": "uvx higress-ai-search-mcp-server",
    "requiredEnvVars": [
      "MODEL"
    ],
    "optionalParams": [
      "HIGRESS_URL",
      "INTERNAL_KNOWLEDGE_BASES"
    ],
    "usageInstructions": "Configure the server by setting required environment variables (MODEL) and optional configuration (HIGRESS_URL, INTERNAL_KNOWLEDGE_BASES). Ensure Higress is configured with ai-search and ai-proxy plugins.",
    "category": "AI/ML",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "crawlab": {
    "name": "Crawlab MCP Server",
    "githubLink": "https://github.com/crawlab-team/crawlab-mcp",
    "package": "crawlab-mcp",
    "description": "A Model Context Protocol (MCP) server for Crawlab, enabling AI applications to interact with Crawlab's spider and task management features.",
    "installCommand": "pip install -e .",
    "requiredEnvVars": [
      "CRAWLAB_API_BASE_URL",
      "CRAWLAB_API_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "HOST",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install dependencies using `pip install -r requirements.txt`.\n2. Copy `.env.example` to `.env` and update with your Crawlab API details.\n3. Run the server using `python server.py`.\n4. Start the MCP client with `crawlab_mcp-mcp client SERVER_URL`.\n5. Use the MCP server with AI applications by connecting them to the server URL.",
    "category": "Web Scraping",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "numpy": {
    "name": "NumPy MCP Server",
    "githubLink": "https://github.com/colesmcintosh/numpy-mcp",
    "package": "math-mcp",
    "description": "A Model Context Protocol (MCP) server for numerical computations using NumPy, enabling mathematical operations through MCP-compatible LLMs.",
    "installCommand": "git clone https://github.com/colesmcintosh/numpy-mcp.git && cd numpy-mcp && curl -LsSf https://astral.sh/uv/install.sh | sh && uv venv && source .venv/bin/activate && uv pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install the server using the provided install command.\n2. Test the server locally with the MCP Inspector using 'mcp dev server.py'.\n3. For Claude Desktop integration, run 'mcp install server.py --name \"NumPy Calculator\"'.\n4. Use the server by asking Claude to perform mathematical operations, such as calculating eigenvalues, statistical analysis, or polynomial fitting.",
    "category": "AI/ML",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "dexpaprika": {
    "name": "DexPaprika MCP Server",
    "githubLink": "https://github.com/coinpaprika/dexpaprika-mcp",
    "package": "dexpaprika-mcp",
    "description": "An MCP server providing on-demand access to cryptocurrency and DEX data API for AI assistants like Claude.",
    "installCommand": "npm install -g dexpaprika-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Install using 'npm install -g dexpaprika-mcp'. 2. Start the server with 'dexpaprika-mcp'. 3. Configure Claude Desktop by adding the server details to claude_desktop_config.json.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/akw3vbvs2m6.png"
  },
  "file-tool": {
    "name": "MCP File Server",
    "githubLink": "https://github.com/codyde/mcp-file-tool",
    "package": "@modelcontextprotocol/mcp-file-server",
    "description": "An MCP server implementation providing file system operations through a standardized interface.",
    "installCommand": "git clone https://github.com/codyde/mcp-file-tool.git && cd mcp-file-tool && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "SENTRY_DSN"
    ],
    "usageInstructions": "Start the server with 'node src/index.js'. The server communicates through stdin/stdout using the MCP protocol. Configure SENTRY_DSN for error tracking if needed.",
    "category": "File Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "firecrawl-tool": {
    "name": "MCP Firecrawl Server",
    "githubLink": "https://github.com/codyde/mcp-firecrawl-tool",
    "package": "npm install",
    "description": "A simple MCP server that provides tools to scrape websites and extract structured data using Firecrawl's APIs.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "FIRECRAWL_API_TOKEN"
    ],
    "optionalParams": [
      "SENTRY_DSN"
    ],
    "usageInstructions": "1. Create a `.env` file with FIRECRAWL_API_TOKEN and optionally SENTRY_DSN. 2. Run `npm start` to start the server. 3. Use the `scrape-website` and `extract-data` tools with MCP Inspector to scrape websites and extract structured data.",
    "category": "Web Scraping",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "google-ads": {
    "name": "Google Ads MCP",
    "githubLink": "https://github.com/cohnen/mcp-google-ads",
    "package": "mcp-google-ads",
    "description": "A tool that connects Google Ads with Claude AI, allowing analysis of advertising data through natural language conversations.",
    "installCommand": "npm install -g mcp-google-ads",
    "requiredEnvVars": [
      "GOOGLE_ADS_API_KEY",
      "GOOGLE_ADS_DEVELOPER_TOKEN",
      "GOOGLE_ADS_CLIENT_ID",
      "GOOGLE_ADS_CLIENT_SECRET"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "CACHE_SIZE"
    ],
    "usageInstructions": "1. Set up Google Ads API access using either OAuth2.0 Client ID or Service Account authentication. 2. Configure environment variables. 3. Run the server.",
    "category": "API Integration",
    "stars": 170,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/3mcnpxvxlrl.svg"
  },
  "coingecko-typescript": {
    "name": "Coingecko TypeScript API Library",
    "githubLink": "https://github.com/coingecko/coingecko-typescript",
    "package": "@coingecko/coingecko-typescript",
    "description": "A TypeScript library for accessing the Coingecko REST API, providing convenient access to cryptocurrency data with full TypeScript support.",
    "installCommand": "npm install @coingecko/coingecko-typescript",
    "requiredEnvVars": [
      "COINGECKO_PRO_API_KEY"
    ],
    "optionalParams": [
      "COINGECKO_DEMO_API_KEY",
      "environment",
      "maxRetries",
      "timeout",
      "logLevel"
    ],
    "usageInstructions": "Import the library and initialize the client with your Coingecko Pro API key. Use the client to make API requests, such as fetching cryptocurrency prices. Optional parameters like environment, maxRetries, timeout, and logLevel can be configured for advanced usage. Error handling is supported with APIError subclasses for different HTTP status codes.",
    "category": "API Integration",
    "stars": 17,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/olw3fmiahha.svg"
  },
  "cloudbrowser": {
    "name": "Cloud Browser MCP Server",
    "githubLink": "https://github.com/clpublic/mcp-server-cloudbrowser",
    "package": "@browsercloud/mcp-server-cloudbrowser",
    "description": "An MCP server providing browser automation capabilities through Browserbase API",
    "installCommand": "npx -y @browsercloud/mcp-server-cloudbrowser",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "url",
      "script",
      "name",
      "selector",
      "width",
      "height",
      "value"
    ],
    "usageInstructions": "1. Run using 'npx -y @browsercloud/mcp-server-cloudbrowser'. 2. Configure Claude Desktop with the server settings, including API_KEY. 3. Restart Claude Desktop to access browser automation tools.",
    "category": "Browser Automation",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/5exwi9c2jpn.png"
  },
  "backlinks": {
    "name": "SEO MCP",
    "githubLink": "https://github.com/cnych/backlinks-mcp",
    "package": "seo-mcp",
    "description": "An SEO tool service based on Ahrefs data, providing backlink analysis, keyword research, traffic estimation, and CAPTCHA solving via CapSolver.",
    "installCommand": "pip install seo-mcp",
    "requiredEnvVars": [
      "CAPSOLVER_API_KEY"
    ],
    "optionalParams": [
      "uv pip install seo-mcp",
      "uv pip install -e .",
      "CAPSOLVER_API_KEY",
      "country",
      "search_engine",
      "mode"
    ],
    "usageInstructions": "1. Install the package via pip or uv. 2. Set the CAPSOLVER_API_KEY environment variable with your CapSolver API key. 3. Use the service in Cursor IDE by adding the MCP server configuration. 4. Call API functions like get_backlinks_list, keyword_generator, get_traffic, and keyword_difficulty with appropriate parameters.",
    "category": "SEO Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/kcuw7rjt2s.png"
  },
  "flux-img": {
    "name": "Flux Image MCP Server",
    "githubLink": "https://github.com/ckz/flux-img-mcp",
    "package": "@modelcontextprotocol/sdk",
    "description": "MCP server providing image generation capabilities using Flux Schnell model on Replicate.",
    "installCommand": "npm install -g @modelcontextprotocol/sdk@latest && git clone https://github.com/ckz/flux-img-mcp.git && cd flux-img-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "REPLICATE_API_TOKEN"
    ],
    "optionalParams": [
      "prompt"
    ],
    "usageInstructions": "1. Configure REPLICATE_API_TOKEN in MCP settings file. 2. Add server configuration to MCP settings. 3. Use 'generate_image' tool with required 'prompt' parameter.",
    "category": "AI/ML",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "javascript": {
    "name": "Clerk JavaScript SDKs",
    "githubLink": "https://github.com/clerk/javascript",
    "package": "@clerk/nextjs",
    "description": "Clerk provides user management solutions with authentication and multi-tenancy features for web applications.",
    "installCommand": "npm install @clerk/nextjs",
    "requiredEnvVars": [
      "CLERK_FRONTEND_API",
      "CLERK_API_KEY"
    ],
    "optionalParams": [
      "CLERK_DEBUG",
      "CLERK_LOG_LEVEL"
    ],
    "usageInstructions": "1. Sign up for a Clerk account at https://dashboard.clerk.com/sign-up. 2. Create an application in your Clerk Dashboard. 3. Install the Clerk SDK using 'npm install @clerk/nextjs'. 4. Configure your Clerk API key and frontend API URL as environment variables.",
    "category": "Authentication",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "clay": {
    "name": "Clay MCP Server",
    "githubLink": "https://github.com/clay-inc/clay-mcp",
    "package": "@clayhq/clay-mcp",
    "description": "A Model Context Protocol (MCP) server for Clay, enabling features like contact search, interaction tracking, and group management.",
    "installCommand": "npx -y @clayhq/clay-mcp@latest",
    "requiredEnvVars": [
      "CLAY_API_KEY"
    ],
    "optionalParams": [
      "CLAUDERPC_MCP_SERVER",
      "CLAUDERPC_MCP_PORT",
      "CLAUDERPC_MCP_HOST"
    ],
    "usageInstructions": "1. Generate your Clay API key from https://web.clay.earth/settings/api-keys.\n2. Run the install command: npx -y @clayhq/clay-mcp@latest.\n3. Set the CLAY_API_KEY environment variable with your key.\n4. Configure the MCP server in claude_desktop_config.json by adding the command and environment variables as shown in the README.",
    "category": "Productivity",
    "stars": 15,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/yl165nmafgs.png"
  },
  "cloudflare": {
    "name": "Cloudflare MCP Server",
    "githubLink": "https://github.com/cloudflare/mcp-server-cloudflare",
    "package": "mcp-server-cloudflare",
    "description": "A Model Context Protocol (MCP) server that connects to Cloudflare services, allowing MCP clients to interact with Cloudflare's tools using natural language.",
    "installCommand": "npx -y mcp-remote https://observability.mcp.cloudflare.com/sse",
    "requiredEnvVars": [
      "CLOUDFLARE_API_TOKEN"
    ],
    "optionalParams": [
      "CLOUDFLARE_ZONE_ID",
      "CLOUDFLARE_ACCOUNT_ID",
      "CLOUDFLARE_API_KEY",
      "CLOUDFLARE_EMAIL"
    ],
    "usageInstructions": "1. Install the MCP client of your choice (e.g., Cursor, Claude, or OpenAI's Responses API).\n2. Access the remote MCP server by providing the server URL directly in the client interface or by configuring the client's configuration file using `mcp-remote`.\n3. Set the required `CLOUDFLARE_API_TOKEN` environment variable with the appropriate permissions for the Cloudflare service you want to use.\n4. Optionally, set additional parameters like `CLOUDFLARE_ZONE_ID` or `CLOUDFLARE_ACCOUNT_ID` for more specific interactions.\n5. Use natural language queries to interact with the server and perform tasks such as debugging logs, managing Workers, or fetching analytics data.",
    "category": "Cloud Services",
    "stars": 2665,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/2d40xjfd3s1.png"
  },
  "custom-gitlab": {
    "name": "Custom GitLab MCP Server",
    "githubLink": "https://github.com/chris-miaskowski/custom-gitlab-mcp-server",
    "package": "custom-gitlab-mcp-server",
    "description": "A custom GitLab MCP server implementation for integration with Claude and other MCP-compliant AI assistants.",
    "installCommand": "git clone https://github.com/chris-miaskowski/custom-gitlab-mcp-server.git && cd custom-gitlab-mcp-server && npm install",
    "requiredEnvVars": [
      "GITLAB_PERSONAL_ACCESS_TOKEN",
      "GITLAB_API_URL"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'. 2. Configure the server in your Claude settings file with the appropriate command and arguments. 3. Set GITLAB_PERSONAL_ACCESS_TOKEN and GITLAB_API_URL environment variables. 4. Ensure Node.js (v14 or higher) is installed.",
    "category": "Version Control",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "chromia": {
    "name": "Chromia MCP",
    "githubLink": "https://github.com/chromindscan/chromia-mcp",
    "package": "chromia-mcp",
    "description": "A Model Context Protocol (MCP) server that enables Claude AI to interact with the Chromia Wallet for sending $CHR transactions.",
    "installCommand": "git clone https://github.com/chromindscan/chromia-mcp && cd chromia-mcp && cp .env.sample .env && npm i && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and copy the `.env.sample` file to `.env`. 2. Install dependencies with `npm i` and build the project with `npm run build`. 3. Configure the Claude Desktop App by editing its configuration file and adding the Chromia MCP server command. 4. Restart the Claude Desktop App to use the integration.",
    "category": "AI/ML",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "agentkit": {
    "name": "Chargebee AgentKit MCP Server",
    "githubLink": "https://github.com/chargebee/agentkit",
    "package": "@chargebee/mcp-server",
    "description": "Toolkit to integrate Chargebee with AI applications for billing and subscription management",
    "installCommand": "npm install -g @chargebee/mcp-server",
    "requiredEnvVars": [
      "CHARGEBEE_API_KEY",
      "CHARGEBEE_SITE"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "1. Install using npm install -g @chargebee/mcp-server\n2. Set required environment variables: CHARGEBEE_API_KEY and CHARGEBEE_SITE\n3. Run the server\n4. Configure with AI applications like Claude or Cursor",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/8tqww3t4gtr.png"
  },
  "chatsum": {
    "name": "mcp-server-chatsum",
    "githubLink": "https://github.com/chatmcp/mcp-server-chatsum",
    "package": "mcp-server-chatsum",
    "description": "An MCP server that summarizes chat messages by querying and processing chat databases.",
    "installCommand": "pnpm install && pnpm build",
    "requiredEnvVars": [
      "CHAT_DB_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create a `.env` file in the root directory and set the `CHAT_DB_PATH` to your chat database path.\n2. Run `pnpm install` to install dependencies.\n3. Run `pnpm build` to build the server.\n4. For development, use `pnpm watch` for auto-rebuild.\n5. To use with Claude Desktop, add the server configuration to the appropriate config file (MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`, Windows: `%APPDATA%/Claude/claude_desktop_config.json`) with the command and arguments pointing to the built server and the `CHAT_DB_PATH` environment variable set.",
    "category": "Communication",
    "stars": 1000,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "dev-portal": {
    "name": "Chainstack Developer Portal",
    "githubLink": "https://github.com/chainstack/dev-portal",
    "package": "@mintlify/mcp",
    "description": "The Chainstack Developer Portal is a documentation platform built with Mintlify, providing interactive API references and built-in MCP server integration for local development.",
    "installCommand": "npm i -g mintlify && npx @mintlify/mcp@latest add chainstack",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "To use the Developer Portal, browse the documentation and interact with the RPC node API reference. For local development, install the Mintlify CLI with `npm i -g mintlify`, then run `mintlify dev` from the project root. To add the Developer Portal as a local MCP server, run `npx @mintlify/mcp@latest add chainstack`. For release notes, follow the provided structure in the changelog directory and update the necessary files.",
    "category": "Documentation & Developer Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "finnhub": {
    "name": "Finnhub MCP Server",
    "githubLink": "https://github.com/catherinedparnell/mcp-finnhub",
    "package": "mcp-finnhub",
    "description": "An MCP server to interface with Finnhub API, providing financial data and market news.",
    "installCommand": "uv sync && source .venv/bin/activate && fastmcp install server.py",
    "requiredEnvVars": [
      "FINNUB_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install uv and run 'uv sync' to install dependencies. 2. Create .env file with FINNUB_API_KEY. 3. Run 'fastmcp install server.py'. 4. Configure Claude Desktop config file with the absolute path to uv executable. 5. Restart Claude Desktop.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "mac-shell": {
    "name": "Mac Shell MCP Server",
    "githubLink": "https://github.com/cfdude/mac-shell-mcp",
    "package": "mac-shell-mcp",
    "description": "An MCP server for executing macOS terminal commands with ZSH shell, featuring command whitelisting and approval mechanisms.",
    "installCommand": "git clone https://github.com/cfdude/mac-shell-mcp.git && cd mac-shell-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "alwaysAllow"
    ],
    "usageInstructions": "Start the server with 'npm start' or 'node build/index.js'. Configure in Roo Code or Claude Desktop by specifying the path to the server executable. For npx usage, publish to npm or use 'github:cfdude/mac-shell-mcp'.",
    "category": "Development Tools",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "nrepl": {
    "name": "Basilisp nREPL MCP Bridge",
    "githubLink": "https://github.com/cat-state/nrepl-mcp",
    "package": "nrepl-mcp",
    "description": "Bridge between Anthropic's Model Control Protocol (MCP) and Basilisp's nREPL server, enabling Claude Code to interact with a Basilisp REPL.",
    "installCommand": "uv pip install basilisp && basilisp nrepl-server --port 36915 & claude mcp add /path/to/basilisp_mcp_bridge.py",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Start Basilisp nREPL server: basilisp nrepl-server --port 36915\n2. Add MCP bridge to Claude Code: claude mcp add /path/to/basilisp_mcp_bridge.py\n3. Use available tools: eval_code(code), get_docs(symbol), find_namespace_vars(namespace), list_namespaces(), check_connection()",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "catapulta": {
    "name": "Catapulta MCP Server",
    "githubLink": "https://github.com/catapulta-sh/catapulta-mcp",
    "package": "@catapulta/mcp-server",
    "description": "A Model Context Protocol (MCP) implementation for Catapulta CLI, enabling AI-powered interactions with deployment and management tools.",
    "installCommand": "git clone https://github.com/catapulta-sh/catapulta-mcp.git && cd catapulta-mcp && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "network",
      "sponsor",
      "gas_hawk",
      "script_path"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Import and initialize the McpServer with StdioServerTransport. 3. Use the server to generate deployment commands with optional parameters like network, sponsor, gas_hawk, and script_path. 4. Configure in Cursor or VS Code by adding the server as a global MCP server with the command 'npx -y @catapulta/mcp-server@latest'.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/ymx278vjy8.png"
  },
  "cf-kaizen": {
    "name": "cf-kaizen",
    "githubLink": "https://github.com/cf-toolsuite/cf-kaizen",
    "package": "cf-kaizen",
    "description": "A multi-module Spring Boot project providing a natural language interface for interacting with Cloud Foundry foundations using Spring AI and Model Context Protocol (MCP).",
    "installCommand": "git clone https://github.com/cf-toolsuite/cf-kaizen && cd cf-kaizen && mvn clean install",
    "requiredEnvVars": [
      "CF_APP_DOMAIN",
      "CF_BUTLER_API_ENDPOINT"
    ],
    "optionalParams": [
      "MCP_CLIENT_NAME",
      "CF_KAIZEN_BUTLER_SERVER_URL",
      "spring.ai.mcp.client.request-timeout"
    ],
    "usageInstructions": "1. Clone the repository and navigate to the project directory.\n2. Build the project using Maven: mvn clean install.\n3. Set required environment variables: CF_APP_DOMAIN and CF_BUTLER_API_ENDPOINT.\n4. Run the Butler server: cd butler && mvn spring-boot:run -Dspring-boot.run.profiles=cloud,dev.\n5. Run the Butler client: cd clients/butler && mvn spring-boot:run -Dspring-boot.run.profiles=openai,dev.\n6. Access the Butler frontend at http://localhost:8081.\n7. For integration with Claude Desktop, create a configuration file with the appropriate Java command and paths.",
    "category": "Cloud Services",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "mac": {
    "name": "Mac Messages MCP",
    "githubLink": "https://github.com/carterlasalle/mac_messages_mcp",
    "package": "mac-messages-mcp",
    "description": "A Python bridge for interacting with macOS Messages app using MCP, enabling universal message sending and reading.",
    "installCommand": "uv pip install mac-messages-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "hours"
    ],
    "usageInstructions": "1. Install uv package manager. 2. Grant Full Disk Access permission to your terminal. 3. Run 'mac-messages-mcp' to start the server. For Claude Desktop integration, add configuration to claude_desktop_config.json. For Cursor integration, use 'uvx mac-messages-mcp' as the MCP command.",
    "category": "System Integration",
    "stars": 133,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/dsm4wxyodti.png"
  },
  "nhl-go": {
    "name": "NHL MCP Server",
    "githubLink": "https://github.com/carsonjones/nhl-go",
    "package": "nhl-mcp",
    "description": "A Model Context Protocol (MCP) server that exposes NHL API data for integration with LLMs.",
    "installCommand": "cd ./mcp && go build -o nhl-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository: `git clone https://github.com/carsonjones/nhl-go.git && cd nhl-go`\n2. Build the `nhl-mcp` binary: `cd ./mcp && go build -o nhl-mcp`\n3. Add the path to the `nhl-mcp` binary to your `claude_desktop_config.json` file under the `nhl` key with the `command` field.\n4. Use the MCP server to integrate NHL data with LLMs.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "system": {
    "name": "DevEnvInfoServer",
    "githubLink": "https://github.com/carterlasalle/system_information_mcp",
    "package": "system_information_mcp",
    "description": "A Cursor Model Context Protocol (MCP) server that provides detailed information about your development environment to the Cursor code editor, enabling more context-aware assistance.",
    "installCommand": "git clone https://github.com/carterlasalle/system_information_mcp.git && cd system_information_mcp && python -m venv venv && source venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "python interpreter path",
      "virtual environment activation",
      "custom output file path for markdown (development_environment_info.md)"
    ],
    "usageInstructions": "1. Clone the repository and navigate into the directory. 2. Create and activate a Python virtual environment. 3. Install dependencies using pip. 4. Configure Cursor to connect to the server by specifying the command to run `claudemcp.py`. 5. Optionally, generate a Markdown file containing all collected environment information.",
    "category": "Development Tools",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "winterm": {
    "name": "WinTerm MCP",
    "githubLink": "https://github.com/capecoma/winterm-mcp",
    "package": "winterm-mcp",
    "description": "A Model Context Protocol server providing programmatic access to the Windows terminal for AI model interaction.",
    "installCommand": "git clone https://github.com/capecoma/winterm-mcp.git && cd winterm-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "Claude desktop configuration"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Build the project using 'npm run build'. 3. Configure Claude Desktop by adding server config to '%APPDATA%/Claude/claude_desktop_config.json'. 4. Use available tools like write_to_terminal, read_terminal_output, and send_control_character.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "xcodebuildmcp": {
    "name": "XcodeBuild MCP",
    "githubLink": "https://github.com/cameroncooke/XcodeBuildMCP",
    "package": "xcodebuildmcp",
    "description": "An MCP server providing Xcode-related tools for AI assistants and MCP clients",
    "installCommand": "npx -y xcodebuildmcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure your MCP client to use XcodeBuildMCP by setting the command to 'npx' with args ['-y', 'xcodebuildmcp@latest']. Ensure you have macOS 14.5+, Xcode 16.x+, and Node 18.x+ installed.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/lmy0310xy3.jpg"
  },
  "google-gmail": {
    "name": "Gmail MCP Server",
    "githubLink": "https://github.com/cablate/mcp-google-gmail",
    "package": "@cablate/mcp-gmail",
    "description": "A powerful Model Context Protocol (MCP) server providing comprehensive Gmail integration with LLM processing capabilities.",
    "installCommand": "npm install -g @cablate/mcp-gmail",
    "requiredEnvVars": [
      "GMAIL_CLIENT_ID",
      "GMAIL_CLIENT_SECRET",
      "GMAIL_REFRESH_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install using 'npm install -g @cablate/mcp-gmail'. 2. Run 'mcp-gmail' to start the server. 3. For Dive Desktop integration, follow the configuration steps provided in the README, including setting up Gmail API authentication credentials.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "caiyun-weather": {
    "name": "Caiyun Weather MCP Server",
    "githubLink": "https://github.com/caiyunapp/mcp-caiyun-weather",
    "package": "mcp-caiyun-weather",
    "description": "MCP server providing weather data through Caiyun Weather API, including real-time, hourly, and daily forecasts.",
    "installCommand": "uvx mcp-caiyun-weather",
    "requiredEnvVars": [
      "CAIYUN_WEATHER_API_TOKEN"
    ],
    "optionalParams": [
      "lng",
      "lat"
    ],
    "usageInstructions": "1. Install uv using: curl -LsSf https://astral.sh/uv/install.sh | sh (on MacOS/Linux) or powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\" (on Windows). 2. Set CAIYUN_WEATHER_API_TOKEN environment variable with your Caiyun Weather API token. 3. Configure Claude Desktop by adding mcpServers configuration in claude_desktop_config.json.",
    "category": "Weather/Location Services",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/iz9l4ks7vng.png"
  },
  "bazi": {
    "name": "Bazi MCP",
    "githubLink": "https://github.com/cantian-ai/bazi-mcp",
    "package": "@cantian-ai/bazi-mcp",
    "description": "An AI-powered Bazi calculator MCP server for accurate Chinese metaphysics analysis, providing precise Bazi data for personality analysis, destiny forecasting, and AI agent integration.",
    "installCommand": "npx -y @smithery/cli install @cantian-ai/bazi-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "solarDatetime",
      "lunarDatetime",
      "gender",
      "eightCharProviderSect"
    ],
    "usageInstructions": "1. Ensure Node.js 22 or higher is installed.\n2. Install the Bazi MCP server using the provided install command.\n3. Configure AI applications (e.g., Claude Desktop) with the MCP server configuration as shown in the README.\n4. Use the `getBaziDetail` tool with required parameters like solarDatetime or lunarDatetime to calculate Bazi results.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/7doseq1n14s.png"
  },
  "tuyactl": {
    "name": "Tuya Command Line Interface (tuyactl)",
    "githubLink": "https://github.com/cabra-lat/tuyactl",
    "package": "tuyactl",
    "description": "A command-line interface for controlling Tuya devices using local keys obtained via the tinytuya setup wizard.",
    "installCommand": "curl -LsSf https://astral.sh/uv/install.sh | sh && uv pip install tuyactl",
    "requiredEnvVars": [
      "TUYA_SNAPSHOT_PATH"
    ],
    "optionalParams": [
      "TUYA_SERVER_HOST",
      "TUYA_LOG_LEVEL",
      "TUYA_TIMEOUT"
    ],
    "usageInstructions": "1. Install `uv` using the provided curl command. 2. Obtain Tuya local keys via the tinytuya setup wizard and save the `snapshot.json` file. 3. Set the `TUYA_SNAPSHOT_PATH` environment variable to the location of the `snapshot.json` file. 4. Run the Tuya server with `nohup tuyad > tuyad.log 2>&1 &`. 5. Use `tuyactl --help` to view available commands and options.",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "alphavantage": {
    "name": "Alpha Vantage MCP Server",
    "githubLink": "https://github.com/calvernaz/alphavantage",
    "package": "alphavantage",
    "description": "An MCP server for the Alpha Vantage stock market data API, providing access to real-time and historical financial data.",
    "installCommand": "git clone https://github.com/calvernaz/alphavantage.git && cd alphavantage && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "ALPHAVANTAGE_API_KEY"
    ],
    "optionalParams": [
      "--server",
      "--port"
    ],
    "usageInstructions": "1. Clone the repository using the install command. 2. Set the ALPHAVANTAGE_API_KEY environment variable with your free API key from https://www.alphavantage.co. 3. Run the server in Stdio mode with 'alphavantage' or in HTTP mode with 'alphavantage --server http --port 8080'. 4. For use with Claude Desktop, configure the 'mcpServers' section in your 'claude_desktop_config.json' as shown in the README.",
    "category": "API Integration",
    "stars": 49,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "ui-tars-desktop": {
    "name": "UI-TARS Desktop",
    "githubLink": "https://github.com/bytedance/UI-TARS-desktop",
    "package": "@agent-tars/cli",
    "description": "A desktop application that provides a native GUI Agent based on the UI-TARS model, offering local and remote computer and browser operators for enhanced automation and control.",
    "installCommand": "npm install -g @agent-tars/cli",
    "requiredEnvVars": [
      "TARS_API_KEY",
      "TARS_REMOTE_OPERATOR_URL",
      "TARS_LOCAL_MODEL_PATH"
    ],
    "optionalParams": [
      "TARS_LOG_LEVEL",
      "TARS_BROWSER_OPERATOR_PORT",
      "TARS_REMOTE_BROWSER_OPERATOR_URL",
      "TARS_MODEL_VERSION"
    ],
    "usageInstructions": "After installation, launch the UI-TARS Desktop application. Configure the local model path and connect to remote operators if needed. Use the CLI or Web UI to execute tasks involving GUI automation, browser control, and multimodal AI agent workflows.",
    "category": "AI/ML",
    "stars": 15011,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/smnwzwwhhxp.png"
  },
  "geoapify": {
    "name": "Geoapify MCP Server",
    "githubLink": "https://github.com/burningion/geoapify-mcp",
    "package": "fastmcp",
    "description": "Converts addresses to GPS coordinates and creates map images using Geoapify API",
    "installCommand": "uv run fastmcp run server.py",
    "requiredEnvVars": [
      "GEO_APIKEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Get Geoapify API key from https://www.geoapify.com/\n2. Set GEO_APIKEY environment variable\n3. Run server using 'uv run fastmcp run server.py'\n4. Use 'get_gps_coordinates' to convert addresses to GPS coordinates\n5. Use 'create_map_from_geojson' to create map images",
    "category": "Location Services",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "dbhub": {
    "name": "DBHub",
    "githubLink": "https://github.com/bytebase/dbhub",
    "package": "@bytebase/dbhub",
    "description": "Universal database gateway implementing the Model Context Protocol (MCP) server interface",
    "installCommand": "npx @bytebase/dbhub --transport http --port8080 --dsn \"postgres://user:password@localhost:5432/dbname?sslmode=disable\"",
    "requiredEnvVars": [
      "DSN"
    ],
    "optionalParams": [
      "transport",
      "port",
      "demo"
    ],
    "usageInstructions": "To use DBHub, specify the database connection using --dsn flag. For demo mode, use --demo flag. Supports PostgreSQL, MySQL, MariaDB, SQL Server, and SQLite databases.",
    "category": "Databases",
    "stars": 849,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/qjijyd4za5.svg"
  },
  "webscan": {
    "name": "MCP Webscan Server",
    "githubLink": "https://github.com/bsmi021/mcp-server-webscan",
    "package": "@smithery/cli",
    "description": "An MCP server for web content scanning and analysis, providing tools for fetching, analyzing, and extracting information from web pages.",
    "installCommand": "npx -y @smithery/cli install mcp-server-webscan --client claude",
    "requiredEnvVars": [
      "NODE_ENV"
    ],
    "optionalParams": [
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Configure the server in Claude Desktop settings with the correct path to the build/index.js file. 2. Use tools like fetch-page, extract-links, crawl-site in your conversations.",
    "category": "Web Scraping",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "bucket-javascript-sdk": {
    "name": "Bucket JavaScript SDK",
    "githubLink": "https://github.com/bucketco/bucket-javascript-sdk",
    "package": "bucket-javascript-sdk",
    "description": "A TypeScript-based feature flag SDK for SaaS applications, offering React, Vue, Browser, and Node.js SDKs for client and server-side usage.",
    "installCommand": "npm install bucket-javascript-sdk",
    "requiredEnvVars": [
      "BUCKET_API_KEY",
      "BUCKET_PROJECT_ID"
    ],
    "optionalParams": [
      "BUCKET_ENVIRONMENT",
      "BUCKET_DEBUG",
      "BUCKET_SDK_LOG_LEVEL"
    ],
    "usageInstructions": "After installation, set the required environment variables (BUCKET_API_KEY and BUCKET_PROJECT_ID) and configure the SDK in your application. Refer to the specific SDK documentation for integration details.",
    "category": "Development Tools",
    "stars": 12,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/ajtu80ivxem.jpg"
  },
  "video-editing": {
    "name": "Video Editor MCP Server",
    "githubLink": "https://github.com/burningion/video-editing-mcp",
    "package": "video-editor-mcp",
    "description": "A Model Context Protocol (MCP) server for uploading, editing, searching, and generating videos using LLMs and Video Jungle integration.",
    "installCommand": "npx -y @smithery/cli install video-editor-mcp --client claude",
    "requiredEnvVars": [
      "YOURAPIKEY"
    ],
    "optionalParams": [
      "LOAD_PHOTOS_DB"
    ],
    "usageInstructions": "1. Sign up for an account at Video Jungle and obtain your API key. 2. Run the server using 'uv run video-editor-mcp YOURAPIKEY'. 3. For local Photos app access, set 'LOAD_PHOTOS_DB=1' before starting the server. 4. Use the provided tools (add-video, search-videos, generate-edit-from-videos, etc.) to manage and edit videos.",
    "category": "Media",
    "stars": 175,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "file-context": {
    "name": "File Context Server",
    "githubLink": "https://github.com/bsmi021/mcp-file-context-server",
    "package": "@modelcontextprotocol/file-context-server",
    "description": "An MCP server providing file system context to LLMs with advanced caching and real-time file watching capabilities.",
    "installCommand": "npm install @modelcontextprotocol/file-context-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "MAX_CACHE_SIZE",
      "CACHE_TTL",
      "MAX_FILE_SIZE"
    ],
    "usageInstructions": "Start the server using 'npx file-context-server'. Configure using environment variables MAX_CACHE_SIZE, CACHE_TTL, and MAX_FILE_SIZE.",
    "category": "Development Tools",
    "stars": 20,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "mailchimpmcp": {
    "name": "Mailchimp MCP Server",
    "githubLink": "https://github.com/bryangsmith/MailchimpMCP",
    "package": "mailchimp-mcp",
    "description": "Utilities for developing an MCP server for the Mailchimp API",
    "installCommand": "npm install mailchimp-mcp",
    "requiredEnvVars": [
      "MAILCHIMP_API_KEY"
    ],
    "optionalParams": [
      "MAILCHIMP_API_ENDPOINT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install using npm install mailchimp-mcp. 2. Set MAILCHIMP_API_KEY environment variable. 3. Configure additional options like MAILCHIMP_API_ENDPOINT if needed. 4. Start the MCP server.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "node-omnibus": {
    "name": "Node Omnibus MCP Server",
    "githubLink": "https://github.com/bsmi021/mcp-node-omnibus-server",
    "package": "@bsmi021/mcp-node-omnibus-server",
    "description": "A comprehensive Model Context Protocol (MCP) server providing Node.js development tooling and automation capabilities.",
    "installCommand": "npx -y @smithery/cli install @bsmi021/mcp-node-omnibus-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "client"
    ],
    "usageInstructions": "1. Install via Smithery using: npx -y @smithery/cli install @bsmi021/mcp-node-omnibus-server --client claude\n2. Alternatively, clone the repository and run: npm install && npm start\n3. Integrate with MCP-compatible clients\n4. Requires Node.js >=14.x, npm >=6.x, TypeScript >=4.x",
    "category": "Development Tools",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "npm": {
    "name": "NPM Documentation MCP Server",
    "githubLink": "https://github.com/bsmi021/mcp-npm",
    "package": "npm install",
    "description": "An MCP server that fetches metadata and documentation for NPM packages using the npms.io API and caches results locally with SQLite.",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "NPM_CACHE_TTL",
      "NPM_CACHE_DB_PATH",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository if needed.\n2. Run `npm install` to install dependencies.\n3. Run `npm run build` to compile TypeScript to JavaScript.\n4. Start the server using `node dist/server.js`.\n5. Configure the server in your MCP client (e.g., Cline) by specifying the absolute path to the compiled server.js file and optional environment variables like `NPM_CACHE_TTL`, `NPM_CACHE_DB_PATH`, and `LOG_LEVEL`.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "mistral-codestral": {
    "name": "Mistral Codestral MCP Server",
    "githubLink": "https://github.com/bsmi021/mcp-mistral-codestral",
    "package": "npm_package",
    "description": "An MCP server implementation for the Mistral Codestral API, providing code completion, bug fixing, and test generation capabilities.",
    "installCommand": "git clone https://github.com/bsmi021/mcp-mistral-codestral && cd mcp-mistral-codestral && npm install && cp .env.example .env && npm run build",
    "requiredEnvVars": [
      "MISTRAL_API_KEY"
    ],
    "optionalParams": [
      "language",
      "task"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using `npm install`. 2. Copy `.env.example` to `.env` and add your Mistral API key. 3. Build the project with `npm run build`. 4. Start the server using `npm start`. 5. Use the `code_completion` tool with parameters `code`, `language`, and `task` to process code for completion, bug fixing, or test generation.",
    "category": "AI/ML",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "deltatask": {
    "name": "DeltaTask",
    "githubLink": "https://github.com/brysontang/DeltaTask",
    "package": "DeltaTask",
    "description": "A locally-hosted task management application with Obsidian integration and a Model Context Protocol (MCP) server for advanced task management and automation.",
    "installCommand": "git clone https://github.com/brysontang/DeltaTask && cd DeltaTask && uv venv && source .venv/bin/activate && uv pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "DATABASE_PATH",
      "OBSIDIAN_VAULT_PATH",
      "LOG_LEVEL",
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and set up the Python environment using `uv`.\n2. Activate the virtual environment and install dependencies.\n3. Configure the DeltaTask server in Claude for Desktop by editing the `claude_desktop_config.json` file with the correct path to the server script.\n4. Use the DeltaTask tools in Claude for Desktop by clicking the hammer icon.\n5. Optionally, configure environment variables like `DATABASE_PATH` and `OBSIDIAN_VAULT_PATH` for custom paths.",
    "category": "Productivity",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "browserbase": {
    "name": "Browserbase MCP Server",
    "githubLink": "https://github.com/browserbase/mcp-server-browserbase",
    "package": "browserbase-mcp",
    "description": "Enables LLMs to interact with web pages using cloud browser automation via Browserbase and Stagehand, supporting features like screenshots, data extraction, and JavaScript execution.",
    "installCommand": "npm install -g browserbase-mcp",
    "requiredEnvVars": [
      "BROWSERBASE_API_KEY",
      "STAGEHAND_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "MAX_CONCURRENT_BROWSERS",
      "LOG_LEVEL"
    ],
    "usageInstructions": "After installation, set the required environment variables (BROWSERBASE_API_KEY and STAGEHAND_API_KEY) and start the server. Use the provided APIs to control cloud browsers, extract data, and execute JavaScript. For detailed setup, refer to the Browserbase and Stagehand documentation.",
    "category": "Browser Automation",
    "stars": 2135,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/rbldyhl3oan.png"
  },
  "cline-personas": {
    "name": "Cline Personas MCP Server",
    "githubLink": "https://github.com/bradfair/mcp-cline-personas",
    "package": "mcp-cline-personas",
    "description": "An MCP server for managing .clinerules files using shared components and persona templates with mustache-style variable substitution.",
    "installCommand": "git clone https://github.com/bradfair/mcp-cline-personas && cd mcp-cline-personas && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with `npm install`. 2. Build the project with `npm run build`. 3. Use the `ComponentPersonaService` to manage components and personas. 4. Activate personas by calling `activatePersona(name)`. 5. Run the MCP server with `npm start`.",
    "category": "Development Tools",
    "stars": 23,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "esxi": {
    "name": "ESXi MCP Server",
    "githubLink": "https://github.com/bright8192/esxi-mcp-server",
    "package": "esxi-mcp-server",
    "description": "VMware ESXi/vCenter management server providing REST API for virtual machine management",
    "installCommand": "pip install pyvmomi pyyaml uvicorn mcp-core",
    "requiredEnvVars": [
      "VCENTER_HOST",
      "VCENTER_USER",
      "VCENTER_PASSWORD"
    ],
    "optionalParams": [
      "VCENTER_DATACENTER",
      "VCENTER_CLUSTER",
      "VCENTER_DATASTORE",
      "VCENTER_NETWORK",
      "VCENTER_INSECURE",
      "MCP_API_KEY",
      "MCP_LOG_FILE",
      "MCP_LOG_LEVEL"
    ],
    "usageInstructions": "1. Create config.yaml with required vCenter details\n2. Run server with: python server.py -c config.yaml\n3. Use API endpoints with proper authentication",
    "category": "System Integration",
    "stars": 28,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "slowtime": {
    "name": "Slowtime MCP Server",
    "githubLink": "https://github.com/bmorphism/slowtime-mcp-server",
    "package": "slowtime-mcp-server",
    "description": "A Model Context Protocol server for secure time-based operations with timing attack protection and timelock encryption.",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "INTERVAL_DURATION"
    ],
    "usageInstructions": "1. Configure Claude Desktop by adding the server to ~/Library/Application Support/Claude/claude_desktop_config.json. 2. Start the server using 'node /path/to/build/index.js'. 3. Use interval commands like start_interval, check_interval, pause_interval, and resume_interval.",
    "category": "Productivity",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "penrose": {
    "name": "Penrose MCP Server",
    "githubLink": "https://github.com/bmorphism/penrose-mcp",
    "package": "penrose-mcp",
    "description": "A Model Context Protocol (MCP) server for Penrose, enabling the creation of mathematical diagrams through natural language.",
    "installCommand": "git clone https://github.com/bmorphism/penrose-mcp && cd penrose-mcp && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "After installation, use the provided justfile to access documentation and reference materials. For example: 'just architecture' to view the server architecture or 'just mcp-spec' to access MCP specifications. The server is primarily used for research and development of Penrose's diagramming capabilities.",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "marginalia": {
    "name": "Marginalia MCP Server",
    "githubLink": "https://github.com/bmorphism/marginalia-mcp-server",
    "package": "marginalia-mcp-server",
    "description": "An MCP server providing access to Marginalia Search API for non-commercial content discovery",
    "installCommand": "git clone https://github.com/bmorphism/marginalia-mcp-server.git && cd marginalia-mcp-server && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "MARGINALIA_API_KEY"
    ],
    "usageInstructions": "After installation, configure MARGINALIA_API_KEY if needed. The server provides an MCP tool 'search' with parameters: query (required), index (optional), and count (optional). Example usage: mcp.useTool('marginalia', 'search', { query: 'non-commercial websites', count: 5 })",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "square": {
    "name": "Square MCP Server",
    "githubLink": "https://github.com/block/square-mcp",
    "package": "square-mcp",
    "description": "An MCP server providing access to Square API functionality.",
    "installCommand": "uv sync && uv pip install .",
    "requiredEnvVars": [
      "SQUARE_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "SQUARE_ENVIRONMENT"
    ],
    "usageInstructions": "1. Set SQUARE_ACCESS_TOKEN environment variable. 2. Run 'square-mcp' to start the server. For development, use 'mcp dev src/square_mcp/server.py' after activating the virtual environment.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "babashka": {
    "name": "Babashka MCP Server",
    "githubLink": "https://github.com/bmorphism/babashka-mcp-server",
    "package": "babashka-mcp-server",
    "description": "An MCP server for executing Babashka code and managing command history",
    "installCommand": "git clone https://github.com/bmorphism/babashka-mcp-server && cd babashka-mcp-server && npm install && npm run build",
    "requiredEnvVars": [
      "BABASHKA_PATH"
    ],
    "optionalParams": [
      "timeout"
    ],
    "usageInstructions": "1. Install Babashka using the provided installation commands for your OS. 2. Verify Babashka installation. 3. Clone the repository and run 'npm install && npm run build'. 4. Configure BABASHKA_PATH environment variable if necessary.",
    "category": "Development Tools",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "anti-bullshit": {
    "name": "Anti-Bullshit MCP Server",
    "githubLink": "https://github.com/bmorphism/anti-bullshit-mcp-server",
    "package": "anti-bullshit-mcp-server",
    "description": "A Model Context Protocol server for analyzing claims, validating sources, and detecting manipulation using multiple epistemological frameworks.",
    "installCommand": "git clone https://github.com/bmorphism/anti-bullshit-mcp-server && cd anti-bullshit-mcp-server && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "framework",
      "text",
      "path"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with 'npm install'.\n2. Build the server with 'npm run build'.\n3. Add the server to Claude Desktop by updating the config file at '~/Library/Application Support/Claude/claude_desktop_config.json' with the server command.\n4. Use the analyze_claim, validate_sources, and check_manipulation functions with appropriate parameters to evaluate claims, sources, and manipulation tactics.",
    "category": "AI/ML",
    "stars": 19,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "web-browser": {
    "name": "Web Browser MCP Server",
    "githubLink": "https://github.com/blazickjp/web-browser-mcp-server",
    "package": "web-browser-mcp-server",
    "description": "Enables AI assistants to browse and extract content from websites via the Message Control Protocol (MCP) with smart content extraction, error handling, and cross-platform support.",
    "installCommand": "uv tool install web-browser-mcp-server",
    "requiredEnvVars": [
      "REQUEST_TIMEOUT"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install using `uv tool install web-browser-mcp-server`. 2. Configure your MCP client with the provided JSON configuration. 3. Use the `browse_webpage` tool to fetch and extract content from web pages. 4. For development, clone the repository and install with `uv pip install -e .[test]`.",
    "category": "Web Scraping",
    "stars": 37,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "hypernym": {
    "name": "Hypernym MCP Server",
    "githubLink": "https://github.com/bmorphism/hypernym-mcp-server",
    "package": "hypernym-mcp-server",
    "description": "A Model Context Protocol (MCP) server providing semantic text analysis and compression tools via Hypernym AI's API.",
    "installCommand": "git clone https://github.com/hypernym/hypernym-mcp-server.git && cd hypernym-mcp-server && npm install",
    "requiredEnvVars": [
      "HYPERNYM_API_URL",
      "HYPERNYM_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "SSL_KEY_PATH",
      "SSL_CERT_PATH",
      "MCP_USE_STDIO",
      "min_compression_ratio",
      "min_semantic_similarity"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Create a .env file with HYPERNYM_API_URL and HYPERNYM_API_KEY.\n3. Build the project with 'npm run build'.\n4. Start the server with 'npm start' for HTTP/HTTPS mode or 'npm run start:stdio' for stdio transport mode.\n5. Use the provided JSON-RPC 2.0 examples or integrate with MCP-compatible AI platforms using the .mcp.json configuration.",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.050Z",
    "logo": ""
  },
  "usgs-quakes": {
    "name": "USGS Quakes MCP Server",
    "githubLink": "https://github.com/blake365/usgs-quakes-mcp",
    "package": "@blake365/usgs-quakes-mcp",
    "description": "An MCP server implementation for providing access to the USGS Quakes API within Claude Desktop.",
    "installCommand": "npx -y @smithery/cli install @blake365/usgs-quakes-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Install via Smithery using the provided command. 2. For manual installation: Install Node.js, clone the repository, and configure Claude Desktop by editing claude_desktop_config.json to point to the server location.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "macrostrat": {
    "name": "Macrostrat MCP Server",
    "githubLink": "https://github.com/blake365/macrostrat-mcp",
    "package": "@blake365/macrostrat-mcp",
    "description": "An MCP server implementation for providing access to the Macrostrat API within Claude Desktop, enabling geological data queries.",
    "installCommand": "npx -y @smithery/cli install @blake365/macrostrat-mcp --client claude && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "Custom server configuration options in claude_desktop_config.json"
    ],
    "usageInstructions": "1. Install the server using the provided install command.\n2. Edit the `src/index.ts` file if modifications are needed.\n3. Run `npm install` to install dependencies.\n4. Run `npm run build` to build the server.\n5. Add the server configuration to the Claude Desktop config file (`claude_desktop_config.json`) under the `mcpServers` section.\n6. Restart Claude Desktop to use the server.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "playwright-plus-python": {
    "name": "Playwright Server MCP",
    "githubLink": "https://github.com/blackwhite084/playwright-plus-python-mcp",
    "package": "playwright-server",
    "description": "An MCP server implementing Playwright tools for browser automation and interaction.",
    "installCommand": "uvx playwright-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "style"
    ],
    "usageInstructions": "To use this MCP server, configure it in Claude Desktop by adding the server details to the claude_desktop_config.json file. For development, use 'uv sync' to sync dependencies, 'uv build' to build distributions, and 'uv publish' to publish to PyPI. Debugging can be done using the MCP Inspector via 'npx @modelcontextprotocol/inspector uv --directory <path> run playwright-server'.",
    "category": "Browser Automation",
    "stars": 130,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "speckle": {
    "name": "Speckle MCP Server",
    "githubLink": "https://github.com/bimgeek/speckle-mcp",
    "package": "speckle-mcp",
    "description": "An MCP server for interacting with Speckle, a collaborative data hub for AEC tools.",
    "installCommand": "git clone https://github.com/bimgeek/speckle-mcp.git && cd speckle-mcp && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "SPECKLE_TOKEN"
    ],
    "optionalParams": [
      "SPECKLE_SERVER"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Set SPECKLE_TOKEN environment variable. 3. Configure MCP configuration file with server details.",
    "category": "API Integration",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "adjust": {
    "name": "Adjust MCP",
    "githubLink": "https://github.com/bitscorp-mcp/mcp-adjust",
    "package": "@bitscorp/mcp-adjust",
    "description": "A Model Context Protocol (MCP) server that interfaces with the Adjust API, enabling on-demand querying of metrics, reports, and performance data from any MCP client.",
    "installCommand": "npx -y @smithery/cli install @bitscorp/mcp-adjust --client claude",
    "requiredEnvVars": [
      "YOUR_ADJUST_API_KEY"
    ],
    "optionalParams": [
      "Adjust API endpoints",
      "report time ranges",
      "filter parameters"
    ],
    "usageInstructions": "1. Get your Adjust API key from your Adjust account settings.\n2. Install via Smithery using the provided command for your MCP client (e.g., Cursor or Claude Desktop).\n3. For local development, clone the repo, run `npm run build`, and execute the server with your API key.\n4. Query Adjust data using natural language commands like 'use adjust report revenue for the last 7 days'.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "neovim": {
    "name": "Neovim MCP Server",
    "githubLink": "https://github.com/bigcodegen/mcp-neovim-server",
    "package": "mcp-neovim-server",
    "description": "Connects Claude Desktop or any Model Context Protocol client to Neovim using MCP, enabling AI text assistance through Vim's native commands and workflows.",
    "installCommand": "npx -y mcp-neovim-server",
    "requiredEnvVars": [
      "NVIM_SOCKET_PATH"
    ],
    "optionalParams": [
      "ALLOW_SHELL_COMMANDS"
    ],
    "usageInstructions": "1. Start Neovim with a socket file, e.g., `nvim --listen /tmp/nvim`.\n2. Set `NVIM_SOCKET_PATH` to the socket path (default is `/tmp/nvim`).\n3. Optionally enable shell commands by setting `ALLOW_SHELL_COMMANDS=true`.\n4. Use the MCP client to connect to the server and leverage tools like `vim_buffer`, `vim_command`, and `vim_edit` for text editing and navigation.",
    "category": "Development Tools",
    "stars": 177,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "shiprocket": {
    "name": "Shiprocket MCP Integration",
    "githubLink": "https://github.com/bfrs/shiprocket-mcp",
    "package": "shiprocket-mcp",
    "description": "MCP server for Shiprocket integration, enabling order management, shipping rate calculation, and tracking.",
    "installCommand": "git clone https://github.com/bfrs/shiprocket-mcp.git && cd shiprocket-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "SELLER_EMAIL",
      "SELLER_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Configure claude_desktop_config.json or mcp.json with server details. 2. Add SELLER_EMAIL and SELLER_PASSWORD to env. 3. Start Claude Desktop or Cursor to use Shiprocket integration.",
    "category": "API Integration",
    "stars": 22,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/fvbg3504b0g.png"
  },
  "binary-reader": {
    "name": "Binary Reader MCP",
    "githubLink": "https://github.com/berlinbra/binary-reader-mcp",
    "package": "binary-reader-mcp",
    "description": "A Model Context Protocol server for reading and analyzing binary files, with initial support for Unreal Engine asset files (.uasset).",
    "installCommand": "git clone https://github.com/berlinbra/binary-reader-mcp.git && cd binary-reader-mcp && python -m venv venv && source venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "file_path",
      "format"
    ],
    "usageInstructions": "Activate the virtual environment and use the provided tools through the Model Context Protocol. For example, to read an Unreal asset file, use the 'read-unreal-asset' tool with the 'file_path' argument. To read generic binary files, use the 'read-binary-metadata' tool with 'file_path' and optional 'format' parameter.",
    "category": "File Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "bifrostmcp": {
    "name": "Bifrost MCP Server",
    "githubLink": "https://github.com/biegehydra/BifrostMCP",
    "package": "ConnorHallman.bifrost-mcp",
    "description": "VSCode extension providing MCP server for AI coding assistants",
    "installCommand": "Install from VS Code marketplace: https://marketplace.visualstudio.com/items?itemName=ConnorHallman.bifrost-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "port",
      "projectName",
      "description",
      "path"
    ],
    "usageInstructions": "1. Install extension from VS Code marketplace\n2. Configure AI assistant to connect to http://localhost:8008/sse\n3. Optional: Create bifrost.config.json for project-specific configuration",
    "category": "Development Tools",
    "stars": 137,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "run-command": {
    "name": "Run Shell Command MCP Server",
    "githubLink": "https://github.com/benyue1978/run-command-mcp",
    "package": "github:benyue1978/run-command-mcp",
    "description": "An MCP server that allows running shell commands",
    "installCommand": "npx github:benyue1978/run-command-mcp start",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use, add an MCP in Cursor with Name: 'Run Command', Type: 'Command', and Command: 'npx github:benyue1978/run-command-mcp start'. Then use the 'shell command' prompt in Cursor chat to execute commands.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "whois": {
    "name": "Whois MCP",
    "githubLink": "https://github.com/bharathvaj-ganesan/whois-mcp",
    "package": "@bharathvaj/whois-mcp",
    "description": "Model Context Protocol (MCP) server for performing WHOIS lookups, allowing AI agents to retrieve domain, IP, and TLD information.",
    "installCommand": "npx -y @bharathvaj/whois-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install using `npx -y @bharathvaj/whois-mcp@latest`.\n2. For Cursor IDE: Add the server via Cursor Settings > MCP by specifying the command `npx -y @bharathvaj/whois-mcp@latest`.\n3. For Roo Code: Configure the MCP server in the settings with the command `npx -y @bharathvaj/whois-mcp@latest`.\n4. The server provides WHOIS lookup tools for domains, IPs, TLDs, and ASNs.\n5. Use the tools directly in supported AI agents like Cursor or Roo Code.",
    "category": "API Integration",
    "stars": 29,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "serverman": {
    "name": "mcp-serverman",
    "githubLink": "https://github.com/benhaotang/mcp-serverman",
    "package": "mcp-serverman",
    "description": "A command-line tool to manage Claude MCP servers configuration with version control and profiling. It also includes a companion MCP server to let LLMs manage configurations.",
    "installCommand": "pip install mcp-serverman",
    "requiredEnvVars": [],
    "optionalParams": [
      "--client",
      "--version",
      "--comment",
      "--preset",
      "--path",
      "--key",
      "--default",
      "--merge"
    ],
    "usageInstructions": "After installation, use `mcp-serverman` in the terminal. Initialize client configuration with `mcp-serverman client init`. Manage servers with commands like `enable`, `disable`, `remove`, and `list`. Use `mcp-serverman companion` to register the companion MCP server for LLM management. For detailed instructions, refer to the manual at https://github.com/benhaotang/mcp-serverman/blob/main/Manual.md.",
    "category": "Development Tools",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "mma-docs": {
    "name": "Mathematica Documentation MCP Server",
    "githubLink": "https://github.com/benhaotang/mcp-mma-docs",
    "package": "mcp-python-sdk",
    "description": "MCP server providing Mathematica documentation integration",
    "installCommand": "pip install -r requirements.txt && mcp dev path/to/mcp-mma-doc.py",
    "requiredEnvVars": [
      "WOLFRAMSCRIPT_PATH"
    ],
    "optionalParams": [
      "packages",
      "load_addons"
    ],
    "usageInstructions": "1. Install requirements using 'pip install -r requirements.txt'. 2. Ensure Mathematica or wolframscript is installed. 3. Run 'mcp dev path/to/mcp-mma-doc.py' to initialize the server. 4. Configure Claude by adding the server details to its config file.",
    "category": "Knowledge Management",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "unipile": {
    "name": "Unipile MCP Server",
    "githubLink": "https://github.com/baryhuang/mcp-unipile",
    "package": "buryhuang/mcp-unipile",
    "description": "MCP server for integrating Unipile messaging platform with AI models",
    "installCommand": "docker pull buryhuang/mcp-unipile:latest && docker run -e UNIPILE_DSN=your_dsn_here -e UNIPILE_API_KEY=your_api_key_here buryhuang/mcp-unipile:latest",
    "requiredEnvVars": [
      "UNIPILE_DSN",
      "UNIPILE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Obtain Unipile DSN and API key from Unipile dashboard. 2. Configure environment variables UNIPILE_DSN and UNIPILE_API_KEY. 3. Run using Docker command or build locally.",
    "category": "API Integration",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "aws-resources-python": {
    "name": "AWS Resources MCP Server",
    "githubLink": "https://github.com/baryhuang/mcp-server-aws-resources-python",
    "package": "buryhuang/mcp-server-aws-resources",
    "description": "A Model Context Protocol (MCP) server that allows querying and managing AWS resources using Python and boto3 through a sandboxed execution environment.",
    "installCommand": "docker pull buryhuang/mcp-server-aws-resources:latest",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY",
      "AWS_DEFAULT_REGION"
    ],
    "optionalParams": [
      "AWS_SESSION_TOKEN",
      "AWS_PROFILE"
    ],
    "usageInstructions": "1. Set AWS credentials via environment variables or AWS profile. 2. Run the Docker container with AWS credentials passed as environment variables or mounted AWS credentials file. 3. Use the server to execute Python code snippets that query or modify AWS resources via boto3.",
    "category": "Cloud Services",
    "stars": 17,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "mcprules": {
    "name": "MCPRules - Programming Guidelines Management Server",
    "githubLink": "https://github.com/bartwisch/MCPRules",
    "package": "MCPRules",
    "description": "A Model Context Protocol (MCP) server that manages and serves programming guidelines and rules, integrating with development tools for consistent coding standards.",
    "installCommand": "git clone https://github.com/bartwisch/MCPRules.git && cd MCPRules/rules-server && npm install && npm run build",
    "requiredEnvVars": [
      "RULES_FILE_PATH"
    ],
    "optionalParams": [
      "GITHUB_TOKEN"
    ],
    "usageInstructions": "1. Clone the repository and navigate to the rules-server directory. 2. Install dependencies with npm install. 3. Build the server with npm run build. 4. Set the RULES_FILE_PATH environment variable to your rules file. 5. Optionally set GITHUB_TOKEN for private GitHub repositories. 6. Configure the server in VSCode Cline Extension or Claude Desktop with the provided JSON configuration.",
    "category": "Development Tools",
    "stars": 20,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "tung-shing": {
    "name": "Tung Shing MCP Service",
    "githubLink": "https://github.com/baranwang/mcp-tung-shing",
    "package": "mcp-tung-shing",
    "description": "Traditional Chinese calendar calculation service based on Model Context Protocol (MCP)",
    "installCommand": "npx -y mcp-tung-shing@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "startDate",
      "days",
      "includeHours",
      "tabooFilters"
    ],
    "usageInstructions": "Add the following to your MCP configuration file: { \"mcpServers\": { \"tung-shing\": { \"command\": \"npx\", \"args\": [\"-y\", \"mcp-tung-shing@latest\"] } } }",
    "category": "Productivity",
    "stars": 30,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "base": {
    "name": "Base MCP Server",
    "githubLink": "https://github.com/base/base-mcp",
    "package": "base-mcp",
    "description": "An MCP server providing onchain tools for AI applications to interact with the Base Network and Coinbase API, enabling wallet management, contract deployment, NFT handling, and more.",
    "installCommand": "npm install -g base-mcp",
    "requiredEnvVars": [
      "COINBASE_API_KEY_NAME",
      "COINBASE_API_PRIVATE_KEY",
      "SEED_PHRASE",
      "COINBASE_PROJECT_ID",
      "ALCHEMY_API_KEY"
    ],
    "optionalParams": [
      "OPENROUTER_API_KEY",
      "CHAIN_ID",
      "NEYNAR_API_KEY"
    ],
    "usageInstructions": "1. Install the package globally with 'npm install -g base-mcp'.\n2. Create a .env file with required credentials (Coinbase API key, private key, wallet seed phrase, Coinbase Project ID, and Alchemy API key).\n3. Optional: Add OpenRouter API key and Chain ID for additional functionality.\n4. Initialize the server with 'base-mcp --init'.\n5. Configure clients like Claude Desktop by adding the MCP server configuration to the appropriate JSON file with environment variables specified.",
    "category": "Blockchain",
    "stars": 260,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "hubspot": {
    "name": "HubSpot MCP Server",
    "githubLink": "https://github.com/baryhuang/mcp-hubspot",
    "package": "mcp-hubspot",
    "description": "An MCP server enabling AI assistants to interact with HubSpot CRM data, providing access to contacts, companies, and engagement data.",
    "installCommand": "docker run -e HUBSPOT_ACCESS_TOKEN=your_token buryhuang/mcp-hubspot:latest",
    "requiredEnvVars": [
      "HUBSPOT_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "storage directory (for persistent storage)"
    ],
    "usageInstructions": "1. Obtain a HubSpot access token with required scopes (crm.objects.contacts, crm.objects.companies, sales-email-read). 2. Run the Docker command with your access token. 3. For persistent storage, add volume mapping: -v /path/to/storage:/storage",
    "category": "CRM Integration",
    "stars": 93,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "zed-axiom-context": {
    "name": "Axiom Context Server",
    "githubLink": "https://github.com/axiomhq/zed-axiom-context-server",
    "package": "axiom-mcp",
    "description": "A Model Context Protocol (MCP) server for Axiom, used with the Zed AI assistant.",
    "installCommand": "git clone https://github.com/axiomhq/zed-axiom-context-server && cd zed-axiom-context-server && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "--config",
      "config file path"
    ],
    "usageInstructions": "After installation, configure the server in Zed's settings.json. Specify the command and arguments if the executable is not in the PATH. Example configuration: { \"context_servers\": { \"axiom-mcp\": { \"settings\": {}, \"command\": { \"cmd\": \"/path/to/axiom-mcp\", \"args\": [\"--config\", \"/path/to/your/config.txt\"] } } } }",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "auth0": {
    "name": "Auth0 MCP Server",
    "githubLink": "https://github.com/auth0/auth0-mcp-server",
    "package": "@auth0/auth0-mcp-server",
    "description": "Auth0 MCP Server integrates with LLMs and AI agents to perform Auth0 management operations using natural language.",
    "installCommand": "npx @auth0/auth0-mcp-server init",
    "requiredEnvVars": [],
    "optionalParams": [
      "--tools",
      "--client",
      "--read-only"
    ],
    "usageInstructions": "1. Install Node.js v18 or higher. 2. Install Claude Desktop or other MCP Client. 3. Create an Auth0 account. 4. Run 'npx @auth0/auth0-mcp-server init' to initialize. 5. Authorize with Auth0 through the OAuth2.0 device authorization flow. 6. Restart your MCP Client and use natural language to manage your Auth0 tenant.",
    "category": "Authentication",
    "stars": 61,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/g269kqb3g9q.png"
  },
  "axiom": {
    "name": "mcp-server-axiom",
    "githubLink": "https://github.com/axiomhq/mcp-server-axiom",
    "package": "github.com/axiomhq/axiom-mcp",
    "description": "An MCP server implementation for Axiom that allows AI agents to query data using Axiom Processing Language (APL).",
    "installCommand": "go install github.com/axiomhq/axiom-mcp@latest",
    "requiredEnvVars": [
      "AXIOM_TOKEN",
      "AXIOM_URL",
      "AXIOM_ORG_ID"
    ],
    "optionalParams": [
      "AXIOM_QUERY_RATE",
      "AXIOM_QUERY_BURST",
      "AXIOM_DATASETS_RATE",
      "AXIOM_DATASETS_BURST"
    ],
    "usageInstructions": "1. Create a config file with your Axiom token and settings. 2. Configure the Claude app to use the MCP server by editing the claude_desktop_config.json file and specifying the server command and arguments. 3. Set environment variables or include them in the config file for Axiom credentials and rate limits.",
    "category": "Analytics",
    "stars": 49,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/642ysjsghgq.png"
  },
  "intlayer": {
    "name": "Intlayer",
    "githubLink": "https://github.com/aymericzip/intlayer",
    "package": "intlayer",
    "description": "Intlayer is a modern internationalization (i18n) solution that supports multiple frameworks like Next.js, React, Vite, and Express. It offers a JavaScript-powered content management system with TypeScript support, per-locale content declaration, and streamlined setup for efficient and type-safe translations.",
    "installCommand": "npm install intlayer",
    "requiredEnvVars": [],
    "optionalParams": [
      "INTLAYER_PROJECT_ID",
      "INTLAYER_API_KEY",
      "INTLAYER_LOCALES",
      "INTLAYER_DEFAULT_LOCALE",
      "INTLAYER_CONTENT_DIR",
      "INTLAYER_PUBLIC_DIR",
      "INTLAYER_TYPES_DIR",
      "INTLAYER_OUTPUT_DIR",
      "INTLAYER_FORMAT",
      "INTLAYER_DEBUG"
    ],
    "usageInstructions": "1. Install the package using `npm install intlayer`.\n2. Initialize the project by running `npx intlayer init` to create the configuration file.\n3. Configure the `intlayer.config.js` file to define your locales, content directory, and other settings.\n4. Use the provided hooks and functions in your framework (e.g., React, Next.js) to retrieve and display translated content.\n5. Run the build command `npx intlayer build` to generate localized content for deployment.",
    "category": "Internationalization (i18n)",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/abhznk9zqb6.png"
  },
  "devcontext": {
    "name": "DevContext",
    "githubLink": "https://github.com/aurda012/devcontext",
    "package": "devcontext",
    "description": "An autonomous Model Context Protocol (MCP) server that provides intelligent context awareness for development workflows, integrating with codebases, conversations, and task management.",
    "installCommand": "npx -y devcontext@latest",
    "requiredEnvVars": [
      "TURSO_DATABASE_URL",
      "TURSO_AUTH_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "MAX_CONTEXT_SIZE"
    ],
    "usageInstructions": "1. Set up a TursoDB database by following the installation guide.\n2. Configure the MCP server in your project's `.cursor/mcp.json` file with the database URL and auth token.\n3. Implement the provided Cursor Rules for autonomous context management and task workflow integration.\n4. Use the MCP tools in sequence: initialize_conversation_context, update_conversation_context, retrieve_relevant_context, record_milestone_context, and finalize_conversation_context.",
    "category": "Development Tools",
    "stars": 24,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/zhf4bqihd1c.jpeg"
  },
  "cursor10x": {
    "name": "Cursor10x MCP Server",
    "githubLink": "https://github.com/aurda012/cursor10x-mcp",
    "package": "cursor10x-mcp",
    "description": "An MCP server providing persistent memory layer for AI assistants with continuous context awareness",
    "installCommand": "npm install -g cursor10x-mcp",
    "requiredEnvVars": [
      "TURSO_DATABASE_URL",
      "TURSO_AUTH_TOKEN"
    ],
    "optionalParams": [
      "importance",
      "metadata"
    ],
    "usageInstructions": "1. Configure Turso database: Install Turso CLI, login, create database, get URL and token. 2. Update .cursor/mcp.json with database credentials. 3. Run using 'npx cursor10x-mcp'",
    "category": "Development Tools",
    "stars": 51,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/1qikjzbwm61.jpg"
  },
  "argus": {
    "name": "Argus - Repository Analysis and Security Assessment Tool",
    "githubLink": "https://github.com/athapong/argus",
    "package": "argus",
    "description": "A powerful Model Context Protocol (MCP) tool for analyzing code repositories, performing security scans, and assessing code quality across multiple programming languages.",
    "installCommand": "uvx argus",
    "requiredEnvVars": [],
    "optionalParams": [
      "SKIP_SYSTEM_CHECK",
      "PATH"
    ],
    "usageInstructions": "After installation, configure MCP commands as shown in the usage examples. Ensure system dependencies (libmagic) are installed according to the OS-specific instructions. For language-specific tools, follow the installation instructions provided in the Supported Analysis Tools section.",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "atla": {
    "name": "Atla MCP Server",
    "githubLink": "https://github.com/atla-ai/atla-mcp-server",
    "package": "atla-mcp-server",
    "description": "An MCP server implementation providing a standardized interface for LLMs to interact with the Atla API for state-of-the-art LLMJ evaluation.",
    "installCommand": "ATLA_API_KEY=<your-api-key> uvx atla-mcp-server",
    "requiredEnvVars": [
      "ATLA_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install `uv` and set up your Atla API key. 2. Run the server using `ATLA_API_KEY=<your-api-key> uvx atla-mcp-server`. 3. Connect to the server via OpenAI Agents SDK, Claude Desktop, or Cursor by configuring the respective tools with the `atla-mcp-server` command and API key.",
    "category": "AI/ML",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/hab16gjo16.jpg"
  },
  "doc-scraper": {
    "name": "Doc Scraper MCP Server",
    "githubLink": "https://github.com/askjohngeorge/mcp-doc-scraper",
    "package": "@askjohngeorge/mcp-doc-scraper",
    "description": "A Model Context Protocol (MCP) server that scrapes web-based documentation and converts it to markdown format using jina.ai's conversion service.",
    "installCommand": "git clone https://github.com/askjohngeorge/mcp-doc-scraper.git && cd mcp-doc-scraper && python -m venv venv && source venv/bin/activate && pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "url",
      "output_path"
    ],
    "usageInstructions": "1. Clone the repository and set up a virtual environment. 2. Install dependencies using pip install -e . 3. Run the server using python -m mcp_doc_scraper. 4. Use the 'scrape_docs' tool by providing a URL and an output path for the markdown file.",
    "category": "Web Scraping",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "mtg-servers": {
    "name": "MTG Deck Manager MCP Servers",
    "githubLink": "https://github.com/artillect/mtg-mcp-servers",
    "package": "mtg-deck-mcp-server",
    "description": "MCP servers for managing Magic: The Gathering decks and card information through Claude.",
    "installCommand": "git clone https://github.com/artillect/mtg-deck-mcp-server.git && cd mtg-deck-mcp-server && python -m venv .venv && .venv\\Scripts\\activate && pip install fastmcp httpx",
    "requiredEnvVars": [],
    "optionalParams": [
      "command path",
      "args for mtg_server.py and scryfall_server.py"
    ],
    "usageInstructions": "1. Clone the repository and set up a Python virtual environment. 2. Configure Claude Desktop Client with the paths to the Python executables and server scripts. 3. Interact with the servers through Claude to manage MTG decks and search for card information.",
    "category": "Entertainment",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "scdl": {
    "name": "scdl-mcp",
    "githubLink": "https://github.com/arnavsurve/scdl-mcp",
    "package": "scdl-mcp",
    "description": "An MCP server that enables downloading songs and playlists from SoundCloud using Claude or other LLM clients that support MCP.",
    "installCommand": "git clone https://github.com/arnavsurve/scdl-mcp && cd scdl-mcp && uv run mcp install server.py",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After installation, restart the Claude desktop client or any other LLM client that supports MCP. Use the server to download songs and playlists from SoundCloud by interacting with the LLM client. Ensure dependencies like ffmpeg and scdl are installed on your system.",
    "category": "Web Scraping",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "sg-lta": {
    "name": "Singapore LTA MCP Server",
    "githubLink": "https://github.com/arjunkmrm/mcp-sg-lta",
    "package": "@arjunkmrm/mcp-sg-lta",
    "description": "MCP server providing real-time Singapore LTA transportation data including bus arrivals, traffic conditions, and train service updates.",
    "installCommand": "npx -y @smithery/cli install @arjunkmrm/mcp-sg-lta --client claude",
    "requiredEnvVars": [
      "LTA_API_KEY"
    ],
    "optionalParams": [
      "busStopCode",
      "serviceNo",
      "trainLine"
    ],
    "usageInstructions": "1. Register for LTA DataMall API key. 2. Configure claude_desktop_config.json with API key: { \"mcpServers\": { \"lta\": { \"command\": \"npx\", \"args\": [\"-y\", \"arjunkmrm/mcp-sg-lta\"], \"env\": { \"LTA_API_KEY\": \"YOUR-API-KEY\" } } } }",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "localutils": {
    "name": "Local Utilities MCP Server",
    "githubLink": "https://github.com/arjshiv/localutils-mcp-server",
    "package": "localutils-mcp-server",
    "description": "An MCP server providing various local system utilities for Cursor and other MCP-compatible clients.",
    "installCommand": "pnpm add -g localutils-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server using 'localutils-mcp' after global installation, or 'npx localutils-mcp-server' without installation. Configure it as an MCP server in Cursor settings.",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "minecraft": {
    "name": "Minecraft MCP Integration",
    "githubLink": "https://github.com/arjunkmrm/mcp-minecraft",
    "package": "mcp-minecraft",
    "description": "An MCP integration for Minecraft that enables AI assistants to interact with a Minecraft server through a bot, allowing observation and interaction with the Minecraft world.",
    "installCommand": "npx -y @smithery/cli install mcp-minecraft --client claude",
    "requiredEnvVars": [
      "MCP_SERVER_JAR_PATH"
    ],
    "optionalParams": [
      "MCP_SERVER_PORT",
      "MCP_SERVER_MEMORY",
      "MCP_BOT_USERNAME"
    ],
    "usageInstructions": "1. Install Minecraft server v1.21 and Java 21.0.5.\n2. Use the provided install command or manually configure claude_desktop_config.json with the server.jar path.\n3. Launch Minecraft Java Edition v1.21 and connect to localhost:25565.\n4. Use MCP tools like `chat`, `moveForward`, `placeBlock`, and `getBlockInfo` to interact with the Minecraft world through the bot.",
    "category": "AI/ML",
    "stars": 79,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "brave-search": {
    "name": "Brave Search MCP Server",
    "githubLink": "https://github.com/arben-adm/brave-mcp-search",
    "package": "@arben-adm/brave-mcp-search",
    "description": "An MCP server for Brave Search integration with AI assistants like Claude.",
    "installCommand": "npx -y @smithery/cli install @arben-adm/brave-mcp-search --client claude",
    "requiredEnvVars": [
      "BRAVE_API_KEY"
    ],
    "optionalParams": [
      "command configuration options in claude_desktop_config.json"
    ],
    "usageInstructions": "1. Configure claude_desktop_config.json with MCP server settings\n2. Set BRAVE_API_KEY environment variable\n3. Start MCP-compatible AI assistant",
    "category": "AI/ML",
    "stars": 12,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "kagi-search": {
    "name": "Kagi MCP Server",
    "githubLink": "https://github.com/apridachin/kagi-search-mcp",
    "package": "kagi-mcp",
    "description": "MCP server that allows searching web using Kagi API, implementing tools for web search and news enrichment.",
    "installCommand": "npx -y @smithery/cli install kagi-mcp --client claude",
    "requiredEnvVars": [
      "KAGI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "After installation, configure Claude Desktop by adding the Kagi MCP server details in ~/Library/Application\\ Support/Claude/claude_desktop_config.json, including the KAGI_API_KEY in the env section.",
    "category": "AI/ML",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "sequential-thinking": {
    "name": "Sequential Thinking MCP Server",
    "githubLink": "https://github.com/arben-adm/mcp-sequential-thinking",
    "package": "mcp-sequential-thinking",
    "description": "A Model Context Protocol (MCP) server that facilitates structured, progressive thinking through defined stages, enabling users to break down complex problems into sequential thoughts and generate summaries.",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "thought_number",
      "total_thoughts",
      "next_thought_needed",
      "tags",
      "axioms_used",
      "assumptions_challenged"
    ],
    "usageInstructions": "1. Set up the project by creating a virtual environment and installing dependencies using `uv venv` and `uv pip install -e .`. 2. Run the server using `uv run -m mcp_sequential_thinking.server` or the installed script `mcp-sequential-thinking`. 3. Use the `process_thought` tool to record thoughts in sequence, specifying parameters like thought content, stage, and metadata. 4. Generate summaries with `generate_summary` and reset the thinking process with `clear_history`.",
    "category": "Development Tools",
    "stars": 304,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "superset": {
    "name": "Superset MCP Integration",
    "githubLink": "https://github.com/aptro/superset-mcp",
    "package": "@aptro/superset-mcp",
    "description": "MCP server for interacting with Apache Superset, enabling AI agents to connect to and control a Superset instance programmatically.",
    "installCommand": "npx -y @smithery/cli install @aptro/superset-mcp --client claude",
    "requiredEnvVars": [
      "SUPERSET_BASE_URL",
      "SUPERSET_USERNAME",
      "SUPERSET_PASSWORD"
    ],
    "optionalParams": [
      "SUPERSET_DATABASE_URL",
      "SUPERSET_API_KEY",
      "SUPERSET_TIMEOUT",
      "SUPERSET_LOG_LEVEL"
    ],
    "usageInstructions": "1. Set up Superset locally using the provided script. 2. Clone this repository. 3. Create a .env file with Superset credentials. 4. Install dependencies with 'uv pip install .'. 5. Install MCP config with 'mcp install main.py'. 6. Use with Claude Desktop to interact with Superset via natural language commands.",
    "category": "Analytics",
    "stars": 54,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "xmind": {
    "name": "MCP XMind Server",
    "githubLink": "https://github.com/apeyroux/mcp-xmind",
    "package": "@41px/mcp-xmind",
    "description": "A Model Context Protocol server for analyzing and querying XMind mind maps, providing features like smart fuzzy search, task management, and hierarchical content navigation.",
    "installCommand": "npx -y @smithery/cli install @41px/mcp-xmind --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "allowed-directory",
      "additional-directories"
    ],
    "usageInstructions": "To start the server, run: node dist/index.js <allowed-directory> [additional-directories...]. Configure using claude_desktop_config.json with appropriate command and args.",
    "category": "Productivity",
    "stars": 27,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "apisix": {
    "name": "APISIX Model Context Protocol (MCP) Server",
    "githubLink": "https://github.com/api7/apisix-mcp",
    "package": "@api7/apisix-mcp",
    "description": "A Model Context Protocol (MCP) server that bridges large language models (LLMs) with the APISIX Admin API, enabling natural language-based interaction for managing APISIX resources.",
    "installCommand": "npx -y @smithery/cli install @api7/apisix-mcp --client claude",
    "requiredEnvVars": [
      "APISIX_SERVER_HOST",
      "APISIX_SERVER_PORT",
      "APISIX_ADMIN_API_PORT",
      "APISIX_ADMIN_API_PREFIX",
      "APISIX_ADMIN_KEY"
    ],
    "optionalParams": [
      "APISIX_ADMIN_KEY (default: 'edd1c9f034335f136f87ad84b625c8f1')",
      "APISIX_SERVER_HOST (default: 'http://127.0.0.1')",
      "APISIX_SERVER_PORT (default: '9080')",
      "APISIX_ADMIN_API_PORT (default: '9180')",
      "APISIX_ADMIN_API_PREFIX (default: '/apisix/admin')"
    ],
    "usageInstructions": "1. Follow the APISIX Getting Started guide to set up and run APISIX.\n2. Install the APISIX MCP server using the provided install command.\n3. Configure your AI client (e.g., Cursor, Claude) with the server command and environment variables.\n4. Use the MCP server to interact with APISIX resources via natural language commands in your AI client.",
    "category": "API Integration",
    "stars": 25,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/6nc79k633jn.jpg"
  },
  "obsidian-omnisearch": {
    "name": "MCP Server Obsidian Omnisearch",
    "githubLink": "https://github.com/anpigon/mcp-server-obsidian-omnisearch",
    "package": "mcp-server-obsidian-omnisearch",
    "description": "A FastMCP-based server providing Obsidian vault search through REST API",
    "installCommand": "npx -y @smithery/cli install @anpigon/mcp-server-obsidian-omnisearch --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "path to Obsidian vault"
    ],
    "usageInstructions": "1. Install via Smithery CLI or manual installation. 2. Configure Obsidian Omnisearch plugin. 3. Run server with vault path: 'python server.py /path/to/obsidian/vault'. For Claude Desktop, configure claude_desktop_config.json with server details.",
    "category": "Productivity",
    "stars": 17,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "chart": {
    "name": "MCP Server Chart",
    "githubLink": "https://github.com/antvis/mcp-server-chart",
    "package": "@antv/mcp-server-chart",
    "description": "A Model Context Protocol server for generating charts using AntV, supporting over 25 chart types including bar, pie, line, and map-based visualizations.",
    "installCommand": "npm install -g @antv/mcp-server-chart",
    "requiredEnvVars": [
      "VIS_REQUEST_SERVER"
    ],
    "optionalParams": [
      "SERVICE_ID",
      "DISABLED_TOOLS"
    ],
    "usageInstructions": "To use, run the server with `mcp-server-chart --transport sse` for SSE transport or `mcp-server-chart --transport streamable` for Streamable transport. Configure the server in your MCP client (e.g., VSCode, Cline) with the appropriate JSON configuration. For private deployment, set the VIS_REQUEST_SERVER environment variable to a custom service URL.",
    "category": "Analytics",
    "stars": 1752,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/hs4gt6rrjbw.svg"
  },
  "brianknows": {
    "name": "BrianKnows MCP Server",
    "githubLink": "https://github.com/antoncoding/mcp-brianknows",
    "package": "mcp-brianknows",
    "description": "An MCP server connecting Claude to BrianKnows' blockchain knowledge base, providing tools for ping, search, and agent interactions.",
    "installCommand": "npx -y mcp-brianknows",
    "requiredEnvVars": [
      "BRIAN_API_KEY"
    ],
    "optionalParams": [
      "knowledge base selection (defaults to public-knowledge-box)"
    ],
    "usageInstructions": "1. Install Claude Desktop. 2. Configure Claude Desktop with the MCP server settings using your BrianKnows API key. 3. Use commands like 'check BrianKnows API status', 'search for Ethereum Layer2', or 'ask about Uniswap V3'.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "gibber": {
    "name": "Tiny Cryptography MCP Server",
    "githubLink": "https://github.com/anton10xr/gibber-mcp",
    "package": "gibber-mcp",
    "description": "A Model Context Protocol server providing cryptographic tools for key pair generation, shared secret derivation, and message encryption/decryption using the Stanford JavaScript Crypto Library (SJCL).",
    "installCommand": "git clone https://github.com/anton10xr/gibber-mcp && cd mcp-server && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with 'npm install'.\n2. Start the development server using 'npm run dev'.\n3. For production, build the project with 'npm run build' and start the server with 'npm start'.\n4. Use the provided API endpoints to interact with the server's cryptographic tools.",
    "category": "Security",
    "stars": 205,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "rocq": {
    "name": "MCP-RoCQ Coq Reasoning Server",
    "githubLink": "https://github.com/angrysky56/mcp-rocq",
    "package": "mcp-rocq",
    "description": "MCP-RoCQ is a Model Context Protocol server providing advanced logical reasoning through Coq proof assistant integration.",
    "installCommand": "git clone https://github.com/angrysky56/mcp-rocq.git && cd mcp-rocq && uv venv && ./venv/Scripts/activate && uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "--coq-path",
      "--lib-path"
    ],
    "usageInstructions": "1. Install Coq Platform 8.19. 2. Configure paths in mcphost config or Claude App config JSON. 3. Use type checking, inductive type definition, and property proving tools as shown in usage examples.",
    "category": "Development Tools",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "coinmarket": {
    "name": "Coinmarket MCP Server",
    "githubLink": "https://github.com/anjor/coinmarket-mcp-server",
    "package": "coinmarket-service",
    "description": "An MCP server implementing Coinmarket API endpoints for currency listings and quotes, with custom coinmarket:// URI scheme support",
    "installCommand": "git clone https://github.com/anjor/coinmarket-mcp-server.git && cd coinmarket-mcp-server && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "COINMARKET_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "MAX_REQUESTS_PER_MINUTE"
    ],
    "usageInstructions": "1. Set COINMARKET_API_KEY environment variable with your Coinmarket API key\n2. Run using uv: uv run coinmarket_service\n3. Or use Docker: docker run -e COINMARKET_API_KEY=your_api_key_here coinmarket-service\n4. Configure Claude Desktop with the provided mcpServers configuration\n5. Access endpoints via coinmarket:// URI scheme",
    "category": "API Integration",
    "stars": 35,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "simple-timeserver": {
    "name": "MCP Simple Timeserver",
    "githubLink": "https://github.com/andybrandt/mcp-simple-timeserver",
    "package": "mcp-simple-timeserver",
    "description": "An MCP server providing current local time and UTC time to Claude AI",
    "installCommand": "pip install mcp-simple-timeserver",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Install using 'pip install mcp-simple-timeserver'. 2. Configure in Claude desktop app by adding 'mcpServers' configuration with appropriate Python executable path. For example: '\"mcpServers\": { \"simple-timeserver\": { \"command\": \"python\", \"args\": [\"-m\", \"mcp_simple_timeserver\"] } }' for Mac/Linux or use full Python path for Windows.",
    "category": "AI/ML",
    "stars": 17,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "logic": {
    "name": "MCP-Logic",
    "githubLink": "https://github.com/angrysky56/mcp-logic",
    "package": "mcp-logic",
    "description": "An MCP server providing automated reasoning capabilities using Prover9/Mace4 for AI systems, enabling logical theorem proving and model verification.",
    "installCommand": "git clone https://github.com/angrysky56/mcp-logic && cd mcp-logic && chmod +x linux-setup-script.sh && ./linux-setup-script.sh",
    "requiredEnvVars": [
      "LADR_DIR",
      "PROVER9_PATH",
      "MCP_LOGIC_PORT"
    ],
    "optionalParams": [
      "MCP_LOGIC_DEBUG",
      "MCP_LOGIC_LOG_LEVEL",
      "MCP_LOGIC_MAX_PROOFS",
      "MCP_LOGIC_TIMEOUT"
    ],
    "usageInstructions": "After installation, configure the LADR_DIR and PROVER9_PATH environment variables to point to the installed LADR/Prover9 binaries. Use the 'prove' tool to run logical proofs, and 'check-well-formed' to validate logical statements. For Docker-based usage, run the provided run-mcp-logic.sh or run-mcp-logic.bat scripts. Integration with Claude Desktop requires configuring the mcpServers section in the configuration file with the correct paths.",
    "category": "AI/ML",
    "stars": 27,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "selenium": {
    "name": "MCP Selenium Server",
    "githubLink": "https://github.com/angiejones/mcp-selenium",
    "package": "@angiejones/mcp-selenium",
    "description": "An MCP server implementation for Selenium WebDriver, enabling browser automation through standardized MCP clients.",
    "installCommand": "npm install -g @angiejones/mcp-selenium",
    "requiredEnvVars": [],
    "optionalParams": [
      "browser",
      "options",
      "url",
      "by",
      "value",
      "timeout",
      "text",
      "key",
      "filePath"
    ],
    "usageInstructions": "Start the server by running: mcp-selenium. Configure in MCP clients using: { \"mcpServers\": { \"selenium\": { \"command\": \"npx\", \"args\": [\"-y\", \"@angiejones/mcp-selenium\"] } } }",
    "category": "Browser Automation",
    "stars": 194,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "simple-openai-assistant": {
    "name": "MCP Simple OpenAI Assistant",
    "githubLink": "https://github.com/andybrandt/mcp-simple-openai-assistant",
    "package": "mcp-simple-openai-assistant",
    "description": "An MCP server for interacting with OpenAI assistants, allowing tools like Claude Desktop to create and communicate with OpenAI assistants.",
    "installCommand": "pip install mcp-simple-openai-assistant",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "To use, configure the server in Claude Desktop by adding the OPENAI_API_KEY to the environment variables in the config. The command to run the server is 'python -m mcp_simple_openai_assistant'. For Windows, ensure the correct path to python.exe is used.",
    "category": "AI/ML",
    "stars": 31,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "raindrop-io": {
    "name": "Raindrop.io MCP Server",
    "githubLink": "https://github.com/anarcher/raindrop-io-mcp-server",
    "package": "raindrop-io-mcp-server",
    "description": "An MCP server that integrates with Raindrop.io bookmarks, allowing LLMs to interact with bookmark data.",
    "installCommand": "git clone https://github.com/anarcher/raindrop-io-mcp-server && cd raindrop-io-mcp-server && go mod tidy && go build -o raindrop-mcp-server",
    "requiredEnvVars": [
      "RAINDROP_TOKEN"
    ],
    "optionalParams": [
      "url",
      "title",
      "tags",
      "collection",
      "query"
    ],
    "usageInstructions": "1. Set RAINDROP_TOKEN in a .env file. 2. Configure Claude for Desktop by adding the server command to claude_desktop_config.json. 3. Restart Claude for Desktop.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "nps": {
    "name": "National Park Services MCP Server",
    "githubLink": "https://github.com/amysatterlee/nps",
    "package": "nps-mcp-server",
    "description": "MCP Server providing interface to retrieve National Park Services data",
    "installCommand": "git clone https://github.com/amysatterlee/nps && cd nps && npm install",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "stateCode",
      "parkCode"
    ],
    "usageInstructions": "1. Clone repository and install dependencies. 2. Create .env file with NPS API key. 3. Run 'npm run build' and 'node ./build/server.js'. 4. Configure Claude Desktop to use this MCP server.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "cloudflare-browser-rendering": {
    "name": "Cloudflare Browser Rendering MCP Server",
    "githubLink": "https://github.com/amotivv/cloudflare-browser-rendering",
    "package": "@cloudflare/puppeteer",
    "description": "MCP server providing web content extraction using Cloudflare Browser Rendering for LLM context",
    "installCommand": "git clone https://github.com/amotivv/cloudflare-browser-rendering.git && cd cloudflare-browser-rendering && npm install",
    "requiredEnvVars": [
      "BROWSER_RENDERING_API"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone repository and install dependencies\n2. Configure Wrangler and deploy Cloudflare Worker\n3. Set BROWSER_RENDERING_API environment variable\n4. Build and run MCP server using 'npm run build' and 'npm start'",
    "category": "Browser Automation",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "installer": {
    "name": "mcp-installer",
    "githubLink": "https://github.com/anaisbetts/mcp-installer",
    "package": "@anaisbetts/mcp-installer",
    "description": "An MCP server that installs other MCP servers from npm, PyPi, or local paths for you.",
    "installCommand": "npx -y @anaisbetts/mcp-installer",
    "requiredEnvVars": [],
    "optionalParams": [
      "GITHUB_PERSONAL_ACCESS_TOKEN"
    ],
    "usageInstructions": "1. Add the mcp-installer configuration to your claude_desktop_config.json as shown in the README. 2. Use prompts like 'Install the MCP server named [server-name]' or provide a local path or package name. 3. For GitHub servers, set GITHUB_PERSONAL_ACCESS_TOKEN if needed.",
    "category": "Development Tools",
    "stars": 1275,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "ts-trello": {
    "name": "Trello MCP Server (TypeScript)",
    "githubLink": "https://github.com/andypost/mcp-server-ts-trello",
    "package": "mcp-server-ts-trello",
    "description": "A TypeScript implementation of a Model Context Protocol (MCP) server for Trello integration, providing tools for AI assistants to interact with Trello boards, lists, and cards.",
    "installCommand": "git clone https://github.com/andypost/mcp-server-ts-trello && cd mcp-server-ts-trello && make install",
    "requiredEnvVars": [
      "TRELLO_API_KEY",
      "TRELLO_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using `make install`.\n2. Create a `.env` file with your Trello API credentials: `TRELLO_API_KEY` and `TRELLO_TOKEN`.\n3. Build the project using `make build`.\n4. Start the server with `make start`.\n5. Use the provided MCP tools (`get_boards`, `get_lists`, `get_cards`, `get_card_details`) to interact with Trello boards, lists, and cards.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "unichat": {
    "name": "Unichat MCP Server",
    "githubLink": "https://github.com/amidabuddha/unichat-mcp-server",
    "package": "unichat-mcp-server",
    "description": "MCP server that sends requests to various AI models like OpenAI, MistralAI, and Anthropic using the MCP protocol.",
    "installCommand": "uvx unichat-mcp-server",
    "requiredEnvVars": [
      "UNICHAT_MODEL",
      "UNICHAT_API_KEY"
    ],
    "optionalParams": [
      "SELECTED_UNICHAT_MODEL"
    ],
    "usageInstructions": "To use this server, configure it in Claude Desktop by adding the 'unichat-mcp-server' to 'mcpServers' in claude_desktop_config.json with appropriate environment variables. For development, use 'uv run unichat-mcp-server' in the project directory.",
    "category": "AI/ML",
    "stars": 36,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "simple-pubmed": {
    "name": "MCP Simple PubMed",
    "githubLink": "https://github.com/andybrandt/mcp-simple-pubmed",
    "package": "mcp-simple-pubmed",
    "description": "An MCP server that provides access to PubMed articles through the Entrez API, allowing users to search for articles, access abstracts, and download full text for open-access articles.",
    "installCommand": "pip install mcp-simple-pubmed",
    "requiredEnvVars": [
      "PUBMED_EMAIL"
    ],
    "optionalParams": [
      "PUBMED_API_KEY"
    ],
    "usageInstructions": "1. Install the package using `pip install mcp-simple-pubmed`. 2. Set the required environment variable `PUBMED_EMAIL` with your email address. 3. Optionally set `PUBMED_API_KEY` for higher rate limits. 4. Add the server to your Claude Desktop configuration with the command `python -m mcp_simple_pubmed`. 5. Use the server to search PubMed for articles, retrieve abstracts, and download full text for open-access articles.",
    "category": "API Integration",
    "stars": 102,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "unichat-ts": {
    "name": "Unichat MCP Server (TypeScript)",
    "githubLink": "https://github.com/amidabuddha/unichat-ts-mcp-server",
    "package": "unichat-ts-mcp-server",
    "description": "A Model Context Protocol (MCP) server in TypeScript that allows sending requests to multiple AI vendors (OpenAI, MistralAI, Anthropic, xAI, Google AI, DeepSeek) via predefined prompts or custom tools. Supports both STDIO and SSE transport mechanisms.",
    "installCommand": "npx -y unichat-ts-mcp-server",
    "requiredEnvVars": [
      "UNICHAT_MODEL",
      "UNICHAT_API_KEY"
    ],
    "optionalParams": [
      "UNICHAT_PROMPT",
      "UNICHAT_TOOL",
      "UNICHAT_ARGS",
      "PORT",
      "LOG_LEVEL",
      "DEBUG",
      "TIMEOUT"
    ],
    "usageInstructions": "1. Install the server using `npx -y unichat-ts-mcp-server`.\n2. Set the required environment variables: `UNICHAT_MODEL` (e.g., gpt-4o-mini) and `UNICHAT_API_KEY` (vendor-specific API key).\n3. Run the server with `npx -y unichat-ts-mcp-server` for STDIO mode or `npx -y unichat-ts-mcp-server --sse` for SSE mode.\n4. For debugging, use `npm run inspector` to launch the MCP Inspector and access debugging tools in your browser.\n5. To use with Claude Desktop, add the server configuration to the appropriate config file (`claude_desktop_config.json`) with the command and environment variables specified.",
    "category": "AI/ML",
    "stars": 11,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "simple-arxiv": {
    "name": "mcp-simple-arxiv",
    "githubLink": "https://github.com/andybrandt/mcp-simple-arxiv",
    "package": "mcp-simple-arxiv",
    "description": "An MCP server that provides access to arXiv papers through their API, allowing LLM clients to search for scientific papers and retrieve metadata and abstracts.",
    "installCommand": "pip install mcp-simple-arxiv",
    "requiredEnvVars": [],
    "optionalParams": [
      "arXiv search queries",
      "paper IDs for details",
      "custom rate-limiting settings"
    ],
    "usageInstructions": "1. Install the package using pip install mcp-simple-arxiv.\n2. Add the server configuration to your claude_desktop_config.json as shown in the README.\n3. Restart Claude Desktop to access the server capabilities.\n4. Use queries like 'search arXiv for recent papers about [topic]' or 'show me details for paper [ID]' to interact with the server.",
    "category": "API Integration",
    "stars": 118,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "adspirer": {
    "name": "Adspirer MCP Server",
    "githubLink": "https://github.com/amekala/adspirer-mcp-server",
    "package": "adspirer-mcp-server",
    "description": "AI-powered advertising campaign management server for Claude, supporting Amazon Ads and other platforms.",
    "installCommand": "npm install -g adspirer-mcp-server",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Get API key from Adspirer.com. 2. Run 'npm install -g adspirer-mcp-server'. 3. Configure Claude Desktop using 'adspirer-mcp config'. 4. Start using in Claude to manage ad campaigns.",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "name-origin": {
    "name": "Name Origin Predictor MCP Server",
    "githubLink": "https://github.com/allglenn/mcp-name-origin-server",
    "package": "mcp-name-origin-server",
    "description": "An MCP server that predicts name origins using Nationalize.io API",
    "installCommand": "git clone https://github.com/allglenn/mcp-name-origin-server.git && cd mcp-name-origin-server && python3 -m venv venv && source venv/bin/activate && pip install httpx mcp-server",
    "requiredEnvVars": [
      "PYTHONPATH",
      "PYTHONUNBUFFERED"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Create claude_desktop_config.json with server configuration\n2. Run 'python mcp-server.py' to start the server\n3. Use predict_origin or batch_predict methods",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "unlock-pdf": {
    "name": "MCP Unlock PDF Server",
    "githubLink": "https://github.com/algonacci/mcp-unlock-pdf",
    "package": "mcp-unlock-pdf",
    "description": "MCP server that enables clients to read protected or unprotected PDF files",
    "installCommand": "git clone https://github.com/algonacci/mcp-unlock-pdf && cd mcp-unlock-pdf && uv pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this MCP server, add the configuration to your MCP config file as shown in the README. Ensure you have Python and uv installed. The command uses 'uv run python main.py', so make sure the path in the config is correct.",
    "category": "File Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "tavily-extract": {
    "name": "MCP Tavily Extract Server",
    "githubLink": "https://github.com/algonacci/mcp-tavily-extract",
    "package": "mcp-tavily-extract",
    "description": "MCP server for extracting web pages using Tavily API",
    "installCommand": "git clone https://github.com/algonacci/mcp-tavily-extract && cd mcp-tavily-extract && pip install -r requirements.txt",
    "requiredEnvVars": [
      "TAVILY_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and install requirements. 2. Configure MCP config file with command and args. 3. Create .env file with TAVILY_API_KEY.",
    "category": "Web Scraping",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "agenda": {
    "name": "Agenda MCP Server",
    "githubLink": "https://github.com/alexgoller/mcp-server-agenda",
    "package": "mcp-server-agenda",
    "description": "A server implementation for interacting with the Agenda app on macOS through Claude AI, providing tools to create notes, manage projects, and open existing notes.",
    "installCommand": "git clone https://github.com/alexgoller/mcp-server-agenda.git && cd mcp-server-agenda && pip install uv && uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "Claude desktop config file settings"
    ],
    "usageInstructions": "1. Clone the repository and cd into it. 2. Install uv using 'pip install uv'. 3. Create a pyproject.toml file with project dependencies. 4. Install project dependencies using 'uv pip install -e .'. 5. Configure Claude desktop config file at '$HOME/Library/Application Support/Claude/claude_desktop_config.json' with the server command and args.",
    "category": "Productivity",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "gnews": {
    "name": "mcp-gnews",
    "githubLink": "https://github.com/algonacci/mcp-gnews",
    "package": "mcp-gnews",
    "description": "MCP server that allows clients to search for related news on the internet.",
    "installCommand": "git clone https://github.com/algonacci/mcp-gnews && cd mcp-gnews && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add the provided JSON configuration to your MCP config file. Ensure the path to the mcp-gnews directory is correct. Run the server using the specified command with uv.",
    "category": "Web Scraping",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "ftp": {
    "name": "MCP Server for FTP Access",
    "githubLink": "https://github.com/alxspiker/mcp-server-ftp",
    "package": "@alxspiker/mcp-server-ftp",
    "description": "This Model Context Protocol (MCP) server provides tools for interacting with FTP servers, allowing Claude.app to list directories, download and upload files, create directories, and delete files/directories on FTP servers.",
    "installCommand": "npx -y @smithery/cli install @alxspiker/mcp-server-ftp --client claude",
    "requiredEnvVars": [
      "FTP_HOST",
      "FTP_PORT",
      "FTP_USER",
      "FTP_PASSWORD"
    ],
    "optionalParams": [
      "FTP_SECURE"
    ],
    "usageInstructions": "1. Install the server using the provided command. 2. Configure the server by editing the Claude Desktop configuration file with the FTP server details. 3. Restart Claude Desktop to use the server. 4. Use natural language commands to perform FTP operations like listing directories, uploading/downloading files, and managing directories.",
    "category": "File Management",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "tools": {
    "name": "MCP Tools",
    "githubLink": "https://github.com/algonacci/mcp-tools",
    "package": "mcp-tools",
    "description": "A collection of Model Context Protocol (MCP) tools for various purposes.",
    "installCommand": "git clone https://github.com/algonacci/mcp-tools && cd mcp-tools && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Clone the repository and install the required dependencies. Explore the tools and scripts provided for Model Context Protocol (MCP) functionalities.",
    "category": "Other",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "hh-jira": {
    "name": "hh-jira-mcp-server",
    "githubLink": "https://github.com/alexeydubinin/hh-jira-mcp-server",
    "package": "hh-jira-mcp-server",
    "description": "An MCP server project integrating with Jira",
    "installCommand": "brew install uv && uv pip install keyring && uvx hh-jira-mcp-server",
    "requiredEnvVars": [
      "HH_JIRA_MCP_USER",
      "HH_JIRA_MCP_TEAM",
      "HH_JIRA_MCP_SEARCH_FILTER"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Register at https://claude.ai and buy Pro subscription. 2. Install Claude Desktop. 3. Configure claude_desktop_config.json with the required env vars. 4. Store Jira password using: keyring set hh-jira-mcp-server <username>",
    "category": "Project Management",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "solr": {
    "name": "Solr MCP",
    "githubLink": "https://github.com/allenday/solr-mcp",
    "package": "solr-mcp",
    "description": "A Python package for accessing Apache Solr indexes via Model Context Protocol (MCP), enabling AI assistants to perform hybrid keyword and vector searches.",
    "installCommand": "git clone https://github.com/allenday/solr-mcp && cd solr-mcp && python -m venv venv && source venv/bin/activate && pip install poetry && poetry install",
    "requiredEnvVars": [
      "SOLR_URL",
      "OLLAMA_URL",
      "SOLR_COLLECTION"
    ],
    "optionalParams": [
      "EMBEDDING_MODEL",
      "VECTOR_DIMENSION",
      "MAX_RESULTS",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and set up the Python virtual environment. 2. Start SolrCloud using Docker with 'docker-compose up -d'. 3. Process and index documents using the provided scripts. 4. Run the MCP server with 'poetry run python -m solr_mcp.server'. Ensure required environment variables are set for Solr and Ollama integration.",
    "category": "Search & Data Retrieval",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "illumio": {
    "name": "Illumio MCP Server",
    "githubLink": "https://github.com/alexgoller/illumio-mcp-server",
    "package": "illumio-mcp",
    "description": "A Model Context Protocol (MCP) server that provides an interface to interact with Illumio PCE (Policy Compute Engine) for workload management, label operations, and traffic flow analysis.",
    "installCommand": "git clone [repository-url] && cd illumio-mcp && pip install -r requirements.txt",
    "requiredEnvVars": [
      "PCE_HOST",
      "PCE_PORT",
      "PCE_ORG_ID",
      "API_KEY",
      "API_SECRET"
    ],
    "optionalParams": [
      "PCE_PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Configure the server by adding it to the `mcpServers` section in your Claude Desktop configuration file with the required environment variables (PCE_HOST, PCE_PORT, PCE_ORG_ID, API_KEY, API_SECRET). 3. Use the server to manage workloads, labels, traffic flows, and perform security analysis via MCP interface.",
    "category": "Security",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "chess": {
    "name": "MCP Chess Server",
    "githubLink": "https://github.com/alexandreroman/mcp-chess",
    "package": "mcp-chess",
    "description": "An MCP server providing chess functionality for Claude AI Assistant",
    "installCommand": "Download the latest binary from https://github.com/alexandreroman/mcp-chess/releases and configure Claude Desktop",
    "requiredEnvVars": [],
    "optionalParams": [
      "command path in Claude config"
    ],
    "usageInstructions": "1. Download binary from releases page. 2. Make executable (chmod +x). 3. Configure Claude Desktop through Settings > Developer > Edit Config. 4. Add MCP server configuration with binary path. 5. Restart Claude Desktop.",
    "category": "AI/ML",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "archai-static-analyzer": {
    "name": "Archai Static Analyzer MCP Server",
    "githubLink": "https://github.com/alefcastelo/archai-static-analyzer-mcp",
    "package": "archai",
    "description": "An MCP server for static analysis using Archai",
    "installCommand": "bun install && bun run index.ts",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository from https://github.com/alefcastelo/archai-static-analyzer-mcp \n2. Run `bun install` to install dependencies \n3. Configure the MCP server using the provided configuration: \n   ```json\n{\n \"mcpServers\": {\n   \"archai\": {\n     \"command\": \"bun\",\n     \"args\": [\n       \"run\",\n       \"~/workspace/mcp/archai/mcp.ts\"\n     ]\n   }\n }\n}\n``` \n4. Run `bun run index.ts` to start the server",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "metaplex": {
    "name": "Metaplex MCP Server",
    "githubLink": "https://github.com/aldrin-labs/metaplex-mcp-server",
    "package": "metaplex-mcp-server",
    "description": "An MCP server for accessing Metaplex documentation and repository information",
    "installCommand": "git clone https://github.com/metaplex-foundation/metaplex-mcp-server.git && cd metaplex-mcp-server && npm install && npm run build && node build/index.js",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After installation, the server runs automatically. For development, use 'npm install' followed by 'npm run build && node build/index.js'",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "supernotes-to-obsidian": {
    "name": "Supernotes to Obsidian",
    "githubLink": "https://github.com/al-how/supernotes-to-obsidian",
    "package": "mcp",
    "description": "A Python script that imports Supernotes exports into Obsidian daily notes using the Model Context Protocol (MCP).",
    "installCommand": "uv venv && source .venv/bin/activate && uv add mcp",
    "requiredEnvVars": [
      "TEMPLATE_PATH",
      "EXPORT_FOLDER",
      "DAILY_NOTES_FOLDER"
    ],
    "optionalParams": [
      "other configuration options available in config.py"
    ],
    "usageInstructions": "1. Configure settings in config.py. 2. Run the script using 'python src/main.py'. Ensure you have Python and uv installed.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "google-sheets": {
    "name": "Google Sheets MCP",
    "githubLink": "https://github.com/akchro/google-sheets-mcp",
    "package": "google-sheets-mcp",
    "description": "MCP integration with Google Sheets allowing LLM to interact with spreadsheets",
    "installCommand": "git clone https://github.com/akchro/google-sheets-mcp && cd google-sheets-mcp && npm install",
    "requiredEnvVars": [
      "GOOGLE_APPLICATION_CREDENTIALS"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Create a new Google Cloud project\n2. Enable Google Drive API\n3. Configure OAuth consent screen\n4. Create OAuth Client ID for 'Desktop App'\n5. Rename OAuth key file to 'credentials.json' and place in project root\n6. Run 'npm start'",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "metal": {
    "name": "Metal MCP Server",
    "githubLink": "https://github.com/aldrin-labs/metal-mcp-server",
    "package": "@modelcontextprotocol/create-server",
    "description": "An MCP server providing Metal Framework documentation search and code generation capabilities.",
    "installCommand": "npx @modelcontextprotocol/create-server metal-mcp && cd metal-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "query",
      "limit",
      "task",
      "language"
    ],
    "usageInstructions": "After installation, add the server to your MCP configuration with the command `node` and the path to `metal-mcp/build/index.js`. Use the provided tools to search Metal documentation, generate code snippets, and access best practices and guides.",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "neurolora": {
    "name": "MCP Neurolora",
    "githubLink": "https://github.com/aindreyway/mcp-neurolora",
    "package": "@aindreyway/mcp-neurolora",
    "description": "An intelligent MCP server that provides tools for code analysis using OpenAI API, code collection, and documentation generation.",
    "installCommand": "npx -y @aindreyway/mcp-neurolora@latest",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "NODE_OPTIONS",
      "codePath",
      "directory",
      "outputPath",
      "ignorePatterns",
      "configPath"
    ],
    "usageInstructions": "1. Install Node.js 18 and uv/uvx as described in the README.\n2. Run `npx -y @aindreyway/mcp-neurolora@latest` to start the server.\n3. Set the `OPENAI_API_KEY` environment variable with your OpenAI API key.\n4. Use the provided tools like `analyze_code`, `collect_code`, and `install_base_servers` by providing the required parameters in JSON format.",
    "category": "AI/ML",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "argocd": {
    "name": "Argo CD MCP Server",
    "githubLink": "https://github.com/akuity/argocd-mcp",
    "package": "argocd-mcp",
    "description": "An implementation of the Model Context Protocol (MCP) server for Argo CD, enabling AI assistants to interact with Argo CD applications through natural language.",
    "installCommand": "npx argocd-mcp@latest stdio",
    "requiredEnvVars": [
      "ARGOCD_BASE_URL",
      "ARGOCD_API_TOKEN"
    ],
    "optionalParams": [
      "NODE_TLS_REJECT_UNAUTHORIZED"
    ],
    "usageInstructions": "1. Set the required environment variables: ARGOCD_BASE_URL and ARGOCD_API_TOKEN.\n2. Optionally set NODE_TLS_REJECT_UNAUTHORIZED=0 if using self-signed certificates.\n3. Run the server using the install command.\n4. Integrate with MCP clients like VS Code, Cursor, or Claude Desktop by configuring the appropriate JSON configuration files.",
    "category": "DevOps",
    "stars": 168,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/72ikxnzgdre.png"
  },
  "solana-docs": {
    "name": "solana-docs-mcp-server",
    "githubLink": "https://github.com/aldrin-labs/solana-docs-mcp-server",
    "package": "@aldrin-labs/solana-docs-mcp-server",
    "description": "A TypeScript-based MCP server implementing a simple notes system with resources, tools for creating notes, and prompts for generating summaries.",
    "installCommand": "npx -y @smithery/cli install @aldrin-labs/solana-docs-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "command path for server config in claude_desktop_config.json"
    ],
    "usageInstructions": "1. Install dependencies with `npm install`. 2. Build the server with `npm run build`. 3. For development, use `npm run watch`. 4. Add the server config to `claude_desktop_config.json` with the path to `build/index.js`. 5. Use `npm run inspector` for debugging via the MCP Inspector.",
    "category": "Development Tools",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "codex-keeper": {
    "name": "Aindreyway MCP Codex Keeper",
    "githubLink": "https://github.com/aindreyway/mcp-codex-keeper",
    "package": "@aindreyway/mcp-codex-keeper",
    "description": "An intelligent MCP server providing AI assistants with curated access to latest documentation and best practices.",
    "installCommand": "npx -y @aindreyway/mcp-codex-keeper@latest",
    "requiredEnvVars": [
      "NODE_OPTIONS"
    ],
    "optionalParams": [
      "npm_config_cache_max"
    ],
    "usageInstructions": "1. Ensure Node.js (version 18 or higher) is installed.\n2. Verify/update npm and npx.\n3. Add the server configuration to your Cline/Sonnet configuration as shown in the README.",
    "category": "Knowledge Management",
    "stars": 70,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "ipfs": {
    "name": "MCP IPFS Server",
    "githubLink": "https://github.com/alexbakers/mcp-ipfs",
    "package": "mcp-ipfs",
    "description": "A Node.js server implementing the Model Context Protocol (MCP) for interacting with the storacha.network platform via the w3 command-line interface.",
    "installCommand": "npm install -g mcp-ipfs",
    "requiredEnvVars": [
      "W3_LOGIN_EMAIL"
    ],
    "optionalParams": [
      "MCP_PORT",
      "MCP_HOST",
      "W3_CONFIG_PATH",
      "W3_SPACE",
      "W3_AGENT",
      "W3_LOG_LEVEL"
    ],
    "usageInstructions": "1. Ensure Node.js 22.0.0+ and @web3-storage/w3cli are installed and configured.\n2. Set the W3_LOGIN_EMAIL environment variable to the email used for w3 login.\n3. Run the server using `npx -y mcp-ipfs` or via Docker with `docker run -i --rm -e W3_LOGIN_EMAIL=your-email@example.com alexbakers/mcp-ipfs`.\n4. Configure your MCP client to connect to this server using the provided JSON configuration examples.",
    "category": "API Integration",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/6trm7uegw2y.png"
  },
  "docs-service": {
    "name": "MCP Documentation Service",
    "githubLink": "https://github.com/alekspetrov/mcp-docs-service",
    "package": "mcp-docs-service",
    "description": "A Model Context Protocol (MCP) implementation for managing markdown documentation with frontmatter metadata, optimized for integration with AI assistants like Claude in Cursor or Claude Desktop.",
    "installCommand": "npm install -g mcp-docs-service",
    "requiredEnvVars": [],
    "optionalParams": [
      "path to documentation directory",
      "recursive flag for listing documents",
      "output filename for consolidated documentation",
      "health check flag"
    ],
    "usageInstructions": "1. Install using `npm install -g mcp-docs-service` or use directly with `npx mcp-docs-service /path/to/docs`.\n2. For Cursor integration, create a `.cursor/mcp.json` file with the MCP server configuration.\n3. For Claude Desktop integration, add the server configuration to the `claude_desktop_config.json` file.\n4. Use natural language commands or direct tool syntax to interact with the server.\n5. Common commands include reading, writing, editing, and searching documents, as well as generating navigation and checking documentation health.\n6. Run health checks with `npx mcp-docs-service --health-check /path/to/docs`.\n7. Generate consolidated documentation for LLMs with `npx mcp-docs-service --single-doc /path/to/docs`.",
    "category": "Documentation Management",
    "stars": 34,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "email": {
    "name": "MCP Email Server",
    "githubLink": "https://github.com/ai-zerolab/mcp-email-server",
    "package": "mcp-email-server",
    "description": "IMAP and SMTP server via MCP protocol for email integration",
    "installCommand": "uvx mcp-email-server@latest ui",
    "requiredEnvVars": [],
    "optionalParams": [
      "email configuration parameters through UI"
    ],
    "usageInstructions": "1. Run 'uvx mcp-email-server@latest ui' to configure email server\n2. Configure email settings through the UI\n3. Integrate with Claude Desktop or other MCP clients using the generated configuration",
    "category": "Communication",
    "stars": 46,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "harvest": {
    "name": "Harvest Natural Language Time Entry MCP Server",
    "githubLink": "https://github.com/adrian-dotco/harvest-mcp-server",
    "package": "harvest-mcp-server",
    "description": "An MCP server for logging Harvest time entries using natural language with special handling for leave requests.",
    "installCommand": "git clone https://github.com/adrian-dotco/harvest-mcp-server.git && cd harvest-mcp-server && npm install && npm run build && node build/setup.js",
    "requiredEnvVars": [
      "HARVEST_ACCESS_TOKEN",
      "HARVEST_ACCOUNT_ID"
    ],
    "optionalParams": [
      "STANDARD_WORK_DAY_HOURS",
      "TIMEZONE"
    ],
    "usageInstructions": "After installation, restart Claude desktop app. Use natural language to log time entries, get time reports, list projects, tasks, and view recent time entries. Configure environment variables HARVEST_ACCESS_TOKEN, HARVEST_ACCOUNT_ID, STANDARD_WORK_DAY_HOURS, and TIMEZONE as needed.",
    "category": "Productivity",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "agentrpc": {
    "name": "AgentRPC",
    "githubLink": "https://github.com/agentrpc/agentrpc",
    "package": "agentrpc",
    "description": "Universal RPC layer for AI agents across network boundaries and languages",
    "installCommand": "npx -y agentrpc mcp",
    "requiredEnvVars": [
      "AGENTRPC_API_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Set AGENTRPC_API_SECRET environment variable\n2. Run 'npx -y agentrpc mcp' to launch MCP server\n3. Configure Claude Desktop or Cursor by adding mcpServers configuration with command 'npx', args: ['-y', 'agentrpc', 'mcp'], and env: {'AGENTRPC_API_SECRET': '<YOUR_API_SECRET>'}",
    "category": "API Integration",
    "stars": 100,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/itlj0rrti3.ico"
  },
  "lance": {
    "name": "LanceDB MCP Server for LLMS",
    "githubLink": "https://github.com/adiom-data/lance-mcp",
    "package": "lance-mcp",
    "description": "An MCP server enabling LLMs to interact with documents through RAG and hybrid search in LanceDB.",
    "installCommand": "npx lance-mcp PATH_TO_LOCAL_INDEX_DIR",
    "requiredEnvVars": [],
    "optionalParams": [
      "PATH_TO_LOCAL_INDEX_DIR",
      "OLLAMA_MODEL_CONFIG"
    ],
    "usageInstructions": "1. Create a local directory for the index.\n2. Configure Claude Desktop config file with 'lancedb' MCP server settings.\n3. Ensure Node.js18+ and npx are installed.\n4. Pull required models: 'ollama pull snowflake-arctic-embed2' and 'ollama pull llama3.1:8b'.\n5. Use 'npm run seed' to initialize the database with documents.",
    "category": "AI/ML",
    "stars": 63,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "git-ingest": {
    "name": "MCP Git Ingest",
    "githubLink": "https://github.com/adhikasp/mcp-git-ingest",
    "package": "mcp-git-ingest",
    "description": "An MCP server that reads GitHub repository structure and important files",
    "installCommand": "uvx --from git+https://github.com/adhikasp/mcp-git-ingest mcp-git-ingest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Using mcp-client-cli: 'llm read https://github.com/adhikasp/mcp-git-ingest' to analyze repository structure and files. Requires Python3.8+ and uvx for installation.",
    "category": "Development Tools",
    "stars": 252,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "resource-hub": {
    "name": "resource-hub-server",
    "githubLink": "https://github.com/adamwattis/resource-hub-server",
    "package": "@adamwattis/resource-hub-server",
    "description": "An MCP server that connects to the Resource Hub for centralized configuration and management of MCP servers.",
    "installCommand": "npm install @adamwattis/resource-hub-server",
    "requiredEnvVars": [
      "RESOURCE_HUB_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "To run the server, set the RESOURCE_HUB_TOKEN environment variable with your Resource Hub token and execute the server using `npx @adamwattis/resource-hub-server`. For development, install dependencies with `npm install`, build with `npm run build`, and start with `npm start`. To use with Claude Desktop, add the server configuration to the appropriate config file as described in the README.",
    "category": "Configuration Management",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "scholarly": {
    "name": "mcp-scholarly",
    "githubLink": "https://github.com/adityak74/mcp-scholarly",
    "package": "mcp-scholarly",
    "description": "An MCP server to search for accurate academic articles, currently supporting arXiv.",
    "installCommand": "npx -y @smithery/cli install mcp-scholarly --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "keyword"
    ],
    "usageInstructions": "1. Install via the provided command or configure manually using uvx or Docker. 2. Use the 'search-arxiv' tool by providing a 'keyword' argument to search for academic articles. 3. For development, build and publish the package using uv commands. 4. Debug using the MCP Inspector for detailed server inspection.",
    "category": "Web Scraping",
    "stars": 127,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "tenki": {
    "name": "Tenki MCP Server",
    "githubLink": "https://github.com/acxelerator/mcp-tenki",
    "package": "mcp-tenki",
    "description": "An MCP server providing weather information for Japan",
    "installCommand": "uvx --from git+https://github.com/acxelerator/mcp-tenki.git mcp-tenki",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To run the server without cloning, use the provided JSON configuration. To run with clone, clone the repository and use 'uv run main.py' in the repository directory.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "twikit": {
    "name": "MCP-Twikit",
    "githubLink": "https://github.com/adhikasp/mcp-twikit",
    "package": "mcp-twikit",
    "description": "An MCP server that enables interaction with Twitter, allowing users to search tweets, analyze sentiment, and retrieve timelines.",
    "installCommand": "npx -y @smithery/cli install mcp-twikit --client claude",
    "requiredEnvVars": [
      "TWITTER_USERNAME",
      "TWITTER_EMAIL",
      "TWITTER_PASSWORD"
    ],
    "optionalParams": [
      "TWITTER_SESSION_COOKIE",
      "TWITTER_CSRF_TOKEN",
      "TWITTER_AUTH_TOKEN"
    ],
    "usageInstructions": "After installation, use the `llm` command-line interface to interact with the server. For example, use `llm compare 20 latest tweet directed @IndiHomeCare, @di_cbn, @BiznetHome, @ID_MyRepublic` to analyze sentiment across Twitter accounts. Ensure Twitter credentials are set in environment variables for authentication.",
    "category": "API Integration",
    "stars": 181,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "datahub": {
    "name": "MCP Server for DataHub",
    "githubLink": "https://github.com/acryldata/mcp-server-datahub",
    "package": "mcp-server-datahub",
    "description": "A Model Context Protocol (MCP) server implementation for DataHub, enabling metadata search, lineage traversal, and SQL query listing.",
    "installCommand": "pip install mcp-server-datahub",
    "requiredEnvVars": [
      "DATAHUB_API_TOKEN",
      "DATAHUB_GRAPHQL_URL"
    ],
    "optionalParams": [
      "MCP_SERVER_PORT",
      "MCP_SERVER_HOST",
      "LOG_LEVEL"
    ],
    "usageInstructions": "After installation, set the required environment variables DATAHUB_API_TOKEN and DATAHUB_GRAPHQL_URL. Start the server using the provided command in the DataHub MCP server documentation. For development, refer to DEVELOPING.md for setup instructions.",
    "category": "Data Storage",
    "stars": 41,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "gsc": {
    "name": "Google Search Console MCP Server",
    "githubLink": "https://github.com/ahonn/mcp-server-gsc",
    "package": "mcp-server-gsc",
    "description": "A Model Context Protocol (MCP) server providing access to Google Search Console for retrieving search analytics data with customizable reporting periods.",
    "installCommand": "npm install mcp-server-gsc",
    "requiredEnvVars": [
      "GOOGLE_APPLICATION_CREDENTIALS"
    ],
    "optionalParams": [
      "dimensions",
      "type",
      "aggregationType",
      "rowLimit"
    ],
    "usageInstructions": "1. Create a Google Cloud Project and enable the Search Console API. 2. Generate Service Account credentials and grant access in Search Console. 3. Set the GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of your credentials file. 4. Configure the server in your application using the provided JSON configuration format.",
    "category": "API Integration",
    "stars": 35,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "configurable-puppeteer": {
    "name": "Configurable Puppeteer MCP Server",
    "githubLink": "https://github.com/afshawnlotfi/mcp-configurable-puppeteer",
    "package": "github:afshawnlotfi/mcp-configurable-puppeteer",
    "description": "A Model Context Protocol server that provides browser automation capabilities using Puppeteer with configurable options. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.",
    "installCommand": "npx -y github:afshawnlotfi/mcp-configurable-puppeteer",
    "requiredEnvVars": [],
    "optionalParams": [
      "PUPPETEER_ARGS"
    ],
    "usageInstructions": "1. Install using the provided command\n2. Configure Puppeteer options using the PUPPETEER_ARGS environment variable with a JSON string\n3. Use the available tools (navigate, screenshot, click, hover, fill, select, evaluate) to interact with web pages\n4. Access resources like console logs (console://logs) and screenshots (screenshot://<name>)\n5. For advanced configuration, see the examples in the README for browser selection, viewport size, and other Puppeteer options",
    "category": "Browser Automation",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "servers-kagi": {
    "name": "Kagi MCP Server",
    "githubLink": "https://github.com/ac3xx/mcp-servers-kagi",
    "package": "@smithery/cli",
    "description": "MCP server for Kagi API integration, providing tools for web searches and other operations",
    "installCommand": "npx @smithery/cli install kagi-server --client claude",
    "requiredEnvVars": [
      "KAGI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install using Smithery CLI. 2. Configure Claude Desktop by adding server config to claude_desktop_config.json. 3. Use with Claude to perform web searches.",
    "category": "API Integration",
    "stars": 35,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "alfresco-poc": {
    "name": "Alfresco MCP Proof of Concept",
    "githubLink": "https://github.com/aborroy/alfresco-mcp-poc",
    "package": "alfresco-mcp-server",
    "description": "A Node.js-based MCP server integrating Alfresco Content Services with AI capabilities",
    "installCommand": "git clone https://github.com/aborroy/alfresco-mcp-poc.git && cd alfresco-mcp-poc/alfresco && docker-compose up --build --force-recreate",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone repository and navigate to project directory\n2. Start Alfresco using Docker Compose: cd alfresco && docker-compose up --build --force-recreate\n3. Verify Alfresco deployment at http://localhost:8080/share\n4. Start Ollama server: ollama serve\n5. Navigate to client directory and run MCP client: cd ../alfresco-mcp-client && mvn clean package && java -jar target/alfresco-mcp-client-0.8.0.jar",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "arithmetic": {
    "name": "Arithmetic MCP Server",
    "githubLink": "https://github.com/YuheiNakasaka/arithmetic-mcp-server",
    "package": "arithmetic-mcp-server",
    "description": "An MCP server providing basic arithmetic operations (addition, subtraction, multiplication, division).",
    "installCommand": "git clone https://github.com/YuheiNakasaka/arithmetic-mcp-server.git && cd arithmetic-mcp-server && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and install dependencies using npm. 2. Configure Claude Desktop App by editing claude_desktop_config.json. 3. Use arithmetic operations through Cline prompts.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "kusto": {
    "name": "Kusto MCP Server",
    "githubLink": "https://github.com/ZZZHDW/mcp-server-kusto",
    "package": "mcp-server-kusto",
    "description": "An MCP server providing access to Azure Data Explorer (ADX) clusters with various query and schema operations.",
    "installCommand": "uv pip install mcp-server-kusto",
    "requiredEnvVars": [
      "ADX_CLUSTER_URL"
    ],
    "optionalParams": [
      "AUTHORITY_ID",
      "CLIENT_ID",
      "CLIENT_SECRET"
    ],
    "usageInstructions": "1. Install using 'uv pip install mcp-server-kusto'. 2. Configure claude_desktop_config.json with the appropriate command and args. For local ADX emulator, use cluster URL like https://localhost:8082. For production ADX, provide --authority_id, --client_id, and --client_secret.",
    "category": "Data Storage",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "dify": {
    "name": "Dify MCP Server",
    "githubLink": "https://github.com/YanxingLiu/dify-mcp-server",
    "package": "dify-mcp-server",
    "description": "An MCP server implementation for invoking Dify workflows through MCP tools.",
    "installCommand": "uvx --from git+https://github.com/YanxingLiu/dify-mcp-server dify_mcp_server",
    "requiredEnvVars": [
      "DIFY_BASE_URL",
      "DIFY_APP_SKS"
    ],
    "optionalParams": [
      "CONFIG_PATH"
    ],
    "usageInstructions": "1. Install using 'uvx --from git+https://github.com/YanxingLiu/dify-mcp-server dify_mcp_server'. 2. Configure using either environment variables (DIFY_BASE_URL, DIFY_APP_SKS) or a config.yaml file (specified via CONFIG_PATH). 3. Run the server.",
    "category": "AI/ML",
    "stars": 246,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "literature-memory-fastmcp": {
    "name": "Literature Memory Server",
    "githubLink": "https://github.com/YUZongmin/literature-memory-server-fastmcp-mcp",
    "package": "fastmcp",
    "description": "A flexible system for managing various types of sources and integrating them with knowledge graphs.",
    "installCommand": "fastmcp install source-manager-server.py --name \"Source Manager\" -e SQLITE_DB_PATH=/path/to/sources.db && sqlite3 sources.db < create_sources_db.sql",
    "requiredEnvVars": [
      "SQLITE_DB_PATH"
    ],
    "optionalParams": [
      "name"
    ],
    "usageInstructions": "1. Create a SQLite database using the provided schema. 2. Install the source management server using fastmcp with the SQLITE_DB_PATH environment variable set to your database path.",
    "category": "Knowledge Management",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "scrapbox": {
    "name": "scrapbox-mcp",
    "githubLink": "https://github.com/YuheiNakasaka/scrapbox-mcp",
    "package": "scrapbox-mcp",
    "description": "A Model Context Protocol (MCP) server that provides a simple notes system with tools for creating notes and prompts for summarizing them.",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone or download the repository. 2. Run `npm install` to install dependencies. 3. Run `npm run build` to build the server. 4. Configure the server in the Claude Desktop config file as described in the README. 5. Use the `npm run inspector` command for debugging via the MCP Inspector.",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "metasearch": {
    "name": "metasearch MCP server",
    "githubLink": "https://github.com/YeonwooSung/metasearch-mcp",
    "package": "metasearch-mcp",
    "description": "A Model Context Protocol (MCP) server that uses the Tavily API to perform searches and return results in text format, including AI responses, URIs, and titles.",
    "installCommand": "git clone https://github.com/YeonwooSung/metasearch-mcp.git && cd metasearch-mcp && docker compose up -d",
    "requiredEnvVars": [
      "TAVILY_API_KEY"
    ],
    "optionalParams": [
      "PYTHONIOENCODING",
      "search_depth"
    ],
    "usageInstructions": "1. Clone the repository and navigate to the directory. 2. Set the TAVILY_API_KEY environment variable with your API key. 3. Use Docker Compose to run the server. 4. In Claude Desktop or Cursor, ask for searches like 'Please search for something' to get results. Logs are stored in the specified directories depending on the OS.",
    "category": "API Integration",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "memory-manager": {
    "name": "Memory MCP Manager",
    "githubLink": "https://github.com/YUZongmin/memory-mcp-manager",
    "package": "memory-mcp-manager",
    "description": "A tool to manage and switch between different memory paths for Claude clients using the mcp-knowledge-graph server.",
    "installCommand": "git clone https://github.com/YUZongmin/memory-mcp-manager.git && cd memory-mcp-manager && chmod +x memory.sh",
    "requiredEnvVars": [],
    "optionalParams": [
      "name",
      "config_path",
      "path",
      "memory_paths"
    ],
    "usageInstructions": "1. Clone the repository and make the script executable. 2. Initialize with `./memory.sh init`. 3. Add a Claude client with `./memory.sh add-client <name> <config_path>`. 4. Add memory paths with `./memory.sh add <name> <path>`. 5. Switch memory paths with `./memory.sh switch <name>`. Configuration is stored in `config.json`.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "gatherings-python": {
    "name": "Gatherings MCP Server",
    "githubLink": "https://github.com/abutbul/gatherings-mcp-python",
    "package": "gatherings-mcp-server",
    "description": "A Model Context Protocol server for managing gatherings and expense sharing between participants",
    "installCommand": "git clone https://your-repository.git && cd accel && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "GATHERINGS_DB_PATH (custom database location)",
      "GATHERINGS_SCRIPT (custom script location)"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies\n2. Set optional environment variables for custom paths\n3. Start the server with: python gatherings_mcp_server.py\n4. Use the exposed API tools to create gatherings, add expenses, calculate reimbursements, and manage payments",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "onesignal": {
    "name": "OneSignal MCP Server",
    "githubLink": "https://github.com/WeirdBrains/onesignal-mcp",
    "package": "onesignal-mcp",
    "description": "A comprehensive Model Context Protocol (MCP) server for interacting with the OneSignal API, providing 57 tools for managing push notifications, emails, SMS, users, devices, segments, templates, analytics, and more.",
    "installCommand": "git clone https://github.com/weirdbrains/onesignal-mcp.git && cd onesignal-mcp && pip install -r requirements.txt",
    "requiredEnvVars": [
      "ONESIGNAL_APP_ID",
      "ONESIGNAL_API_KEY",
      "ONESIGNAL_ORG_API_KEY"
    ],
    "optionalParams": [
      "LOG_LEVEL",
      "ONESIGNAL_MANDIBLE_APP_ID",
      "ONESIGNAL_MANDIBLE_API_KEY",
      "ONESIGNAL_WEIRDBRAINS_APP_ID",
      "ONESIGNAL_WEIRDBRAINS_API_KEY"
    ],
    "usageInstructions": "1. Create a .env file with required OneSignal credentials. 2. Run 'python onesignal_server.py' to start the server. The server will register itself with the MCP system, making all 57 tools available for use.",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "opendal": {
    "name": "Model Context Protocol Server for Apache OpenDAL",
    "githubLink": "https://github.com/Xuanwo/mcp-server-opendal",
    "package": "mcp-server-opendal",
    "description": "An MCP server implementation that provides access to various storage services via Apache OpenDAL, including S3, Azure Blob Storage, and Google Cloud Storage.",
    "installCommand": "pip install mcp-server-opendal",
    "requiredEnvVars": [
      "OPENDAL_<SERVICE_ALIAS>_TYPE",
      "OPENDAL_<SERVICE_ALIAS>_BUCKET",
      "OPENDAL_<SERVICE_ALIAS>_REGION",
      "OPENDAL_<SERVICE_ALIAS>_ENDPOINT",
      "OPENDAL_<SERVICE_ALIAS>_ACCESS_KEY_ID",
      "OPENDAL_<SERVICE_ALIAS>_SECRET_ACCESS_KEY"
    ],
    "optionalParams": [
      "YOUR_ENV_VAR",
      "OPENDAL_<SERVICE_ALIAS>_OTHER_PARAMETERS"
    ],
    "usageInstructions": "1. Install the package using pip install mcp-server-opendal.\n2. Configure storage services by setting environment variables with the appropriate prefix and service-specific options.\n3. Add the server to your claude_desktop_config.json with the command uvx mcp-server-opendal and any required environment variables.\n4. Use the configured storage service with tools like 'read' and 'list' by referencing the alias and path (e.g., mys3://path/to/file).\n5. For development, use npx @modelcontextprotocol/inspector uv run mcp-server-opendal.",
    "category": "Data Storage",
    "stars": 31,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "apptio-target-process": {
    "name": "Targetprocess MCP Server",
    "githubLink": "https://github.com/aaronsb/apptio-target-process-mcp",
    "package": "https://github.com/aaronsb/apptio-target-process-mcp.git",
    "description": "Enables AI assistants to interact with Targetprocess data through intelligent semantic operations, workflow-aware tools, and role-based filtering.",
    "installCommand": "npx -y https://github.com/aaronsb/apptio-target-process-mcp.git",
    "requiredEnvVars": [
      "TP_DOMAIN",
      "TP_USERNAME",
      "TP_PASSWORD"
    ],
    "optionalParams": [
      "TP_USER_ROLE",
      "TP_USER_ID",
      "TP_USER_EMAIL",
      "MCP_STRICT_MODE"
    ],
    "usageInstructions": "1. Set the required environment variables: TP_DOMAIN, TP_USERNAME, TP_PASSWORD.\n2. Optionally set TP_USER_ROLE, TP_USER_ID, TP_USER_EMAIL for semantic operations.\n3. Enable MCP_STRICT_MODE for MCP clients requiring clean JSON-RPC on stdio.\n4. Run the server using npx or Docker as shown in the installation command.\n5. Integrate with tools like Claude Code or MCP clients for full functionality.",
    "category": "Project Management",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "api-tester": {
    "name": "API Tester MCP Server",
    "githubLink": "https://github.com/Vikrant-Khedkar/api-tester-mcp",
    "package": "mcp",
    "description": "An MCP server for testing APIs, including OpenAI's GPT models and DALL-E image generation.",
    "installCommand": "pip install \"mcp[cli]\" httpx python-dotenv",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Set OPENAI_API_KEY using 'export OPENAI_API_KEY=your-api-key' (or equivalent for your OS). Alternatively, create a .env file with OPENAI_API_KEY=your_openai_api_key_here. 2. Run the server using 'python main.py'. 3. Configure Claude Desktop to connect to this server.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "dbmcp": {
    "name": "DBMCP (Database MCP Server)",
    "githubLink": "https://github.com/Verssae/dbmcp",
    "package": "dbmcp",
    "description": "MCP server for executing database queries through SSE",
    "installCommand": "git clone https://github.com/Verssae/dbmcp && cd dbmcp && uv sync && python server.py",
    "requiredEnvVars": [
      "MSSQL_HOST",
      "MSSQL_USER",
      "MSSQL_PASSWORD",
      "MSSQL_PORT"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Set environment variables in .env file\n2. Run with Docker using 'docker-compose up -d' or locally with 'python server.py'\n3. Configure MCP client with 'http://localhost:8080/sse'",
    "category": "Databases",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "uns": {
    "name": "Unstructured API MCP Server",
    "githubLink": "https://github.com/Unstructured-IO/UNS-MCP",
    "package": "uns-mcp",
    "description": "An MCP server implementation for interacting with the Unstructured API, providing tools to list sources and workflows.",
    "installCommand": "pip install uns-mcp",
    "requiredEnvVars": [
      "ANTHROPIC_API_KEY",
      "AWS_KEY",
      "AWS_SECRET",
      "WEAVIATE_CLOUD_API_KEY",
      "ASTRA_DB_APPLICATION_TOKEN",
      "ASTRA_DB_API_ENDPOINT",
      "AZURE_CONNECTION_STRING"
    ],
    "optionalParams": [
      "AZURE_ACCOUNT_NAME",
      "AZURE_ACCOUNT_KEY",
      "AZURE_SAS_TOKEN",
      "FIRECRAWL_API_KEY"
    ],
    "usageInstructions": "Create a .env file with required credentials for connectors, then run the server. Refer to documentation for specific connector configurations.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "google-ads-js": {
    "name": "Google Ads MCP (Node.js)",
    "githubLink": "https://github.com/TrueClicks/google-ads-mcp-js",
    "package": "@trueclicks/google-ads-mcp-js",
    "description": "Unofficial Google Ads MCP integration that enables AI to access Google Ads account data using GAQL.app as backend.",
    "installCommand": "npx -y @trueclicks/google-ads-mcp-js",
    "requiredEnvVars": [
      "GPT_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install Node.js. 2. Get GPT Token from GAQL.app. 3. Configure Claude by editing claude_desktop_config.json with the token. 4. Restart Claude.",
    "category": "AI/ML",
    "stars": 20,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "chatgpt": {
    "name": "ChatGPT MCP Server",
    "githubLink": "https://github.com/Toowiredd/chatgpt-mcp-server",
    "package": "@Toowiredd/chatgpt-mcp-server",
    "description": "An MCP server providing Docker management through natural language interface",
    "installCommand": "npx -y @smithery/cli install @Toowiredd/chatgpt-mcp-server --client claude",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "HTTP_PORT",
      "RATE_LIMIT_REQUESTS",
      "RATE_LIMIT_WINDOW"
    ],
    "usageInstructions": "1. Install via Smithery or manually clone the repository and run 'npm install'. 2. Create .env file from env.example. 3. Configure environment variables. 4. Build with 'npm run build'. 5. Run using Docker or 'npm run start'.",
    "category": "DevOps",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "sandbox": {
    "name": "Sandbox MCP Server",
    "githubLink": "https://github.com/Tsuchijo/sandbox-mcp",
    "package": "sandbox-mcp",
    "description": "An MCP server that provides isolated Docker environments for code execution, allowing users to create containers, write and execute code in multiple languages, and manage development environments.",
    "installCommand": "git clone https://github.com/Tsuchijo/sandbox-mcp && cd sandbox-mcp && uv venv && source .venv/bin/activate && uv pip install .",
    "requiredEnvVars": [
      "PYTHONPATH"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "DOCKER_TIMEOUT",
      "MAX_CONTAINER_LIFETIME"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using the provided install command. 2. Configure the server in Claude Desktop by adding the sandbox server configuration to the claude_desktop_config.json file. 3. Use Claude Desktop to create containers, run code, install packages, and manage environments. 4. Save and reproduce environments by creating persistent containers, saving container states as Docker images, or generating Dockerfiles.",
    "category": "Development Tools",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "triplewhale": {
    "name": "Triplewhale MCP Server",
    "githubLink": "https://github.com/Triple-Whale/mcp-server-triplewhale",
    "package": "@triplewhale/mcp-server-triplewhale",
    "description": "An MCP Server for Triplewhale that allows natural language queries to be executed against Triplewhale data using tools like Claude Desktop.",
    "installCommand": "npx -y @smithery/cli install triplewhale --client claude",
    "requiredEnvVars": [
      "TRIPLEWHALE_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install the server using the provided install command.\n2. Generate a Triplewhale API key from the Triplewhale console.\n3. Initialize the server with `npx -y @triplewhale/mcp-server-triplewhale init $TRIPLEWHALE_API_KEY`.\n4. Restart Claude Desktop to use the server for natural language queries against Triplewhale data.",
    "category": "AI/ML",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "weatherxm-pro": {
    "name": "WeatherXM PRO MCP Server",
    "githubLink": "https://github.com/WeatherXM/weatherxm-pro-mcp",
    "package": "weatherxm-pro-mcp",
    "description": "An MCP server implementation exposing the WeatherXM PRO APIs as MCP tools, allowing clients to access weather station data, observations, and forecasts through the MCP protocol.",
    "installCommand": "git clone https://github.com/WeatherXM/weatherxm-pro-mcp.git && cd weatherxm-pro-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "WEATHERXMPRO_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with 'npm install'.\n2. Build the project with 'npm run build'.\n3. Configure the MCP client (e.g., Claude Desktop, Cursor, Windsurf Editor) with the provided JSON configuration, ensuring the 'WEATHERXMPRO_API_KEY' is set.\n4. For Docker usage, build the image with 'docker build -t weatherxm-pro-mcp .' and run it with 'docker run -d -p 3000:3000 -e WEATHERXMPRO_API_KEY=\"your-api-key\" -e PORT=3000 weatherxm-pro-mcp'.",
    "category": "API Integration",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/92c0qotp2m7.png"
  },
  "twitch": {
    "name": "Twitch MCP Server",
    "githubLink": "https://github.com/TomCools/twitch-mcp",
    "package": "be.tomcools:twitch-mcp",
    "description": "A Model Context Protocol (MCP) server that integrates with Twitch chat, allowing interaction with Claude and other AI tools.",
    "installCommand": "mvn install && jbang --quiet -Dtwitch.channel=YOUR_CHANNEL_NAME -Dtwitch.auth=YOUR_API_KEY be.tomcools:twitch-mcp:1.0.0-SNAPSHOT:runner",
    "requiredEnvVars": [
      "twitch.channel",
      "twitch.auth"
    ],
    "optionalParams": [
      "debug",
      "log.level",
      "chat.maxMessages",
      "ai.model"
    ],
    "usageInstructions": "1. Build the project locally with `mvn install`. 2. Install JBang if not already installed. 3. Run the server using the provided command with your Twitch channel name and API key. 4. Use the MCP Inspector or integrate with Claude Desktop as described in the configuration examples.",
    "category": "Communication",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "memgpt": {
    "name": "MemGPT MCP Server",
    "githubLink": "https://github.com/Vic563/Memgpt-MCP-Server",
    "package": "memgpt-mcp-server",
    "description": "A TypeScript-based MCP server that implements a memory system for LLMs, allowing chat with multiple LLM providers while maintaining conversation history.",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "OPENROUTER_API_KEY"
    ],
    "optionalParams": [
      "limit",
      "provider",
      "model",
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install dependencies with `npm install`. 2. Build the server with `npm run build`. 3. Set required environment variables (OPENAI_API_KEY, ANTHROPIC_API_KEY, OPENROUTER_API_KEY). 4. Configure the server in `claude_desktop_config.json` for use with Claude Desktop. 5. Use tools like `chat`, `get_memory`, `clear_memory`, `use_provider`, and `use_model` to interact with the server.",
    "category": "AI/ML",
    "stars": 25,
    "lastStarUpdate": "2025-07-07T15:28:25.051Z",
    "logo": ""
  },
  "clickhouse": {
    "name": "ClickHouse MCP Server",
    "githubLink": "https://github.com/ThomAub/clickhouse",
    "package": "clickhouse_mcp_server",
    "description": "An MCP server for ClickHouse, enabling integration with LLMs and AI applications.",
    "installCommand": "git clone https://github.com/ThomAub/clickhouse_mcp_server.git && cd clickhouse_mcp_server && uv sync --all-extras",
    "requiredEnvVars": [
      "CLICKHOUSE_CONNECTION_DETAILS"
    ],
    "optionalParams": [
      "port",
      "log_level",
      "timeout"
    ],
    "usageInstructions": "1. Set ClickHouse connection details in environment variables or update get_clickhouse_client in server.py. 2. Run: python clickhouse_mcp_server/server.py",
    "category": "Databases",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "verodat": {
    "name": "Verodat MCP Server",
    "githubLink": "https://github.com/Verodat/verodat-mcp-server",
    "package": "@Verodat/verodat-mcp-server",
    "description": "A Model Context Protocol (MCP) server implementation for Verodat, enabling AI systems like Claude Desktop to interact with Verodat's data management capabilities through well-defined tools for data consumption, design, and management.",
    "installCommand": "npx -y @smithery/cli install @Verodat/verodat-mcp-server --client claude",
    "requiredEnvVars": [
      "VERODAT_AI_API_KEY"
    ],
    "optionalParams": [
      "VERODAT_API_BASE_URL"
    ],
    "usageInstructions": "1. Install via Smithery using the command: `npx -y @smithery/cli install @Verodat/verodat-mcp-server --client claude`. 2. Alternatively, clone the repository and run `npm install && npm run build`. 3. Configure Claude Desktop by adding the server configuration to the appropriate JSON file (MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`, Windows: `%APPDATA%/Claude/claude_desktop_config.json`). 4. Set the required environment variable `VERODAT_AI_API_KEY` with your Verodat API key. 5. Optionally set `VERODAT_API_BASE_URL` if using a custom API endpoint. 6. Select the appropriate server configuration (`consume.js`, `design.js`, or `manage.js`) based on your required tool category.",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "devops-bridge": {
    "name": "MCP Server Multi Tools",
    "githubLink": "https://github.com/TheApeMachine/mcp-server-devops-bridge",
    "package": "mcp-server-multi-tools",
    "description": "A powerful MCP server that integrates AI agents with DevOps and communication tools through a standardized interface.",
    "installCommand": "git clone https://github.com/theapemachine/mcp-server-multi-tools.git && cd mcp-server-devops-bridge && go build -o mcp-server-multi-tools .",
    "requiredEnvVars": [
      "Azure DevOps token",
      "Slack token",
      "other service credentials"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "DEBUG"
    ],
    "usageInstructions": "1. Clone the repository and build the server. 2. Configure environment variables in start.sh. 3. Configure MCP client in Claude Desktop configuration.",
    "category": "DevOps",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "axiom-js": {
    "name": "MCP Server for Axiom",
    "githubLink": "https://github.com/ThetaBird/mcp-server-axiom-js",
    "package": "mcp-server-axiom",
    "description": "A JavaScript MCP server enabling AI agents to query Axiom data using APL",
    "installCommand": "npm install -g mcp-server-axiom",
    "requiredEnvVars": [
      "AXIOM_TOKEN",
      "AXIOM_ORG_ID"
    ],
    "optionalParams": [
      "AXIOM_URL",
      "AXIOM_QUERY_RATE",
      "AXIOM_QUERY_BURST",
      "AXIOM_DATASETS_RATE",
      "AXIOM_DATASETS_BURST",
      "PORT"
    ],
    "usageInstructions": "1. Install using 'npm install -g mcp-server-axiom'. 2. Set AXIOM_TOKEN and AXIOM_ORG_ID environment variables. 3. Run 'mcp-server-axiom' to start the server. Optional: Create a config.json with token, url, orgId, queryRate, queryBurst, datasetsRate, datasetsBurst for alternative configuration.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "grants": {
    "name": "Grants Search MCP Server",
    "githubLink": "https://github.com/Tar-ive/grants-mcp",
    "package": "@modelcontextprotocol/sdk",
    "description": "An MCP server for searching government grants using the Simpler Grants API.",
    "installCommand": "git clone https://github.com/Tar-ive/grants-mcp && cd grants-mcp && npm install",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "query",
      "page",
      "grantsPerPage"
    ],
    "usageInstructions": "1. Clone the repository and navigate to the project directory.\n2. Run 'npm install' to install dependencies.\n3. Set the API_KEY environment variable with your Simpler Grants API key.\n4. Start the server with 'npm start'.\n5. Connect using an MCP client (e.g., Claude Desktop) and use the 'search-grants' tool.",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "k8s-interactive": {
    "name": "k8s-interactive-mcp",
    "githubLink": "https://github.com/TaichiHo/k8s-interactive-mcp",
    "package": "k8s-interactive-mcp",
    "description": "MCP server for running Kubernetes commands with kubeconfig support",
    "installCommand": "git clone https://github.com/TaichiHo/k8s-interactive-mcp && cd k8s-interactive-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "kubeconfig path"
    ],
    "usageInstructions": "1. Clone repository and cd into it\n2. Run 'npm install' to install dependencies\n3. Run 'npm run build' to build the server\n4. Configure Claude Desktop by adding server config to claude_desktop_config.json\n5. For development, use 'npm run watch' for auto-rebuild\n6. For debugging, run 'npm run inspector'",
    "category": "DevOps",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "uml": {
    "name": "UML-MCP-Server",
    "githubLink": "https://github.com/Swayingleaves/uml-mcp-server",
    "package": "@Swayingleaves/uml-mcp-server",
    "description": "UML diagram generation tool based on MCP that generates diagrams from natural language or PlantUML code.",
    "installCommand": "npx -y @smithery/cli install @Swayingleaves/uml-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "output_dir",
      "command",
      "args"
    ],
    "usageInstructions": "1. Install via Smithery using 'npx -y @smithery/cli install @Swayingleaves/uml-mcp-server --client claude'. 2. For manual installation: clone repository, create virtual environment, and install dependencies with 'pip install -r requirements.txt'. 3. Configure MCP in Cursor IDE by modifying config.json with server details.",
    "category": "Development Tools",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "uniprot": {
    "name": "UniProt MCP Server",
    "githubLink": "https://github.com/TakumiY235/uniprot-mcp-server",
    "package": "uniprot-mcp-server",
    "description": "A Model Context Protocol (MCP) server that provides access to UniProt protein information, allowing AI assistants to fetch protein function and sequence data.",
    "installCommand": "git clone https://github.com/TakumiY235/uniprot-mcp-server.git && cd uniprot-mcp-server && uv pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "path/to/uniprot-mcp-server (custom directory path for execution)"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Add the server configuration to your Claude Desktop config file under the 'mcpServers' section. 3. Use the server in Claude Desktop by asking for protein information using UniProt accession numbers. For development, create a virtual environment and install development dependencies with 'pip install -e .[dev]'.",
    "category": "API Integration",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "perplexity-insight": {
    "name": "Perplexity Insight MCP Server",
    "githubLink": "https://github.com/TheoLawrence86/perplexity-insight-MCP",
    "package": "perplexity-insight-MCP",
    "description": "An MCP server implementation for interfacing with the Perplexity AI API, providing advanced question answering capabilities through the standardised Model Context Protocol.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "PERPLEXITY_API_KEY"
    ],
    "optionalParams": [
      "model",
      "system prompt",
      "max tokens"
    ],
    "usageInstructions": "1. Create a `.env` file with your Perplexity API key. 2. Run `npm start` to start the server. 3. Use the `perplexity_ask` and `perplexity_search` tools with optional parameters like model, system prompt, and max tokens. 4. For Windsurf integration, configure the MCP server with the correct command, arguments, and environment variables.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "fetch-browser": {
    "name": "Fetch Browser",
    "githubLink": "https://github.com/TheSethRose/Fetch-Browser",
    "package": "@TheSethRose/fetch-browser",
    "description": "A headless browser MCP server that enables AI agents to fetch web content and perform Google searches without requiring API keys.",
    "installCommand": "npx -y @smithery/cli install @TheSethRose/fetch-browser --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "responseType (markdown, json, html, text)",
      "maxResults (1-100 for Google Search)",
      "topic (web, news for Google Search)",
      "timeout (in milliseconds for URL Fetcher)"
    ],
    "usageInstructions": "1. Install via Smithery CLI with the appropriate client flag (e.g., --client claude, --client cursor, or --client typescript). 2. Use the `google_search` tool with a query, response type, max results, and topic. 3. Use the `fetch_url` tool with a URL, response type, and optional timeout. 4. Choose from supported response formats: markdown, json, html, or text.",
    "category": "Web Scraping",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "edgeone-pages": {
    "name": "EdgeOne Pages MCP",
    "githubLink": "https://github.com/TencentEdgeOne/edgeone-pages-mcp",
    "package": "edgeone-pages-mcp",
    "description": "An MCP service for deploying HTML content, folders, and zip files to EdgeOne Pages and obtaining a publicly accessible URL for fast edge delivery.",
    "installCommand": "npm install -g edgeone-pages-mcp",
    "requiredEnvVars": [
      "EDGEONE_PAGES_API_TOKEN"
    ],
    "optionalParams": [
      "EDGEONE_PAGES_PROJECT_NAME"
    ],
    "usageInstructions": "1. Install the MCP server globally using 'npm install -g edgeone-pages-mcp'.\n2. Configure the MCP server in your application by providing the 'EDGEONE_PAGES_API_TOKEN' in the environment variables.\n3. Optionally specify an existing project name using 'EDGEONE_PAGES_PROJECT_NAME' to update an existing EdgeOne Pages project.\n4. Use the 'deploy_html' tool to send HTML content to the server, which will return a public URL for the deployed content.",
    "category": "Web Scraping",
    "stars": 189,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/gusy4783qf7.png"
  },
  "release-notes-generator-iris": {
    "name": "Iris MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/release-notes-generator-iris-mcp-server",
    "package": "iris-mcp-server",
    "description": "Gitリポジトリのタグベースのリリースノートを自動生成するModel Context Protocolサーバー",
    "installCommand": "npm install iris-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "startTag",
      "endTag",
      "title",
      "features",
      "improvements",
      "bugfixes",
      "breaking"
    ],
    "usageInstructions": "1. `npm install iris-mcp-server`でインストール。\n2. `mcpClient.useTool('iris-mcp-server', 'generate_release_note', { ... })`を呼び出す。\n3. 必要なパラメータ（startTag, endTag, titleなど）を指定してリリースノートを生成。\n4. 生成されたリリースノートは`.iris`ディレクトリにMarkdown形式で保存される。",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "luma": {
    "name": "Luma MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/luma-mcp-server",
    "package": "@sunwood-ai-labs/luma-mcp-server",
    "description": "Luma AI's video generation API as a Model Context Protocol (MCP) server",
    "installCommand": "npm install @sunwood-ai-labs/luma-mcp-server && export LUMA_API_KEY=your_api_key_here",
    "requiredEnvVars": [
      "LUMA_API_KEY"
    ],
    "optionalParams": [
      "prompt",
      "loop",
      "callback_url",
      "image_url",
      "source_generation_id",
      "start_generation_id",
      "end_generation_id"
    ],
    "usageInstructions": "1. Install using 'npm install @sunwood-ai-labs/luma-mcp-server'. 2. Obtain Luma API key from https://lumalabs.ai/dream-machine/api/keys. 3. Set LUMA_API_KEY environment variable. 4. Use available tools like generate_video, generate_video_from_image, extend_video, interpolate_videos.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "gitlab-kanban": {
    "name": "GitLab Kanban MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/gitlab-kanban-mcp-server",
    "package": "gitlab-kanban-mcp-server",
    "description": "A Model Context Protocol server for managing GitLab Kanban board operations.",
    "installCommand": "git clone https://github.com/Sunwood-ai-labs/gitlab-kanban-mcp-server.git && cd gitlab-kanban-mcp-server && npm install",
    "requiredEnvVars": [
      "GITLAB_TOKEN",
      "GITLAB_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Create a .env file with GITLAB_TOKEN and GITLAB_URL. Run 'npm run build' to build the server. Configure cline_mcp_settings.json with the correct command and environment variables.",
    "category": "Project Management",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "documind": {
    "name": "DocuMind MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/documind-mcp-server",
    "package": "documind-mcp-server",
    "description": "A next-generation Model Context Protocol (MCP) server for advanced README quality analysis through neural processing.",
    "installCommand": "git clone https://github.com/Sunwood-ai-labs/documind-mcp-server.git && cd documind-mcp-server && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "projectPath"
    ],
    "usageInstructions": "1. Clone the repository and cd into it.\n2. Run 'npm install' to install dependencies.\n3. Run 'npm run build' to compile the project.\n4. Configure Claude Desktop by editing '%APPDATA%/Claude/claude_desktop_config.json' to include the path to 'build/index.js'.\n5. Use the 'evaluate_readme' command with a valid 'projectPath' argument.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "aira": {
    "name": "Aira MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/aira-mcp-server",
    "package": "aira-mcp-server",
    "description": "MCP server for creating commit messages from git staged files and managing Gitflow operations",
    "installCommand": "git clone https://github.com/Sunwood-ai-labs/aira-mcp-server.git && cd aira-mcp-server && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "command",
      "args"
    ],
    "usageInstructions": "Configure the MCP server in your settings.json with 'command': 'node' and 'args': ['path/to/build/index.js']. Available tools: get_status, create_commit, init_gitflow, create_branch, merge_branch, list_branches",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "azure": {
    "name": "Azure MCP Server for Claude Desktop",
    "githubLink": "https://github.com/Streen9/azure-mcp",
    "package": "@Streen9/azure-mcp",
    "description": "An MCP server enabling Claude Desktop to interact with Azure services through natural language conversations.",
    "installCommand": "git clone https://github.com/Streen9/azure-mcp.git && cd azure-mcp && npm install",
    "requiredEnvVars": [
      "AZURE_TENANT_ID",
      "AZURE_CLIENT_ID",
      "AZURE_CLIENT_SECRET"
    ],
    "optionalParams": [
      "LOG_LEVEL",
      "DEBUG",
      "PORT"
    ],
    "usageInstructions": "1. Close Claude Desktop. 2. Configure claude_desktop_config.json with the MCP server path. 3. Start Claude Desktop. 4. Authenticate using Azure CLI or environment variables. 5. Ask Azure-related questions in the chat.",
    "category": "Cloud Services",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "win-cli": {
    "name": "Windows CLI MCP Server",
    "githubLink": "https://github.com/SimonB97/win-cli-mcp-server",
    "package": "@simonb97/server-win-cli",
    "description": "MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, Git Bash shells, and remote systems via SSH.",
    "installCommand": "npx -y @simonb97/server-win-cli",
    "requiredEnvVars": [],
    "optionalParams": [
      "maxCommandLength",
      "blockedCommands",
      "blockedArguments",
      "allowedPaths",
      "restrictWorkingDirectory",
      "logCommands",
      "maxHistorySize",
      "commandTimeout",
      "enableInjectionProtection"
    ],
    "usageInstructions": "To use with Claude Desktop, add the server configuration to claude_desktop_config.json. For custom configuration, create a config.json file using 'npx @simonb97/server-win-cli --init-config ./config.json' and specify it with the --config flag.",
    "category": "Development Tools",
    "stars": 219,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "github-kanban": {
    "name": "GitHub Kanban MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/github-kanban-mcp-server",
    "package": "@sunwood-ai-labs/github-kanban-mcp-server",
    "description": "GitHub Kanban MCP Serverは、GitHubのissueをカンバンボード形式で管理し、LLMのタスク管理を効率化するためのModel Context Protocol（MCP）サーバーです。",
    "installCommand": "npm install @sunwood-ai-labs/github-kanban-mcp-server",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "repo",
      "state",
      "labels",
      "title",
      "emoji",
      "body",
      "issue_number",
      "assignees",
      "comment_body",
      "state"
    ],
    "usageInstructions": "1. Node.js 18.x以上とnpm 9.x以上をインストールします。\n2. GitHub CLI (gh)をインストールし、gh auth loginで認証します。\n3. MCPの設定ファイルにserver設定を追加します。\n4. 使用可能なツール(list_issues, create_issue, update_issue, add_comment)をMCPクライアントから呼び出します。",
    "category": "Project Management",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "command-executor": {
    "name": "Command Executor MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/command-executor-mcp-server",
    "package": "command-executor-mcp-server",
    "description": "A secure Model Context Protocol server for executing pre-approved commands with configurable allowed commands and integration with Claude Desktop.",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [
      "ALLOWED_COMMANDS"
    ],
    "optionalParams": [
      "MCP_INSPECTOR_PORT",
      "DEBUG",
      "LOG_LEVEL",
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with `npm install`. 2. Build the server using `npm run build`. 3. Configure allowed commands via the `ALLOWED_COMMANDS` environment variable. 4. For Claude Desktop integration, add the server configuration to the appropriate config file. 5. Run the server using `node build/index.js`. Use the MCP Inspector for debugging if needed.",
    "category": "Development Tools",
    "stars": 20,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "autumn": {
    "name": "Autumn MCP Server",
    "githubLink": "https://github.com/SirTenzin/autumn-mcp-server",
    "package": "@SirTenzin/autumn-mcp-server",
    "description": "Unofficial MCP server for Autumn's pricing API, providing tools for customer management, entitlements, invoices, and billing portal generation",
    "installCommand": "npx -y @smithery/cli install @SirTenzin/autumn-mcp-server --client claude",
    "requiredEnvVars": [
      "AUTUMN_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "BUN_OPTIONS"
    ],
    "usageInstructions": "1. Install via Smithery with the provided command\n2. For manual installation: clone the repo, run 'bun install', then execute 'bun run index.ts --apiKey=\"{your api key}\"'\n3. Configure your AI app (Claude Desktop, Cursor, etc.) with the server command and API key\n4. Use the MCP server to manage customers, entitlements, invoices, and billing portals through the Autumn API",
    "category": "API Integration",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "memory-journal": {
    "name": "Smart Photo Journal MCP Server",
    "githubLink": "https://github.com/Siddhant-K-code/memory-journal-mcp-server",
    "package": "memory-journal-mcp-server",
    "description": "An MCP server for searching and analyzing your macOS Photos library with features like location search, label search, people search, and photo analysis.",
    "installCommand": "git clone https://github.com/Siddhant-K-code/memory-journal-mcp-server.git && cd memory-journal-mcp-server && uv sync",
    "requiredEnvVars": [
      "YOUR_DEVICE_USERNAME",
      "PATH_TO_CLONED_DIR"
    ],
    "optionalParams": [
      "location",
      "label",
      "person"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using uv. 2. Update claude_desktop_config.json with the server command and path. 3. Start the server with 'uv run server.py'. 4. Use the MCP tools for location, label, and people search, or photo analysis.",
    "category": "Knowledge Management",
    "stars": 20,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "jina-ai-multimodal-search": {
    "name": "Jina AI MCP Server",
    "githubLink": "https://github.com/Sheshiyer/jina-ai-mcp-multimodal-search",
    "package": "jina-ai-mcp",
    "description": "An MCP server providing semantic, image, and cross-modal search capabilities through Jina AI's neural search platform.",
    "installCommand": "git clone https://github.com/Sheshiyer/jina-ai-mcp-multimodal-search.git && cd jina-ai-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "JINA_API_KEY"
    ],
    "optionalParams": [
      "collection",
      "limit",
      "mode",
      "query",
      "imageUrl"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Create a .env file with your Jina AI API key. 3. Build the server using 'npm run build'. 4. Configure the MCP settings file with the server details. 5. Use the provided search tools (semantic_search, image_search, cross_modal_search) with appropriate arguments.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "setus": {
    "name": "Setu MCP Servers",
    "githubLink": "https://github.com/SetuHQ/setu-mcps",
    "package": "setu_mcp_kyc or setu_mcp_upi_deeplinks",
    "description": "MCP servers for Setu's APIs enabling interaction with KYC verification and UPI Deeplinks services",
    "installCommand": "pip install setu_mcp_kyc # for KYC verification or pip install setu_mcp_upi_deeplinks # for UPI Deeplinks",
    "requiredEnvVars": [
      "SETU_API_KEY",
      "SETU_API_SECRET"
    ],
    "optionalParams": [
      "LOG_LEVEL",
      "DEBUG",
      "PORT"
    ],
    "usageInstructions": "1. Install desired MCP server using pip\n2. Configure environment variables as specified in server's README\n3. Add server configuration to Claude Desktop's config file\n4. Start using tools through Claude",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "timeserver": {
    "name": "MCP-timeserver",
    "githubLink": "https://github.com/SecretiveShell/MCP-timeserver",
    "package": "MCP-timeserver",
    "description": "An MCP server providing datetime information through URI schemes and a tool for getting current local time.",
    "installCommand": "uvx MCP-timeserver",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this server, configure it using the provided JSON configuration. The server exposes datetime information through URI schemes like datetime://Africa/Freetown/now and provides a tool get_current_time() to fetch the current local time.",
    "category": "Development Tools",
    "stars": 38,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "vcd": {
    "name": "MCP-VCD Server",
    "githubLink": "https://github.com/SeanMcLoughlin/mcp-vcd",
    "package": "mcp-vcd",
    "description": "An MCP server for Value Change Dump (VCD) waveforms, providing signal changes to models.",
    "installCommand": "uv pip install --system mcp-vcd",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Run 'uv pip install --system mcp-vcd' to install.\n2. Add the following to your claude_desktop_config.json:\n```json\n\"mcpServers\": {\n  \"mcp-vcd\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"run\",\n      \"mcp-vcd\"\n    ]\n  }\n}\n```\n3. See https://modelcontextprotocol.io/quickstart/user for more information.",
    "category": "Development Tools",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "llms-txt": {
    "name": "MCP-llms-txt",
    "githubLink": "https://github.com/SecretiveShell/MCP-llms-txt",
    "package": "@SecretiveShell/MCP-llms-txt",
    "description": "MCP server for integrating Awesome-llms-txt with Claude Desktop, enabling direct documentation access in conversations.",
    "installCommand": "npx -y @smithery/cli install @SecretiveShell/MCP-llms-txt --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "PYTHONUTF8"
    ],
    "usageInstructions": "1. Install via Smithery using the provided command.\n2. Configure your claude config with the specified command and environment variables.\n3. Use mcp-cli to test the server with the provided config file.",
    "category": "AI/ML",
    "stars": 23,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "azuredevops": {
    "name": "Azure DevOps MCP Integration",
    "githubLink": "https://github.com/RyanCardin15/AzureDevOps-MCP",
    "package": "@ryancardin/azuredevops-mcp-server",
    "description": "A powerful integration for Azure DevOps that provides seamless access to work items, repositories, projects, boards, and sprints through the Model Context Protocol (MCP) server.",
    "installCommand": "npx @ryancardin/azuredevops-mcp-server@latest",
    "requiredEnvVars": [
      "AZURE_DEVOPS_ORG_URL",
      "AZURE_DEVOPS_PROJECT",
      "AZURE_DEVOPS_PERSONAL_ACCESS_TOKEN",
      "AZURE_DEVOPS_IS_ON_PREMISES",
      "AZURE_DEVOPS_AUTH_TYPE"
    ],
    "optionalParams": [
      "AZURE_DEVOPS_COLLECTION",
      "AZURE_DEVOPS_API_VERSION",
      "AZURE_DEVOPS_USERNAME",
      "AZURE_DEVOPS_PASSWORD",
      "AZURE_DEVOPS_DOMAIN"
    ],
    "usageInstructions": "After installation, configure the server using environment variables for Azure DevOps connection details. Create a Personal Access Token (PAT) with appropriate permissions for Azure DevOps Services. For on-premises installations, additional configuration options are available.",
    "category": "DevOps",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "xano": {
    "name": "Xano MCP Server",
    "githubLink": "https://github.com/SarimSiddd/xano",
    "package": "xano_mcp",
    "description": "A Model Context Protocol (MCP) server implementation for interacting with the Xano API, providing secure and type-safe tools for database operations.",
    "installCommand": "git clone [your-repo-url] && cd xano_mcp && npm install",
    "requiredEnvVars": [
      "XANO_API_KEY",
      "XANO_API_URL"
    ],
    "optionalParams": [
      "NODE_ENV",
      "API_TIMEOUT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Copy the .env.example file to .env and update it with your Xano credentials. 3. Build the project with 'npm run build'. 4. Run the server in development mode with 'npm run dev' or start it with 'npm start'.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "stockmcp": {
    "name": "Yahoo Finance Model Context Protocol for LLaMA 3.2 3B",
    "githubLink": "https://github.com/Shak2000/StockMCP",
    "package": "mcp_yahoo_finance",
    "description": "A Model Context Protocol (MCP) implementation that integrates Yahoo Finance API with LLaMA 3.2 3B, enabling real-time financial data retrieval and enhancing the model's capabilities for financial queries.",
    "installCommand": "git clone https://github.com/Shak2000/StockMCP && cd StockMCP && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "--model",
      "model name for LLaMA (e.g., llama3.2:8b)"
    ],
    "usageInstructions": "1. Install Ollama from https://ollama.ai/.\n2. Pull the LLaMA 3.2 3B model using `ollama pull llama3.2:3b`.\n3. Clone the repository and install dependencies with `pip install -r requirements.txt`.\n4. Run the integration script with `python mcp_ollama_integration.py`.\n5. For advanced usage, use the YahooFinanceMCP class in your code to call financial functions directly.",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "wolfram-alpha": {
    "name": "MCP-wolfram-alpha",
    "githubLink": "https://github.com/SecretiveShell/MCP-wolfram-alpha",
    "package": "MCP-wolfram-alpha",
    "description": "An MCP server that connects to the Wolfram Alpha API to answer questions using the full results API.",
    "installCommand": "git clone https://github.com/SecretiveShell/MCP-wolfram-alpha && cd MCP-wolfram-alpha && pip install -r requirements.txt",
    "requiredEnvVars": [
      "WOLFRAM_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository and navigate into the directory. 2. Install the required dependencies using pip. 3. Set the WOLFRAM_API_KEY environment variable with your Wolfram Alpha API key. 4. Run the server using the command: uv --directory MCP-wolfram-alpha run MCP-wolfram-alpha. 5. For debugging, use the mcp-cli-inspector with a config.json file as described in the README.",
    "category": "API Integration",
    "stars": 47,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "rootly": {
    "name": "Rootly MCP Server",
    "githubLink": "https://github.com/Rootly-AI-Labs/Rootly-MCP-server",
    "package": "rootly-mcp-server",
    "description": "An MCP server for the Rootly API that integrates with MCP-compatible editors like Cursor and Windsurf to resolve production incidents directly from the IDE.",
    "installCommand": "uv pip install rootly-mcp-server",
    "requiredEnvVars": [
      "ROOTLY_API_TOKEN"
    ],
    "optionalParams": [
      "allowed_paths"
    ],
    "usageInstructions": "1. Install Python 3.12 and uv. 2. Install the package using `uv pip install rootly-mcp-server`. 3. Set the `ROOTLY_API_TOKEN` environment variable with your Rootly API token. 4. Configure your MCP-compatible editor with the provided JSON configuration. 5. Optionally customize `allowed_paths` in `src/rootly_mcp_server/server.py` to expose additional API endpoints.",
    "category": "API Integration",
    "stars": 27,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/857ae3hwm.png"
  },
  "memos-py": {
    "name": "MCP Server Memos",
    "githubLink": "https://github.com/RyoJerryYu/mcp-server-memos-py",
    "package": "mcp-server-memos",
    "description": "A Python package that provides LLM models with the ability to interact with Memos server through the Model Context Protocol (MCP) interface.",
    "installCommand": "pip install mcp-server-memos",
    "requiredEnvVars": [
      "token"
    ],
    "optionalParams": [
      "host",
      "port"
    ],
    "usageInstructions": "To use this server, configure it in your MCP setup with the command `uvx mcp-server-memos --host [host] --port [port] --token [your-access-token]`. You can also run it directly via CLI or use it as a Python library. Required parameters include the Memos access token, while optional ones include host and port. The server provides tools for searching memos, creating new ones, retrieving memo content, and managing memo tags.",
    "category": "AI/ML",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "databricks": {
    "name": "Databricks MCP Server",
    "githubLink": "https://github.com/RafaelCartenet/mcp-databricks-server",
    "package": "mcp-databricks-server",
    "description": "An MCP server for interacting with Databricks, leveraging Unity Catalog metadata and enabling comprehensive data lineage exploration.",
    "installCommand": "pip install git+https://github.com/RafaelCartenet/mcp-databricks-server.git",
    "requiredEnvVars": [
      "DATABRICKS_HOST",
      "DATABRICKS_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "After installation, configure the server with your Databricks credentials. Run the server using the command provided in the README. Use the available tools and features to interact with Databricks Unity Catalog.",
    "category": "Data Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "google-cse": {
    "name": "Google Custom Search Engine MCP Server",
    "githubLink": "https://github.com/Richard-Weiss/mcp-google-cse",
    "package": "mcp-google-cse",
    "description": "An MCP server providing search capabilities using Google Custom Search Engine, returning search results that can be combined with other tools for content extraction.",
    "installCommand": "uvx mcp-google-cse",
    "requiredEnvVars": [
      "API_KEY",
      "ENGINE_ID"
    ],
    "optionalParams": [
      "SERVICE_NAME",
      "COUNTRY_REGION",
      "GEOLOCATION",
      "RESULT_LANGUAGE",
      "RESULT_NUM"
    ],
    "usageInstructions": "1. Create a Google Custom Search Engine and obtain API_KEY and ENGINE_ID. 2. Configure Claude Desktop by adding 'mcp-google-cse' to claude_desktop_config.json with required env vars. 3. Run using 'uvx mcp-google-cse' or 'python -m mcp-google-cse' after pip installation.",
    "category": "API Integration",
    "stars": 26,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "infura": {
    "name": "Infura MCP Server",
    "githubLink": "https://github.com/Qbandev/infura-mcp-server",
    "package": "infura-mcp-server",
    "description": "MCP server providing Ethereum blockchain access through Infura's infrastructure",
    "installCommand": "npx infura-mcp-server",
    "requiredEnvVars": [
      "INFURA_API_KEY"
    ],
    "optionalParams": [
      "INFURA_NETWORK"
    ],
    "usageInstructions": "1. Get Infura API key from https://developer.metamask.io/\n2. Configure in Claude Desktop or VS Code using provided JSON config\n3. For Claude: Add to claude_desktop_config.json\n4. For VS Code: Add to User Settings (JSON) or .vscode/mcp.json",
    "category": "Blockchain",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "minimax-tools": {
    "name": "Minimax MCP Tools",
    "githubLink": "https://github.com/PsychArch/minimax-mcp-tools",
    "package": "minimax-mcp-tools",
    "description": "An MCP server implementation with Minimax API integration for AI-powered image generation and text-to-speech functionality.",
    "installCommand": "npx -y minimax-mcp-tools",
    "requiredEnvVars": [
      "MINIMAX_API_KEY",
      "MINIMAX_GROUP_ID"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Ensure Node.js 16 or higher is installed.\n2. Create or update MCP configuration file with 'minimax-mcp-tools' server configuration.\n3. Set MINIMAX_API_KEY and MINIMAX_GROUP_ID environment variables in the config.\n4. Run the server using 'npx minimax-mcp-tools'.",
    "category": "AI/ML",
    "stars": 49,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "github-meta": {
    "name": "GitHub MCP Server",
    "githubLink": "https://github.com/PoliTwit1984/github-meta-mcp-server",
    "package": "github-mcp-server",
    "description": "An MCP server for interacting with GitHub's API, supporting repository creation and management.",
    "installCommand": "git clone https://github.com/PoliTwit1984/github-meta-mcp-server.git && cd github-meta-mcp-server && npm install && npm run build",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "command",
      "tool_name",
      "arguments"
    ],
    "usageInstructions": "1. Configure GITHUB_TOKEN in MCP settings file. 2. Use tools like 'create_repo' with natural language commands to create or update GitHub repositories.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "pipedream": {
    "name": "Pipedream Integration Platform",
    "githubLink": "https://github.com/PipedreamHQ/pipedream",
    "package": "pipedream",
    "description": "Pipedream is an integration platform for developers to connect apps and develop event-driven automations.",
    "installCommand": "npm install -g pipedream",
    "requiredEnvVars": [],
    "optionalParams": [
      "PIPEDREAM_API_KEY",
      "PIPEDREAM_WORKFLOW_ID"
    ],
    "usageInstructions": "To get started, visit https://pipedream.com/docs/quickstart/ for workflow creation and configuration instructions. For support, visit https://pipedream.com/support.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/1vbd91jimli.png"
  },
  "fireflies": {
    "name": "Fireflies MCP Server",
    "githubLink": "https://github.com/Props-Labs/fireflies-mcp",
    "package": "@props-labs/mcp/fireflies",
    "description": "MCP Server for the Fireflies.ai API, enabling transcript retrieval, search, and summary generation.",
    "installCommand": "git clone https://github.com/Props-Labs/fireflies-mcp && cd fireflies-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "FIREFLIES_API_KEY"
    ],
    "optionalParams": [
      "limit",
      "from_date",
      "to_date",
      "transcript_id",
      "query",
      "format"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with `npm install` or `pnpm install`.\n2. Build the project with `npm run build` or `pnpm build`.\n3. Start the server with `FIREFLIES_API_KEY=your_api_key npm start` or `pnpm start`.\n4. Integrate with Claude Desktop by adding the MCP server configuration to `claude_desktop_config.json` as described in the README.",
    "category": "API Integration",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "mcpchartplotter": {
    "name": "MCP Chart Plotter",
    "githubLink": "https://github.com/ReallyFloppyPenguin/MCPChartPlotter",
    "package": "MCPChartPlotter",
    "description": "A Model Context Protocol (MCP) server that provides chart plotting functionality, likely for data visualization purposes.",
    "installCommand": "git clone https://github.com/ReallyFloppyPenguin/MCPChartPlotter.git && cd MCPChartPlotter && uv run server.py",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Clone the repository using `git clone https://github.com/ReallyFloppyPenguin/MCPChartPlotter.git`.\n2. Navigate to the cloned directory.\n3. Use the provided JSON configuration with an IDE like Cursor to run the server using `uv run server.py`.\n4. Ensure the correct path to the server directory is specified in the JSON command.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "zonos-tts": {
    "name": "Zonos TTS MCP Integration",
    "githubLink": "https://github.com/PhialsBasement/Zonos-TTS-MCP",
    "package": "@PhialsBasement/zonos-tts-mcp",
    "description": "MCP integration for Zonos TTS, enabling Claude to generate speech directly through text-to-speech functionality.",
    "installCommand": "npx -y @smithery/cli install @PhialsBasement/zonos-tts-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "language",
      "emotion"
    ],
    "usageInstructions": "1. Ensure Zonos API is running. 2. Configure PulseAudio access. 3. Add server configuration to Claude's config.json file with the path to the compiled server.js. 4. Use speak_response() function in Claude to generate speech.",
    "category": "AI/ML",
    "stars": 12,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "coincap": {
    "name": "Coincap MCP",
    "githubLink": "https://github.com/QuantGeekDev/coincap-mcp",
    "package": "coincap-mcp",
    "description": "A Model Context Protocol (MCP) server that queries cryptocurrency information from Coincap's public API without requiring API keys or registration.",
    "installCommand": "npx -y @smithery/cli install coincap-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "command",
      "args",
      "path/to/coincap-mcp/build/index.js"
    ],
    "usageInstructions": "1. Add the Coincap MCP server configuration to your Claude Desktop config file. 2. Launch Claude Desktop. 3. Use prompts like 'What is the price of bitcoin?' or 'What are the available crypto assets?' to interact with the server. For local development, build the server using 'npm run build' and update the config file with the local path to the build.",
    "category": "API Integration",
    "stars": 78,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "pixverse": {
    "name": "PixVerse MCP",
    "githubLink": "https://github.com/PixVerseAI/PixVerse-MCP",
    "package": "pixverse-mcp",
    "description": "A tool that allows you to access PixVerse's latest video generation models via applications that support the Model Context Protocol (MCP), such as Claude or Cursor.",
    "installCommand": "uvx pixverse-mcp",
    "requiredEnvVars": [
      "PIXVERSE_API_KEY"
    ],
    "optionalParams": [
      "quality",
      "duration",
      "aspect_ratio",
      "motion_mode",
      "negative_prompts"
    ],
    "usageInstructions": "1. Obtain a PixVerse API key from the PixVerse Platform. 2. Install Python 3.10+ and UV/UVX. 3. Configure your MCP client (e.g., Claude or Cursor) with the PixVerse MCP server command and API key in the configuration file. 4. Restart your MCP client and use text prompts to generate videos with optional parameters like quality, duration, and aspect ratio.",
    "category": "AI/ML",
    "stars": 24,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/axs4abako.png"
  },
  "obsidian-rest": {
    "name": "Obsidian MCP REST Server",
    "githubLink": "https://github.com/PublikPrinciple/obsidian-mcp-rest",
    "package": "PublikPrinciple/obsidian-mcp-rest",
    "description": "An MCP server that provides access to Obsidian vaults through a local REST API, enabling AI assistants to interact with Obsidian notes and manage vault content.",
    "installCommand": "npm install -g PublikPrinciple/obsidian-mcp-rest",
    "requiredEnvVars": [
      "OBSIDIAN_API_KEY",
      "OBSIDIAN_HOST",
      "OBSIDIAN_PORT"
    ],
    "optionalParams": [
      "SERVER_NAME",
      "SERVER_VERSION",
      "CONFIG_PATH"
    ],
    "usageInstructions": "1. Install the Local REST API plugin in Obsidian and generate an API key.\n2. Create a config.json file with Obsidian API settings.\n3. Start the server with: obsidian-mcp-rest --config path/to/config.json\n4. Configure Claude Desktop or other AI assistants to use this MCP server with the specified command and arguments.",
    "category": "Knowledge Management",
    "stars": 51,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "koboldcpp": {
    "name": "Kobold MCP Server",
    "githubLink": "https://github.com/PhialsBasement/KoboldCPP-MCP-Server",
    "package": "kobold-mcp-server",
    "description": "An MCP server implementation for KoboldAI integration, enabling text generation and chat completion capabilities.",
    "installCommand": "npm install kobold-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "apiUrl"
    ],
    "usageInstructions": "Initialize the server using: const server = new KoboldMCPServer(); server.start(); Configuration can be passed as an object or through environment variables. Ensure Node.js (v16 or higher) and a running KoboldAI instance are available.",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "peliqan": {
    "name": "Peliqan MCP Server",
    "githubLink": "https://github.com/Peliqan-io/mcp-server-peliqan",
    "package": "mcp-server-peliqan",
    "description": "MCP server for integrating with Peliqan services, enabling data fetch and writeback operations across various SaaS applications.",
    "installCommand": "pip install mcp-server-peliqan",
    "requiredEnvVars": [
      "account_id",
      "api_token"
    ],
    "optionalParams": [
      "peliqan_account_id",
      "peliqan_api_token"
    ],
    "usageInstructions": "1. Create a peliqan_config.json in your home folder with account_id and api_token. 2. Configure Claude Desktop by adding mcpServers entry to claude_desktop_config.json. 3. Set up API handler script in Peliqan and link it to a custom API endpoint.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/d24j5b2v4x.png"
  },
  "paddle": {
    "name": "Paddle MCP Server",
    "githubLink": "https://github.com/PaddleHQ/paddle-mcp-server",
    "package": "@paddle/paddle-mcp",
    "description": "MCP server for interacting with Paddle Billing API, providing tools for managing products, prices, customers, transactions, and subscriptions.",
    "installCommand": "npx -y @paddle/paddle-mcp --api-key=PADDLE_API_KEY --environment=(sandbox|production)",
    "requiredEnvVars": [
      "PADDLE_API_KEY",
      "PADDLE_ENVIRONMENT"
    ],
    "optionalParams": [
      "--api-key",
      "--environment"
    ],
    "usageInstructions": "To use the MCP server, create an API key in Paddle Developer tools. Configure the server in your MCP client using the command: 'npx -y @paddle/paddle-mcp --api-key=PADDLE_API_KEY --environment=(sandbox|production)'. For local development, run 'pnpm install' and 'pnpm build', then update your MCP config to use the local build.",
    "category": "API Integration",
    "stars": 21,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/7ttw72x2t7b.png"
  },
  "deep-research": {
    "name": "Open Deep Research MCP Server",
    "githubLink": "https://github.com/Ozamatash/deep-research-mcp",
    "package": "deep-research",
    "description": "An AI-powered research assistant that performs deep, iterative research on any topic by combining search engines, web scraping, and AI to generate comprehensive reports.",
    "installCommand": "git clone https://github.com/Ozamatash/deep-research && cd deep-research && npm install && npm run build",
    "requiredEnvVars": [
      "Variables defined in .env.local, such as FIRECRAWL_BASE_URL if using local Firecrawl"
    ],
    "optionalParams": [
      "LANGFUSE_PUBLIC_KEY",
      "LANGFUSE_SECRET_KEY",
      "FIRECRAWL_BASE_URL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Create .env.local from .env.example. 3. Build the project using 'npm run build'. 4. Run the server using 'npm run start:http' for HTTP mode. 5. Configure Claude Desktop to use this MCP server.",
    "category": "AI/ML",
    "stars": 230,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "odbc": {
    "name": "MCP ODBC Server",
    "githubLink": "https://github.com/OpenLinkSoftware/mcp-odbc-server",
    "package": "@modelcontextprotocol/sdk",
    "description": "An MCP server providing access to ODBC data sources via a Data Source Name configured for a specific ODBC Connector.",
    "installCommand": "git clone https://github.com/OpenLinkSoftware/mcp-odbc-server.git && cd mcp-odbc-server && npm init -y && npm install @modelcontextprotocol/sdk zod tsx odbc dotenv",
    "requiredEnvVars": [
      "API_KEY",
      "ODBC_DSN",
      "ODBC_USER",
      "ODBC_PASSWORD",
      "ODBCINI"
    ],
    "optionalParams": [
      "user",
      "password",
      "dsn",
      "schema",
      "table",
      "query",
      "max_rows",
      "timeout"
    ],
    "usageInstructions": "After installation, configure environment variables in a .env file. Use commands like get_schemas, get_tables, describe_table, and query_database to interact with the ODBC data source.",
    "category": "Data Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/btaemo0iy18.png"
  },
  "cmd": {
    "name": "CMD MCP Server",
    "githubLink": "https://github.com/PhialsBasement/CMD-MCP-Server",
    "package": "server-cmd",
    "description": "A Model Context Protocol (MCP) server implementation for executing CMD commands on both Windows and Linux, as well as allowing SSH connections.",
    "installCommand": "npm install server-cmd",
    "requiredEnvVars": [],
    "optionalParams": [
      "Configuration options passed to MCPCmdServer constructor",
      "Port or host settings if needed",
      "SSH connection parameters if enabled"
    ],
    "usageInstructions": "Import the MCPCmdServer class from 'server-cmd', initialize it with optional configuration, and call the start() method to begin the server. The server can be configured via environment variables or a configuration object. For development, clone the repository, install dependencies, and build the project using the provided npm scripts.",
    "category": "Development Tools",
    "stars": 18,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "opendatamcp": {
    "name": "Open Data Model Context Protocol",
    "githubLink": "https://github.com/OpenDataMCP/OpenDataMCP",
    "package": "odmcp",
    "description": "A tool to connect open data sources to LLM applications, enabling access to public datasets and publishing them for broader use.",
    "installCommand": "uvx odmcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "PROVIDER_NAME"
    ],
    "usageInstructions": "1. Install `uv` as a prerequisite. 2. Use `uvx odmcp` to access available commands. 3. For publishing, clone the repository, set up a virtual environment, and implement a new provider module in `src/odmcp/providers/`.",
    "category": "Data Storage",
    "stars": 126,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "encoding-devops": {
    "name": "Encoding DevOps MCP Server",
    "githubLink": "https://github.com/PatrickKalkman/encoding-devops",
    "package": "encoding-devops",
    "description": "An AI-powered Model Context Protocol (MCP) server that connects Anthropic's Claude to video encoding workflows, providing real-time analysis, error translation, and actionable solutions for encoding issues.",
    "installCommand": "curl -LsSf https://astral.sh/uv/install.sh | sh && uv pip install encoding-devops",
    "requiredEnvVars": [
      "CLAUDE_API_KEY",
      "ENCODING_API_KEY",
      "DATABASE_URL"
    ],
    "optionalParams": [
      "OMDB_API_KEY",
      "LOG_LEVEL",
      "PORT",
      "DEBUG"
    ],
    "usageInstructions": "1. Install the package using the provided command.\n2. Copy the .env.example file to .env and add your API keys and configuration.\n3. Register with Claude Desktop using 'uv run mcp install ./src/encoding_devops/main.py'.\n4. Start the server with 'uv run mcp dev ./src/encoding_devops/main.py'.\n5. Use the server in Claude Desktop to ask about encoding issues, request email drafts, or check job statuses.",
    "category": "DevOps",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "web-eval-agent": {
    "name": "operative.sh web-eval-agent MCP Server",
    "githubLink": "https://github.com/Operative-Sh/web-eval-agent",
    "package": "web-eval-agent",
    "description": "An MCP server that autonomously evaluates and debugs web applications using a browser agent, capturing UX reports, console logs, and network traffic.",
    "installCommand": "curl -LSf https://operative.sh/install.sh -o install.sh && bash install.sh && rm install.sh",
    "requiredEnvVars": [
      "OPERATIVE_API_KEY"
    ],
    "optionalParams": [
      "headless_browser",
      "url"
    ],
    "usageInstructions": "1. Obtain an API key from operative.sh/mcp.\n2. Run the installation script provided.\n3. Add the JSON configuration to your code editor (Cursor/Cline/Windsurf) with your API key.\n4. Restart your code editor.\n5. Use the chat interface to trigger the `web_eval_agent` tool with a task and URL, e.g., 'Test my app on http://localhost:3000. Use web-eval-agent.'",
    "category": "Web Scraping",
    "stars": 1083,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/b7tcjrofqdu.png"
  },
  "noves": {
    "name": "Noves MCP Server",
    "githubLink": "https://github.com/Noves-Inc/noves-mcp",
    "package": "@noves/noves-mcp-server",
    "description": "An MCP server providing natural language blockchain data through Noves Intent service, supporting 100+ blockchain networks.",
    "installCommand": "npx @noves/noves-mcp-server@0.1.3",
    "requiredEnvVars": [],
    "optionalParams": [
      "network name (e.g., ethereum, polygon, bsc)"
    ],
    "usageInstructions": "Add to Cursor configuration file (~/.cursor/mcp.json) and restart Cursor. The server supports various blockchain analysis tools and natural language queries about blockchain data.",
    "category": "Blockchain Data Access",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/yhnkf0r86z.png"
  },
  "pgyer": {
    "name": "PGYER MCP Server",
    "githubLink": "https://github.com/PGYER/pgyer-mcp-server",
    "package": "pgyer/pgyer-mcp-server",
    "description": "PGYER MCP Server 是一个用于上传 iOS/Android 应用到 PGYER 平台的 Model Context Protocol (MCP) 服务器，支持与 Claude、VSCode 等平台集成，适用于应用分发、内测和版本管理。",
    "installCommand": "git clone https://github.com/PGYER/pgyer-mcp-server.git && cd pgyer-mcp-server && npm install",
    "requiredEnvVars": [
      "PGYER_API_KEY"
    ],
    "optionalParams": [
      "安装方式",
      "安装密码",
      "更新描述",
      "有效期",
      "分页参数",
      "日志级别",
      "调试模式"
    ],
    "usageInstructions": "1. 安装 Node.js 或 Docker 运行时。\n2. 克隆仓库并安装依赖。\n3. 设置环境变量 PGYER_API_KEY 为你的 PGYER API 密钥。\n4. 根据集成需求配置与 Claude 或 VSCode 的连接。\n5. 使用命令行或集成工具调用 `upload-app`、`list-my-apps` 或 `get-app-info-by-shortcut` 工具。",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/fucgt0snihr.png"
  },
  "npm-sentinel": {
    "name": "NPM Sentinel MCP",
    "githubLink": "https://github.com/Nekzus/npm-sentinel-mcp",
    "package": "@nekzus/mcp-server",
    "description": "A powerful MCP server for AI-assisted NPM package analysis, providing security, dependency, and performance insights.",
    "installCommand": "npx -y @nekzus/mcp-server@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "command",
      "args"
    ],
    "usageInstructions": "To use with VS Code, add the server configuration to your MCP config file. For Claude Desktop, modify claude_desktop_config.json with the provided server configuration. The server can also be run using Docker with the nekzus/npm-sentinel-mcp image.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/9gi10jj2xke.png"
  },
  "sar": {
    "name": "AWS Service Reference MCP Server",
    "githubLink": "https://github.com/MitchyBAwesome/sar-mcp",
    "package": "sar-mcp",
    "description": "MCP server providing tools to interact with AWS Programmatic Service Reference, allowing listing of AWS services and details about their API actions.",
    "installCommand": "git clone https://github.com/MitchyBAwesome/sar-mcp.git && cd sar-mcp && python -m venv .venv && source .venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "command",
      "args"
    ],
    "usageInstructions": "1. Run the server: python aws_service_reference.py\n2. Configure Claude Desktop by adding server configuration to claude_desktop_config.json\n3. Restart Claude Desktop\n4. Use tools like list_aws_services, get_service_actions, get_action_condition_keys, get_action_resource_types, get_action_properties",
    "category": "API Integration",
    "stars": 6,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "minimax-js": {
    "name": "MiniMax MCP JS",
    "githubLink": "https://github.com/MiniMax-AI/MiniMax-MCP-JS",
    "package": "minimax-mcp-js",
    "description": "JavaScript/TypeScript implementation of MiniMax MCP providing image generation, video generation, text-to-speech, and more.",
    "installCommand": "pnpm add minimax-mcp-js",
    "requiredEnvVars": [
      "MINIMAX_API_KEY",
      "MINIMAX_API_HOST"
    ],
    "optionalParams": [
      "MINIMAX_MCP_BASE_PATH",
      "MINIMAX_RESOURCE_MODE"
    ],
    "usageInstructions": "1. Get API key from MiniMax International Platform. 2. Configure MCP client (Claude Desktop or Cursor) with appropriate environment variables. 3. Start server using 'npx minimax-mcp-js' or through client configuration.",
    "category": "AI/ML",
    "stars": 63,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/rt75b3ywr1i.jpg"
  },
  "raygun": {
    "name": "Raygun MCP Server",
    "githubLink": "https://github.com/MindscapeHQ/mcp-server-raygun",
    "package": "@raygun.io/mcp-server-raygun",
    "description": "MCP Server for Raygun's API V3 endpoints, providing access to Crash Reporting and Real User Monitoring applications through the Model Context Protocol.",
    "installCommand": "npx -y @raygun.io/mcp-server-raygun",
    "requiredEnvVars": [
      "RAYGUN_PAT_TOKEN"
    ],
    "optionalParams": [
      "SOURCEMAP_ALLOWED_DIRS"
    ],
    "usageInstructions": "1. Install using the command: npx -y @raygun.io/mcp-server-raygun\n2. Set the RAYGUN_PAT_TOKEN environment variable with your Raygun PAT token.\n3. Optionally configure SOURCEMAP_ALLOWED_DIRS for source map operations.\n4. Add the server configuration to your claude_desktop_config.json file as shown in the README.",
    "category": "API Integration",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/a9c33dyc6dg.jpg"
  },
  "github-oauth": {
    "name": "MCP-Github-Oauth",
    "githubLink": "https://github.com/Nikhil-Patil-RI/MCP-Github-Oauth",
    "package": "uv",
    "description": "An MCP server implementation for GitHub OAuth integration, enabling authentication and tool registration for the Claude desktop app.",
    "installCommand": "curl -LsSf https://astral.sh/uv/install.sh | sh && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "GITHUB_CLIENT_ID",
      "GITHUB_CLIENT_SECRET",
      "REDIRECT_URI"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "MAX_REQUESTS_PER_MINUTE"
    ],
    "usageInstructions": "1. Install uv as described in the README. 2. Set up the claude_desktop_config.json file with the correct command and directory path. 3. Set required environment variables (GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET, REDIRECT_URI). 4. Run the server using 'uv --directory src/github_oauth run server.py'. 5. Use the MCP Inspector for debugging with 'npx @modelcontextprotocol/inspector uv --directory [project_dir] run github-oauth'.",
    "category": "Authentication",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "octagon": {
    "name": "Octagon MCP Server",
    "githubLink": "https://github.com/OctagonAI/octagon-mcp-server",
    "package": "octagon-mcp",
    "description": "The Octagon MCP server provides specialized AI-powered financial research and analysis by integrating with the Octagon Market Intelligence API, enabling users to analyze public filings, earnings call transcripts, financial metrics, stock market data, and private market transactions.",
    "installCommand": "npm install -g octagon-mcp",
    "requiredEnvVars": [
      "OCTAGON_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Sign up for an Octagon API key at https://app.octagonai.co/signup/\n2. Set the OCTAGON_API_KEY environment variable with your API key.\n3. Run the server using `npx -y octagon-mcp` or `npm install -g octagon-mcp` followed by `octagon-mcp`.\n4. Configure the server in supported clients like Claude Desktop, Cursor, or Windsurf by adding the MCP server configuration with the API key.\n5. Use the available agents for financial research, such as SEC filings analysis, earnings call transcripts, financial metrics, stock data, and private market research.",
    "category": "Financial Research",
    "stars": 46,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/drtkiktp715.png"
  },
  "nebulablock": {
    "name": "NebulaBlock API MCP Server",
    "githubLink": "https://github.com/Nebula-Block-Data/nebulablock-mcp-server",
    "package": "nebulablock-mcp-server",
    "description": "The NebulaBlock API Model Context Protocol (MCP) server integrates with the fastmcp library to expose NebulaBlock API functionalities as accessible tools in any MCP-compatible environment.",
    "installCommand": "git clone https://github.com/Nebula-Block-Data/nebulablock-mcp-server && cd nebulablock-mcp-server && python3 -m venv .venv && source .venv/bin/activate && uv pip install -e .",
    "requiredEnvVars": [
      "NEBULA_BLOCK_API_KEY"
    ],
    "optionalParams": [
      "--api-key"
    ],
    "usageInstructions": "1. Clone the repository and activate a virtual environment. 2. Install dependencies using `uv pip install -e .`. 3. Set the NEBULA_BLOCK_API_KEY in a `.env` file or use the `--api-key` command-line argument. 4. Run the server with `uv run -m src.main`. 5. Configure an MCP client to connect to this server using the provided `settings.json` example.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/z153lz7u99.png"
  },
  "bloodhound-ai": {
    "name": "BloodHound-MCP",
    "githubLink": "https://github.com/MorDavid/BloodHound-MCP-AI",
    "package": "BloodHound-MCP",
    "description": "BloodHound-MCP integrates the Model Context Protocol (MCP) with BloodHound to enable natural language querying of Active Directory attack paths and security analysis.",
    "installCommand": "git clone https://github.com/MorDavid/BloodHound-MCP-AI.git && cd BloodHound-MCP-AI && pip install -r requirements.txt",
    "requiredEnvVars": [
      "BLOODHOUND_URI",
      "BLOODHOUND_USERNAME",
      "BLOODHOUND_PASSWORD"
    ],
    "optionalParams": [
      "MCP_SERVER_PORT",
      "LOG_LEVEL",
      "MAX_QUERY_RESULTS"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using pip. 2. Configure the MCP Server with the required environment variables for Neo4j connection. 3. Run the BloodHound-MCP server using the provided command. 4. Query the server using natural language for Active Directory analysis.",
    "category": "Security",
    "stars": 236,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/eyx5ol0famb.png"
  },
  "minimax": {
    "name": "MiniMax Model Context Protocol (MCP) Server",
    "githubLink": "https://github.com/MiniMax-AI/MiniMax-MCP",
    "package": "minimax-mcp",
    "description": "Official MiniMax Model Context Protocol (MCP) server that enables interaction with Text to Speech, video/image generation, and other APIs for MCP clients like Claude Desktop, Cursor, and Windsurf.",
    "installCommand": "uvx minimax-mcp",
    "requiredEnvVars": [
      "MINIMAX_API_KEY",
      "MINIMAX_API_HOST"
    ],
    "optionalParams": [
      "MINIMAX_MCP_BASE_PATH",
      "MINIMAX_API_RESOURCE_MODE"
    ],
    "usageInstructions": "1. Get your API key from MiniMax (https://www.minimax.io/platform/user-center/basic-information/interface-key). 2. Install uv (Python package manager) using `curl -LsSf https://astral.sh/uv/install.sh | sh`. 3. Configure the API host and key in your MCP client (e.g., Claude Desktop or Cursor) with the required environment variables. 4. Ensure the API key matches the host to avoid 'Invalid API key' errors.",
    "category": "AI/ML",
    "stars": 775,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/6w12j869vtl.jpg"
  },
  "klaudium": {
    "name": "MCP Klaudium",
    "githubLink": "https://github.com/MilosBastaja/mcp-klaudium",
    "package": "mcp-klaudium",
    "description": "An enhanced MCP memory server with dynamic compression and context management features.",
    "installCommand": "git clone https://github.com/MilosBastaja/mcp-klaudium.git && cd mcp-klaudium && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "After installation, start the server by running 'npm start'. The server provides RESTful API endpoints for managing entities and relations. Configuration can be done through environment variables.",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "consulting-agents": {
    "name": "ConsultingAgents MCP Server",
    "githubLink": "https://github.com/MatthewPDingle/consulting-agents-mcp",
    "package": "consulting-agents-mcp",
    "description": "An MCP server providing AI consulting agents for code analysis and problem solving through multiple AI models.",
    "installCommand": "git clone https://github.com/MatthewPDingle/consulting-agents-mcp.git && cd consulting-agents-mcp && python -m venv mcp_venv && source mcp_venv/bin/activate && pip install -r requirements.txt",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "GOOGLE_API_KEY"
    ],
    "optionalParams": [
      "MCP_TRANSPORT",
      "HOST",
      "PORT"
    ],
    "usageInstructions": "1. Create .env file with API keys\n2. Start server with ./start_mcp_server.sh\n3. Register with Claude Code using: claude mcp add ConsultingAgents /absolute/path/to/consulting-agents-mcp/start_mcp_server.sh\n4. Start Claude Code with --mcp-debug flag",
    "category": "AI/ML",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "gsuite": {
    "name": "Google Workspace MCP Server",
    "githubLink": "https://github.com/MarkusPfundstein/mcp-gsuite",
    "package": "mcp-gsuite",
    "description": "MCP server for interacting with Google products including Gmail and Calendar",
    "installCommand": "npx -y @smithery/cli install mcp-gsuite --client claude",
    "requiredEnvVars": [
      "GOOGLE_CLIENT_ID",
      "GOOGLE_CLIENT_SECRET"
    ],
    "optionalParams": [
      "--gauth-file",
      "--accounts-file",
      "--credentials-dir"
    ],
    "usageInstructions": "1. Create OAuth2 credentials in Google Cloud Console\n2. Create .gauth.json with client credentials\n3. Create .accounts.json with account information\n4. Configure Claude Desktop to use the MCP server",
    "category": "Productivity",
    "stars": 390,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "yt-description": {
    "name": "YouTube Transcript Extractor MCP",
    "githubLink": "https://github.com/MalikElate/yt-description-mcp",
    "package": "@modelcontextprotocol/sdk",
    "description": "An MCP server that extracts transcripts from YouTube videos for AI assistants.",
    "installCommand": "git clone https://github.com/MalikElate/yt-description-mcp.git && cd yt-description-mcp && pnpm install && pnpm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "YouTube video URL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Configure the MCP server in Cursor or Claude Desktop with the command 'node /absolute/path/to/build/index.js'. 3. Use the AI assistant to extract transcripts by providing a YouTube video URL.",
    "category": "AI/ML",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "sentry": {
    "name": "Sentry MCP Server",
    "githubLink": "https://github.com/MCP-100/mcp-sentry",
    "package": "mcp-sentry",
    "description": "A Model Context Protocol server for retrieving and analyzing issues from Sentry.io, providing tools to inspect error reports and stacktraces.",
    "installCommand": "pip install mcp-sentry",
    "requiredEnvVars": [
      "SENTRY_TOKEN",
      "PROJECT_SLUG",
      "ORGANIZATION_SLUG"
    ],
    "optionalParams": [
      "auth-token",
      "project-slug",
      "organization-slug"
    ],
    "usageInstructions": "After installation, configure Claude Desktop by adding the server details to claude_desktop_config.json with your Sentry credentials. Alternatively, use with Zed by modifying settings.json.",
    "category": "API Integration",
    "stars": 18,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "templateio": {
    "name": "MCP TemplateIO Image Generation Tool",
    "githubLink": "https://github.com/Lucker631/mcp-templateio",
    "package": "mcp-templateio",
    "description": "An MCP server for image generation using Templated.io API",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [
      "TEMPLATED_API_KEY"
    ],
    "optionalParams": [
      "templateId",
      "photoBgImageUrl",
      "bgYellowImageUrl",
      "buildText"
    ],
    "usageInstructions": "1. Install dependencies: npm install\n2. Build the project: npm run build\n3. Configure Claude Desktop config file with the server path and TEMPLATED_API_KEY\n4. For local development, use 'node /absolute/path/to/mcp-templateio/dist/index.js'",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "clever-doc": {
    "name": "Clever Cloud Documentation MCP Server",
    "githubLink": "https://github.com/LostInBrittany/clever-doc-mcp-server",
    "package": "mcp-clever-demo",
    "description": "An MCP server that exposes Clever Cloud's documentation using FastMCP, allowing integration with MCP clients like Claude Desktop.",
    "installCommand": "npx -y mcp-clever-demo",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this server in an MCP client, configure it with the command `npx -y mcp-clever-demo`. For development and testing, use `npx fastmcp dev src/index.ts` to run the server with mcp-cli, or `npx fastmcp inspect src/index.ts` to inspect it with the MCP Inspector.",
    "category": "Documentation",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "dbt-cli": {
    "name": "DBT CLI MCP Server",
    "githubLink": "https://github.com/MammothGrowth/dbt-cli-mcp",
    "package": "dbt-cli-mcp",
    "description": "A Model Context Protocol (MCP) server that wraps the dbt CLI tool, enabling AI coding agents to interact with dbt projects through standardized MCP tools.",
    "installCommand": "git clone --recurse-submodules https://github.com/MammothGrowth/dbt-cli-mcp.git && cd dbt-cli-mcp && uv venv && source .venv/bin/activate && uv pip install -e .",
    "requiredEnvVars": [
      "DBT_PATH",
      "ENV_FILE",
      "LOG_LEVEL",
      "DBT_PROFILES_DIR"
    ],
    "optionalParams": [
      "--dbt-path",
      "--env-file",
      "--log-level",
      "--profiles-dir"
    ],
    "usageInstructions": "After installation, use the CLI to run dbt commands through the MCP server. For example: `dbt-mcp run --models customers --project-dir /path/to/project`. Ensure the `project_dir` parameter is an absolute path to your dbt project directory. Configure the server with environment variables like `DBT_PATH`, `ENV_FILE`, and `DBT_PROFILES_DIR`. For integration with MCP clients, configure the server command and environment variables in the client's configuration file.",
    "category": "Development Tools",
    "stars": 15,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "ta-tool": {
    "name": "LumiFAI MCP Technical Analysis Server",
    "githubLink": "https://github.com/Lumif-ai/mcp-ta-tool",
    "package": "lumifai-mcp-ta",
    "description": "A FastMCP server providing technical analysis tools for cryptocurrency trading data, focusing on EMA calculations for Binance pairs with MongoDB integration.",
    "installCommand": "git clone <repository-url> && cd lumifai-mcp-ta && uv sync",
    "requiredEnvVars": [
      "MONGODB_URI"
    ],
    "optionalParams": [
      "agent_name",
      "time_ago",
      "interval",
      "interval_frequency"
    ],
    "usageInstructions": "1. Clone the repository and navigate into the project directory. 2. Create a `.env` file with the MONGODB_URI set to your MongoDB connection string. 3. Run the server using `uv run mcp-server.py`. 4. Use the available tools: `get_emas(agent_name, time_ago, interval, interval_frequency)` for EMA calculations and `get_date_time()` for current date/time.",
    "category": "Analytics",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "mcpfoundrydev": {
    "name": "Foundry VTT MCP",
    "githubLink": "https://github.com/LesosAI/MCPFoundryDev",
    "package": "foundry-mcp.mcp",
    "description": "A structured developer prompt for creating Foundry VTT modules using best practices.",
    "installCommand": "No installation required, download the .mcp file directly",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this MCP server, download the foundry-mcp.mcp file from the GitHub repository and follow the instructions for integrating it with your Foundry VTT development environment.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "db-navigator": {
    "name": "MySQL Navigator MCP",
    "githubLink": "https://github.com/Medsaad/mcp-db-navigator",
    "package": "mcp-db-navigator",
    "description": "A powerful MySQL/MariaDB database navigation tool using MCP (Model Control Protocol) for easy database querying and management.",
    "installCommand": "pip install mcp-db-navigator",
    "requiredEnvVars": [
      "DB_HOST",
      "DB_PORT",
      "DB_NAME",
      "DB_USER",
      "DB_PASSWORD"
    ],
    "optionalParams": [
      "DB_SSL_CA",
      "DB_MAX_RETRIES",
      "DB_RETRY_DELAY"
    ],
    "usageInstructions": "1. Install the package using 'pip install mcp-db-navigator'.\n2. Create a .env file with your database credentials (DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD).\n3. Run the MCP server using 'mcp-db --config /path/to/your/project/.env'.\n4. For advanced usage, configure the server in Cursor or Claude Desktop by specifying the 'mcp-db' command with the '--config' argument pointing to your .env file.",
    "category": "Database",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "ghost": {
    "name": "Ghost MCP Server",
    "githubLink": "https://github.com/MFYDev/ghost-mcp",
    "package": "@fanyangmeng/ghost-mcp",
    "description": "A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude. It provides secure and comprehensive access to your Ghost blog, leveraging JWT authentication and a rich set of MCP tools for managing posts, users, members, tiers, offers, and newsletters.",
    "installCommand": "npx -y @fanyangmeng/ghost-mcp",
    "requiredEnvVars": [
      "GHOST_API_URL",
      "GHOST_ADMIN_API_KEY",
      "GHOST_API_VERSION"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "To use this with MCP clients, for instance, Claude Desktop, add the following to your `claude_desktop_config.json`:\n```json\n{\n  \"mcpServers\": {\n      \"ghost-mcp\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@fanyangmeng/ghost-mcp\"],\n        \"env\": {\n            \"GHOST_API_URL\": \"https://yourblog.com\",\n            \"GHOST_ADMIN_API_KEY\": \"your_admin_api_key\",\n            \"GHOST_API_VERSION\": \"v5.0\"\n        }\n      }\n    }\n}\n```\nEnsure the required environment variables are set for the server to function properly. Optional parameters like `PORT`, `DEBUG`, and `LOG_LEVEL` can be configured for customization.",
    "category": "API Integration",
    "stars": 65,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "tmdb": {
    "name": "TMDB MCP Server",
    "githubLink": "https://github.com/Laksh-star/mcp-server-tmdb",
    "package": "@Laksh-star/mcp-server-tmdb",
    "description": "MCP server integrating with The Movie Database (TMDB) API for movie information and recommendations",
    "installCommand": "npx -y @smithery/cli install @Laksh-star/mcp-server-tmdb --client claude",
    "requiredEnvVars": [
      "TMDB_API_KEY"
    ],
    "optionalParams": [
      "timeWindow"
    ],
    "usageInstructions": "1. Get TMDB API key from https://www.themoviedb.org/. 2. Configure Claude Desktop by adding server details to ~/Library/Application Support/Claude/config.json. 3. Use commands like 'Search for movies about artificial intelligence' or 'Get trending movies today'",
    "category": "API Integration",
    "stars": 45,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "speech": {
    "name": "Speech MCP",
    "githubLink": "https://github.com/Kvadratni/speech-mcp",
    "package": "speech-mcp",
    "description": "A Goose MCP extension for voice interaction with modern audio visualization, providing speech-to-text and text-to-speech capabilities.",
    "installCommand": "uv pip install -e .[all]",
    "requiredEnvVars": [
      "LDFLAGS",
      "CPPFLAGS"
    ],
    "optionalParams": [
      "SPEECH_MCP_TTS_VOICE"
    ],
    "usageInstructions": "1. Install PortAudio according to your OS instructions. 2. Run 'uv pip install -e .[all]' to install with all features. 3. Configure voice preferences through the UI or by setting SPEECH_MCP_TTS_VOICE environment variable.",
    "category": "AI/ML",
    "stars": 51,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "vikingdb": {
    "name": "VikingDB MCP Server",
    "githubLink": "https://github.com/KashiwaByte/vikingdb-mcp-server",
    "package": "@smithery/cli",
    "description": "An MCP server for VikingDB store and search functionality",
    "installCommand": "npx -y @smithery/cli install mcp-server-vikingdb --client claude",
    "requiredEnvVars": [
      "vikingdb_host",
      "vikingdb_region",
      "vikingdb_ak",
      "vikingdb_sk",
      "collection_name",
      "index_name"
    ],
    "optionalParams": [],
    "usageInstructions": "After installation, configure Claude Desktop by editing claude_desktop_config.json with the appropriate command and args. For development, use 'uv sync' to sync dependencies, 'uv build' to build distributions, and 'uv publish' to publish to PyPI.",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "ens": {
    "name": "ENS MCP Server",
    "githubLink": "https://github.com/JustaName-id/ens-mcp-server",
    "package": "mcp-server-ens",
    "description": "MCP Server for Ethereum Name Service (ENS) that enables resolving names, checking availability, and retrieving records.",
    "installCommand": "npx -y mcp-server-ens",
    "requiredEnvVars": [],
    "optionalParams": [
      "PROVIDER_URL"
    ],
    "usageInstructions": "1. Configure Ethereum providers by creating a .env file with PROVIDER_URL (optional). Defaults will be used if not set. 2. Add the server configuration to claude_desktop_config.json using either npx or local script method. 3. Verify Ethereum providers are working and accessible if you encounter errors.",
    "category": "API Integration",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "mac-apps-launcher": {
    "name": "Mac Apps Launcher MCP Server",
    "githubLink": "https://github.com/JoshuaRileyDev/mac-apps-launcher",
    "package": "@joshuarileydev/mac-apps-launcher-mcp-server",
    "description": "An MCP server for launching and managing macOS applications.",
    "installCommand": "npx -y @joshuarileydev/mac-apps-launcher-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add the server configuration to your Claude Config JSON file as shown in the README. The server manages applications in the /Applications folder.",
    "category": "Productivity",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "simulator": {
    "name": "iOS Simulator MCP Server",
    "githubLink": "https://github.com/JoshuaRileyDev/simulator-mcp-server",
    "package": "@joshuarileydev/simulator-mcp-server",
    "description": "A Model Context Protocol (MCP) server that provides programmatic control over iOS simulators through a standardized interface.",
    "installCommand": "npm install @joshuarileydev/simulator-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add the following to your Claude Config JSON file:\n\n{\n  \"mcpServers\": {\n    \"simulator\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"y\",\n        \"@joshuarileydev/simulator-mcp-server\"\n      ]\n    }\n  }\n}\n\nThis will allow you to control iOS simulators via the MCP interface.",
    "category": "Development Tools",
    "stars": 45,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "jina-ai": {
    "name": "Jina AI MCP Server",
    "githubLink": "https://github.com/JoeBuildsStuff/mcp-jina-ai",
    "package": "jina-ai-mcp-server",
    "description": "An MCP server that provides access to Jina AI's powerful web services through Claude, offering tools for web page reading, web search, and fact checking.",
    "installCommand": "npx -y @smithery/cli install jina-ai-mcp-server --client claude",
    "requiredEnvVars": [
      "JINA_API_KEY"
    ],
    "optionalParams": [
      "search_web results count",
      "output format (markdown, text, html)",
      "fact_check deep-dive mode",
      "cache control options",
      "image retention and alt text generation"
    ],
    "usageInstructions": "1. Obtain a Jina AI API key from https://jina.ai/. 2. Install the server using the recommended method: `npx -y @smithery/cli install jina-ai-mcp-server --client claude`. 3. Add the server configuration to your Claude Desktop config file with the `JINA_API_KEY` environment variable set. 4. Use the tools `read_webpage`, `search_web`, and `fact_check` to interact with Jina AI's web services.",
    "category": "Web Scraping",
    "stars": 27,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "deep-reasoning": {
    "name": "Deep Reasoning Server",
    "githubLink": "https://github.com/Lakphy/deep-reasoning-mcp",
    "package": "deep-reasoning-mcp",
    "description": "基于 Model Context Protocol (MCP) 的深度推理服务器，基于 deepseek-r1 模型，为 MCP Clients（如 Cursor）提供深度推理能力。",
    "installCommand": "npx -y deep-reasoning-mcp@latest",
    "requiredEnvVars": [
      "apiKey",
      "model"
    ],
    "optionalParams": [],
    "usageInstructions": "1. 安装 Node.js 环境。2. 使用命令 `npx -y deep-reasoning-mcp@latest --apiKey=<YOUR_OPENROUTER_API_KEY> --model=<YOUR_MODEL>` 启动服务器。3. 将其配置为 Cursor 的 MCP Server。",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "markitdown": {
    "name": "MarkItDown MCP Server",
    "githubLink": "https://github.com/KorigamiK/markitdown",
    "package": "@KorigamiK/markitdown_mcp_server",
    "description": "A Model Context Protocol (MCP) server that converts various file formats to Markdown using the MarkItDown utility.",
    "installCommand": "npx -y @smithery/cli install @KorigamiK/markitdown_mcp_server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install the server using the provided command.\n2. Configure it with an MCP client like Zed Editor by specifying the server command in the client's settings.\n3. Use the `/md <file>` command to convert files to Markdown.\n4. Ensure the server is running and accessible to the client.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "appinsightmcp": {
    "name": "App Market Intelligence MCP",
    "githubLink": "https://github.com/JiantaoFu/AppInsightMCP",
    "package": "@jeromyfu/app-insight-mcp",
    "description": "An MCP server providing market intelligence by analyzing data from Apple App Store and Google Play Store.",
    "installCommand": "npx -y @smithery/cli install @JiantaoFu/appinsightmcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "collection",
      "num",
      "category",
      "developer"
    ],
    "usageInstructions": "Start the MCP server using 'node src/server.js'. Configure in Claude Desktop by adding to claude_desktop_config.json. Supports Docker installation.",
    "category": "API Integration",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "jira-python": {
    "name": "MCP JIRA Python",
    "githubLink": "https://github.com/Kallows/mcp-jira-python",
    "package": "mcp_jira_python",
    "description": "A Python implementation of an MCP server for JIRA integration, providing tools to manage JIRA issues, comments, attachments, and relationships.",
    "installCommand": "git clone https://github.com/kallows/mcp-jira-python.git && cd mcp-jira-python && pip install -r requirements.txt",
    "requiredEnvVars": [
      "JIRA_HOST",
      "JIRA_EMAIL",
      "JIRA_API_TOKEN"
    ],
    "optionalParams": [
      "JIRA_PROJECT_KEY"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Set the required environment variables (JIRA_HOST, JIRA_EMAIL, JIRA_API_TOKEN). 3. Configure the server in claude_desktop_config.json with the correct command and directory path. 4. Restart Claude Desktop to enable the server. 5. Use the provided tools to interact with JIRA via the MCP interface.",
    "category": "API Integration",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "inspector-v0.6.0": {
    "name": "MCP-Inspector-v0.6.0 GitHub MCP Server",
    "githubLink": "https://github.com/Jehan26/MCP-Inspector-v0.6.0",
    "package": "github-mcp-server",
    "description": "An MCP server enabling AI assistants to interact with GitHub repositories, issues, and pull requests.",
    "installCommand": "git clone https://github.com/yourusername/github-mcp-server.git && cd github-mcp-server && pip install -r requirements.txt",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Set GITHUB_TOKEN environment variable: export GITHUB_TOKEN=your_github_token_here\n2. Run the server: python server.py\n3. Use endpoints like GET /mcp/discover and POST /mcp/execute",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "markdownify-utf8": {
    "name": "Markdownify MCP Server - UTF-8 Enhanced",
    "githubLink": "https://github.com/JDJR2024/markdownify-mcp-utf8",
    "package": "markdownify-mcp-utf8",
    "description": "An enhanced version of Markdownify MCP with improved UTF-8 encoding support and multilingual content handling.",
    "installCommand": "git clone https://github.com/JDJR2024/markdownify-mcp-utf8.git && cd markdownify-mcp-utf8 && pnpm install && pnpm run build",
    "requiredEnvVars": [
      "PYTHONIOENCODING",
      "UV_PATH"
    ],
    "optionalParams": [
      "MARKDOWN_OUTPUT_DIR",
      "DEBUG"
    ],
    "usageInstructions": "1. Clone the repository and cd into it.\n2. Install dependencies using 'pnpm install'.\n3. Build the project with 'pnpm run build'.\n4. Start the server using 'pnpm start'.\n5. Use 'python convert_utf8.py <url or file path>' to convert content to Markdown.",
    "category": "Productivity",
    "stars": 7,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "ingeniux-cms": {
    "name": "Ingeniux CMS MCP Server",
    "githubLink": "https://github.com/IngeniuxCorp/ingeniux-cms-mcp-server",
    "package": "ingeniux-cms-mcp-server",
    "description": "MCP server for integrating Ingeniux CMS with Cline IDE, providing CMS operations through natural language commands.",
    "installCommand": "npm install -g ingeniux-cms-mcp-server@latest",
    "requiredEnvVars": [
      "CMS_BASE_URL",
      "OAUTH_CLIENT_ID",
      "OAUTH_CLIENT_SECRET",
      "OAUTH_REDIRECT_URI"
    ],
    "optionalParams": [
      "API_TIMEOUT",
      "MAX_RETRIES",
      "LOG_LEVEL",
      "CACHE_TTL",
      "ENABLE_FILE_LOGGING"
    ],
    "usageInstructions": "1. Install using 'npm install -g ingeniux-cms-mcp-server@latest'. 2. Configure mcp.json with server details and environment variables. 3. Restart Cline IDE. 4. Use natural language commands in Cline agent chat to invoke CMS operations.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/p52cbf1ea7s.ico"
  },
  "dingdingbot": {
    "name": "MCP DingDing Bot Server",
    "githubLink": "https://github.com/HundunOnline/mcp-dingdingbot-server",
    "package": "mcp-dingdingbot-server",
    "description": "An MCP server application that sends various types of messages to DingDing group robots.",
    "installCommand": "git clone https://github.com/HundunOnline/mcp-dingdingbot-server.git && cd mcp-dingdingbot-server && make build && sudo ln -s $PWD/dist/mcp-dingdingbot-server_xxx_xxxx /usr/local/bin/mcp-dingdingbot-server",
    "requiredEnvVars": [
      "DINGDING_BOT_WEBHOOK_KEY"
    ],
    "optionalParams": [
      "DINGDING_BOT_SIGN_KEY"
    ],
    "usageInstructions": "Configure the server by setting the required environment variables. Use the command 'mcp-dingdingbot-server' to start the server. Refer to the configuration guide for DingDing group robot setup: https://open.dingtalk.com/document/robots/custom-robot-access",
    "category": "Communication",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "command-proxy": {
    "name": "MCP Command Proxy",
    "githubLink": "https://github.com/Hormold/mcp-command-proxy",
    "package": "mcp-command-proxy",
    "description": "An MCP server that acts as a proxy for CLI commands, specifically designed for Expo development but adaptable for any command-line application.",
    "installCommand": "pnpm install -g mcp-command-proxy",
    "requiredEnvVars": [],
    "optionalParams": [
      "--prefix",
      "--command",
      "--buffer-size",
      "--port"
    ],
    "usageInstructions": "To use: 1) Run `mcp-command-proxy --prefix 'ServerName' --command 'your_command'` 2) Configure Cursor settings: MCP -> +Add new MCP server with URL http://localhost:port/sse 3) Use MCP tools like getRecentLogs and sendKeyPress",
    "category": "Development Tools",
    "stars": 9,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "find-similar-github-issues": {
    "name": "GitHub Support Assistant",
    "githubLink": "https://github.com/Jake-Mok-Nelson/mcp-find-similar-github-issues",
    "package": "mcp-find-similar-github-issues",
    "description": "An MCP server that helps support engineers find similar GitHub issues to speed up troubleshooting.",
    "installCommand": "git clone https://github.com/Jake-Mok-Nelson/mcp-find-similar-github-issues && cd mcp-find-similar-github-issues && npm install",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "MAX_RESULTS"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with 'npm install'. 2. Set your GitHub token as an environment variable. 3. Build the server with 'npm run build'. 4. Integrate with Claude by updating the configuration file to include the server path. 5. Use the 'find-similar-issues' tool by providing repository owner, name, issue description, and optional max results.",
    "category": "Development Tools",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "linkedin": {
    "name": "MCP Server for LinkedIn",
    "githubLink": "https://github.com/Hritik003/linkedin-mcp",
    "package": "linkedin-mcp",
    "description": "A Model Context Protocol (MCP) server for LinkedIn to seamlessly apply for jobs, search through the feed, and retrieve user profiles using an unofficial LinkedIn API.",
    "installCommand": "git clone https://github.com/Hritik003/linkedin-mcp && cd linkedin-mcp && pip install -r requirements.txt",
    "requiredEnvVars": [
      "LINKEDIN_EMAIL",
      "LINKEDIN_PASSWORD"
    ],
    "optionalParams": [
      "SEARCH_KEYWORDS",
      "LOCATION",
      "EXPERIENCE_LEVEL",
      "JOB_TYPE",
      "REMOTE_OPTIONS",
      "DATE_POSTED",
      "LIMIT",
      "OFFSET"
    ],
    "usageInstructions": "After installation, configure the server by setting the required environment variables (LINKEDIN_EMAIL and LINKEDIN_PASSWORD). Use the provided configuration file to adjust the LOCAL_PATH and run the linkedin.py script. Test the server using the MCP-client for job search, profile retrieval, and feed post fetching.",
    "category": "API Integration",
    "stars": 18,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "resend": {
    "name": "Resend MCP Server",
    "githubLink": "https://github.com/Hawstein/resend-mcp",
    "package": "resend-mcp",
    "description": "An MCP server for the Resend API that allows LLMs to compose and send emails.",
    "installCommand": "npx -y resend-mcp",
    "requiredEnvVars": [
      "RESEND_API_KEY",
      "SENDER_EMAIL_ADDRESS"
    ],
    "optionalParams": [
      "REPLY_TO_EMAIL_ADDRESSES"
    ],
    "usageInstructions": "1. Sign up for a Resend account and generate an API key.\n2. Set the required environment variables: RESEND_API_KEY and SENDER_EMAIL_ADDRESS.\n3. Optionally set REPLY_TO_EMAIL_ADDRESSES if needed.\n4. Run the server using the install command provided.\n5. Use the `send_email` tool to send emails via the Resend API with the specified parameters.",
    "category": "Communication",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "clicksend": {
    "name": "ClickSend MCP Server",
    "githubLink": "https://github.com/J-Gal02/clicksend-mcp",
    "package": "clicksend-mcp",
    "description": "An MCP server that enables AI models to send SMS messages and initiate Text-to-Speech (TTS) calls using ClickSend's API.",
    "installCommand": "git clone https://github.com/J-Gal02/clicksend-mcp.git && cd clicksend-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "CLICKSEND_USERNAME",
      "CLICKSEND_API_KEY"
    ],
    "optionalParams": [
      "CLICKSEND_SENDER_ID",
      "CLICKSEND_VOICE",
      "CLICKSEND_RATE_LIMIT",
      "CLICKSEND_LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies. 2. Build the project with 'npm run build'. 3. Add the server configuration to your MCP client's settings file (e.g., cline_mcp_settings.json) with the correct path to the build folder and your ClickSend credentials. 4. Use the 'send_sms' and 'make_tts_call' tools with valid phone numbers and message content. 5. The server enforces a rate limit of 5 actions per minute.",
    "category": "Communication",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "readwise": {
    "name": "Readwise MCP Server",
    "githubLink": "https://github.com/IAmAlexander/readwise-mcp",
    "package": "readwise-mcp",
    "description": "An MCP server that provides access to Readwise library highlights and documents, with integration for Claude and other MCP-compatible assistants.",
    "installCommand": "npm install -g readwise-mcp",
    "requiredEnvVars": [
      "READWISE_API_KEY"
    ],
    "optionalParams": [
      "transport",
      "port",
      "debug",
      "log_level",
      "cache_size",
      "max_connections",
      "timeout"
    ],
    "usageInstructions": "1. Get your Readwise API key from https://readwise.io/access_token\n2. Run 'npm run setup' or start with --api-key YOUR_API_KEY\n3. Start the server with 'readwise-mcp' for stdio transport or 'readwise-mcp --transport sse --port 3000' for SSE\n4. Use the MCP Inspector with './scripts/inspector.sh' or 'npm run inspector' for testing\n5. Available tools: get_highlights, get_books, get_documents, search_highlights\n6. Available prompts: readwise_highlight, readwise_search",
    "category": "Knowledge Management",
    "stars": 20,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "matter-ai": {
    "name": "Matter AI MCP Server",
    "githubLink": "https://github.com/GravityCloudAI/matter-ai-mcp",
    "package": "matter-ai-mcp",
    "description": "Matter AI MCP Server provides code review tools, implementation planning, and pull request generation for AI agents in IDEs.",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "MATTER_AI_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Obtain API key from https://app.matterai.dev/settings\n2. Create MCP configuration file with API key\n3. Run server using 'python server.py'\n4. Connect to http://localhost:9000/sse from supported IDEs",
    "category": "Development Tools",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/wvtbo7nq3zd.png"
  },
  "hana": {
    "name": "HANA Cloud MCP Server",
    "githubLink": "https://github.com/HatriGt/hana-mcp-server",
    "package": "hana-mcp-server",
    "description": "MCP server implementation for SAP HANA Cloud DB integration with Cursor IDE, providing model registry, context management, and protocol adapters.",
    "installCommand": "git clone https://github.com/HatriGt/hana-mcp-server.git && cd hana-mcp-server && python -m venv venv && source venv/bin/activate && pip install -r requirements.txt && python setup.py",
    "requiredEnvVars": [
      "HANA_HOST",
      "HANA_PORT",
      "HANA_USER",
      "HANA_PASSWORD"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "After installation, configure your HANA Cloud connection by following the setup script prompts. The server uses a .env file for additional configuration. Ensure you have Python3.8+, SAP HANA Cloud Database, Flask, HDBCLI, and Pandas installed.",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "yolo": {
    "name": "YOLO MCP Service",
    "githubLink": "https://github.com/GongRzhe/YOLO-MCP-Server",
    "package": "yolo-mcp-service",
    "description": "A powerful YOLO computer vision service integrating with Claude AI through Model Context Protocol (MCP) for object detection, segmentation, and classification.",
    "installCommand": "git clone https://github.com/GongRzhe/YOLO-MCP-Server.git . && python -m venv .venv && source .venv/bin/activate && python setup.py",
    "requiredEnvVars": [],
    "optionalParams": [
      "CONFIG[\"model_dirs\"]"
    ],
    "usageInstructions": "1. Clone the repository and navigate to it.\n2. Create and activate a virtual environment.\n3. Run 'python setup.py' to install dependencies and generate MCP configuration.\n4. Download YOLO models to the models directory.\n5. Configure Claude Desktop by merging the generated configuration into your Claude Desktop configuration file.",
    "category": "AI/ML",
    "stars": 16,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "quickchart": {
    "name": "Quickchart MCP Server",
    "githubLink": "https://github.com/GongRzhe/Quickchart-MCP-Server",
    "package": "@gongrzhe/quickchart-mcp-server",
    "description": "An MCP server for generating charts using QuickChart.io",
    "installCommand": "npm install @gongrzhe/quickchart-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "chart type",
      "data",
      "labels",
      "datasets",
      "colors",
      "output path"
    ],
    "usageInstructions": "1. Install using npm install @gongrzhe/quickchart-mcp-server. 2. Configure Claude Desktop by adding server config to claude_desktop_config.json. 3. Use 'generate_chart' or 'download_chart' tools with appropriate Chart.js configuration.",
    "category": "Data Storage",
    "stars": 127,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "keitaro": {
    "name": "Keitaro TDS API MCP Plugin",
    "githubLink": "https://github.com/GodzillaDancer/keitaro-mcp",
    "package": "mcp-keitaro-tds",
    "description": "MCP server for integration with Keitaro TDS API, providing tools to work with campaigns, streams, offers, and other Keitaro entities.",
    "installCommand": "git clone https://github.com/GodzillaDancer/keitaro-mcp.git && cd mcp-keitaro-tds && npm install && npm install -g . && node install-cursor-plugin.js",
    "requiredEnvVars": [
      "KEITARO_API_URL",
      "KEITARO_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create .env file with KEITARO_API_URL and KEITARO_API_KEY\n2. Configure Cursor MCP configuration file (~/.cursor/mcp.json)\n3. Launch Cursor and select Keitaro from command palette",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/b2oon9h9a7.png"
  },
  "handwriting-ocr": {
    "name": "Handwriting OCR MCP Server",
    "githubLink": "https://github.com/Handwriting-OCR/handwriting-ocr-mcp-server",
    "package": "@Handwriting-OCR/handwriting-ocr-mcp-server",
    "description": "A Model Context Protocol (MCP) Server that integrates with the Handwriting OCR API to enable document transcription via OCR, allowing users to upload images/PDFs, check status, and retrieve OCR results as Markdown.",
    "installCommand": "npx -y @smithery/cli install @Handwriting-OCR/handwriting-ocr-mcp-server --client claude",
    "requiredEnvVars": [
      "API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install Node.js (18.x or higher). 2. Create an account on the Handwriting OCR Platform and obtain an API token. 3. Set the API_TOKEN environment variable with your token. 4. Use the server to upload documents, check status, and retrieve OCR results as Markdown.",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "dubco": {
    "name": "Dub.co MCP Server",
    "githubLink": "https://github.com/Gitmaxd/dubco-mcp-server",
    "package": "dubco-mcp-server",
    "description": "An MCP server for interacting with the Dub.co link shortener API, allowing AI agents to create, update, and manage short links.",
    "installCommand": "npm install -g dubco-mcp-server",
    "requiredEnvVars": [
      "DUBCO_API_KEY"
    ],
    "optionalParams": [
      "DUBCO_DOMAIN",
      "DUBCO_EXTERNAL_ID",
      "DUBCO_KEY",
      "DUBCO_LINK_ID",
      "DUBCO_URL"
    ],
    "usageInstructions": "After installation, configure the server in your MCP configuration with the DUBCO_API_KEY environment variable. Use the provided tools (create_link, update_link, upsert_link, delete_link) to manage short links via Dub.co. Ensure you have a Dub.co account and API key before use.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "redis": {
    "name": "Redis MCP Server",
    "githubLink": "https://github.com/GongRzhe/REDIS-MCP-Server",
    "package": "@gongrzhe/server-redis-mcp",
    "description": "A Redis Model Context Protocol (MCP) server implementation for interacting with Redis databases. It enables LLMs to interact with Redis key-value stores through a set of standardized tools.",
    "installCommand": "npx @gongrzhe/server-redis-mcp@1.0.0 redis://your-redis-host:port",
    "requiredEnvVars": [
      "redis://your-redis-host:port"
    ],
    "optionalParams": [
      "expireSeconds",
      "pattern"
    ],
    "usageInstructions": "To use the Redis MCP Server, run the installation command with the Redis connection URL. For advanced usage, configure the server in the 'mcpServers' section of your 'claude_desktop_config.json' file. For Docker usage, use the provided Docker command with the Redis URL. Ensure Redis is running and accessible at the specified host and port.",
    "category": "Data Storage",
    "stars": 27,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "audio": {
    "name": "Audio MCP Server",
    "githubLink": "https://github.com/GongRzhe/Audio-MCP-Server",
    "package": "@GongRzhe/Audio-MCP-Server",
    "description": "An MCP server that provides audio input/output capabilities for AI assistants like Claude, enabling microphone recording, speaker playback, and audio file handling.",
    "installCommand": "npx -y @smithery/cli install @GongRzhe/Audio-MCP-Server --client claude",
    "requiredEnvVars": [
      "PYTHONPATH"
    ],
    "optionalParams": [
      "duration",
      "sample_rate",
      "channels",
      "device_index",
      "text",
      "voice",
      "file_path"
    ],
    "usageInstructions": "1. Install via Smithery with the provided command or manually clone the repository and install dependencies. 2. Configure the server in Claude Desktop's configuration file with the correct paths. 3. Restart Claude Desktop and use the hammer icon to access audio tools. 4. Use commands like 'list_audio_devices', 'record_audio', 'play_latest_recording', and 'play_audio_file' to interact with the server.",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "pulsar": {
    "name": "Pulsar MCP Server",
    "githubLink": "https://github.com/Germain-D/pulsar-mcp-server",
    "package": "pulsar-mcp-server",
    "description": "An MCP server for Apache Pulsar that provides tools to interact with Pulsar clusters through MCP-compatible clients.",
    "installCommand": "pip install pulsar-mcp-server",
    "requiredEnvVars": [
      "PULSAR_SERVICE_URL",
      "PULSAR_WEB_SERVICE_URL"
    ],
    "optionalParams": [
      "TOPIC_NAME",
      "SUBSCRIPTION_NAME",
      "SUBSCRIPTION_TYPE",
      "IS_TOPIC_READ_FROM_BEGINNING",
      "PULSAR_TOKEN",
      "PULSAR_TLS_TRUST_CERTS_FILE_PATH",
      "PULSAR_TLS_ALLOW_INSECURE_CONNECTION"
    ],
    "usageInstructions": "After installation, run 'pulsar-mcp-server'. Configure using environment variables or a .env file. For Cursor MCP usage, add configuration to ~/.cursor/mcp.json.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/wnjmyihcx4e.webp"
  },
  "wolframalpha-llm": {
    "name": "WolframAlpha LLM MCP Server",
    "githubLink": "https://github.com/Garoth/wolframalpha-llm-mcp",
    "package": "wolframalpha-llm-mcp",
    "description": "An MCP server providing access to WolframAlpha's LLM API for querying various domains and getting structured responses.",
    "installCommand": "git clone https://github.com/Garoth/wolframalpha-llm-mcp.git && cd wolframalpha-llm-mcp && npm install",
    "requiredEnvVars": [
      "WOLFRAM_LLM_APP_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Get WolframAlpha API key from developer.wolframalpha.com. 2. Configure in Cline MCP settings.json: 'env': {'WOLFRAM_LLM_APP_ID': 'your-api-key'} with command: 'node' and args: ['/path/to/build/index.js']. 3. Run using configured settings in VSCode.",
    "category": "API Integration",
    "stars": 34,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "focus": {
    "name": "Focus Data MCP Server",
    "githubLink": "https://github.com/FocusSearch/focus",
    "package": "focus_mcp_data",
    "description": "An MCP server enabling AI assistants to query data results from DataFocus using natural language.",
    "installCommand": "git clone https://github.com/FocusSearch/focus_mcp_data.git && cd focus_mcp_data && gradle clean && gradle bootJar",
    "requiredEnvVars": [
      "bearer token"
    ],
    "optionalParams": [
      "name",
      "language",
      "chatId",
      "input"
    ],
    "usageInstructions": "1. Register on DataFocus and obtain bearer token. 2. Clone repository and build using gradle. 3. Configure MCP settings in ~/AppData/Roaming/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json with command: java -jar path/to/focus_mcp_data/focus_mcp_data.jar",
    "category": "Data Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "systemprompt-notion": {
    "name": "SystemPrompt MCP Notion Server",
    "githubLink": "https://github.com/Ejb503/systemprompt-mcp-notion",
    "package": "systemprompt-mcp-notion",
    "description": "A high-performance MCP server integrating Notion into AI workflows, enabling AI agents to interact with Notion pages and databases.",
    "installCommand": "npx -y systemprompt-mcp-notion",
    "requiredEnvVars": [
      "SYSTEMPROMPT_API_KEY",
      "NOTION_API_KEY"
    ],
    "optionalParams": [
      "MCP configuration options"
    ],
    "usageInstructions": "1. Install via Smithery or npm. 2. Create a .env file with SYSTEMPROMPT_API_KEY and NOTION_API_KEY. 3. Configure MCP client to use the server.",
    "category": "AI/ML",
    "stars": 19,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "systemprompt-gmail": {
    "name": "Systemprompt MCP Gmail Server",
    "githubLink": "https://github.com/Ejb503/systemprompt-mcp-gmail",
    "package": "systemprompt-mcp-gmail",
    "description": "A specialized MCP server for Gmail integration with AI Agent capabilities",
    "installCommand": "npx -y systemprompt-mcp-gmail",
    "requiredEnvVars": [
      "GOOGLE_CREDENTIALS",
      "GOOGLE_TOKEN",
      "API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Generate base64 encoded GOOGLE_CREDENTIALS and GOOGLE_TOKEN using the script from https://github.com/Ejb503/multimodal-mcp-client/blob/master/scripts/google-auth/README.md \n2. Set GOOGLE_CREDENTIALS and GOOGLE_TOKEN as environment variables \n3. Get API_KEY from https://systemprompt.io/console and set it as an environment variable \n4. Run the server using 'npx -y systemprompt-mcp-gmail'",
    "category": "API Integration",
    "stars": 8,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "systemprompt-core": {
    "name": "Systemprompt Agent Server",
    "githubLink": "https://github.com/Ejb503/systemprompt-mcp-core",
    "package": "systemprompt-mcp-core",
    "description": "A specialized Model Context Protocol (MCP) server for creating, managing, and extending AI agents through a powerful prompt and tool management system.",
    "installCommand": "npx -y @smithery/cli install systemprompt-agent-server --client claude",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "MAX_CONCURRENT_REQUESTS",
      "NOTIFICATION_ENDPOINT"
    ],
    "usageInstructions": "1. Get an API key from https://systemprompt.io/console.\n2. Install the server using the provided install command.\n3. Set the API_KEY environment variable with your key.\n4. Configure the server to work with the multimodal-mcp-client for full functionality.\n5. Use the server to manage AI agents, system prompts, and tools via MCP.",
    "category": "AI/ML",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "math": {
    "name": "Math-MCP",
    "githubLink": "https://github.com/EthanHenrickson/math-mcp",
    "package": "@EthanHenrickson/math-mcp",
    "description": "A Model Context Protocol (MCP) server that provides basic mathematical and statistical functions to Large Language Models (LLMs).",
    "installCommand": "npx -y @smithery/cli install @EthanHenrickson/math-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After installation, add the server to your MCP configuration file with the command and path to the server's index.js file. The server provides functions like add, subtract, multiply, division, sum, average, min, max, floor, ceiling, and round for numerical calculations.",
    "category": "Development Tools",
    "stars": 14,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "for-mas-developments": {
    "name": "privateGPT MCP Server",
    "githubLink": "https://github.com/Fujitsu-AI/MCP-Server-for-MAS-Developments",
    "package": "privategpt-mcp-server",
    "description": "A Model Context Protocol (MCP) server that bridges MCP clients with privateGPT, enabling secure chat, knowledge source management, and group-based permissions.",
    "installCommand": "git clone https://github.com/Fujitsu-AI/MCP-Server-for-MAS-Developments.git && cd MCP-Server-for-MAS-Developments && pip install -r requirements.txt",
    "requiredEnvVars": [
      "PRIVATEGPT_API_KEY",
      "MCP_SERVER_PORT",
      "MCP_SERVER_HOST",
      "ENCRYPTION_KEY",
      "LOG_FILE_PATH"
    ],
    "optionalParams": [
      "MCP_SERVER_LOG_LEVEL",
      "ENABLE_CHAT",
      "ENABLE_DELETE_CHAT",
      "ENABLE_LIST_GROUPS",
      "ENABLE_SSL",
      "SSL_CERT_PATH",
      "SSL_KEY_PATH"
    ],
    "usageInstructions": "After installation, configure the server using the `config.yaml` file. Set required environment variables like API keys and encryption keys. Start the server with `python main.py`. Use an MCP-compatible client to connect and interact with privateGPT through the server.",
    "category": "AI/ML",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "sketchfab": {
    "name": "Sketchfab MCP Server",
    "githubLink": "https://github.com/Eddydpyl/sketchfab",
    "package": "sketchfab-mcp",
    "description": "A microservice for interacting with the Sketchfab API using MCP, allowing model search and download.",
    "installCommand": "env SKETCHFAB_API_TOKEN=YOUR_TOKEN uvx sketchfab-mcp",
    "requiredEnvVars": [
      "SKETCHFAB_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Create a Sketchfab account. 2. Get your API token from https://sketchfab.com/settings/password. 3. Set SKETCHFAB_API_TOKEN environment variable with your token. Alternatively, use Docker: docker build -t sketchfab-mcp . && docker run -it --rm -p8000:8000 -e SKETCHFAB_API_TOKEN=YOUR_TOKEN sketchfab-mcp",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "systemprompt-interview": {
    "name": "systemprompt-mcp-interview",
    "githubLink": "https://github.com/Ejb503/systemprompt-mcp-interview",
    "package": "systemprompt-mcp-interview",
    "description": "A specialized Model Context Protocol (MCP) server enabling AI-powered interview roleplay scenarios with interactive voice interface.",
    "installCommand": "npm install systemprompt-mcp-interview",
    "requiredEnvVars": [
      "SYSTEMPROMPT_API_KEY"
    ],
    "optionalParams": [
      "CV_URI",
      "INTERVIEW_CONFIG",
      "VOICE_MODEL",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Connect the MCP server in your systemprompt.io console. 2. Add a CV in text format using the summarize_cv tool. 3. List CVs and copy the URI of the resource. 4. Configure the interview using the configure_interview tool with the resource URI and your instructions. 5. Activate the agent to start the roleplay interview. Demo videos are available for setup and demonstration.",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "pocketbase": {
    "name": "Advanced PocketBase MCP Server",
    "githubLink": "https://github.com/DynamicEndpoints/pocketbase-mcp-server",
    "package": "pocketbase-mcp-server",
    "description": "A comprehensive MCP server providing advanced tools for interacting with PocketBase databases, including schema management, data manipulation, and full Cloudflare Workers support for serverless deployment.",
    "installCommand": "npm install pocketbase-mcp-server",
    "requiredEnvVars": [
      "POCKETBASE_API_URL",
      "POCKETBASE_ADMIN_TOKEN",
      "SMTP_HOST",
      "SMTP_PORT",
      "SMTP_USER",
      "SMTP_PASSWORD"
    ],
    "optionalParams": [
      "STRIPE_SECRET_KEY",
      "STRIPE_WEBHOOK_SECRET",
      "CLOUDFLARE_ACCOUNT_ID",
      "CLOUDFLARE_API_TOKEN",
      "LOG_LEVEL",
      "MAX_CONCURRENT_SESSIONS"
    ],
    "usageInstructions": "1. Set required environment variables (POCKETBASE_API_URL, POCKETBASE_ADMIN_TOKEN, SMTP credentials). 2. Optionally configure Stripe and Cloudflare for advanced features. 3. Run the server using `npm start`. 4. Use MCP tools for database operations, email management, and payment processing. 5. For Cloudflare deployment, configure `wrangler.toml` and deploy with `wrangler publish`.",
    "category": "Data Storage",
    "stars": 42,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "huntress": {
    "name": "Huntress API MCP Server",
    "githubLink": "https://github.com/DynamicEndpoints/huntress-mcp-server",
    "package": "@smithery/cli",
    "description": "An MCP server providing programmatic access to Huntress API functionality including account management, organization management, and incident reports.",
    "installCommand": "npx -y @smithery/cli install huntress-mcp-server --client claude",
    "requiredEnvVars": [
      "HUNTRESS_API_KEY",
      "HUNTRESS_API_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install via Smithery CLI or manual installation. 2. For manual installation: Clone the repository, run 'npm install', create .env file with HUNTRESS_API_KEY and HUNTRESS_API_SECRET, then run 'npm run build'. 3. Configure MCP settings with server command and environment variables.",
    "category": "API Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "automated-bod-25-01-cisa-microsoft-policies": {
    "name": "CISA M365 MCP Server",
    "githubLink": "https://github.com/DynamicEndpoints/Automated-BOD-25-01-CISA-Microsoft-Policies-MCP",
    "package": "@smithery/cli",
    "description": "MCP server implementing CISA BOD25-01 security controls for Microsoft365",
    "installCommand": "npx -y @smithery/cli install cisa-m365",
    "requiredEnvVars": [
      "TENANT_ID",
      "CLIENT_ID",
      "CLIENT_SECRET"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Configure Azure AD application with required permissions. 2. Create .env file with TENANT_ID, CLIENT_ID, and CLIENT_SECRET. 3. Configure MCP settings in JSON file. 4. Use available tools like block_legacy_auth, enforce_phishing_resistant_mfa.",
    "category": "Security",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "docswrite": {
    "name": "Docswrite MCP Server",
    "githubLink": "https://github.com/Docswrite/docswrite-mcp",
    "package": "docswrite-mcp",
    "description": "An MCP server that integrates Google Docs and WordPress through Docswrite, enabling document creation, publishing, and management.",
    "installCommand": "git clone https://github.com/Docswrite/docswrite-mcp.git && cd docswrite-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "DOCSWWRITE_TOKEN"
    ],
    "optionalParams": [
      "google_docs_url",
      "title",
      "slug",
      "tags",
      "categories",
      "state",
      "author",
      "date",
      "excerpt",
      "post_type",
      "featured_image_url",
      "featured_image_alt_text",
      "featured_image_caption",
      "export_settings",
      "newspack_settings",
      "yoast_settings",
      "rankmath_settings"
    ],
    "usageInstructions": "1. Create a Google Cloud Project and enable Google Docs API and Google Drive API. 2. Configure OAuth2 credentials and save as credentials.json. 3. Run the server with: node dist/index.js --docswriteToken=your-docswrite-token",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "meta": {
    "name": "Meta MCP Server",
    "githubLink": "https://github.com/DMontgomery40/meta-mcp-server",
    "package": "meta-mcp-server",
    "description": "A tool for dynamically generating customized MCP servers by specifying directories and files to be created, with support for automated file management and MCP tool integration.",
    "installCommand": "npx -y meta-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "directories",
      "files",
      "tool configurations"
    ],
    "usageInstructions": "1. Install using the command: npx -y meta-mcp-server. 2. Configure by specifying directories and files to be created. 3. Utilize the MCP SDK for tool integration. 4. Enable debugging support for detailed logging.",
    "category": "Development Tools",
    "stars": 13,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "polygon": {
    "name": "Polygon MCP Server",
    "githubLink": "https://github.com/Dbillionaer/polygon-mcp",
    "package": "polygon-mcp",
    "description": "An MCP server providing seamless integration with the Polygon blockchain network for AI assistants.",
    "installCommand": "git clone https://github.com/Dbillionaer/polygon-mcp.git && cd polygon-mcp && npm install",
    "requiredEnvVars": [
      "POLYGON_MAINNET_RPC",
      "POLYGON_AMOY_RPC",
      "ETHEREUM_RPC_URL",
      "POLYGONSCAN_API_KEY",
      "PRIVATE_KEY"
    ],
    "optionalParams": [
      "DEFAULT_NETWORK",
      "DEFAULT_SLIPPAGE",
      "DEFAULT_DEADLINE_MINUTES"
    ],
    "usageInstructions": "1. Create a .env file with required environment variables.\n2. Run 'npm start' to start the server.\n3. Use provided API methods like 'getAddress()', 'listBalances()', 'transferFunds()' for wallet operations.",
    "category": "Blockchain",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "canvas-lms": {
    "name": "Canvas MCP Server",
    "githubLink": "https://github.com/DMontgomery40/mcp-canvas-lms",
    "package": "canvas-mcp-server",
    "description": "A comprehensive Model Context Protocol (MCP) server for Canvas LMS with complete student, instructor, and account administration functionality",
    "installCommand": "npm install -g canvas-mcp-server",
    "requiredEnvVars": [
      "CANVAS_API_TOKEN",
      "CANVAS_DOMAIN"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Install using 'npm install -g canvas-mcp-server'. 2. Set CANVAS_API_TOKEN and CANVAS_DOMAIN environment variables. 3. Run 'canvas-mcp-server'. For Docker: 'docker run -d --name canvas-mcp -e CANVAS_API_TOKEN=\"your_token\" -e CANVAS_DOMAIN=\"school.instructure.com\" ghcr.io/dmontgomery40/mcp-canvas-lms:latest'",
    "category": "API Integration",
    "stars": 30,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "alphavantagemcpserver": {
    "name": "Alphavantage MCP Server",
    "githubLink": "https://github.com/DonMorr/AlphavantageMCPServer",
    "package": "alphavantage",
    "description": "An MCP server for the Alphavantage stock market data API, enabling integration with tools like Claude Desktop.",
    "installCommand": "git clone https://github.com/DonMorr/AlphavantageMCPServer && cd AlphavantageMCPServer && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "ALPHAVANTAGE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Sign up for a free Alphavantage API key at https://www.alphavantage.co/support/#api-key.\n2. Set the `ALPHAVANTAGE_API_KEY` environment variable with your key.\n3. Configure the server in your `claude_desktop_config.json` as shown in the README with the correct directory path.\n4. Run the server using the specified command in the configuration.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "cloudflare-github-backup": {
    "name": "Cloudflare to GitHub Backup MCP Server",
    "githubLink": "https://github.com/DynamicEndpoints/cloudflare-github-backup-mcp",
    "package": "@DynamicEndpoints/cloudflare-github-backup-mcp",
    "description": "An MCP server that backs up Cloudflare projects to a GitHub repository.",
    "installCommand": "npx -y @smithery/cli install @DynamicEndpoints/cloudflare-github-backup-mcp --client claude",
    "requiredEnvVars": [
      "CLOUDFLARE_API_TOKEN",
      "GITHUB_ACCESS_TOKEN",
      "GITHUB_REPO_NAME"
    ],
    "optionalParams": [
      "GITHUB_REPO_NAME (optional if default is used)",
      "LOG_LEVEL (optional for debugging)"
    ],
    "usageInstructions": "1. Install the server using the provided install command.\n2. Configure the `cline_mcp_settings.json` file with your Cloudflare API token, GitHub access token, and repository name.\n3. Restart the VS Code extension to start the MCP server.\n4. Use the `use_mcp_tool` tool to call the `backup_projects` function to initiate the backup process.",
    "category": "Cloud Services",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "hal": {
    "name": "HAL (HTTP API Layer)",
    "githubLink": "https://github.com/DeanWard/HAL",
    "package": "hal-mcp",
    "description": "HAL is a Model Context Protocol (MCP) server that provides HTTP API capabilities to Large Language Models. It allows LLMs to make HTTP requests and interact with web APIs through a secure, controlled interface.",
    "installCommand": "npx -y hal-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "HAL_SWAGGER_FILE",
      "HAL_API_BASE_URL",
      "HAL_SECRET_*",
      "HAL_ALLOW_*",
      "HAL_WHITELIST_URLS",
      "HAL_BLACKLIST_URLS"
    ],
    "usageInstructions": "HAL is designed to work with MCP-compatible clients. To use it, add HAL to your MCP configuration with the command `npx hal-mcp`. For Swagger/OpenAPI integration, set the `HAL_SWAGGER_FILE` and `HAL_API_BASE_URL` environment variables. Secrets can be managed using `HAL_SECRET_*` variables and referenced in requests using `{secrets.key}` syntax. HAL provides secure secret management and URL restrictions for enhanced security.",
    "category": "API Integration",
    "stars": 27,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/dttnm2pgcda.jpg"
  },
  "netlify": {
    "name": "Netlify MCP Server",
    "githubLink": "https://github.com/DynamicEndpoints/Netlify-MCP-Server",
    "package": "netlify-mcp-server",
    "description": "A Model Context Protocol (MCP) server for Netlify, providing comprehensive access to all Netlify CLI features through the latest MCP SDK and Netlify CLI.",
    "installCommand": "npm install -g netlify-mcp-server",
    "requiredEnvVars": [
      "NETLIFY_AUTH_TOKEN",
      "NETLIFY_SITE_ID"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "NETLIFY_API_URL",
      "NETLIFY_TEAM_ID",
      "NETLIFY_ACCOUNT_ID"
    ],
    "usageInstructions": "1. Set required environment variables: NETLIFY_AUTH_TOKEN and NETLIFY_SITE_ID.\n2. Optionally configure PORT, DEBUG, or other optional parameters.\n3. Run the server using the installed CLI command.\n4. Use the provided tools to interact with Netlify resources and manage deployments, functions, and analytics.",
    "category": "API Integration",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "coresignal": {
    "name": "Coresignal MCP Server",
    "githubLink": "https://github.com/Coresignal-com/coresignal-mcp",
    "package": "mcp-remote",
    "description": "Enables AI applications to access B2B data about companies, employees, and job postings via a Model Context Protocol (MCP) server",
    "installCommand": "npm install -g mcp-remote@0.0.22",
    "requiredEnvVars": [
      "APIKEY_VALUE"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install Node.js\n2. Run 'npm install -g mcp-remote@0.0.22' to install the client\n3. Configure with the provided JSON format in your MCP client configuration\n4. Replace '<api_key>' with your actual API key\n5. Connect to https://mcp.coresignal.com/sse using the configured client",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/y17mzpbw85b.png"
  },
  "3d-printer": {
    "name": "MCP 3D Printer Server",
    "githubLink": "https://github.com/DMontgomery40/mcp-3D-printer-server",
    "package": "mcp-3d-printer-server",
    "description": "An MCP server that connects to 3D printer management systems like OctoPrint, Klipper, Duet, Repetier, Bambu Labs, Prusa Connect, and Creality to allow Claude to interact with 3D printers via the Model Context Protocol.",
    "installCommand": "npm install -g mcp-3d-printer-server",
    "requiredEnvVars": [
      "OCTOPRINT_API_KEY",
      "KLIPPER_MQTT_HOST",
      "DUET_API_KEY",
      "REPEtier_API_KEY",
      "BAMBU_SERIAL",
      "BAMBU_ACCESS_TOKEN",
      "PRUSA_CONNECT_API_KEY",
      "CREDIALITY_CLOUD_API_KEY"
    ],
    "optionalParams": [
      "BAMBU_STUDIO_CONFIG_PATH",
      "OCTOPRINT_URL",
      "KLIPPER_MQTT_PORT",
      "DUET_URL",
      "REPEtier_URL",
      "PRUSA_CONNECT_URL",
      "CREDIALITY_CLOUD_URL",
      "SERVER_PORT",
      "DEBUG"
    ],
    "usageInstructions": "After installation, configure the required environment variables for your printer management system (e.g., OCTOPRINT_API_KEY, BAMBU_SERIAL, etc.). Start the server with `mcp-3d-printer-server` and connect it to your printer system. Use MCP-compatible tools to interact with the server for printer status, file management, and print control.",
    "category": "3D Printing",
    "stars": 77,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "ebaymcpserver": {
    "name": "Ebay MCP Server",
    "githubLink": "https://github.com/CooKey-Monster/EbayMcpServer",
    "package": "git+https://github.com/CooKey-Monster/EbayMcpServer.git",
    "description": "An MCP server that fetches auctions from Ebay.com using the official MCP Python SDK.",
    "installCommand": "curl -LsSf https://astral.sh/uv/install.sh | sh && uv pip install git+https://github.com/CooKey-Monster/EbayMcpServer.git",
    "requiredEnvVars": [
      "CLIENT_ID",
      "CLIENT_SECRET"
    ],
    "optionalParams": [
      "query",
      "amount"
    ],
    "usageInstructions": "After installation, set CLIENT_ID and CLIENT_SECRET environment variables obtained from the Ebay developer portal. Use prompts like 'Find me 10 auctions for batman comics' to fetch auctions.",
    "category": "API Integration",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "openai-websearch": {
    "name": "OpenAI WebSearch MCP Server",
    "githubLink": "https://github.com/ConechoAI/openai-websearch-mcp",
    "package": "openai-websearch-mcp",
    "description": "MCP server providing access to OpenAI's websearch functionality for AI assistants",
    "installCommand": "pip install openai-websearch-mcp",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "search_context_size",
      "user_location"
    ],
    "usageInstructions": "1. Install using 'pip install openai-websearch-mcp'. 2. Configure Claude or Zed settings with the installation path and OPENAI_API_KEY. For Claude, modify settings to include 'mcpServers': {'openai-websearch-mcp': {'command': 'python', 'args': ['-m', 'openai_websearch_mcp'], 'env': {'OPENAI_API_KEY': 'your-api-key-here'}}}. For Zed, modify 'context_servers' similarly.",
    "category": "AI/ML",
    "stars": 52,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/8if5j4fq9au.png"
  },
  "chronulus": {
    "name": "Chronulus MCP Server",
    "githubLink": "https://github.com/ChronulusAI/chronulus-mcp",
    "package": "chronulus-mcp",
    "description": "MCP Server for integrating Chronulus AI Forecasting & Prediction Agents with Claude",
    "installCommand": "pip install chronulus-mcp",
    "requiredEnvVars": [
      "CHRONULUS_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Install Claude for Desktop. 2. Configure Claude by adding the MCP server configuration to claude_desktop_config.json. 3. Set CHRONULUS_API_KEY environment variable with your API key.",
    "category": "AI/ML",
    "stars": 78,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "memorymesh": {
    "name": "MemoryMesh",
    "githubLink": "https://github.com/CheMiguel23/MemoryMesh",
    "package": "memorymesh",
    "description": "A knowledge graph server for AI models, particularly suited for text-based RPGs and interactive storytelling.",
    "installCommand": "npm install -g memorymesh",
    "requiredEnvVars": [],
    "optionalParams": [
      "schemas directory configuration"
    ],
    "usageInstructions": "After installation, configure your schemas in the dist/data/schemas directory. Use the SchemaManager tool for creating and editing schemas. The server will automatically detect and process schema files on startup.",
    "category": "AI/ML",
    "stars": 269,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "google-news": {
    "name": "Google News MCP Server",
    "githubLink": "https://github.com/ChanMeng666/server-google-news",
    "package": "@chanmeng666/google-news-server",
    "description": "An MCP server providing Google News search capabilities via SerpAPI integration with multiple language and region support.",
    "installCommand": "npx -y @smithery/cli install @chanmeng666/google-news-server --client claude",
    "requiredEnvVars": [
      "SERP_API_KEY"
    ],
    "optionalParams": [
      "q",
      "gl",
      "hl",
      "topic_token",
      "publication_token",
      "story_token",
      "section_token"
    ],
    "usageInstructions": "1. Install via Smithery or manually using npm/yarn/pnpm. 2. Configure SERP_API_KEY in claude_desktop_config.json. 3. Start the server using npm start.",
    "category": "API Integration",
    "stars": 64,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "python-jira": {
    "name": "Python Jira MCP Server",
    "githubLink": "https://github.com/Chase-Bullock/python-jira-mcp",
    "package": "python-jira-mcp",
    "description": "A Model Context Protocol (MCP) server implementation in Python that integrates with Jira API, allowing AI models to interact with Jira through a standardized protocol.",
    "installCommand": "git clone https://github.com/Chase-Bullock/python-jira-mcp.git && cd python-jira-mcp && pip install -r requirements.txt",
    "requiredEnvVars": [
      "JIRA_API_TOKEN",
      "JIRA_EMAIL",
      "JIRA_DOMAIN"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "MAX_RESULTS_DEFAULT"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies.\n2. Copy `.env.example` to `.env` and fill in your Jira credentials.\n3. Run the server with `python main.py`.\n4. Integrate with Cursor by setting the MCP server path to `main.py`.\n5. Use JQL search and Get Issue tools via JSON tool calls.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "blog": {
    "name": "MCP Blog Upload Service",
    "githubLink": "https://github.com/Carrie-L/blog",
    "package": "blog",
    "description": "A Model Context Protocol (MCP) service that automates the process of copying blog posts from Obsidian to a local directory, processing image links, and pushing changes to GitHub.",
    "installCommand": "git clone https://github.com/Carrie-L/blog && cd blog && pip install -r requirements.txt",
    "requiredEnvVars": [
      "OBSIDIAN_SOURCE_DIR",
      "BLOG_TARGET_DIR",
      "GITHUB_REPO_DIR",
      "GITHUB_USERNAME",
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "IMAGE_SOURCE_DIR",
      "IMAGE_TARGET_DIR",
      "DEFAULT_BLOG_CATEGORY"
    ],
    "usageInstructions": "1. Clone the repository and navigate into the directory. 2. Install dependencies using pip install -r requirements.txt. 3. Set required environment variables for Obsidian source, blog target, GitHub repo, and authentication. 4. Run the service and input 'blog+文章名' to trigger the upload process.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "keycloak-model-context-protocol": {
    "name": "Keycloak MCP Server",
    "githubLink": "https://github.com/ChristophEnglisch/keycloak-model-context-protocol",
    "package": "keycloak-model-context-protocol",
    "description": "A Model Context Protocol server for Keycloak administration, providing tools to manage users and realms.",
    "installCommand": "npm install -g keycloak-model-context-protocol",
    "requiredEnvVars": [
      "KEYCLOAK_URL",
      "KEYCLOAK_ADMIN",
      "KEYCLOAK_ADMIN_PASSWORD"
    ],
    "optionalParams": [
      "realm",
      "username",
      "email",
      "firstName",
      "lastName",
      "userId"
    ],
    "usageInstructions": "After installation, configure the server in your Claude Desktop configuration file with the required environment variables (KEYCLOAK_URL, KEYCLOAK_ADMIN, KEYCLOAK_ADMIN_PASSWORD). Use the available tools like 'create-user', 'delete-user', 'list-realms', and 'list-users' to manage Keycloak realms and users. For local development, clone the repository, install dependencies, and run the server using Node.js.",
    "category": "Authentication",
    "stars": 25,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "obsidian-jsoncanvas": {
    "name": "JSON Canvas MCP Server",
    "githubLink": "https://github.com/Cam10001110101/mcp-server-obsidian-jsoncanvas",
    "package": "mcp/jsoncanvas",
    "description": "A Model Context Protocol (MCP) server implementation for working with JSON Canvas files according to the JSON Canvas 1.0 specification, enabling creation, modification, and validation of infinite canvas data structures.",
    "installCommand": "docker run -i --rm -v canvas-data:/data mcp/jsoncanvas",
    "requiredEnvVars": [
      "OUTPUT_PATH"
    ],
    "optionalParams": [
      "FORMAT"
    ],
    "usageInstructions": "To use the JSON Canvas MCP Server, configure it in your `claude_desktop_config.json` with Docker or UV. For Docker, use the command `docker run -i --rm -v canvas-data:/data mcp/jsoncanvas` and set `OUTPUT_PATH` as needed. For local development, use `uv venv`, activate the virtual environment, and run `uv pip install -e .`. Example usage includes creating nodes, edges, and canvases using the provided Python API.",
    "category": "Development Tools",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "prometheus": {
    "name": "Prometheus MCP Server",
    "githubLink": "https://github.com/CaesarYangs/prometheus",
    "package": "@CaesarYangs/prometheus_mcp_server",
    "description": "An MCP server for retrieving and analyzing data from Prometheus databases, enabling LLMs to invoke tool functions for metric data retrieval and analysis.",
    "installCommand": "npx -y @smithery/cli install @CaesarYangs/prometheus_mcp_server --client claude",
    "requiredEnvVars": [
      "PROMETHEUS_HOST"
    ],
    "optionalParams": [
      "PROMETHEUS_PORT"
    ],
    "usageInstructions": "1. Install via Smithery using 'npx -y @smithery/cli install @CaesarYangs/prometheus_mcp_server --client claude'. 2. For manual installation: create a Python venv, activate it, and install requirements using 'pip install -r requirements.txt'. 3. Configure Claude Desktop by adding the MCP server configuration to claude_desktop_config.json. 4. Run using 'uv --directory /path/to/prometheus_mcp_server run server.py' or 'python3 server.py'.",
    "category": "DevOps",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "virustotal": {
    "name": "VirusTotal MCP Server",
    "githubLink": "https://github.com/BurtTheCoder/mcp-virustotal",
    "package": "@burtthecoder/mcp-virustotal",
    "description": "An MCP server for querying VirusTotal API, providing comprehensive security analysis tools with automatic relationship data fetching.",
    "installCommand": "npx -y @smithery/cli install @burtthecoder/mcp-virustotal --client claude",
    "requiredEnvVars": [
      "VIRUSTOTAL_API_KEY"
    ],
    "optionalParams": [
      "limit",
      "cursor",
      "relationships"
    ],
    "usageInstructions": "1. Install via Smithery CLI or manually using npm. 2. Configure Claude Desktop with the server details and VIRUSTOTAL_API_KEY. 3. Restart Claude Desktop.",
    "category": "Security",
    "stars": 66,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "dnstwist": {
    "name": "DNStwist MCP Server",
    "githubLink": "https://github.com/BurtTheCoder/mcp-dnstwist",
    "package": "mcp-dnstwist",
    "description": "An MCP server for dnstwist, a DNS fuzzing tool for detecting typosquatting and phishing.",
    "installCommand": "npm install -g mcp-dnstwist",
    "requiredEnvVars": [],
    "optionalParams": [
      "nameservers",
      "threads",
      "format",
      "registered_only",
      "mxcheck",
      "ssdeep",
      "banners"
    ],
    "usageInstructions": "1. Install Docker and ensure it's running. 2. Run 'npm install -g mcp-dnstwist'. 3. Configure Claude Desktop by adding 'dnstwist' server configuration to the config file located at ~/Library/Application Support/Claude/claude_desktop_config.json (macOS) or %APPDATA%\\Claude\\claude_desktop_config.json (Windows). 4. Restart Claude Desktop.",
    "category": "Security",
    "stars": 29,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "outlook-email": {
    "name": "Email Processing MCP Server",
    "githubLink": "https://github.com/Cam10001110101/mcp-server-outlook-email",
    "package": "mcp-server-outlook-email",
    "description": "MCP server providing email processing capabilities with MongoDB integration for semantic search and SQLite for efficient storage and retrieval.",
    "installCommand": "git clone https://github.com/Cam10001110101/mcp-server-outlook-email.git && cd mcp-server-outlook-email && uv venv .venv && .venv\\Scripts\\activate && uv pip install -e . && uv pip install fastmcp",
    "requiredEnvVars": [
      "MONGODB_URI",
      "SQLITE_DB_PATH",
      "EMBEDDING_BASE_URL",
      "EMBEDDING_MODEL",
      "COLLECTION_NAME"
    ],
    "optionalParams": [
      "PROCESS_DELETED_ITEMS",
      "LLM_MODEL"
    ],
    "usageInstructions": "1. Clone the repository and set up the virtual environment as per installation instructions. 2. Configure Claude for Desktop by modifying claude_desktop_config.json with the appropriate paths and environment variables. 3. Ensure Ollama is running locally with the required models. 4. Use the process_emails tool to start processing emails.",
    "category": "Productivity",
    "stars": 10,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "cursor": {
    "name": "Cursor MCP - Claude Desktop Integration",
    "githubLink": "https://github.com/Buga-luga/cursor-mcp",
    "package": "mcp-cursor",
    "description": "A Model Context Protocol (MCP) implementation that enables seamless integration between Claude AI and desktop applications through Cursor IDE, enhancing AI-powered development workflows.",
    "installCommand": "npx -y @smithery/cli install cursor-mcp-tool --client claude",
    "requiredEnvVars": [
      "DEFAULT_WORKSPACE_PATH"
    ],
    "optionalParams": [
      "OPENAI_API_KEY"
    ],
    "usageInstructions": "1. Install via Smithery with `npx -y @smithery/cli install cursor-mcp-tool --client claude`.\n2. Alternatively, install globally with `npm install -g mcp-cursor`.\n3. Create a `.env` file and set `DEFAULT_WORKSPACE_PATH`.\n4. Add the server to Claude's MCP configuration with the provided JSON snippet.\n5. Start the server with `mcp-cursor` (global) or `npm start` (local).\n6. For development, use `npm run dev` for hot reload or `npm run build` for production.",
    "category": "AI/ML",
    "stars": 38,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "summarization-functions": {
    "name": "MCP Summarization Functions",
    "githubLink": "https://github.com/Braffolk/mcp-summarization-functions",
    "package": "mcp-summarization-functions",
    "description": "An MCP server providing intelligent text summarization for AI agents, optimizing context window usage through focused summaries of command outputs, files, directories, and API responses.",
    "installCommand": "npx -y @smithery/cli install mcp-summarization-functions --client claude",
    "requiredEnvVars": [
      "PROVIDER",
      "API_KEY"
    ],
    "optionalParams": [
      "MODEL_ID",
      "PROVIDER_BASE_URL",
      "MAX_TOKENS",
      "SUMMARIZATION_CHAR_THRESHOLD",
      "SUMMARIZATION_CACHE_MAX_AGE",
      "MCP_WORKING_DIR"
    ],
    "usageInstructions": "1. Add the server to your MCP configuration file with the command: node path/to/summarization-functions/build/index.js and set required environment variables (PROVIDER, API_KEY). 2. Use the available functions: summarize_command, summarize_files, summarize_directory, and summarize_text with appropriate parameters. 3. Integrate with AI agents by following the recommended prompt instructions for mandatory summarization of large outputs.",
    "category": "AI/ML",
    "stars": 34,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "shodan": {
    "name": "Shodan MCP Server",
    "githubLink": "https://github.com/BurtTheCoder/mcp-shodan",
    "package": "@burtthecoder/mcp-shodan",
    "description": "A Model Context Protocol (MCP) server for querying the Shodan API and Shodan CVEDB, providing network intelligence, vulnerability tracking, and device discovery capabilities.",
    "installCommand": "npm install -g @burtthecoder/mcp-shodan",
    "requiredEnvVars": [
      "SHODAN_API_KEY"
    ],
    "optionalParams": [
      "max_results",
      "count",
      "skip",
      "limit",
      "is_kev",
      "sort_by_epss",
      "start_date",
      "end_date"
    ],
    "usageInstructions": "1. Install the server globally via npm: 'npm install -g @burtthecoder/mcp-shodan'. 2. Add to your Claude Desktop configuration file with the SHODAN_API_KEY environment variable set. 3. Restart Claude Desktop. For source setup, clone the repository, build, and configure the command path in the configuration file.",
    "category": "Security",
    "stars": 62,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "maigret": {
    "name": "Maigret MCP Server",
    "githubLink": "https://github.com/BurtTheCoder/mcp-maigret",
    "package": "mcp-maigret",
    "description": "A Model Context Protocol (MCP) server for Maigret, an OSINT tool that searches for user accounts across social networks and analyzes URLs.",
    "installCommand": "npm install -g mcp-maigret",
    "requiredEnvVars": [
      "MAIGRET_REPORTS_DIR"
    ],
    "optionalParams": [
      "format",
      "use_all_sites",
      "tags"
    ],
    "usageInstructions": "1. Install Docker if not already installed.\n2. Install the server globally via npm: `npm install -g mcp-maigret`.\n3. Create a reports directory and set the `MAIGRET_REPORTS_DIR` environment variable to its path.\n4. Add the server to your Claude Desktop configuration file with the command `mcp-maigret` and the reports directory environment variable.\n5. Restart Claude Desktop to use the server.\n\nTo use the server, call the `search_username` or `parse_url` tools with the required parameters.",
    "category": "OSINT",
    "stars": 143,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "bracketbot": {
    "name": "Multi-Robot Control MCP Agent",
    "githubLink": "https://github.com/BracketBotCapstone/bracketbot-mcp",
    "package": "bracketbot-mcp",
    "description": "MCP server for controlling multiple robots via FastAPI servers",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "port"
    ],
    "usageInstructions": "1. Ensure Python3.10+ and UV are installed\n2. Run robot control FastAPI servers on different ports\n3. The MCP server is automatically run by Claude desktop client",
    "category": "Robotics/Other",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "gauntlet-incept": {
    "name": "Gauntlet-Incept MCP Server",
    "githubLink": "https://github.com/Birdsmith/Gauntlet-Incept-MCP",
    "package": "gauntlet-incept-mcp",
    "description": "Model Context Protocol (MCP) server for educational content generation, enabling Claude Desktop to create, tag, and grade K-8 educational materials.",
    "installCommand": "git clone https://github.com/Birdsmith/Gauntlet-Incept-MCP && cd Gauntlet-Incept-MCP && npm install",
    "requiredEnvVars": [
      "POSTGRES_HOST",
      "POSTGRES_PORT",
      "POSTGRES_DATABASE",
      "POSTGRES_USER",
      "POSTGRES_PASSWORD"
    ],
    "optionalParams": [
      "PORT",
      "MCP_PORT",
      "DEBUG",
      "SSH_TUNNEL_HOST",
      "SSH_TUNNEL_PORT",
      "SSH_TUNNEL_USER",
      "SSH_TUNNEL_KEY"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with 'npm install'.\n2. Copy .env.example to .env and update with your database credentials.\n3. Start the server with 'npm start' or run with Docker using 'docker-compose up -d'.\n4. Access the API at http://localhost:3000 and the MCP server at http://localhost:3001.\n5. For SSH tunneling, configure the optional SSH_TUNNEL_* variables in .env.",
    "category": "Education",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "watch": {
    "name": "Server Watch MCP",
    "githubLink": "https://github.com/BrennerSpear/server-watch-mcp",
    "package": "server-watch-mcp",
    "description": "A CLI wrapper that monitors command output and exposes it as an MCP server for development workflows.",
    "installCommand": "npm install -g server-watch-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "SERVER_WATCH_MCP_PORT"
    ],
    "usageInstructions": "1. Install globally using 'npm install -g server-watch-mcp'. 2. Start the MCP server with your command: 'server-watch-mcp <your-command>'. 3. Configure Claude Code using 'claude mcp add -s user -t sse server-watch-mcp http://localhost:6280/sse'. 4. Use tools in Claude Code to get recent logs or search logs.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/qmrk8kmctd.jpg"
  },
  "pushover": {
    "name": "Pushover MCP",
    "githubLink": "https://github.com/AshikNesin/pushover-mcp",
    "package": "@AshikNesin/pushover-mcp",
    "description": "An MCP server for sending notifications via Pushover.net, implementing the Model Context Protocol specification.",
    "installCommand": "npx -y pushover-mcp@latest start --token YOUR_TOKEN --user YOUR_USER",
    "requiredEnvVars": [
      "PUSHOVER_TOKEN",
      "PUSHOVER_USER"
    ],
    "optionalParams": [
      "title",
      "priority",
      "sound",
      "url",
      "url_title",
      "device"
    ],
    "usageInstructions": "1. Get Pushover.net application token and user key from dashboard. 2. Configure MCP server in Cursor IDE or Roo Code settings using the npx command. 3. Agent will use the tool automatically or on explicit commands.",
    "category": "Productivity",
    "stars": 23,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "clojars": {
    "name": "Clojars MCP Server",
    "githubLink": "https://github.com/Bigsy/Clojars-MCP-Server",
    "package": "clojars-deps-server",
    "description": "An MCP server providing tools for fetching Clojars dependency information, including latest versions, version existence checks, and version history.",
    "installCommand": "npx clojars-deps-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "dependency",
      "version",
      "limit"
    ],
    "usageInstructions": "To use the server, first run it using 'npx clojars-deps-server'. Then configure Claude by adding the server details to cline_mcp_settings.json or claude_desktop_config.json. The server exposes three tools: get_clojars_latest_version, check_clojars_version_exists, and get_clojars_history.",
    "category": "Development Tools",
    "stars": 5,
    "lastStarUpdate": "2025-07-07T15:28:25.052Z",
    "logo": ""
  },
  "memory-custom": {
    "name": "Memory Custom MCP Server",
    "githubLink": "https://github.com/BRO3886/mcp-memory-custom",
    "package": "@BRO3886/mcp-memory-custom",
    "description": "An MCP server that enhances memory management with custom file paths and timestamping for knowledge graph interactions.",
    "installCommand": "npx -y @smithery/cli install @BRO3886/mcp-memory-custom --client claude",
    "requiredEnvVars": [
      "MEMORY_FILE_PATH"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Clone the repository: git clone git@github.com:BRO3886/mcp-memory-custom.git && cd mcp-memory-custom. 2. Install dependencies: npm install. 3. Configure MEMORY_FILE_PATH environment variable. 4. Update claude_desktop_config.json or .cursor/mcp.json with server details. 5. Run: npm run build && node dist/index.js",
    "category": "Knowledge Management",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "database-updater": {
    "name": "Database Updater MCP Server",
    "githubLink": "https://github.com/AnuragRai017/database-updater-MCP-Server",
    "package": "database-updater",
    "description": "An MCP server that updates databases from CSV and Excel files, supporting PostgreSQL, MySQL, MongoDB, and SQLite.",
    "installCommand": "git clone https://github.com/AnuragRai017/database-updater-MCP-Server && cd database-updater-MCP-Server && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "filePath",
      "databaseType",
      "connectionString",
      "tableName"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'. 2. Build the server using 'npm run build'. 3. Configure Claude Desktop by adding the server config to claude_desktop_config.json. 4. Use the 'update_database' tool with required parameters like filePath, databaseType, connectionString, and tableName.",
    "category": "Data Storage",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "macos": {
    "name": "macOS",
    "githubLink": "https://github.com/Atharva-Gundawar/macOS",
    "package": "",
    "description": "The repository appears to be a placeholder or incomplete project with no clear description or functionality provided.",
    "installCommand": "",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "The repository does not provide any usage instructions, setup steps, or configuration details. Further information is required to determine how to use or configure this project.",
    "category": "Other",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "command": {
    "name": "MCP Command Server",
    "githubLink": "https://github.com/Andrew-Beniash/mcp-command-server",
    "package": "mcp-command-server",
    "description": "A secure Model Context Protocol (MCP) server for executing system commands through LLM applications like Claude, with features such as command whitelisting, user confirmation, audit logging, and Claude Desktop integration.",
    "installCommand": "uv pip install mcp-command-server",
    "requiredEnvVars": [
      "ALLOWED_COMMANDS"
    ],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL",
      "AUDIT_LOG_PATH",
      "MAX_COMMAND_LENGTH",
      "ENABLE_DEBUG_MODE"
    ],
    "usageInstructions": "1. Install the package using the install command. 2. Set the required environment variable ALLOWED_COMMANDS to specify allowed commands. 3. Add the server to your Claude Desktop configuration with the provided JSON format. 4. Optionally configure optional parameters like PORT, LOG_LEVEL, and AUDIT_LOG_PATH for customization. 5. Start the server using the command specified in the Claude Desktop configuration.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "python-docs": {
    "name": "Python Docs Server",
    "githubLink": "https://github.com/AnuragRai017/python-docs-server-MCP-Server",
    "package": "npm install",
    "description": "A TypeScript-based Model Context Protocol (MCP) server that fetches Python documentation using the Brave Search API.",
    "installCommand": "git clone https://github.com/AnuragRai017/python-docs-server-MCP-Server && cd python-docs-server-MCP-Server && npm install",
    "requiredEnvVars": [
      "BRAVE_SEARCH_API_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies with `npm install`.\n2. Set the `BRAVE_SEARCH_API_KEY` environment variable with your Brave Search API key.\n3. Build the server with `npm run build`.\n4. For development with auto-rebuild, use `npm run watch`.\n5. Add the server configuration to the Claude Desktop config file as described in the README.\n6. To debug, run `npm run inspector` and use the provided URL for debugging tools.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "agentops": {
    "name": "AgentOps MCP Server",
    "githubLink": "https://github.com/AgentOps-AI/agentops-mcp",
    "package": "@AgentOps-AI/agentops-mcp",
    "description": "The AgentOps MCP server provides observability and tracing data for debugging complex AI agent runs, offering crucial context about where the AI agent succeeds or fails.",
    "installCommand": "npx -y @smithery/cli install @AgentOps-AI/agentops-mcp --client claude",
    "requiredEnvVars": [
      "AGENTOPS_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Add the MCP configuration to your configuration file with the command `npx agentops-mcp` and set the `AGENTOPS_API_KEY` environment variable. 2. Use the available tools such as `auth`, `get_trace`, `get_span`, and `get_complete_trace` to retrieve observability data. 3. For local development, clone the repository, run `npm install`, build the project with `npm run build`, and run the server with `npm pack`.",
    "category": "Analytics",
    "stars": 4,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": "https://knhgkaawjfqqwmsgmxns.supabase.co/storage/v1/object/public/avatars/mcp/z9aqnmemaik.png"
  },
  "code-explainer": {
    "name": "Code Explainer MCP",
    "githubLink": "https://github.com/BillDuke13/code-explainer-mcp",
    "package": "code-explainer-mcp",
    "description": "A Cloudflare Worker MCP server that analyzes and explains code with architecture diagrams, component breakdowns, and functionality analysis for multiple programming languages.",
    "installCommand": "git clone https://github.com/BillDuke13/code-explainer-mcp.git && cd code-explainer-mcp && npm install",
    "requiredEnvVars": [
      "SHARED_SECRET"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "MAX_CODE_SIZE",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Set up Cloudflare account and install Wrangler\n2. Configure secret key in wrangler.jsonc or via wrangler secret put SHARED_SECRET\n3. Deploy with npm run deploy\n4. Send POST requests to your worker URL with Authorization: Bearer [your_secret_key] and JSON body containing code and language",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "barnsworthburning": {
    "name": "Barnsworthburning MCP Server",
    "githubLink": "https://github.com/Aias/barnsworthburning-mcp",
    "package": "@Aias/barnsworthburning-mcp",
    "description": "An MCP server for searching barnsworthburning.net through its API endpoint.",
    "installCommand": "npx -y @smithery/cli install @Aias/barnsworthburning-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "query"
    ],
    "usageInstructions": "After installation, connect the server to an MCP client like Claude for Desktop. Use search queries like 'Search barnsworthburning.net for [topic]'.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "multi-service": {
    "name": "Model Context Protocol (MCP) Server",
    "githubLink": "https://github.com/AdamPippert/multi-service-mcp-server",
    "package": "mcp-server",
    "description": "A modular MCP server implementing the Model Context Protocol standard with tools for GitHub, GitLab, Google Maps, Memory storage, and Puppeteer web automation.",
    "installCommand": "git clone https://github.com/AdamPippert/multi-service-mcp-server.git && cd multi-service-mcp-server && pip install -r requirements.txt && npm install",
    "requiredEnvVars": [
      "SECRET_KEY",
      "GITHUB_TOKEN",
      "GITLAB_TOKEN",
      "GMAPS_API_KEY",
      "MEMORY_DB_URI"
    ],
    "optionalParams": [
      "DEBUG",
      "PUPPETEER_HEADLESS",
      "CHROME_PATH"
    ],
    "usageInstructions": "Create a .env file with required environment variables, then start the server with 'python app.py'. Alternatively, use Docker or Podman for containerized deployment.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "nostr": {
    "name": "Nostr MCP Server",
    "githubLink": "https://github.com/AbdelStark/nostr-mcp",
    "package": "@AbdelStark/nostr-mcp",
    "description": "An MCP server enabling AI models to interact with Nostr protocol, allowing posting notes and real-time communication.",
    "installCommand": "npx -y @smithery/cli install @AbdelStark/nostr-mcp --client claude",
    "requiredEnvVars": [
      "NOSTR_NSEC_KEY",
      "NOSTR_RELAYS"
    ],
    "optionalParams": [
      "LOG_LEVEL",
      "NODE_ENV",
      "SERVER_MODE",
      "PORT"
    ],
    "usageInstructions": "1. Create .env file with required variables (NOSTR_NSEC_KEY, NOSTR_RELAYS)\n2. Run 'npm run dev' for development mode or 'npm start' for production",
    "category": "API Integration",
    "stars": 33,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "browser-tools": {
    "name": "BrowserTools MCP",
    "githubLink": "https://github.com/AgentDeskAI/browser-tools-mcp",
    "package": "@agentdeskai/browser-tools-mcp",
    "description": "A powerful browser monitoring and interaction tool enabling AI-powered applications via Anthropic's Model Context Protocol (MCP)",
    "installCommand": "npx @agentdeskai/browser-tools-mcp@latest && npx @agentdeskai/browser-tools-server@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Install Chrome extension from https://github.com/AgentDeskAI/browser-tools-mcp/releases/download/v1.2.0/BrowserTools-1.2.0-extension.zip\n2. Run `npx @agentdeskai/browser-tools-mcp@latest` in your IDE\n3. Run `npx @agentdeskai/browser-tools-server@latest` in a new terminal\n4. Open Chrome DevTools and access the BrowserToolsMCP panel",
    "category": "Browser Automation",
    "stars": 5637,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "db": {
    "name": "db-mcp",
    "githubLink": "https://github.com/ALX99/db-mcp",
    "package": "github.com/alx99/db-mcp/cmd/db-mcp",
    "description": "A utility for Model Context Protocol (MCP)-compatible AI assistants to query databases using DSNs.",
    "installCommand": "go install github.com/alx99/db-mcp/cmd/db-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "-default-dsn"
    ],
    "usageInstructions": "After installation, run `db-mcp` to start the server. Use the `-default-dsn` flag to specify a default database connection string. Construct DSNs for PostgreSQL, MySQL, or SQLite as described in the FAQ. Use the `connect`, `query`, and `flavor` tools to interact with the database.",
    "category": "Database",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "lightning": {
    "name": "Lightning Network MCP Server",
    "githubLink": "https://github.com/AbdelStark/lightning-mcp",
    "package": "@AbdelStark/lightning-mcp",
    "description": "A Model Context Protocol (MCP) server that enables AI models to interact with Lightning Network, allowing them to pay invoices.",
    "installCommand": "npx -y @smithery/cli install @AbdelStark/lightning-mcp --client claude",
    "requiredEnvVars": [
      "BITCOIN_LNBITS_NODE_URL",
      "BITCOIN_LNBITS_ADMIN_KEY",
      "BITCOIN_LNBITS_READ_KEY"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository and navigate into it: `git clone https://github.com/AbdelStark/lightning-mcp && cd lightning-mcp`\n2. Install dependencies: `npm install`\n3. Create a `.env` file with your Lightning Network credentials.\n4. Start the server in development mode: `npm run dev` or in production mode: `npm start`.\n5. Use the `pay_invoice` tool to pay Lightning Network invoices by sending a JSON payload with the invoice string.",
    "category": "AI/ML",
    "stars": 3,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "adamik": {
    "name": "Adamik MCP Server",
    "githubLink": "https://github.com/AdamikHQ/adamik-mcp-server",
    "package": "@adamik/mcp-server",
    "description": "A powerful blockchain MCP server that connects to 60+ blockchains, enabling natural language interactions for account management, transactions, and blockchain operations with Claude, ChatGPT, and other MCP clients.",
    "installCommand": "npx @adamik/mcp-server",
    "requiredEnvVars": [
      "ADAMIK_API_KEY"
    ],
    "optionalParams": [
      "ADAMIK_API_BASE_URL"
    ],
    "usageInstructions": "1. Get your free API key from https://dashboard.adamik.io/\n2. Run the server using 'npx @adamik/mcp-server' and set the ADAMIK_API_KEY environment variable.\n3. Configure your MCP client (e.g., Claude Desktop) with the server command and API key.\n4. Use natural language commands like 'Check my ETH balance' or 'Send 0.1 ETH to 0x123'.",
    "category": "Blockchain",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "truerag": {
    "name": "MCP Server for GraphQL Policies API",
    "githubLink": "https://github.com/Ad-Veritas/mcp-server-trueRAG",
    "package": "mcp-server-trueRAG",
    "description": "An MCP server implementation that provides access to policies via a GraphQL API, built using the Python SDK for MCP and the GQL library.",
    "installCommand": "git clone https://github.com/Ad-Veritas/mcp-server-trueRAG.git && cd mcp-server-trueRAG && uv run fastmcp run server.py",
    "requiredEnvVars": [
      "GRAPHQL_API_KEY",
      "GRAPHQL_ENDPOINT"
    ],
    "optionalParams": [
      "PORT (default: 8080)",
      "HOST (default: 127.0.0.1)"
    ],
    "usageInstructions": "1. Clone the repository and navigate to the directory.\n2. Install uv if not already installed.\n3. Create a .env file with GRAPHQL_API_KEY and GRAPHQL_ENDPOINT.\n4. Add the server to an MCP client like Claude Desktop by updating the configuration file with the provided command.\n5. Run the server using uv run fastmcp run server.py.",
    "category": "API Integration",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "activitywatch": {
    "name": "ActivityWatch MCP Server",
    "githubLink": "https://github.com/8bitgentleman/activitywatch-mcp-server",
    "package": "activitywatch-mcp-server",
    "description": "An MCP server that connects to ActivityWatch, allowing LLMs like Claude to interact with time tracking data.",
    "installCommand": "npm install -g activitywatch-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "type",
      "includeData",
      "timeperiods",
      "query",
      "name",
      "bucketId",
      "start",
      "end",
      "limit",
      "key"
    ],
    "usageInstructions": "1. Install ActivityWatch and Claude for Desktop. 2. Configure Claude: Add 'activitywatch-mcp-server' to claude_desktop_config.json. 3. Restart Claude. 4. Use queries like 'What ActivityWatch buckets do I have?' or 'Can you show me which applications I've used the most today?'. Ensure ActivityWatch is running at http://localhost:5600.",
    "category": "Productivity",
    "stars": 19,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "veri5ight": {
    "name": "Veri5ight",
    "githubLink": "https://github.com/5ajaki/veri5ight",
    "package": "veri5ight",
    "description": "An MCP server providing direct interface between Claude and Ethereum nodes for real-time token info, smart contract data, and node access.",
    "installCommand": "git clone https://github.com/5ajaki/veri5ight.git && cd veri5ight && npm install && npm run build",
    "requiredEnvVars": [
      "ETH_NODE_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "1. Copy .env.example to .env and configure ETH_NODE_URL. 2. Configure Claude Desktop with the path to dist/index.js. 3. Run manually with 'node dist/index.js' or configure to launch automatically.",
    "category": "Blockchain",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "bitcoin": {
    "name": "Bitcoin & Lightning Network MCP Server",
    "githubLink": "https://github.com/AbdelStark/bitcoin-mcp",
    "package": "bitcoin-mcp",
    "description": "An MCP server enabling AI models to interact with Bitcoin and Lightning Network, allowing key generation, address validation, transaction decoding, and blockchain queries.",
    "installCommand": "npx -y bitcoin-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "LIGHTNING_NODE_URL",
      "LNBits_WALLET_ID",
      "LNBits_API_KEY"
    ],
    "usageInstructions": "To use with Claude Desktop, configure claude_desktop_config.json with 'npx -y bitcoin-mcp@latest'. For Goose, add as an extension using STDIO or SSE mode. Check documentation for detailed setup.",
    "category": "API Integration",
    "stars": 50,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "terminal-use": {
    "name": "MCP Terminal Use",
    "githubLink": "https://github.com/AItheLab/mcp-terminal-use",
    "package": "mcp-terminal-use",
    "description": "An MCP server for terminal access, allowing Claude to interact with specified system directories.",
    "installCommand": "git clone https://github.com/AItheLab/mcp-terminal-use.git && cd mcp-terminal-use && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "ALLOWED_DIRECTORY"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'. 2. Configure ALLOWED_DIRECTORY either through a .env file, system environment variables, or claude_desktop_config.json. 3. Update claude_desktop_config.json with the correct path to the server's index.js.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "safe": {
    "name": "Safe MCP Server",
    "githubLink": "https://github.com/5ajaki/safe-mcp-server",
    "package": "safe-mcp-server",
    "description": "An MCP server implementation for interacting with Safe (formerly Gnosis Safe) smart contract wallets, providing tools to query transactions, decode data, and integrate with the Safe API.",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "SAFE_API_URL"
    ],
    "usageInstructions": "After installation, build and start the server using 'npm run build && npm start'. By default, it uses the Safe Transaction API mainnet endpoint. To use a different endpoint (e.g., testnet), set the SAFE_API_URL environment variable before starting the server.",
    "category": "Blockchain Integration",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "mcpnotes": {
    "name": "MCP Notes",
    "githubLink": "https://github.com/9Ninety/MCPNotes",
    "package": "mcp-notes",
    "description": "A note-taking application built on the Model Context Protocol (MCP) that allows users to record and manage notes using AI and a web interface, with storage via AWS DynamoDB.",
    "installCommand": "npx -p mcp-notes mcp-notes-server --dynamodb 'dynamodb://access_key:secret_key@region/table'",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY"
    ],
    "optionalParams": [
      "DYNAMODB_TABLE",
      "PORT",
      "DEBUG"
    ],
    "usageInstructions": "1. Install Node.js if not already installed.\n2. Use the provided install command to run the server with npx.\n3. Configure AWS credentials via environment variables or a DynamoDB connection string.\n4. Access the web interface by running the web server command and navigating to http://localhost:3100.\n5. Use the MCP tools (listNotes, getNote, writeNote, deleteNote) to manage notes via AI or the web interface.",
    "category": "AI/ML",
    "stars": 24,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "make-integration-issue": {
    "name": "Make-MCP Integration Server",
    "githubLink": "https://github.com/3rzy/make-mcp-integration-issue",
    "package": "make-mcp-server",
    "description": "A custom MCP server for integrating Make (Integromat) with Claude Desktop, implementing JSON-RPC 2.0 and WebSocket communication.",
    "installCommand": "git clone https://github.com/3rzy/make-mcp-integration-issue && cd make-mcp-integration-issue && npm install",
    "requiredEnvVars": [
      "MAKE_API_TOKEN",
      "PORT"
    ],
    "optionalParams": [
      "PORT",
      "MAKE_API_TOKEN",
      "CLAUD_DESKTOP_URL",
      "DEBUG"
    ],
    "usageInstructions": "1. Clone the repository and install dependencies using 'npm install'.\n2. Set the MAKE_API_TOKEN and PORT environment variables.\n3. Run the server using 'node make-mcp-server.js'.\n4. Configure Claude Desktop with the server URL (e.g., ws://localhost:5555) and ensure the PORT matches.\n5. Verify the server logs for connection and initialization status.",
    "category": "API Integration",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "qwen": {
    "name": "Qwen Max MCP Server",
    "githubLink": "https://github.com/66julienmartin/MCP-server-Qwen",
    "package": "@66julienmartin/mcp-server-qwen_max",
    "description": "A Model Context Protocol (MCP) server implementation for the Qwen Max language model, providing integration with Claude Desktop and support for multiple Qwen commercial models.",
    "installCommand": "npx -y @smithery/cli install @66julienmartin/mcp-server-qwen_max --client claude",
    "requiredEnvVars": [
      "DASHSCOPE_API_KEY"
    ],
    "optionalParams": [
      "model",
      "max_tokens",
      "temperature"
    ],
    "usageInstructions": "1. Install the server using the provided command.\n2. Set the DASHSCOPE_API_KEY in a .env file.\n3. Configure Claude Desktop with the server command and API key.\n4. Use the server to generate text with Qwen models by sending MCP API requests.",
    "category": "AI/ML",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "record-to-markdown": {
    "name": "Record to Markdown / Apple Notes",
    "githubLink": "https://github.com/29decibel/record-to-markdown",
    "package": "record-to-markdown",
    "description": "An MCP server that records Claude conversations to markdown or Apple Notes.",
    "installCommand": "git clone https://github.com/29decibel/record-to-markdown && cd record-to-markdown && uv pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "--directory",
      "PORT",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "1. Clone the repository using 'git clone https://github.com/29decibel/record-to-markdown'.\n2. Navigate into the directory and install dependencies with 'uv pip install -r requirements.txt'.\n3. Edit the Claude desktop config file at '~/Library/Application Support/Claude/claude_desktop_config.json' to include the MCP server configuration.\n4. Run the server using 'uv --directory /FULL_PATH_TO/record-to-markdown run server.py'.",
    "category": "Productivity",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "taskwarrior": {
    "name": "MCP Taskwarrior Server",
    "githubLink": "https://github.com/0xbeedao/mcp-taskwarrior",
    "package": "@0xbeedao/mcp-taskwarrior",
    "description": "An MCP server for managing tasks in Taskwarrior, providing tools to add, update, delete, and list tasks.",
    "installCommand": "npx @0xbeedao/mcp-taskwarrior",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use this MCP server, run 'npx @0xbeedao/mcp-taskwarrior' or install locally by cloning the repository, running 'pnpm install', and then using the '/path/to/this/repo/src/tasks.ts' as the command argument in an MCP client.",
    "category": "Productivity",
    "stars": 2,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "etherscan": {
    "name": "MCP Etherscan Server",
    "githubLink": "https://github.com/5ajaki/mcp-etherscan-server",
    "package": "mcp-etherscan-server",
    "description": "An MCP server providing Ethereum blockchain data tools via Etherscan's API, featuring balance checking, transaction history, and more.",
    "installCommand": "git clone https://github.com/5ajaki/mcp-etherscan-server.git && cd mcp-etherscan-server && npm install && npm run build",
    "requiredEnvVars": [
      "ETHERSCAN_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "1. Start the server using 'npm start'. 2. Configure Claude Desktop to use the server by adding an MCP server configuration with command 'node /path/to/mcp-etherscan-server/build/index.js'. Requires Node.js >=18 and an Etherscan API key.",
    "category": "Blockchain/Blockchain Data",
    "stars": 1,
    "lastStarUpdate": "2025-07-07T15:28:25.053Z",
    "logo": ""
  },
  "markdown2pdf": {
    "name": "Markdown2PDF MCP Server",
    "githubLink": "https://github.com/2b3pro/markdown2pdf-mcp",
    "package": "markdown2pdf-mcp",
    "description": "An MCP server for converting Markdown documents to PDF files with syntax highlighting and custom styling.",
    "installCommand": "git clone https://github.com/2b3pro/markdown2pdf-mcp.git && cd markdown2pdf-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "M2P_OUTPUT_DIR",
      "outputFilename",
      "paperFormat",
      "paperOrientation",
      "paperBorder",
      "watermark"
    ],
    "usageInstructions": "Start the server with 'npm start'. Use the 'create_pdf_from_markdown' tool with required 'markdown' parameter and optional parameters like 'outputFilename', 'paperFormat', 'paperOrientation', 'paperBorder', and 'watermark'. Configure output directory using M2P_OUTPUT_DIR environment variable.",
    "category": "Productivity",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  },
  "mcpexec": {
    "name": "MCPExec",
    "githubLink": "https://github.com/0xBruno/MCPExec",
    "package": "mcp",
    "description": "MCP Server to execute local CLI commands, enabling integration with Claude for Desktop.",
    "installCommand": "curl -LsSf https://astral.sh/uv/install.sh | sh && uv init exec && cd exec && uv venv && source .venv/bin/activate && uv add \"mcp[cli]\"",
    "requiredEnvVars": [],
    "optionalParams": [
      "command",
      "args",
      "working directory",
      "virtual environment path"
    ],
    "usageInstructions": "1. Install uv by running the provided curl command.\n2. Create a new directory for the project and navigate into it.\n3. Set up a virtual environment and activate it.\n4. Install the 'mcp[cli]' package using uv.\n5. Configure the MCP server in your Claude for Desktop settings with the command and arguments for the local CLI command you want to execute.",
    "category": "Development Tools",
    "stars": 0,
    "lastStarUpdate": "2025-07-07T15:28:31.636Z",
    "logo": ""
  }
}