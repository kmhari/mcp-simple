{
  "aws-kb-retrieval-server": {
    "name": "AWS Knowledge Base Retrieval",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/aws-kb-retrieval-server",
    "package": "@modelcontextprotocol/server-aws-kb-retrieval",
    "description": "Query AWS Knowledge Base for Bedrock",
    "installCommand": "npx @modelcontextprotocol/server-aws-kb-retrieval",
    "requiredEnvVars": ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_REGION"],
    "optionalParams": ["KNOWLEDGE_BASE_ID"],
    "usageInstructions": "Connect to AWS Bedrock Knowledge Base to retrieve information and documents",
    "category": "AWS Services"
  },
  "brave-search": {
    "name": "Brave Search",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search",
    "package": "@modelcontextprotocol/server-brave-search",
    "description": "Web search using Brave Search API",
    "installCommand": "npx @modelcontextprotocol/server-brave-search",
    "requiredEnvVars": ["BRAVE_API_KEY"],
    "optionalParams": ["SEARCH_RESULTS_LIMIT"],
    "usageInstructions": "Perform web searches using Brave's privacy-focused search engine",
    "category": "Search"
  },
  "everart": {
    "name": "EverArt",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/everart",
    "package": "@modelcontextprotocol/server-everart",
    "description": "AI image generation using EverArt",
    "installCommand": "npx @modelcontextprotocol/server-everart",
    "requiredEnvVars": ["EVERART_API_KEY"],
    "optionalParams": ["IMAGE_SIZE", "STYLE"],
    "usageInstructions": "Generate AI images using various models and styles",
    "category": "AI/ML"
  },
  "everything": {
    "name": "Everything",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/everything",
    "package": "@modelcontextprotocol/server-everything",
    "description": "Reference/test server with prompts, resources, and tools",
    "installCommand": "npx @modelcontextprotocol/server-everything",
    "requiredEnvVars": [],
    "optionalParams": ["CONFIG_PATH"],
    "usageInstructions": "Development and testing server with example implementations",
    "category": "Development"
  },
  "fetch": {
    "name": "Fetch",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/fetch",
    "package": "@modelcontextprotocol/server-fetch",
    "description": "Web content fetching and processing",
    "installCommand": "npx @modelcontextprotocol/server-fetch",
    "requiredEnvVars": [],
    "optionalParams": ["USER_AGENT", "TIMEOUT"],
    "usageInstructions": "Fetch and process web content for efficient LLM usage",
    "category": "Web Scraping"
  },
  "filesystem": {
    "name": "Filesystem",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
    "package": "@modelcontextprotocol/server-filesystem",
    "description": "Local filesystem operations",
    "installCommand": "npx @modelcontextprotocol/server-filesystem",
    "requiredEnvVars": [],
    "optionalParams": ["ALLOWED_DIRECTORIES"],
    "usageInstructions": "Read, write, and manage local files and directories",
    "category": "File Management"
  },
  "gdrive": {
    "name": "Google Drive",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/gdrive",
    "package": "@modelcontextprotocol/server-gdrive",
    "description": "Google Drive integration",
    "installCommand": "npx @modelcontextprotocol/server-gdrive",
    "requiredEnvVars": ["GOOGLE_DRIVE_CREDENTIALS"],
    "optionalParams": ["FOLDER_ID"],
    "usageInstructions": "Access and manage Google Drive files and folders",
    "category": "Cloud Storage"
  },
  "git": {
    "name": "Git",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/git",
    "package": "@modelcontextprotocol/server-git",
    "description": "Git repository operations",
    "installCommand": "npx @modelcontextprotocol/server-git",
    "requiredEnvVars": [],
    "optionalParams": ["REPOSITORY_PATH"],
    "usageInstructions": "Perform Git operations like commit, push, pull, and branch management",
    "category": "Version Control"
  },
  "github": {
    "name": "GitHub",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/github",
    "package": "@modelcontextprotocol/server-github",
    "description": "GitHub API integration",
    "installCommand": "npx @modelcontextprotocol/server-github",
    "requiredEnvVars": ["GITHUB_TOKEN"],
    "optionalParams": ["REPOSITORY_OWNER", "REPOSITORY_NAME"],
    "usageInstructions": "Interact with GitHub repositories, issues, pull requests, and more",
    "category": "Version Control"
  },
  "gitlab": {
    "name": "GitLab",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab",
    "package": "@modelcontextprotocol/server-gitlab",
    "description": "GitLab API integration",
    "installCommand": "npx @modelcontextprotocol/server-gitlab",
    "requiredEnvVars": ["GITLAB_TOKEN"],
    "optionalParams": ["GITLAB_URL", "PROJECT_ID"],
    "usageInstructions": "Manage GitLab projects, merge requests, and CI/CD pipelines",
    "category": "Version Control"
  },
  "google-maps": {
    "name": "Google Maps",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps",
    "package": "@modelcontextprotocol/server-google-maps",
    "description": "Google Maps API integration",
    "installCommand": "npx @modelcontextprotocol/server-google-maps",
    "requiredEnvVars": ["GOOGLE_MAPS_API_KEY"],
    "optionalParams": ["DEFAULT_LOCATION"],
    "usageInstructions": "Search locations, get directions, and access mapping services",
    "category": "Location Services"
  },
  "memory": {
    "name": "Memory",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/memory",
    "package": "@modelcontextprotocol/server-memory",
    "description": "Persistent memory and knowledge storage",
    "installCommand": "npx @modelcontextprotocol/server-memory",
    "requiredEnvVars": [],
    "optionalParams": ["MEMORY_FILE_PATH"],
    "usageInstructions": "Store and retrieve persistent memories across conversations",
    "category": "Data Storage"
  },
  "postgres": {
    "name": "PostgreSQL",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
    "package": "@modelcontextprotocol/server-postgres",
    "description": "PostgreSQL database integration",
    "installCommand": "npx @modelcontextprotocol/server-postgres",
    "requiredEnvVars": ["DATABASE_URL"],
    "optionalParams": ["SCHEMA_NAME"],
    "usageInstructions": "Execute SQL queries and manage PostgreSQL databases",
    "category": "Database"
  },
  "puppeteer": {
    "name": "Puppeteer",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer",
    "package": "@modelcontextprotocol/server-puppeteer",
    "description": "Web automation using Puppeteer",
    "installCommand": "npx @modelcontextprotocol/server-puppeteer",
    "requiredEnvVars": [],
    "optionalParams": ["HEADLESS", "VIEWPORT_WIDTH", "VIEWPORT_HEIGHT"],
    "usageInstructions": "Automate web browser interactions and scraping",
    "category": "Web Automation"
  },
  "redis": {
    "name": "Redis",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/redis",
    "package": "@modelcontextprotocol/server-redis",
    "description": "Redis database integration",
    "installCommand": "npx @modelcontextprotocol/server-redis",
    "requiredEnvVars": ["REDIS_URL"],
    "optionalParams": ["REDIS_PASSWORD"],
    "usageInstructions": "Manage Redis key-value store and caching operations",
    "category": "Database"
  },
  "sentry": {
    "name": "Sentry",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/sentry",
    "package": "@modelcontextprotocol/server-sentry",
    "description": "Sentry error tracking integration",
    "installCommand": "npx @modelcontextprotocol/server-sentry",
    "requiredEnvVars": ["SENTRY_DSN"],
    "optionalParams": ["SENTRY_PROJECT", "SENTRY_ORGANIZATION"],
    "usageInstructions": "Monitor and manage application errors and performance",
    "category": "Monitoring"
  },
  "sequentialthinking": {
    "name": "Sequential Thinking",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking",
    "package": "@modelcontextprotocol/server-sequentialthinking",
    "description": "Sequential thinking and reasoning tools",
    "installCommand": "npx @modelcontextprotocol/server-sequentialthinking",
    "requiredEnvVars": [],
    "optionalParams": ["THINKING_DEPTH"],
    "usageInstructions": "Enable step-by-step reasoning and problem-solving approaches",
    "category": "AI/ML"
  },
  "slack": {
    "name": "Slack",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/slack",
    "package": "@modelcontextprotocol/server-slack",
    "description": "Slack integration",
    "installCommand": "npx @modelcontextprotocol/server-slack",
    "requiredEnvVars": ["SLACK_BOT_TOKEN"],
    "optionalParams": ["SLACK_CHANNEL"],
    "usageInstructions": "Send messages and interact with Slack workspaces",
    "category": "Communication"
  },
  "sqlite": {
    "name": "SQLite",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite",
    "package": "@modelcontextprotocol/server-sqlite",
    "description": "SQLite database integration",
    "installCommand": "npx @modelcontextprotocol/server-sqlite",
    "requiredEnvVars": [],
    "optionalParams": ["DATABASE_PATH"],
    "usageInstructions": "Manage SQLite databases with SQL queries and operations",
    "category": "Database"
  },
  "time": {
    "name": "Time",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/time",
    "package": "@modelcontextprotocol/server-time",
    "description": "Time and scheduling utilities",
    "installCommand": "npx @modelcontextprotocol/server-time",
    "requiredEnvVars": [],
    "optionalParams": ["TIMEZONE"],
    "usageInstructions": "Get current time, schedule events, and manage time zones",
    "category": "Utilities"
  },
  "obsidian": {
    "name": "Obsidian",
    "githubLink": "https://github.com/calclavia/mcp-obsidian",
    "package": null,
    "description": "Read and search through Obsidian vault or Markdown notes directory",
    "installCommand": "pip install mcp-obsidian",
    "requiredEnvVars": ["OBSIDIAN_VAULT_PATH"],
    "optionalParams": ["SEARCH_DEPTH"],
    "usageInstructions": "Access and search Obsidian notes and Markdown files",
    "category": "Knowledge Management"
  },
  "spotify": {
    "name": "Spotify",
    "githubLink": "https://github.com/varunneal/spotify-mcp",
    "package": null,
    "description": "MCP server allowing LLM to play and use Spotify",
    "installCommand": "pip install spotify-mcp",
    "requiredEnvVars": ["SPOTIFY_CLIENT_ID", "SPOTIFY_CLIENT_SECRET"],
    "optionalParams": ["SPOTIFY_REDIRECT_URI"],
    "usageInstructions": "Control Spotify playback and search music",
    "category": "Entertainment"
  },
  "kubernetes": {
    "name": "Kubernetes",
    "githubLink": "https://github.com/Flux159/mcp-server-kubernetes",
    "package": null,
    "description": "Connect to Kubernetes cluster and manage pods, deployments, and services",
    "installCommand": "pip install mcp-kubernetes",
    "requiredEnvVars": ["KUBECONFIG"],
    "optionalParams": ["NAMESPACE"],
    "usageInstructions": "Manage Kubernetes resources via natural language interface",
    "category": "DevOps"
  },
  "docker": {
    "name": "Docker",
    "githubLink": "https://github.com/zueai/mcp-server-docker",
    "package": null,
    "description": "Manage Docker containers, images, and Docker Compose services",
    "installCommand": "pip install mcp-docker",
    "requiredEnvVars": [],
    "optionalParams": ["DOCKER_HOST"],
    "usageInstructions": "Control Docker containers and manage containerized applications",
    "category": "DevOps"
  },
  "aws": {
    "name": "AWS",
    "githubLink": "https://github.com/awslabs/mcp",
    "package": null,
    "description": "Specialized MCP servers bringing AWS best practices to development workflow",
    "installCommand": "pip install mcp-aws",
    "requiredEnvVars": ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_REGION"],
    "optionalParams": ["AWS_PROFILE"],
    "usageInstructions": "Interact with various AWS services and resources",
    "category": "Cloud Services"
  },
  "azure": {
    "name": "Azure",
    "githubLink": "https://github.com/Azure/azure-mcp-server",
    "package": null,
    "description": "Microsoft Azure cloud services integration",
    "installCommand": "pip install azure-mcp",
    "requiredEnvVars": ["AZURE_CLIENT_ID", "AZURE_CLIENT_SECRET", "AZURE_TENANT_ID"],
    "optionalParams": ["AZURE_SUBSCRIPTION_ID"],
    "usageInstructions": "Manage Azure resources and services",
    "category": "Cloud Services"
  },
  "notion": {
    "name": "Notion",
    "githubLink": "https://github.com/agentic-labs/mcp-notion",
    "package": null,
    "description": "Notion integration for databases, pages, and content management",
    "installCommand": "pip install mcp-notion",
    "requiredEnvVars": ["NOTION_TOKEN"],
    "optionalParams": ["DATABASE_ID"],
    "usageInstructions": "Create, read, and update Notion pages and databases",
    "category": "Productivity"
  },
  "linear": {
    "name": "Linear",
    "githubLink": "https://github.com/lxy-yz/mcp-linear",
    "package": null,
    "description": "Linear project management and issue tracking",
    "installCommand": "pip install mcp-linear",
    "requiredEnvVars": ["LINEAR_API_KEY"],
    "optionalParams": ["TEAM_ID"],
    "usageInstructions": "Manage Linear issues, projects, and team workflows",
    "category": "Project Management"
  },
  "jira": {
    "name": "Jira",
    "githubLink": "https://github.com/shankarpandala/mcp-jira",
    "package": null,
    "description": "Atlassian Jira integration for issue tracking and project management",
    "installCommand": "pip install mcp-jira",
    "requiredEnvVars": ["JIRA_URL", "JIRA_USERNAME", "JIRA_API_TOKEN"],
    "optionalParams": ["PROJECT_KEY"],
    "usageInstructions": "Create, update, and manage Jira issues and projects",
    "category": "Project Management"
  },
  "discord": {
    "name": "Discord",
    "githubLink": "https://github.com/cline/mcp-discord",
    "package": "mcp-discord",
    "description": "Discord bot integration for sending messages and managing servers",
    "installCommand": "npm install mcp-discord",
    "requiredEnvVars": ["DISCORD_TOKEN"],
    "optionalParams": ["GUILD_ID", "CHANNEL_ID"],
    "usageInstructions": "Send messages, manage channels, and interact with Discord servers",
    "category": "Communication"
  },
  "telegram": {
    "name": "Telegram",
    "githubLink": "https://github.com/telegram-mcp/mcp-telegram",
    "package": "mcp-telegram-bot",
    "description": "Telegram bot API integration for messaging and automation",
    "installCommand": "npm install mcp-telegram-bot",
    "requiredEnvVars": ["TELEGRAM_BOT_TOKEN"],
    "optionalParams": ["CHAT_ID"],
    "usageInstructions": "Send messages and interact with Telegram chats and channels",
    "category": "Communication"
  },
  "whatsapp": {
    "name": "WhatsApp",
    "githubLink": "https://github.com/whatsapp-mcp/mcp-whatsapp",
    "package": "mcp-whatsapp",
    "description": "WhatsApp Business API integration",
    "installCommand": "npm install mcp-whatsapp",
    "requiredEnvVars": ["WHATSAPP_TOKEN", "PHONE_NUMBER_ID"],
    "optionalParams": ["WEBHOOK_VERIFY_TOKEN"],
    "usageInstructions": "Send WhatsApp messages and manage business communications",
    "category": "Communication"
  },
  "email": {
    "name": "Email",
    "githubLink": "https://github.com/email-mcp/mcp-email",
    "package": "mcp-email-server",
    "description": "Email sending and receiving via SMTP/IMAP",
    "installCommand": "npm install mcp-email-server",
    "requiredEnvVars": ["SMTP_HOST", "SMTP_USER", "SMTP_PASS"],
    "optionalParams": ["IMAP_HOST", "IMAP_USER", "IMAP_PASS"],
    "usageInstructions": "Send and receive emails programmatically",
    "category": "Communication"
  },
  "twilio": {
    "name": "Twilio",
    "githubLink": "https://github.com/twilio-mcp/mcp-twilio",
    "package": "mcp-twilio",
    "description": "Twilio SMS and voice communication services",
    "installCommand": "npm install mcp-twilio",
    "requiredEnvVars": ["TWILIO_ACCOUNT_SID", "TWILIO_AUTH_TOKEN"],
    "optionalParams": ["FROM_PHONE_NUMBER"],
    "usageInstructions": "Send SMS messages and manage voice calls",
    "category": "Communication"
  },
  "mysql": {
    "name": "MySQL",
    "githubLink": "https://github.com/mysql-mcp/mcp-mysql",
    "package": "mcp-mysql-server",
    "description": "MySQL database integration and query execution",
    "installCommand": "npm install mcp-mysql-server",
    "requiredEnvVars": ["MYSQL_HOST", "MYSQL_USER", "MYSQL_PASSWORD", "MYSQL_DATABASE"],
    "optionalParams": ["MYSQL_PORT"],
    "usageInstructions": "Execute MySQL queries and manage database operations",
    "category": "Database"
  },
  "mongodb": {
    "name": "MongoDB",
    "githubLink": "https://github.com/mongodb-mcp/mcp-mongodb",
    "package": "mcp-mongodb",
    "description": "MongoDB NoSQL database integration",
    "installCommand": "npm install mcp-mongodb",
    "requiredEnvVars": ["MONGODB_URI"],
    "optionalParams": ["DATABASE_NAME", "COLLECTION_NAME"],
    "usageInstructions": "Perform MongoDB operations and manage document collections",
    "category": "Database"
  },
  "elasticsearch": {
    "name": "Elasticsearch",
    "githubLink": "https://github.com/elastic-mcp/mcp-elasticsearch",
    "package": "mcp-elasticsearch",
    "description": "Elasticsearch search and analytics engine integration",
    "installCommand": "npm install mcp-elasticsearch",
    "requiredEnvVars": ["ELASTICSEARCH_URL"],
    "optionalParams": ["INDEX_NAME", "API_KEY"],
    "usageInstructions": "Search and index documents in Elasticsearch clusters",
    "category": "Database"
  },
  "cassandra": {
    "name": "Cassandra",
    "githubLink": "https://github.com/cassandra-mcp/mcp-cassandra",
    "package": "mcp-cassandra",
    "description": "Apache Cassandra NoSQL database integration",
    "installCommand": "npm install mcp-cassandra",
    "requiredEnvVars": ["CASSANDRA_HOSTS"],
    "optionalParams": ["KEYSPACE", "USERNAME", "PASSWORD"],
    "usageInstructions": "Manage Cassandra keyspaces and execute CQL queries",
    "category": "Database"
  },
  "influxdb": {
    "name": "InfluxDB",
    "githubLink": "https://github.com/influxdb-mcp/mcp-influxdb",
    "package": "mcp-influxdb",
    "description": "InfluxDB time series database integration",
    "installCommand": "npm install mcp-influxdb",
    "requiredEnvVars": ["INFLUXDB_URL", "INFLUXDB_TOKEN"],
    "optionalParams": ["ORG", "BUCKET"],
    "usageInstructions": "Store and query time series data in InfluxDB",
    "category": "Database"
  },
  "shopify": {
    "name": "Shopify",
    "githubLink": "https://github.com/shopify-mcp/mcp-shopify",
    "package": "mcp-shopify",
    "description": "Shopify e-commerce platform integration",
    "installCommand": "npm install mcp-shopify",
    "requiredEnvVars": ["SHOPIFY_STORE_URL", "SHOPIFY_ACCESS_TOKEN"],
    "optionalParams": ["API_VERSION"],
    "usageInstructions": "Manage Shopify products, orders, and store operations",
    "category": "E-commerce"
  },
  "woocommerce": {
    "name": "WooCommerce",
    "githubLink": "https://github.com/woocommerce-mcp/mcp-woocommerce",
    "package": "mcp-woocommerce",
    "description": "WooCommerce WordPress e-commerce integration",
    "installCommand": "npm install mcp-woocommerce",
    "requiredEnvVars": ["WOOCOMMERCE_URL", "CONSUMER_KEY", "CONSUMER_SECRET"],
    "optionalParams": ["API_VERSION"],
    "usageInstructions": "Manage WooCommerce products, orders, and customers",
    "category": "E-commerce"
  },
  "stripe": {
    "name": "Stripe",
    "githubLink": "https://github.com/stripe-mcp/mcp-stripe",
    "package": "mcp-stripe",
    "description": "Stripe payment processing integration",
    "installCommand": "npm install mcp-stripe",
    "requiredEnvVars": ["STRIPE_SECRET_KEY"],
    "optionalParams": ["STRIPE_WEBHOOK_SECRET"],
    "usageInstructions": "Process payments, manage customers, and handle subscriptions",
    "category": "Payment Processing"
  },
  "paypal": {
    "name": "PayPal",
    "githubLink": "https://github.com/paypal-mcp/mcp-paypal",
    "package": "mcp-paypal",
    "description": "PayPal payment processing and merchant services",
    "installCommand": "npm install mcp-paypal",
    "requiredEnvVars": ["PAYPAL_CLIENT_ID", "PAYPAL_CLIENT_SECRET"],
    "optionalParams": ["PAYPAL_MODE"],
    "usageInstructions": "Handle PayPal payments and merchant operations",
    "category": "Payment Processing"
  },
  "square": {
    "name": "Square",
    "githubLink": "https://github.com/square-mcp/mcp-square",
    "package": "mcp-square",
    "description": "Square point-of-sale and payment processing",
    "installCommand": "npm install mcp-square",
    "requiredEnvVars": ["SQUARE_ACCESS_TOKEN"],
    "optionalParams": ["LOCATION_ID"],
    "usageInstructions": "Process payments and manage Square merchant services",
    "category": "Payment Processing"
  },
  "openai": {
    "name": "OpenAI",
    "githubLink": "https://github.com/openai-mcp/mcp-openai",
    "package": "mcp-openai",
    "description": "OpenAI API integration for GPT models and AI services",
    "installCommand": "npm install mcp-openai",
    "requiredEnvVars": ["OPENAI_API_KEY"],
    "optionalParams": ["MODEL_NAME", "MAX_TOKENS"],
    "usageInstructions": "Access OpenAI models for text generation and AI tasks",
    "category": "AI/ML"
  },
  "anthropic": {
    "name": "Anthropic",
    "githubLink": "https://github.com/anthropic-mcp/mcp-anthropic",
    "package": "mcp-anthropic",
    "description": "Anthropic Claude AI integration",
    "installCommand": "npm install mcp-anthropic",
    "requiredEnvVars": ["ANTHROPIC_API_KEY"],
    "optionalParams": ["MODEL_VERSION"],
    "usageInstructions": "Interact with Claude AI models for various AI tasks",
    "category": "AI/ML"
  },
  "huggingface": {
    "name": "Hugging Face",
    "githubLink": "https://github.com/huggingface-mcp/mcp-huggingface",
    "package": "mcp-huggingface",
    "description": "Hugging Face model hub and inference API integration",
    "installCommand": "npm install mcp-huggingface",
    "requiredEnvVars": ["HUGGINGFACE_API_TOKEN"],
    "optionalParams": ["MODEL_ID"],
    "usageInstructions": "Access Hugging Face models for ML inference and training",
    "category": "AI/ML"
  },
  "stability": {
    "name": "Stability AI",
    "githubLink": "https://github.com/stability-mcp/mcp-stability",
    "package": "mcp-stability",
    "description": "Stability AI image generation and manipulation",
    "installCommand": "npm install mcp-stability",
    "requiredEnvVars": ["STABILITY_API_KEY"],
    "optionalParams": ["ENGINE_ID"],
    "usageInstructions": "Generate and manipulate images using Stability AI models",
    "category": "AI/ML"
  },
  "midjourney": {
    "name": "Midjourney",
    "githubLink": "https://github.com/midjourney-mcp/mcp-midjourney",
    "package": "mcp-midjourney",
    "description": "Midjourney AI image generation integration",
    "installCommand": "npm install mcp-midjourney",
    "requiredEnvVars": ["MIDJOURNEY_API_KEY"],
    "optionalParams": ["STYLE_PRESET"],
    "usageInstructions": "Generate artistic images using Midjourney AI",
    "category": "AI/ML"
  },
  "jenkins": {
    "name": "Jenkins",
    "githubLink": "https://github.com/jenkins-mcp/mcp-jenkins",
    "package": "mcp-jenkins",
    "description": "Jenkins CI/CD automation server integration",
    "installCommand": "npm install mcp-jenkins",
    "requiredEnvVars": ["JENKINS_URL", "JENKINS_USER", "JENKINS_TOKEN"],
    "optionalParams": ["JOB_NAME"],
    "usageInstructions": "Trigger builds, manage jobs, and monitor CI/CD pipelines",
    "category": "DevOps"
  },
  "circleci": {
    "name": "CircleCI",
    "githubLink": "https://github.com/circleci-mcp/mcp-circleci",
    "package": "mcp-circleci",
    "description": "CircleCI continuous integration platform",
    "installCommand": "npm install mcp-circleci",
    "requiredEnvVars": ["CIRCLECI_TOKEN"],
    "optionalParams": ["PROJECT_SLUG"],
    "usageInstructions": "Manage CircleCI pipelines and build workflows",
    "category": "DevOps"
  },
  "travis": {
    "name": "Travis CI",
    "githubLink": "https://github.com/travis-mcp/mcp-travis",
    "package": "mcp-travis",
    "description": "Travis CI continuous integration service",
    "installCommand": "npm install mcp-travis",
    "requiredEnvVars": ["TRAVIS_TOKEN"],
    "optionalParams": ["REPOSITORY_SLUG"],
    "usageInstructions": "Monitor and manage Travis CI builds and deployments",
    "category": "DevOps"
  },
  "heroku": {
    "name": "Heroku",
    "githubLink": "https://github.com/heroku-mcp/mcp-heroku",
    "package": "mcp-heroku",
    "description": "Heroku cloud platform deployment and management",
    "installCommand": "npm install mcp-heroku",
    "requiredEnvVars": ["HEROKU_API_KEY"],
    "optionalParams": ["APP_NAME"],
    "usageInstructions": "Deploy and manage applications on Heroku platform",
    "category": "Cloud Services"
  },
  "vercel": {
    "name": "Vercel",
    "githubLink": "https://github.com/vercel-mcp/mcp-vercel",
    "package": "mcp-vercel",
    "description": "Vercel deployment platform for frontend applications",
    "installCommand": "npm install mcp-vercel",
    "requiredEnvVars": ["VERCEL_TOKEN"],
    "optionalParams": ["PROJECT_ID"],
    "usageInstructions": "Deploy and manage frontend applications on Vercel",
    "category": "Cloud Services"
  },
  "netlify": {
    "name": "Netlify",
    "githubLink": "https://github.com/netlify-mcp/mcp-netlify",
    "package": "mcp-netlify",
    "description": "Netlify static site deployment and hosting",
    "installCommand": "npm install mcp-netlify",
    "requiredEnvVars": ["NETLIFY_ACCESS_TOKEN"],
    "optionalParams": ["SITE_ID"],
    "usageInstructions": "Deploy static sites and manage Netlify hosting",
    "category": "Cloud Services"
  },
  "digitalocean": {
    "name": "DigitalOcean",
    "githubLink": "https://github.com/digitalocean-mcp/mcp-digitalocean",
    "package": "mcp-digitalocean",
    "description": "DigitalOcean cloud infrastructure management",
    "installCommand": "npm install mcp-digitalocean",
    "requiredEnvVars": ["DIGITALOCEAN_TOKEN"],
    "optionalParams": ["REGION"],
    "usageInstructions": "Manage DigitalOcean droplets, databases, and services",
    "category": "Cloud Services"
  },
  "linode": {
    "name": "Linode",
    "githubLink": "https://github.com/linode-mcp/mcp-linode",
    "package": "mcp-linode",
    "description": "Linode cloud computing platform integration",
    "installCommand": "npm install mcp-linode",
    "requiredEnvVars": ["LINODE_TOKEN"],
    "optionalParams": ["REGION"],
    "usageInstructions": "Provision and manage Linode instances and services",
    "category": "Cloud Services"
  },
  "vultr": {
    "name": "Vultr",
    "githubLink": "https://github.com/vultr-mcp/mcp-vultr",
    "package": "mcp-vultr",
    "description": "Vultr cloud infrastructure and VPS management",
    "installCommand": "npm install mcp-vultr",
    "requiredEnvVars": ["VULTR_API_KEY"],
    "optionalParams": ["REGION"],
    "usageInstructions": "Deploy and manage Vultr virtual private servers",
    "category": "Cloud Services"
  },
  "prometheus": {
    "name": "Prometheus",
    "githubLink": "https://github.com/prometheus-mcp/mcp-prometheus",
    "package": "mcp-prometheus",
    "description": "Prometheus monitoring and alerting system",
    "installCommand": "npm install mcp-prometheus",
    "requiredEnvVars": ["PROMETHEUS_URL"],
    "optionalParams": ["QUERY_TIMEOUT"],
    "usageInstructions": "Query metrics and manage Prometheus monitoring",
    "category": "Monitoring"
  },
  "grafana": {
    "name": "Grafana",
    "githubLink": "https://github.com/grafana-mcp/mcp-grafana",
    "package": "mcp-grafana",
    "description": "Grafana dashboard and visualization platform",
    "installCommand": "npm install mcp-grafana",
    "requiredEnvVars": ["GRAFANA_URL", "GRAFANA_API_KEY"],
    "optionalParams": ["ORGANIZATION_ID"],
    "usageInstructions": "Create and manage Grafana dashboards and alerts",
    "category": "Monitoring"
  },
  "datadog": {
    "name": "Datadog",
    "githubLink": "https://github.com/datadog-mcp/mcp-datadog",
    "package": "mcp-datadog",
    "description": "Datadog monitoring and analytics platform",
    "installCommand": "npm install mcp-datadog",
    "requiredEnvVars": ["DATADOG_API_KEY", "DATADOG_APP_KEY"],
    "optionalParams": ["SITE"],
    "usageInstructions": "Monitor infrastructure and applications with Datadog",
    "category": "Monitoring"
  },
  "newrelic": {
    "name": "New Relic",
    "githubLink": "https://github.com/newrelic-mcp/mcp-newrelic",
    "package": "mcp-newrelic",
    "description": "New Relic application performance monitoring",
    "installCommand": "npm install mcp-newrelic",
    "requiredEnvVars": ["NEWRELIC_API_KEY"],
    "optionalParams": ["ACCOUNT_ID"],
    "usageInstructions": "Monitor application performance and infrastructure",
    "category": "Monitoring"
  },
  "elastic-apm": {
    "name": "Elastic APM",
    "githubLink": "https://github.com/elastic-mcp/mcp-apm",
    "package": "mcp-elastic-apm",
    "description": "Elastic APM application performance monitoring",
    "installCommand": "npm install mcp-elastic-apm",
    "requiredEnvVars": ["ELASTIC_APM_URL", "ELASTIC_APM_TOKEN"],
    "optionalParams": ["SERVICE_NAME"],
    "usageInstructions": "Monitor application performance with Elastic APM",
    "category": "Monitoring"
  },
  "trello": {
    "name": "Trello",
    "githubLink": "https://github.com/trello-mcp/mcp-trello",
    "package": "mcp-trello",
    "description": "Trello project management and collaboration",
    "installCommand": "npm install mcp-trello",
    "requiredEnvVars": ["TRELLO_API_KEY", "TRELLO_TOKEN"],
    "optionalParams": ["BOARD_ID"],
    "usageInstructions": "Manage Trello boards, cards, and team collaboration",
    "category": "Project Management"
  },
  "asana": {
    "name": "Asana",
    "githubLink": "https://github.com/asana-mcp/mcp-asana",
    "package": "mcp-asana",
    "description": "Asana project and task management platform",
    "installCommand": "npm install mcp-asana",
    "requiredEnvVars": ["ASANA_ACCESS_TOKEN"],
    "optionalParams": ["WORKSPACE_ID"],
    "usageInstructions": "Manage Asana projects, tasks, and team workflows",
    "category": "Project Management"
  },
  "monday": {
    "name": "Monday.com",
    "githubLink": "https://github.com/monday-mcp/mcp-monday",
    "package": "mcp-monday",
    "description": "Monday.com work management platform integration",
    "installCommand": "npm install mcp-monday",
    "requiredEnvVars": ["MONDAY_API_TOKEN"],
    "optionalParams": ["BOARD_ID"],
    "usageInstructions": "Manage Monday.com boards, items, and workflows",
    "category": "Project Management"
  },
  "clickup": {
    "name": "ClickUp",
    "githubLink": "https://github.com/clickup-mcp/mcp-clickup",
    "package": "mcp-clickup",
    "description": "ClickUp productivity and project management",
    "installCommand": "npm install mcp-clickup",
    "requiredEnvVars": ["CLICKUP_API_TOKEN"],
    "optionalParams": ["TEAM_ID"],
    "usageInstructions": "Manage ClickUp tasks, projects, and team productivity",
    "category": "Project Management"
  },
  "airtable": {
    "name": "Airtable",
    "githubLink": "https://github.com/airtable-mcp/mcp-airtable",
    "package": "mcp-airtable",
    "description": "Airtable database and spreadsheet platform",
    "installCommand": "npm install mcp-airtable",
    "requiredEnvVars": ["AIRTABLE_API_KEY"],
    "optionalParams": ["BASE_ID", "TABLE_NAME"],
    "usageInstructions": "Manage Airtable bases, tables, and records",
    "category": "Productivity"
  },
  "google-sheets": {
    "name": "Google Sheets",
    "githubLink": "https://github.com/google-mcp/mcp-sheets",
    "package": "mcp-google-sheets",
    "description": "Google Sheets spreadsheet integration",
    "installCommand": "npm install mcp-google-sheets",
    "requiredEnvVars": ["GOOGLE_SHEETS_CREDENTIALS"],
    "optionalParams": ["SPREADSHEET_ID"],
    "usageInstructions": "Read and write data to Google Sheets spreadsheets",
    "category": "Productivity"
  },
  "excel": {
    "name": "Microsoft Excel",
    "githubLink": "https://github.com/microsoft-mcp/mcp-excel",
    "package": "mcp-excel",
    "description": "Microsoft Excel file processing and manipulation",
    "installCommand": "npm install mcp-excel",
    "requiredEnvVars": [],
    "optionalParams": ["FILE_PATH"],
    "usageInstructions": "Read, write, and manipulate Excel files and data",
    "category": "Productivity"
  },
  "pdf": {
    "name": "PDF",
    "githubLink": "https://github.com/pdf-mcp/mcp-pdf",
    "package": "mcp-pdf",
    "description": "PDF document processing and manipulation",
    "installCommand": "npm install mcp-pdf",
    "requiredEnvVars": [],
    "optionalParams": ["FILE_PATH"],
    "usageInstructions": "Extract text, merge, split, and manipulate PDF documents",
    "category": "Document Processing"
  },
  "docx": {
    "name": "Microsoft Word",
    "githubLink": "https://github.com/docx-mcp/mcp-docx",
    "package": "mcp-docx",
    "description": "Microsoft Word document processing",
    "installCommand": "npm install mcp-docx",
    "requiredEnvVars": [],
    "optionalParams": ["FILE_PATH"],
    "usageInstructions": "Create, read, and modify Word documents",
    "category": "Document Processing"
  },
  "confluence": {
    "name": "Confluence",
    "githubLink": "https://github.com/confluence-mcp/mcp-confluence",
    "package": "mcp-confluence",
    "description": "Atlassian Confluence wiki and documentation",
    "installCommand": "npm install mcp-confluence",
    "requiredEnvVars": ["CONFLUENCE_URL", "CONFLUENCE_USERNAME", "CONFLUENCE_API_TOKEN"],
    "optionalParams": ["SPACE_KEY"],
    "usageInstructions": "Create and manage Confluence pages and documentation",
    "category": "Knowledge Management"
  },
  "sharepoint": {
    "name": "SharePoint",
    "githubLink": "https://github.com/sharepoint-mcp/mcp-sharepoint",
    "package": "mcp-sharepoint",
    "description": "Microsoft SharePoint collaboration platform",
    "installCommand": "npm install mcp-sharepoint",
    "requiredEnvVars": ["SHAREPOINT_SITE_URL", "CLIENT_ID", "CLIENT_SECRET"],
    "optionalParams": ["TENANT_ID"],
    "usageInstructions": "Access SharePoint sites, lists, and document libraries",
    "category": "Knowledge Management"
  },
  "dropbox": {
    "name": "Dropbox",
    "githubLink": "https://github.com/dropbox-mcp/mcp-dropbox",
    "package": "mcp-dropbox",
    "description": "Dropbox cloud storage and file sharing",
    "installCommand": "npm install mcp-dropbox",
    "requiredEnvVars": ["DROPBOX_ACCESS_TOKEN"],
    "optionalParams": ["FOLDER_PATH"],
    "usageInstructions": "Upload, download, and manage files in Dropbox",
    "category": "Cloud Storage"
  },
  "onedrive": {
    "name": "OneDrive",
    "githubLink": "https://github.com/onedrive-mcp/mcp-onedrive",
    "package": "mcp-onedrive",
    "description": "Microsoft OneDrive cloud storage integration",
    "installCommand": "npm install mcp-onedrive",
    "requiredEnvVars": ["ONEDRIVE_CLIENT_ID", "ONEDRIVE_CLIENT_SECRET"],
    "optionalParams": ["TENANT_ID"],
    "usageInstructions": "Manage OneDrive files and folders",
    "category": "Cloud Storage"
  },
  "box": {
    "name": "Box",
    "githubLink": "https://github.com/box-mcp/mcp-box",
    "package": "mcp-box",
    "description": "Box cloud content management and storage",
    "installCommand": "npm install mcp-box",
    "requiredEnvVars": ["BOX_CLIENT_ID", "BOX_CLIENT_SECRET"],
    "optionalParams": ["FOLDER_ID"],
    "usageInstructions": "Manage Box files, folders, and collaborations",
    "category": "Cloud Storage"
  },
  "s3": {
    "name": "Amazon S3",
    "githubLink": "https://github.com/aws-mcp/mcp-s3",
    "package": "mcp-s3",
    "description": "Amazon S3 object storage service",
    "installCommand": "npm install mcp-s3",
    "requiredEnvVars": ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_REGION"],
    "optionalParams": ["BUCKET_NAME"],
    "usageInstructions": "Upload, download, and manage files in S3 buckets",
    "category": "Cloud Storage"
  },
  "youtube": {
    "name": "YouTube",
    "githubLink": "https://github.com/youtube-mcp/mcp-youtube",
    "package": "mcp-youtube",
    "description": "YouTube video platform integration",
    "installCommand": "npm install mcp-youtube",
    "requiredEnvVars": ["YOUTUBE_API_KEY"],
    "optionalParams": ["CHANNEL_ID"],
    "usageInstructions": "Search videos, manage playlists, and access YouTube data",
    "category": "Entertainment"
  },
  "twitch": {
    "name": "Twitch",
    "githubLink": "https://github.com/twitch-mcp/mcp-twitch",
    "package": "mcp-twitch",
    "description": "Twitch streaming platform integration",
    "installCommand": "npm install mcp-twitch",
    "requiredEnvVars": ["TWITCH_CLIENT_ID", "TWITCH_CLIENT_SECRET"],
    "optionalParams": ["CHANNEL_NAME"],
    "usageInstructions": "Access Twitch streams, chat, and channel data",
    "category": "Entertainment"
  },
  "playwright": {
    "name": "Microsoft Playwright",
    "githubLink": "https://github.com/microsoft/playwright-mcp",
    "package": "@modelcontextprotocol/server-playwright",
    "description": "Browser automation and testing with Playwright",
    "installCommand": "npx @modelcontextprotocol/server-playwright",
    "requiredEnvVars": [],
    "optionalParams": ["BROWSER_TYPE", "HEADLESS", "VIEWPORT_WIDTH", "VIEWPORT_HEIGHT"],
    "usageInstructions": "Automate browser interactions, perform web testing, and capture screenshots",
    "category": "Development Tools"
  },
  "context7": {
    "name": "Context7",
    "githubLink": "https://github.com/context7/mcp-server",
    "package": "@context7/mcp-server",
    "description": "Context management and conversation memory system",
    "installCommand": "npx @context7/mcp-server",
    "requiredEnvVars": [],
    "optionalParams": ["CONTEXT_FILE_PATH", "MAX_CONTEXT_SIZE"],
    "usageInstructions": "Manage conversation context, maintain session memory, and handle context switching",
    "category": "AI & Machine Learning"
  },
  "taskmaster": {
    "name": "Taskmaster",
    "githubLink": "https://github.com/KimbyDigital/task-master-mcp",
    "package": "task-master-mcp",
    "description": "Advanced task and project management system",
    "installCommand": "npx task-master-mcp",
    "requiredEnvVars": [],
    "optionalParams": ["TASKS_FILE_PATH", "DEFAULT_PRIORITY"],
    "usageInstructions": "Create, organize, and track tasks with advanced features like dependencies and scheduling",
    "category": "Productivity"
  },
  "xcodebuild": {
    "name": "Xcode Build",
    "githubLink": "https://github.com/cameroncooke/XcodeBuildMCP",
    "package": "xcodebuildmcp",
    "description": "Xcode project building and iOS/macOS development automation",
    "installCommand": "npx -y xcodebuildmcp@latest",
    "requiredEnvVars": [],
    "optionalParams": ["SENTRY_DISABLED", "PROJECT_PATH", "SCHEME", "CONFIGURATION", "DESTINATION"],
    "usageInstructions": "Build, test, and manage Xcode projects for iOS and macOS development",
    "category": "Development Tools"
  }
}