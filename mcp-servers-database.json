{
  "mcp-simple": {
    "name": "Tech Stack & MCP Recommender",
    "githubLink": "https://github.com/kmhari/mcp-simple",
    "package": "@oglabs/mcp",
    "description": "Intelligent MCP server for tech stack detection and MCP server recommendations with smart prompts",
    "installCommand": "npx -y @oglabs/mcp --server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use prompts for tech stack analysis, then tools for MCP server recommendations",
    "category": "Development"
  },
  "everything": {
    "name": "Everything",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/everything",
    "package": "@modelcontextprotocol/server-everything",
    "description": "Reference/test server with prompts, resources, and tools",
    "installCommand": "npx -y @modelcontextprotocol/server-everything",
    "requiredEnvVars": [],
    "optionalParams": [
      "CONFIG_PATH"
    ],
    "usageInstructions": "Development and testing server with example implementations",
    "category": "Development"
  },
  "fetch": {
    "name": "Fetch",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/fetch",
    "package": "mcp-server-fetch",
    "description": "Web content fetching and processing",
    "installCommand": "uvx mcp-server-fetch",
    "requiredEnvVars": [],
    "optionalParams": [
      "USER_AGENT",
      "TIMEOUT"
    ],
    "usageInstructions": "Fetch and process web content for efficient LLM usage",
    "category": "Web Scraping"
  },
  "filesystem": {
    "name": "Filesystem",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
    "package": "@modelcontextprotocol/server-filesystem",
    "description": "Local filesystem operations",
    "installCommand": "npx -y @modelcontextprotocol/server-filesystem",
    "requiredEnvVars": [],
    "optionalParams": [
      "ALLOWED_DIRECTORIES"
    ],
    "usageInstructions": "Read, write, and manage local files and directories",
    "category": "File Management"
  },
  "git": {
    "name": "Git",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/git",
    "package": "mcp-server-git",
    "description": "Git repository operations",
    "installCommand": "uvx mcp-server-git",
    "requiredEnvVars": [],
    "optionalParams": [
      "REPOSITORY_PATH"
    ],
    "usageInstructions": "Perform Git operations like commit, push, pull, and branch management",
    "category": "Version Control"
  },
  "skyvern": {
    "name": "Skyvern",
    "githubLink": "https://github.com/Skyvern-AI/skyvern",
    "package": "skyvern",
    "description": "Advanced browser automation with AI-powered web interaction",
    "installCommand": "python -m skyvern run mcp",
    "requiredEnvVars": [
      "SKYVERN_API_KEY"
    ],
    "optionalParams": [
      "SKYVERN_BASE_URL"
    ],
    "defaultEnvVars": {
      "SKYVERN_BASE_URL": "https://api.skyvern.com"
    },
    "usageInstructions": "Automate browser-based workflows, fill forms, download files, and interact with websites using AI",
    "category": "Browser Automation"
  },
  "memory": {
    "name": "Memory",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/memory",
    "package": "@modelcontextprotocol/server-memory",
    "description": "Persistent memory and knowledge storage",
    "installCommand": "npx -y @modelcontextprotocol/server-memory",
    "requiredEnvVars": [],
    "optionalParams": [
      "MEMORY_FILE_PATH"
    ],
    "usageInstructions": "Store and retrieve persistent memories across conversations",
    "category": "Data Storage"
  },
  "sequentialthinking": {
    "name": "Sequential Thinking",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking",
    "package": "@modelcontextprotocol/server-sequential-thinking",
    "description": "Sequential thinking and reasoning tools",
    "installCommand": "npx -y @modelcontextprotocol/server-sequential-thinking",
    "requiredEnvVars": [],
    "optionalParams": [
      "THINKING_DEPTH"
    ],
    "usageInstructions": "Enable step-by-step reasoning and problem-solving approaches",
    "category": "AI/ML"
  },
  "time": {
    "name": "Time",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/time",
    "package": "mcp-server-time",
    "description": "Time and scheduling utilities",
    "installCommand": "uvx mcp-server-time",
    "requiredEnvVars": [],
    "optionalParams": [
      "TIMEZONE"
    ],
    "usageInstructions": "Get current time, schedule events, and manage time zones",
    "category": "Utilities"
  },
  "obsidian": {
    "name": "Obsidian",
    "githubLink": "https://github.com/calclavia/mcp-obsidian",
    "package": null,
    "description": "Read and search through Obsidian vault or Markdown notes directory",
    "installCommand": "pip install mcp-obsidian",
    "requiredEnvVars": [
      "OBSIDIAN_VAULT_PATH"
    ],
    "optionalParams": [
      "SEARCH_DEPTH"
    ],
    "usageInstructions": "Access and search Obsidian notes and Markdown files",
    "category": "Knowledge Management"
  },
  "spotify": {
    "name": "Spotify",
    "githubLink": "https://github.com/varunneal/spotify-mcp",
    "package": null,
    "description": "MCP server allowing LLM to play and use Spotify",
    "installCommand": "pip install spotify-mcp",
    "requiredEnvVars": [
      "SPOTIFY_CLIENT_ID",
      "SPOTIFY_CLIENT_SECRET"
    ],
    "optionalParams": [
      "SPOTIFY_REDIRECT_URI"
    ],
    "usageInstructions": "Control Spotify playback and search music",
    "category": "Entertainment"
  },
  "kubernetes": {
    "name": "Kubernetes",
    "githubLink": "https://github.com/Flux159/mcp-server-kubernetes",
    "package": null,
    "description": "Connect to Kubernetes cluster and manage pods, deployments, and services",
    "installCommand": "pip install mcp-kubernetes",
    "requiredEnvVars": [
      "KUBECONFIG"
    ],
    "optionalParams": [
      "NAMESPACE"
    ],
    "usageInstructions": "Manage Kubernetes resources via natural language interface",
    "category": "DevOps"
  },
  "aws": {
    "name": "AWS",
    "githubLink": "https://github.com/awslabs/mcp",
    "package": null,
    "description": "Specialized MCP servers bringing AWS best practices to development workflow",
    "installCommand": "pip install mcp-aws",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY",
      "AWS_REGION"
    ],
    "optionalParams": [
      "AWS_PROFILE"
    ],
    "usageInstructions": "Interact with various AWS services and resources",
    "category": "Cloud Services"
  },
  "clerk": {
    "name": "Clerk",
    "githubLink": "https://github.com/clerk/javascript/tree/HEAD/packages/agent-toolkit",
    "package": "@clerk/agent-toolkit",
    "description": "Authentication and user management with Clerk for AI agents",
    "installCommand": "npx -y @clerk/agent-toolkit",
    "requiredEnvVars": [
      "CLERK_SECRET_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Integrate Clerk authentication with AI agent frameworks. Manage users, organizations, and inject session claims into AI prompts. Warning: Agent behavior is non-deterministic - use carefully in production.",
    "category": "Authentication"
  },
  "playwright": {
    "name": "Microsoft Playwright",
    "githubLink": "https://github.com/microsoft/playwright-mcp",
    "package": "@playwright/mcp@latest",
    "description": "Browser automation and testing with Playwright",
    "installCommand": "npx -y @playwright/mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "BROWSER_TYPE",
      "HEADLESS",
      "VIEWPORT_WIDTH",
      "VIEWPORT_HEIGHT",
      "DEFAULT_TIMEOUT"
    ],
    "usageInstructions": "Automate browser interactions, perform web testing, and capture screenshots",
    "category": "Development Tools"
  },
  "context7": {
    "name": "Context7",
    "githubLink": "https://github.com/upstash/context7",
    "package": "@upstash/context7-mcp",
    "description": "Context management and conversation memory system",
    "installCommand": "npx -y @upstash/context7-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "UPSTASH_REDIS_REST_URL",
      "UPSTASH_REDIS_REST_TOKEN",
      "CONTEXT_KEY",
      "MAX_CONTEXT_SIZE"
    ],
    "usageInstructions": "Manage conversation context, maintain session memory, and handle context switching",
    "category": "AI & Machine Learning"
  },
  "taskmaster": {
    "name": "Task Master",
    "githubLink": "https://github.com/eyaltoledano/claude-task-master",
    "package": "task-master-mcp",
    "description": "Comprehensive task management with projects, contexts, and advanced organization",
    "installCommand": "npx -y --package=task-master-ai task-master-ai",
    "requiredEnvVars": [],
    "optionalParams": [
      ""
    ],
    "usageInstructions": "Manage tasks with projects, contexts, priorities, due dates, and dependencies. Supports natural language input for task creation and filtering.",
    "category": "Productivity"
  },
  "xcodebuild": {
    "name": "Xcode Build",
    "githubLink": "https://github.com/cameroncooke/XcodeBuildMCP",
    "package": "xcodebuildmcp",
    "description": "Xcode project building and iOS/macOS development automation",
    "installCommand": "npx -y xcodebuildmcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "SENTRY_DISABLED",
      "PROJECT_PATH",
      "SCHEME",
      "CONFIGURATION",
      "DESTINATION"
    ],
    "usageInstructions": "Build, test, and manage Xcode projects for iOS and macOS development",
    "category": "Development Tools"
  },
  "supabase": {
    "name": "Supabase",
    "githubLink": "https://github.com/supabase-community/supabase-mcp",
    "package": "@supabase/mcp-server-supabase",
    "description": "Complete Supabase platform integration for database and project management",
    "installCommand": "npx -y @supabase/mcp-server-supabase@latest",
    "requiredEnvVars": [
      "SUPABASE_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "PROJECT_REF"
    ],
    "usageInstructions": "Manage Supabase projects, design tables, run SQL queries, create database branches, generate TypeScript types, and handle migrations",
    "category": "Databases"
  },
  "postgres-crystal": {
    "name": "PostgreSQL (Crystal DBA)",
    "githubLink": "https://github.com/crystaldba/postgres-mcp",
    "package": "postgres-mcp",
    "description": "PostgreSQL database operations with advanced DBA capabilities",
    "installCommand": "pip install postgres-mcp",
    "requiredEnvVars": [
      "PG_CONNECTION_STRING"
    ],
    "optionalParams": [],
    "usageInstructions": "Execute SQL queries, manage database schema, perform DBA operations on PostgreSQL databases. Requires a PostgreSQL connection string.",
    "category": "Databases"
  },
  "qdrant": {
    "name": "Qdrant",
    "githubLink": "https://github.com/qdrant/mcp-server-qdrant",
    "package": "@qdrant/mcp-server-qdrant",
    "description": "Vector database operations for Qdrant - store and search high-dimensional vectors",
    "installCommand": "npx -y @qdrant/mcp-server-qdrant",
    "requiredEnvVars": [
      "QDRANT_URL"
    ],
    "optionalParams": [
      "QDRANT_API_KEY"
    ],
    "usageInstructions": "Manage collections, insert vectors, perform similarity searches, and handle vector data in Qdrant. Requires Qdrant instance URL.",
    "category": "Databases"
  },
  "nixos": {
    "name": "NixOS",
    "githubLink": "https://github.com/utensils/mcp-nixos",
    "package": "mcp-nixos",
    "description": "Provides real-time information about NixOS packages, configurations, and version histories",
    "installCommand": "uvx mcp-nixos",
    "requiredEnvVars": [],
    "optionalParams": [
      "ELASTICSEARCH_URL"
    ],
    "usageInstructions": "Search NixOS packages, configuration options, Home Manager settings, nix-darwin configurations, and package version history. Queries live NixOS APIs for accurate data.",
    "category": "Development Tools"
  },
  "shadcn-ui": {
    "name": "shadcn/ui",
    "githubLink": "https://github.com/heilgar/shadcn-ui-mcp-server",
    "package": "@heilgar/shadcn-ui-mcp-server",
    "description": "Browse and install shadcn/ui components and utilities for React applications",
    "installCommand": "npx -y @heilgar/shadcn-ui-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "FRAMEWORK"
    ],
    "usageInstructions": "Search, view documentation, and install shadcn/ui components directly into your React project. Supports component browsing, installation, and dependency management.",
    "category": "UI Components"
  },
  "gpt-researcher": {
    "name": "GPT Researcher",
    "githubLink": "https://github.com/assafelovic/gpt-researcher",
    "package": "gptr-mcp",
    "description": "AI-powered research assistant that conducts comprehensive online research on any topic",
    "installCommand": "git clone https://github.com/assafelovic/gptr-mcp.git && cd gptr-mcp && pip install -r requirements.txt",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "TAVILY_API_KEY"
    ],
    "optionalParams": [
      "RESEARCH_DEPTH",
      "REPORT_FORMAT",
      "MAX_SOURCES"
    ],
    "usageInstructions": "Perform deep research on topics, generate comprehensive reports, quick searches, and track sources. Requires manual setup with git clone and Python environment.",
    "category": "Research & Analysis"
  },
  "pr-reviewer": {
    "name": "PR Reviewer",
    "githubLink": "https://github.com/elhadjaoui/pr_reviewer",
    "package": null,
    "description": "Automatically analyzes Pull Requests, reviews changes, and adds comments directly to modified files",
    "installCommand": "pip install requests python-dotenv 'mcp[cli]' pydrive",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "GOOGLE_PARENT_FOLDER_ID"
    ],
    "usageInstructions": "Review pull requests automatically, add inline comments, approve PRs, and optionally store reviews in Google Drive. Requires GitHub personal access token with appropriate permissions.",
    "category": "Development Tools"
  },
  "gdrive-ej": {
    "name": "Google Drive (Enhanced)",
    "githubLink": "https://github.com/ejoyee/ej-mcp-server-gdrive",
    "package": "@modelcontextprotocol/server-gdrive",
    "description": "Enhanced Google Drive integration with file listing, reading, and searching capabilities with automatic format conversion",
    "installCommand": "npx -y @modelcontextprotocol/server-gdrive",
    "requiredEnvVars": [
      "GDRIVE_CREDENTIALS_PATH"
    ],
    "optionalParams": [
      "FOLDER_ID",
      "MAX_RESULTS"
    ],
    "usageInstructions": "Access Google Drive files with advanced search, read documents with automatic format conversion, and manage Drive content. Requires Google OAuth credentials JSON file.",
    "category": "Cloud Storage"
  },
  "sharepoint": {
    "name": "SharePoint",
    "githubLink": "https://github.com/Sofias-ai/mcp-sharepoint",
    "package": "mcp-sharepoint-server",
    "description": "Lightweight Microsoft SharePoint integration for document and folder management",
    "installCommand": "pip install mcp-sharepoint-server",
    "requiredEnvVars": [
      "SHP_ID_APP",
      "SHP_ID_APP_SECRET",
      "SHP_SITE_URL",
      "SHP_TENANT_ID"
    ],
    "optionalParams": [
      "SHP_DOC_LIBRARY"
    ],
    "usageInstructions": "List, read, search, and download SharePoint documents and folders. Requires Azure AD application credentials for authentication.",
    "category": "Cloud Storage"
  },
  "shrimp-task-manager": {
    "name": "Shrimp Task Manager",
    "githubLink": "https://github.com/cjo4m06/mcp-shrimp-task-manager",
    "package": "mcp-shrimp-task-manager",
    "description": "Intelligent task management system based on MCP, providing efficient programming workflow framework for AI Agents",
    "installCommand": "npx -y @smithery/cli install @cjo4m06/mcp-shrimp-task-manager --client claude",
    "requiredEnvVars": [
      "DATA_DIR"
    ],
    "optionalParams": [
      "TEMPLATES_USE",
      "ENABLE_GUI",
      "MCP_PROMPT_PLAN_TASK"
    ],
    "usageInstructions": "Switch between TaskPlanner and TaskExecutor modes for systematic task planning and execution. Supports dependency tracking, research mode, task history, multiple languages, and customizable prompts.",
    "category": "Productivity"
  },
  "just-prompt": {
    "name": "Just Prompt",
    "githubLink": "https://github.com/disler/just-prompt",
    "package": null,
    "description": "Unified interface to multiple LLM providers with parallel querying capabilities",
    "installCommand": "git clone https://github.com/disler/just-prompt && cd just-prompt && uv sync",
    "requiredEnvVars": [],
    "optionalParams": [
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "GEMINI_API_KEY",
      "GROQ_API_KEY",
      "DEEPSEEK_API_KEY",
      "OLLAMA_HOST"
    ],
    "usageInstructions": "Query multiple LLM providers (OpenAI, Anthropic, Google, Groq, DeepSeek, Ollama) simultaneously or individually. Configure API keys for the providers you want to use.",
    "category": "AI/ML"
  },
  "circleci": {
    "name": "CircleCI",
    "githubLink": "https://github.com/CircleCI-Public/mcp-server-circleci",
    "package": "@circleci/mcp-server-circleci",
    "description": "Model Context Protocol server for integrating with CircleCI development workflows",
    "installCommand": "npx -y @circleci/mcp-server-circleci",
    "requiredEnvVars": [
      "CIRCLECI_TOKEN"
    ],
    "optionalParams": [
      "CIRCLECI_BASE_URL"
    ],
    "usageInstructions": "Retrieve build failure logs, find flaky tests, analyze job results, validate configuration, and manage CircleCI pipelines. Supports natural language interactions with CI/CD workflows.",
    "category": "DevOps"
  },
  "clickup": {
    "name": "ClickUp",
    "githubLink": "https://github.com/taazkareem/clickup-mcp-server",
    "package": "@taazkareem/clickup-mcp-server",
    "description": "Comprehensive ClickUp task management integration with 36 tools for AI applications",
    "installCommand": "npx -y @taazkareem/clickup-mcp-server@latest",
    "requiredEnvVars": [
      "CLICKUP_API_KEY",
      "CLICKUP_TEAM_ID"
    ],
    "optionalParams": [
      "ENABLE_SSE",
      "PORT",
      "DISABLED_TOOLS"
    ],
    "usageInstructions": "Manage ClickUp tasks, spaces, lists, and folders with natural language. Create, update, track time, and manage team members. Supports HTTP/SSE transport and markdown formatting.",
    "category": "Project Management"
  },
  "cognition-wheel": {
    "name": "Cognition Wheel",
    "githubLink": "https://github.com/Hormold/cognition-wheel",
    "package": "cognition-wheel",
    "description": "AI-powered cognitive assessment and development tool that helps track and improve various cognitive abilities",
    "installCommand": "pip install cognition-wheel",
    "requiredEnvVars": [],
    "optionalParams": [
      "CONFIG_PATH",
      "MODEL_PATH",
      "OUTPUT_DIR"
    ],
    "usageInstructions": "Assess and track cognitive abilities including memory, attention, reasoning, and problem-solving. Generate personalized cognitive development plans and track progress over time.",
    "category": "AI & Machine Learning"
  },
  "github-project-manager": {
    "name": "GitHub Project Manager",
    "githubLink": "https://github.com/kunwarVivek/mcp-github-project-manager",
    "package": "mcp-github-project-manager",
    "description": "Comprehensive GitHub project management tool for managing repositories, issues, pull requests, and GitHub Projects",
    "installCommand": "npx -y mcp-github-project-manager",
    "requiredEnvVars": [
      "GITHUB_TOKEN",
      "GITHUB_OWNER",
      "GITHUB_REPO"
    ],
    "optionalParams": [
      "DEFAULT_ORG",
      "DEFAULT_REPO",
      "MAX_RESULTS"
    ],
    "usageInstructions": "Manage GitHub repositories, create and update issues, handle pull requests, manage GitHub Projects (v2), and automate project workflows. Requires a GitHub personal access token with appropriate permissions.",
    "category": "Development Tools"
  },
  "github": {
    "name": "GitHub",
    "githubLink": "https://github.com/github/github-mcp-server",
    "package": "ghcr.io/github/github-mcp-server",
    "description": "Official GitHub MCP server providing seamless integration with GitHub APIs for advanced automation and interaction capabilities",
    "installCommand": "docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> ghcr.io/github/github-mcp-server",
    "requiredEnvVars": [
      "GITHUB_PERSONAL_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "--toolsets",
      "--read-only",
      "--gh-host",
      "--dynamic-toolsets"
    ],
    "usageInstructions": "Access GitHub APIs through MCP for repository management, issues, pull requests, actions, and more. Requires Docker and a GitHub Personal Access Token.",
    "category": "Development Tools"
  },
  "firecrawl": {
    "name": "Firecrawl",
    "githubLink": "https://github.com/mendableai/firecrawl-mcp-server",
    "package": "firecrawl-mcp-server",
    "description": "Advanced web scraping and crawling with intelligent content extraction and data processing",
    "installCommand": "npx -y firecrawl-mcp-server",
    "requiredEnvVars": [
      "FIRECRAWL_API_KEY"
    ],
    "optionalParams": [
      "MAX_PAGES",
      "TIMEOUT",
      "INCLUDE_HTML",
      "INCLUDE_RAW_HTML"
    ],
    "usageInstructions": "Crawl websites, extract structured data, and process web content at scale. Supports intelligent content extraction with configurable crawling parameters.",
    "category": "Web Scraping"
  },
  "google-maps": {
    "name": "Google Maps",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps",
    "package": "@modelcontextprotocol/server-google-maps",
    "description": "Google Maps integration for location services, directions, and place information",
    "installCommand": "npx -y @modelcontextprotocol/server-google-maps",
    "requiredEnvVars": [
      "GOOGLE_MAPS_API_KEY"
    ],
    "optionalParams": [
      "DEFAULT_LOCATION",
      "SEARCH_RADIUS",
      "LANGUAGE"
    ],
    "usageInstructions": "Search places, get directions, geocode addresses, and access Google Maps services. Requires Google Maps API key with appropriate services enabled.",
    "category": "Location Services"
  },
  "apple-mcp": {
    "name": "Apple MCP",
    "githubLink": "https://github.com/supermemoryai/apple-mcp",
    "package": "apple-mcp",
    "description": "Apple ecosystem integration for accessing iOS/macOS system information and device management",
    "installCommand": "pip install apple-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "DEVICE_ID",
      "BUNDLE_ID",
      "SYSTEM_INTEGRATION_LEVEL"
    ],
    "usageInstructions": "Access Apple device information, system status, and integrate with iOS/macOS applications. Provides device management and system monitoring capabilities.",
    "category": "System Integration"
  },
  "mindsdb": {
    "name": "MindsDB",
    "githubLink": "https://github.com/mindsdb/mindsdb",
    "package": "mindsdb",
    "description": "AI query engine for federated data sources with built-in MCP server for database and ML operations",
    "installCommand": "pip install mindsdb",
    "requiredEnvVars": [],
    "optionalParams": [
      "MINDSDB_DB_CON",
      "MINDSDB_STORAGE_PATH",
      "MINDSDB_CONFIG_PATH"
    ],
    "usageInstructions": "Connect multiple data sources (SQL databases, APIs, files) and query them with natural language. Includes ML capabilities and predictive analytics.",
    "category": "AI & Machine Learning"
  },
  "fastmcp": {
    "name": "FastMCP",
    "githubLink": "https://github.com/jlowin/fastmcp",
    "package": "fastmcp",
    "description": "Python framework for rapidly building MCP servers and clients with simplified development workflow",
    "installCommand": "uv pip install fastmcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "SERVER_NAME",
      "DEBUG",
      "LOG_LEVEL"
    ],
    "usageInstructions": "Build custom MCP servers quickly using Python. Provides scaffolding, decorators, and utilities for MCP development.",
    "category": "Development Tools"
  },
  "figma-context": {
    "name": "Figma Context MCP",
    "githubLink": "https://github.com/GLips/Figma-Context-MCP",
    "package": "figma-developer-mcp",
    "description": "Provides Figma design data and context to AI coding tools for design-to-code workflows",
    "installCommand": "npx -y figma-developer-mcp",
    "requiredEnvVars": [
      "FIGMA_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "Access Figma files, frames, and design tokens to enhance AI-powered code generation. Requires Figma API access token.",
    "category": "Design Tools"
  },
  "ghidra-mcp": {
    "name": "Ghidra MCP",
    "githubLink": "https://github.com/LaurieWired/GhidraMCP",
    "package": null,
    "description": "MCP server for autonomous reverse engineering with Ghidra - enables AI-powered binary analysis",
    "installCommand": "git clone https://github.com/LaurieWired/GhidraMCP.git && cd GhidraMCP && python3 -m pip install mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "GHIDRA_HOST",
      "GHIDRA_PORT"
    ],
    "usageInstructions": "Perform automated reverse engineering and binary analysis using Ghidra with AI assistance. Requires Ghidra installation and manual setup.",
    "category": "Security"
  },
  "notion": {
    "name": "Notion",
    "githubLink": "https://github.com/makenotion/notion-mcp-server",
    "package": "@makenotion/notion-mcp-server",
    "description": "Official Notion MCP server for comprehensive workspace and database management",
    "installCommand": "npx -y @makenotion/notion-mcp-server",
    "requiredEnvVars": [
      "NOTION_API_KEY"
    ],
    "optionalParams": [
      "NOTION_DATABASE_ID"
    ],
    "usageInstructions": "Access Notion pages, databases, and blocks. Create, read, update content in your Notion workspace. Requires Notion integration API key.",
    "category": "Productivity"
  },
  "obsidian-advanced": {
    "name": "Obsidian (Advanced)",
    "githubLink": "https://github.com/cyanheads/obsidian-mcp-server",
    "package": "obsidian-mcp-server",
    "description": "Comprehensive Obsidian vault interactions via Local REST API with advanced note management",
    "installCommand": "uvx obsidian-mcp-server",
    "requiredEnvVars": [
      "OBSIDIAN_API_URL",
      "OBSIDIAN_API_KEY"
    ],
    "optionalParams": [
      "VAULT_PATH",
      "TIMEOUT"
    ],
    "usageInstructions": "Advanced Obsidian operations including note reading/writing, tag management, frontmatter operations, and graph navigation. Requires Obsidian Local REST API plugin.",
    "category": "Knowledge Management"
  },
  "git-advanced": {
    "name": "Git (Advanced)",
    "githubLink": "https://github.com/cyanheads/git-mcp-server",
    "package": "git-mcp-server",
    "description": "Comprehensive Git operations with clone, commit, branch, merge, rebase, and worktree support",
    "installCommand": "uvx git-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "GIT_USER_NAME",
      "GIT_USER_EMAIL",
      "DEFAULT_BRANCH"
    ],
    "usageInstructions": "Full Git workflow support including advanced operations like interactive rebase, worktree management, tag operations, and repository cloning.",
    "category": "Version Control"
  },
  "npm-docs": {
    "name": "NPM Documentation",
    "githubLink": "https://github.com/bsmi021/mcp-npm_docs-server",
    "package": "mcp-npm-docs-server",
    "description": "Fetches NPM package metadata and documentation with intelligent caching",
    "installCommand": "uvx mcp-npm-docs-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "NPM_CACHE_TTL",
      "NPM_CACHE_DB_PATH"
    ],
    "usageInstructions": "Retrieve package information, README content, and documentation from NPM registry with local caching for performance.",
    "category": "Development Tools"
  },
  "npm-search": {
    "name": "NPM Search",
    "githubLink": "https://github.com/btwiuse/npm-search-mcp-server",
    "package": "npm-search-mcp-server",
    "description": "Search and discover NPM packages with dependency analysis and popularity metrics",
    "installCommand": "uvx npm-search-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "SEARCH_LIMIT",
      "CACHE_DURATION"
    ],
    "usageInstructions": "Search NPM registry, analyze package dependencies, view popularity metrics, and discover related packages.",
    "category": "Development Tools"
  },
  "docker": {
    "name": "Docker",
    "githubLink": "https://github.com/docker/mcp-servers",
    "package": null,
    "description": "Secure code execution in Docker containers for AI development workflows",
    "installCommand": "docker pull docker/mcp-server && docker run -d docker/mcp-server",
    "requiredEnvVars": [
      "DOCKER_HOST"
    ],
    "optionalParams": [
      "DOCKER_CERT_PATH",
      "DOCKER_TLS_VERIFY"
    ],
    "usageInstructions": "Execute code securely in isolated Docker containers, manage containers and images, enable sandboxed AI operations.",
    "category": "DevOps"
  },
  "json": {
    "name": "JSON",
    "githubLink": "https://github.com/gongrzhe/json-mcp-server",
    "package": "@gongrzhe/server-json-mcp",
    "description": "Query and manipulate JSON data using JSONPath expressions",
    "installCommand": "npx -y @gongrzhe/server-json-mcp@1.0.3",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Query JSON data using JSONPath (start with $), filter arrays, perform string/numeric/date operations, and data aggregation",
    "category": "Data Processing"
  },
  "slack": {
    "name": "Slack",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/slack",
    "package": "@modelcontextprotocol/server-slack",
    "description": "Official Slack integration for posting messages, managing channels, and interacting with Slack workspaces",
    "installCommand": "npx -y @modelcontextprotocol/server-slack",
    "requiredEnvVars": [
      "SLACK_BOT_TOKEN",
      "SLACK_TEAM_ID"
    ],
    "optionalParams": [
      "SLACK_CHANNEL_IDS"
    ],
    "usageInstructions": "Post messages, reply to threads, add reactions, get channel history, and manage Slack workspace interactions. Requires creating a Slack App with bot token scopes and workspace installation.",
    "category": "Communication"
  },
  "slack-stealth": {
    "name": "Slack Stealth",
    "githubLink": "https://github.com/korotovsky/slack-mcp-server",
    "package": "slack-mcp-server",
    "description": "Advanced Slack MCP server with stealth mode, OAuth support, and flexible message retrieval without additional workspace permissions",
    "installCommand": "npx -y slack-mcp-server@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "SLACK_MCP_XOXC_TOKEN",
      "SLACK_MCP_XOXD_TOKEN",
      "SLACK_MCP_XOXP_TOKEN",
      "SLACK_MCP_SERVER_PORT",
      "SLACK_MCP_SERVER_HOST"
    ],
    "defaultEnvVars": {
      "SLACK_MCP_SERVER_PORT": "3001",
      "SLACK_MCP_SERVER_HOST": "127.0.0.1"
    },
    "authMethods": {
      "browser": {
        "name": "Browser-based Tokens (XOXC/XOXD)",
        "requiredVars": [
          "SLACK_MCP_XOXC_TOKEN",
          "SLACK_MCP_XOXD_TOKEN"
        ],
        "description": "Extract tokens from your browser session"
      },
      "oauth": {
        "name": "User OAuth Token",
        "requiredVars": [
          "SLACK_MCP_XOXP_TOKEN"
        ],
        "description": "More secure, uses Slack API OAuth token"
      }
    },
    "usageInstructions": "Retrieve channel/thread messages, list channels, and access DMs with minimal workspace permissions. Choose between browser-based tokens (XOXC/XOXD) or OAuth token (XOXP) authentication methods.",
    "category": "Communication"
  },
  "exa": {
    "name": "Exa",
    "githubLink": "https://github.com/exa-labs/exa-mcp-server",
    "package": "exa-mcp-server",
    "description": "AI-powered web search API integration for real-time searches, research papers, company info, and more",
    "installCommand": "npx -y exa-mcp-server",
    "requiredEnvVars": [
      "EXA_API_KEY"
    ],
    "optionalParams": [
      "--tools"
    ],
    "usageInstructions": "Enable web search, research papers, company research, crawling, competitor analysis, LinkedIn search, Wikipedia, and GitHub search. Get API key from dashboard.exa.ai/api-keys. Use --tools flag to select specific search capabilities.",
    "category": "Search & Research"
  },
  "magic": {
    "name": "21st.dev Magic",
    "githubLink": "https://github.com/21st-dev/magic-mcp",
    "package": "@21st-dev/magic-mcp",
    "description": "AI-powered UI component generator that creates beautiful, modern React components through natural language descriptions",
    "installCommand": "npx -y @21st-dev/magic-mcp",
    "requiredEnvVars": [
      "MAGIC_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Type '/ui' in your AI chat and describe the component you want. Magic generates production-ready React components with TypeScript support. Get your API key from the 21st.dev Magic Console. Currently in beta with all features free.",
    "category": "UI Components"
  },
  "openai": {
    "name": "MCP OpenAI Server",
    "githubLink": "https://github.com/mzxrai/mcp-openai",
    "package": "@mzxrai/mcp-openai",
    "description": "A Model Context Protocol (MCP) server that integrates OpenAI's chat models with Claude for seamless model usage",
    "installCommand": "npx -y @mzxrai/mcp-openai@latest",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "model"
    ],
    "usageInstructions": "Start chatting with Claude and request OpenAI model usage (e.g., 'Can you ask o1 what it thinks about this problem?')",
    "category": "API Integration"
  },
  "bazi": {
    "name": "Bazi MCP",
    "githubLink": "https://github.com/cantian-ai/bazi-mcp",
    "package": "@cantian-ai/bazi-mcp",
    "description": "An AI-powered Bazi calculator for accurate personality analysis and destiny forecasting.",
    "installCommand": "npx -y @smithery/cli install @cantian-ai/bazi-mcp --client claude",
    "requiredEnvVars": [
      "NODE_VERSION=22+"
    ],
    "optionalParams": [
      "gender (0/1)",
      "eightCharProviderSect (1/2)"
    ],
    "usageInstructions": "Configure an AI application (e.g., Claude Desktop) and run 'npx bazi-mcp' to start the server.",
    "category": "Other"
  },
  "snapshot": {
    "name": "MCP Snapshot Server",
    "githubLink": "https://github.com/crazyrabbitLTC/mcp-snapshot-server",
    "package": "mcp-snapshot-server",
    "description": "A MCP-compliant server for interacting with Snapshot.org, providing tools to query spaces, proposals, and user data.",
    "installCommand": "npm install mcp-snapshot-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "limit",
      "skip",
      "category",
      "search",
      "state",
      "spaceId",
      "proposalId",
      "address"
    ],
    "usageInstructions": "Configure Claude Desktop by adding the server to your config file with the absolute path to the built server.",
    "category": "API Integration"
  },
  "zipic": {
    "name": "Zipic MCP Server",
    "githubLink": "https://github.com/okooo5km/zipic-mcp-server",
    "package": "zipic-mcp-server",
    "description": "A Model Context Protocol server for image compression and optimization.",
    "installCommand": "curl -fsSL https://raw.githubusercontent.com/okooo5km/zipic-mcp-server/main/install.sh | bash",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use 'zipic-mcp-server --help' for usage information. Configure in Claude or Cursor using provided JSON configurations.",
    "category": "Media"
  },
  "server": {
    "name": "Webflow's Official MCP Server",
    "githubLink": "https://github.com/webflow/mcp-server",
    "package": "webflow-mcp-server",
    "description": "A Node.js server implementing Model Context Protocol (MCP) for Webflow, enabling AI agents to interact with Webflow APIs.",
    "installCommand": "npx -y webflow-mcp-server@0.6.0",
    "requiredEnvVars": [
      "WEBFLOW_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure with Webflow API token and use with MCP clients like Cursor, Claude Desktop, or Windsurf.",
    "category": "API Integration"
  },
  "file-context": {
    "name": "File Context Server",
    "githubLink": "https://github.com/bsmi021/mcp-file-context-server",
    "package": "@modelcontextprotocol/file-context-server",
    "description": "A Model Context Protocol (MCP) server providing file system context to Large Language Models (LLMs) with advanced caching and real-time file watching.",
    "installCommand": "npm install @modelcontextprotocol/file-context-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server with 'npx file-context-server', then use tools like list_context_files, read_context, search_context, analyze_code, and cache_stats.",
    "category": "File Management"
  },
  "xtb": {
    "name": "XTB MCP Server",
    "githubLink": "https://github.com/sharplygroup/xtb-mcp-server",
    "package": "@sharplygroup/xtb-mcp-server",
    "description": "An MCP server exposing the XTB API for interacting with XTB trading accounts.",
    "installCommand": "npm install @sharplygroup/xtb-mcp-server",
    "requiredEnvVars": [
      "DEMO_ACCOUNT",
      "USER_ID",
      "PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure with .env file, then run with 'node build/index.js'. Connect using MCP Inspector.",
    "category": "API Integration"
  },
  "gumroad": {
    "name": "Gumroad MCP Server",
    "githubLink": "https://github.com/rmarescu/gumroad-mcp",
    "package": "gumroad-mcp",
    "description": "A Model Context Protocol (MCP) server for Gumroad, enabling AI clients to interact with Gumroad API.",
    "installCommand": "npx gumroad-mcp@latest init",
    "requiredEnvVars": [
      "GUMROAD_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "GUMROAD_BASE_URL"
    ],
    "usageInstructions": "Configure with Gumroad access token, then use in MCP-compatible clients like Claude Desktop.",
    "category": "API Integration"
  },
  "pptx": {
    "name": "MCP PPTX Server",
    "githubLink": "https://github.com/h4ck4life/mcp-pptx-server",
    "package": "mcp-pptx-server",
    "description": "A FastMCP server for creating and manipulating PowerPoints.",
    "installCommand": "fastmcp install ./server.py",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use the server to create and manipulate PowerPoints",
    "category": "Productivity"
  },
  "instagram-dm": {
    "name": "Instagram DM MCP Server",
    "githubLink": "https://github.com/trypeggy/instagram_dm_mcp",
    "package": "instagram_dm_mcp",
    "description": "A Model Context Protocol (MCP) server for sending Instagram Direct Messages",
    "installCommand": "git clone https://github.com/trypeggy/instagram_dm_mcp.git && cd instagram_dm_mcp && uv sync",
    "requiredEnvVars": [
      "INSTAGRAM_USERNAME",
      "INSTAGRAM_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Instagram credentials and connect to the MCP server",
    "category": "Communication"
  },
  "setus": {
    "name": "Setu MCPs",
    "githubLink": "https://github.com/SetuHQ/setu-mcps",
    "package": "setu_mcp_kyc or setu_mcp_upi_deeplinks",
    "description": "Collection of Model Context Protocol (MCP) servers for Setu's APIs",
    "installCommand": "pip install setu_mcp_kyc or pip install setu_mcp_upi_deeplinks",
    "requiredEnvVars": [
      "configuration variables specified in each server's README"
    ],
    "optionalParams": [],
    "usageInstructions": "Install, configure environment variables, add server config to Claude Desktop's config file",
    "category": "API Integration"
  },
  "rand": {
    "name": "MCP Rand",
    "githubLink": "https://github.com/turlockmike/mcp-rand",
    "package": "mcp-rand",
    "description": "A Model Context Protocol (MCP) server providing various random generation utilities.",
    "installCommand": "npm install mcp-rand",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use as a CLI tool with 'npx mcp-rand' or integrate with MCP clients.",
    "category": "Development"
  },
  "mysql-java": {
    "name": "MySQL MCP Server",
    "githubLink": "https://github.com/kioyong/mysql-mcp-server-java",
    "package": "mysql-mcp-server-java",
    "description": "Spring Boot server implementing Model Context Protocol (MCP) for MySQL database operations.",
    "installCommand": "mvn install",
    "requiredEnvVars": [
      "SPRING_DATASOURCE_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure MCP server with command and environment variables, then use tools like query, listAllTablesName, and getTableSchema.",
    "category": "Database"
  },
  "sandbox": {
    "name": "Sandbox MCP Server",
    "githubLink": "https://github.com/Tsuchijo/sandbox-mcp",
    "package": "sandbox-mcp",
    "description": "An MCP server providing isolated Docker environments for code execution and development.",
    "installCommand": "git clone https://github.com/Tsuchijo/sandbox-mcp.git && cd sandbox-mcp && uv venv && source .venv/bin/activate && uv pip install .",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Connect to Claude Desktop and use commands to create containers, execute code, and manage environments.",
    "category": "Development"
  },
  "clicksend": {
    "name": "ClickSend MCP Server",
    "githubLink": "https://github.com/J-Gal02/clicksend-mcp",
    "package": "clicksend-mcp",
    "description": "A Model Context Protocol (MCP) server for SMS messaging and Text-to-Speech (TTS) calls via ClickSend's API",
    "installCommand": "npm install clicksend-mcp",
    "requiredEnvVars": [
      "CLICKSEND_USERNAME",
      "CLICKSEND_API_KEY"
    ],
    "optionalParams": [
      "voice"
    ],
    "usageInstructions": "Configure MCP client with server details and use 'send_sms' or 'make_tts_call' tools",
    "category": "API Integration"
  },
  "base": {
    "name": "Base MCP Server",
    "githubLink": "https://github.com/base/base-mcp",
    "package": "base-mcp",
    "description": "A Model Context Protocol (MCP) server providing onchain tools for AI applications to interact with Base Network and Coinbase API.",
    "installCommand": "npm install -g base-mcp",
    "requiredEnvVars": [
      "COINBASE_API_KEY_NAME",
      "COINBASE_API_PRIVATE_KEY",
      "SEED_PHRASE",
      "COINBASE_PROJECT_ID",
      "ALCHEMY_API_KEY",
      "NEYNAR_API_KEY"
    ],
    "optionalParams": [
      "OPENROUTER_API_KEY",
      "CHAIN_ID"
    ],
    "usageInstructions": "Configure with .env file and use with MCP clients like Claude Desktop",
    "category": "API Integration"
  },
  "browser-use": {
    "name": "MCP Server with Browser Use",
    "githubLink": "https://github.com/JovaniPink/mcp-browser-use",
    "package": "@smithery/cli",
    "description": "MCP server for browser automation via natural language interactions",
    "installCommand": "npx -y @smithery/cli install @JovaniPink/mcp-browser-use --client claude",
    "requiredEnvVars": [
      "ANTHROPIC_API_KEY",
      "OPENAI_API_KEY",
      "GOOGLE_API_KEY",
      "AZURE_OPENAI_ENDPOINT",
      "AZURE_OPENAI_API_KEY"
    ],
    "optionalParams": [
      "CHROME_PATH",
      "CHROME_USER_DATA",
      "CHROME_DEBUGGING_PORT",
      "CHROME_DEBUGGING_HOST",
      "CHROME_PERSISTENT_SESSION"
    ],
    "usageInstructions": "Configure environment variables, install via Smithery, and run with uvx",
    "category": "Browser Automation"
  },
  "whois": {
    "name": "Whois MCP",
    "githubLink": "https://github.com/bharathvaj-ganesan/whois-mcp",
    "package": "@bharathvaj/whois-mcp",
    "description": "MCP server for WHOIS lookups, allowing AI agents to retrieve domain details.",
    "installCommand": "npx -y @bharathvaj/whois-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure MCP server in Cursor or Roo Code, then use AI agent to perform WHOIS lookups.",
    "category": "API Integration"
  },
  "cockroachdb": {
    "name": "CockroachDB MCP Server",
    "githubLink": "https://github.com/dhartunian/cockroachdb-mcp-server",
    "package": "cockroachdb-mcp-server",
    "description": "Connects to a CockroachDB instance, exposing database and table schemas as resources, and providing SQL query execution tools.",
    "installCommand": "pnpm install && npx tsc",
    "requiredEnvVars": [],
    "optionalParams": [
      "auth_token"
    ],
    "usageInstructions": "Configure with database URL and optional auth token, then use with Claude or Cline.",
    "category": "Database"
  },
  "pulsar": {
    "name": "Pulsar MCP Server",
    "githubLink": "https://github.com/Germain-D/pulsar-mcp-server",
    "package": "pulsar-mcp-server",
    "description": "A Model Context Protocol (MCP) server for Apache Pulsar that provides tools to interact with Pulsar clusters through MCP-compatible clients.",
    "installCommand": "pip install pulsar-mcp-server",
    "requiredEnvVars": [
      "PULSAR_SERVICE_URL",
      "PULSAR_WEB_SERVICE_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server using 'pulsar-mcp-server' and configure with environment variables or a .env file.",
    "category": "API Integration"
  },
  "eagle": {
    "name": "MCP Eagle Server",
    "githubLink": "https://github.com/olegshilin/mcp-eagle",
    "package": "mcp-eagle",
    "description": "MCP server for interfacing with the Eagle app",
    "installCommand": "npm install mcp-eagle",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop to use the MCP Eagle server",
    "category": "API Integration"
  },
  "pyodide": {
    "name": "mcp-pyodide",
    "githubLink": "https://github.com/yonaka15/mcp-pyodide",
    "package": "mcp-pyodide",
    "description": "A Pyodide server implementation for the Model Context Protocol (MCP) that enables Large Language Models (LLMs) to execute Python code.",
    "installCommand": "npm install mcp-pyodide",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run as a server with 'mcp-pyodide' or in SSE mode with 'mcp-pyodide --sse'",
    "category": "Development"
  },
  "auth0": {
    "name": "Auth0 MCP Server",
    "githubLink": "https://github.com/auth0/auth0-mcp-server",
    "package": "@auth0/auth0-mcp-server",
    "description": "Auth0 MCP Server integrates with LLMs and AI agents to perform Auth0 management operations using natural language.",
    "installCommand": "npx @auth0/auth0-mcp-server init",
    "requiredEnvVars": [],
    "optionalParams": [
      "--tools",
      "--client",
      "--read-only"
    ],
    "usageInstructions": "Run 'npx @auth0/auth0-mcp-server init' to start the server. Configure tools and client as needed using optional parameters.",
    "category": "API Integration"
  },
  "replicate": {
    "name": "MCP Server Replicate",
    "githubLink": "https://github.com/gerred/mcp-server-replicate",
    "package": "mcp-server-replicate",
    "description": "A FastMCP server implementation for the Replicate API, providing resource-based access to AI model inference with a focus on image generation.",
    "installCommand": "npx -y @smithery/cli install @gerred/mcp-server-replicate --client claude",
    "requiredEnvVars": [
      "REPLICATE_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Generate images with natural language, browse and search through generations, and check generation status.",
    "category": "Media"
  },
  "nativewind": {
    "name": "MCP NativeWind Transformer Server",
    "githubLink": "https://github.com/tokenizin-agency/mcp-nativewind",
    "package": "@modelcontextprotocol/server-nativewind",
    "description": "Transforms Tailwind CSS components to NativeWind 4 using the Model Context Protocol.",
    "installCommand": "npm install -g @modelcontextprotocol/server-nativewind",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run `mcp-nativewind` to start the server. For Claude for Desktop, add the configuration to `claude_desktop_config.json` as shown.",
    "category": "Development"
  },
  "rust-docs": {
    "name": "Rust Docs MCP Server",
    "githubLink": "https://github.com/laptou/rust-docs-mcp-server",
    "package": "rust-docs-mcp-server",
    "description": "An MCP server providing access to Rust documentation from docs.rs for AI tools.",
    "installCommand": "git clone https://github.com/laptou/rust-docs-mcp-server.git && cd rust-docs-mcp-server && bun install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure an MCP client to connect to this server and use its tools.",
    "category": "Development"
  },
  "ragdocs": {
    "name": "RAG Documentation MCP Server",
    "githubLink": "https://github.com/hannesrudolph/mcp-ragdocs",
    "package": "@hannesrudolph/mcp-ragdocs",
    "description": "An MCP server providing vector-based documentation search and retrieval for AI assistants",
    "installCommand": "npx -y @hannesrudolph/mcp-ragdocs",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "QDRANT_URL",
      "QDRANT_API_KEY"
    ],
    "optionalParams": [
      "limit",
      "add_to_queue"
    ],
    "usageInstructions": "Configure in claude_desktop_config.json and provide required environment variables",
    "category": "API Integration"
  },
  "any-chat-completions": {
    "name": "Any Chat Completions MCP Server",
    "githubLink": "https://github.com/pyroprompts/any-chat-completions-mcp",
    "package": "@pyroprompts/any-chat-completions-mcp",
    "description": "Integrate Claude with Any OpenAI SDK Compatible Chat Completion API, supporting multiple providers like OpenAI, Perplexity, and more.",
    "installCommand": "npx -y @pyroprompts/any-chat-completions-mcp",
    "requiredEnvVars": [
      "AI_CHAT_KEY",
      "AI_CHAT_NAME",
      "AI_CHAT_MODEL",
      "AI_CHAT_BASE_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure the server in Claude Desktop or LibreChat, and use it to chat with multiple LLMs.",
    "category": "Communication"
  },
  "liveblocks": {
    "name": "Liveblocks MCP Server",
    "githubLink": "https://github.com/liveblocks/liveblocks-mcp-server",
    "package": "@liveblocks/liveblocks-mcp-server",
    "description": "This MCP server allows AI to use Liveblocks REST API functions, enabling creation, modification, and deletion of rooms, threads, comments, notifications, and more.",
    "installCommand": "npx -y @smithery/cli install @liveblocks/liveblocks-mcp-server",
    "requiredEnvVars": [
      "LIVEBLOCKS_SECRET_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Copy your Liveblocks secret key and run the installation command with the --key option",
    "category": "API Integration"
  },
  "ollama": {
    "name": "Ollama MCP Server",
    "githubLink": "https://github.com/rawveg/ollama-mcp",
    "package": "@rawveg/ollama-mcp",
    "description": "MCP server for Ollama that enables integration with local LLM models and MCP-compatible applications",
    "installCommand": "npm install -g @rawveg/ollama-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "PORT",
      "OLLAMA_API"
    ],
    "usageInstructions": "Run 'ollama-mcp' to start the server. Use PORT environment variable to specify a different port.",
    "category": "API Integration"
  },
  "applemusic": {
    "name": "MCP-AppleMusic",
    "githubLink": "https://github.com/kennethreitz/mcp-applemusic",
    "package": "mcp-applemusic",
    "description": "A FastMCP server implementation for controlling Apple Music on macOS through AppleScript commands.",
    "installCommand": "pip install -e \".[dev]\"",
    "requiredEnvVars": [
      "macOS with Apple Music app installed",
      "Python 3.13+"
    ],
    "optionalParams": [],
    "usageInstructions": "Start the server with 'python server.py' and interact with Apple Music using available commands.",
    "category": "Media"
  },
  "tv-recommender": {
    "name": "TV Recommender MCP Server",
    "githubLink": "https://github.com/terryso/tv-recommender-mcp-server",
    "package": "tv-recommender-mcp-server",
    "description": "A TV show recommendation MCP server using TMDb API, providing genre-based recommendations, similar shows, and show details.",
    "installCommand": "npm install -g tv-recommender-mcp-server",
    "requiredEnvVars": [
      "TMDB_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Set TMDB_API_KEY environment variable and run the server using 'npx tv-recommender-mcp-server' or 'tv-recommender-mcp-server' after global installation.",
    "category": "API Integration"
  },
  "google-news": {
    "name": "Google News MCP Server",
    "githubLink": "https://github.com/ChanMeng666/server-google-news",
    "package": "@chanmeng666/google-news-server",
    "description": "A Model Context Protocol (MCP) server providing Google News search capabilities via SerpAPI integration.",
    "installCommand": "npx -y @smithery/cli install @chanmeng666/google-news-server --client claude",
    "requiredEnvVars": [
      "SERP_API_KEY"
    ],
    "optionalParams": [
      "gl",
      "hl",
      "topic_token",
      "publication_token",
      "story_token",
      "section_token"
    ],
    "usageInstructions": "Configure with SERP API key and use search parameters like 'q', 'gl', 'hl', etc.",
    "category": "API Integration"
  },
  "db-navigator": {
    "name": "MySQL Navigator MCP",
    "githubLink": "https://github.com/Medsaad/mcp-db-navigator",
    "package": "mcp-db-navigator",
    "description": "A powerful MySQL/MariaDB database navigation tool using MCP for easy database querying and management.",
    "installCommand": "pip install mcp-db-navigator",
    "requiredEnvVars": [
      "DB_HOST",
      "DB_PORT",
      "DB_NAME",
      "DB_USER",
      "DB_PASSWORD"
    ],
    "optionalParams": [
      "DB_SSL_CA",
      "DB_MAX_RETRIES",
      "DB_RETRY_DELAY",
      "select_fields",
      "where_conditions",
      "order_by",
      "order_direction",
      "limit",
      "offset",
      "group_by",
      "having",
      "join_table",
      "join_type",
      "join_conditions"
    ],
    "usageInstructions": "Run the MCP server using 'mcp-db --config /path/to/your/project/.env'",
    "category": "Database"
  },
  "dify": {
    "name": "dify-server MCP 服务器",
    "githubLink": "https://github.com/AI-FE/dify-mcp-server",
    "package": "dify-server",
    "description": "A Model Context Protocol server integrating Dify AI API for Ant Design component code generation",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "DIFY_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Integrate with Continue or Cline by adding configuration to respective config files",
    "category": "Development"
  },
  "templateio": {
    "name": "MCP TemplateIO",
    "githubLink": "https://github.com/Lucker631/mcp-templateio",
    "package": "mcp-templateio",
    "description": "An MCP server that generates images using Templated.io templates with customizable text and image layers",
    "installCommand": "npx -y mcp-templateio",
    "requiredEnvVars": [
      "TEMPLATED_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Set up the server, obtain a Templated.io API key, and configure it in Claude Desktop to generate images using templates with specified text and image layers",
    "category": "Media"
  },
  "adamik": {
    "name": "Adamik MCP Server",
    "githubLink": "https://github.com/AdamikHQ/adamik-mcp-server",
    "package": "@adamik/mcp-server",
    "description": "Blockchain MCP server enabling natural language control of 60+ blockchains for AI clients like Claude and ChatGPT",
    "installCommand": "npx @adamik/mcp-server",
    "requiredEnvVars": [
      "ADAMIK_API_KEY"
    ],
    "optionalParams": [
      "ADAMIK_API_BASE_URL"
    ],
    "usageInstructions": "Install the server, configure your ADAMIK_API_KEY, and integrate with your MCP client (e.g., Claude Desktop) to execute blockchain commands via natural language queries",
    "category": "API Integration"
  },
  "home-assistant": {
    "name": "MCP Server for Home Assistant",
    "githubLink": "https://github.com/allenporter/mcp-server-home-assistant",
    "package": "mcp-server-home-assistant",
    "description": "A Model Context Protocol Server for Home Assistant integration",
    "installCommand": "git clone https://github.com/allenporter/mcp-server-home-assistant.git",
    "requiredEnvVars": [
      "HOME_ASSISTANT_WEB_SOCKET_URL",
      "HOME_ASSISTANT_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Install custom component, create long lived access token, and configure with Home Assistant URL and API token",
    "category": "API Integration"
  },
  "python": {
    "name": "Linkup Python MCP Server",
    "githubLink": "https://github.com/LinkupPlatform/python-mcp-server",
    "package": "linkup_mcp_server",
    "description": "An MCP server providing web search capabilities through Linkup's advanced search API",
    "installCommand": "pip install linkup_mcp_server",
    "requiredEnvVars": [
      "LINKUP_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run using 'python -m linkup_mcp_server' and configure with an MCP-compatible client",
    "category": "API Integration"
  },
  "figma": {
    "name": "Figma MCP Server",
    "githubLink": "https://github.com/MatthewDailey/figma-mcp",
    "package": "@MatthewDailey/figma-mcp",
    "description": "A ModelContextProtocol server that enables AI assistants to interact with Figma files, providing tools for viewing, commenting, and analyzing Figma designs.",
    "installCommand": "npx -y @smithery/cli install @MatthewDailey/figma-mcp --client claude",
    "requiredEnvVars": [
      "FIGMA_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Install the server, configure Claude to use it, and interact with Figma files through the ModelContextProtocol interface.",
    "category": "Development"
  },
  "zotero": {
    "name": "MCP Zotero",
    "githubLink": "https://github.com/kaliaboi/mcp-zotero",
    "package": "mcp-zotero",
    "description": "A Model Context Protocol server for Zotero integration, allowing interaction with your Zotero library.",
    "installCommand": "npm install -g mcp-zotero",
    "requiredEnvVars": [
      "ZOTERO_API_KEY",
      "ZOTERO_USER_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "Set ZOTERO_API_KEY and ZOTERO_USER_ID environment variables, then run mcp-zotero.",
    "category": "API Integration"
  },
  "tox-testing": {
    "name": "Tox Testing MCP Server",
    "githubLink": "https://github.com/that1guy15/tox-testing",
    "package": "tox-testing",
    "description": "An MCP server that executes tox commands to run python tests within a project using pytest.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "TOX_APP_DIR"
    ],
    "optionalParams": [
      "group",
      "testFile",
      "testCase",
      "directory",
      "TOX_TIMEOUT"
    ],
    "usageInstructions": "Use the `run_tox_tests` tool with different modes (all, file, case, directory) to execute tox tests. Configure via env variables TOX_APP_DIR and TOX_TIMEOUT.",
    "category": "Development"
  },
  "google-ads": {
    "name": "Google Ads MCP",
    "githubLink": "https://github.com/cohnen/mcp-google-ads",
    "package": "mcp-google-ads",
    "description": "A tool that connects Google Ads with Claude AI, allowing you to analyze your advertising data through natural language conversations.",
    "installCommand": "npx -y mcp-google-ads",
    "requiredEnvVars": [
      "GOOGLE_ADS_API_CREDENTIALS",
      "OAuth 2.0 Client ID",
      "Service Account"
    ],
    "optionalParams": [
      "GAQL query",
      "time period",
      "format (table, JSON, or CSV)"
    ],
    "usageInstructions": "Set up Google Ads API access, install the MCP server, and interact with Claude AI to analyze your advertising data.",
    "category": "API Integration"
  },
  "code-analyzer": {
    "name": "MCP Code Analyzer",
    "githubLink": "https://github.com/emiryasar/mcp_code_analyzer",
    "package": "mcp-code-analyzer",
    "description": "A comprehensive code analysis and management tool that integrates with Claude Desktop, providing insights for needed changes and project understanding.",
    "installCommand": "pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop with the MCP server, then use chat messages to analyze code and projects.",
    "category": "Development"
  },
  "mcp": {
    "name": "TMF620 MCP Server",
    "githubLink": "https://github.com/oopsyz/mcp",
    "package": "tmf620-mcp-server",
    "description": "MCP server for interacting with TMF620 Product Catalog Management API",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "TMF620_API_URL",
      "AUTH_CONFIG"
    ],
    "optionalParams": [
      "catalog_id",
      "offering_id",
      "specification_id"
    ],
    "usageInstructions": "Run 'python mcp_server.py' to start the server, available at http://localhost:7001",
    "category": "API Integration"
  },
  "jina-ai": {
    "name": "Jina AI MCP Server",
    "githubLink": "https://github.com/JoeBuildsStuff/mcp-jina-ai",
    "package": "jina-ai-mcp-server",
    "description": "An MCP server that provides access to Jina AI's powerful web services through Claude, implementing web page reading, web search, and fact checking tools.",
    "installCommand": "npx -y jina-ai-mcp-server",
    "requiredEnvVars": [
      "JINA_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Use the server to extract content from web pages, search the web, and fact-check statements using Jina AI's grounding engine.",
    "category": "Web Scraping"
  },
  "stateset": {
    "name": "StateSet MCP Server",
    "githubLink": "https://github.com/stateset/stateset-mcp-server",
    "package": "stateset-mcp-server",
    "description": "A Model Context Protocol (MCP) server for StateSet API integration, providing e-commerce operations management through a standardized interface with TypeScript, testing, and deployment support.",
    "installCommand": "npm install -g stateset-mcp-server",
    "requiredEnvVars": [
      "STATESET_API_KEY"
    ],
    "optionalParams": [
      "STATESET_BASE_URL",
      "REQUESTS_PER_HOUR",
      "API_TIMEOUT_MS",
      "LOG_LEVEL",
      "ENABLE_METRICS",
      "ENABLE_HEALTH_CHECK"
    ],
    "usageInstructions": "Set environment variables in .env, run with 'stateset-mcp-server' (npm), 'docker run --env-file .env stateset/mcp-server', or 'npm start' (source), then connect using the MCP SDK.",
    "category": "API Integration"
  },
  "axiom-js": {
    "name": "MCP Server for Axiom",
    "githubLink": "https://github.com/ThetaBird/mcp-server-axiom-js",
    "package": "mcp-server-axiom",
    "description": "A JavaScript MCP server for Axiom that enables AI agents to query data using Axiom Processing Language (APL).",
    "installCommand": "npm install -g mcp-server-axiom",
    "requiredEnvVars": [
      "AXIOM_TOKEN",
      "AXIOM_ORG_ID"
    ],
    "optionalParams": [
      "AXIOM_URL",
      "AXIOM_QUERY_RATE",
      "AXIOM_QUERY_BURST",
      "AXIOM_DATASETS_RATE",
      "AXIOM_DATASETS_BURST",
      "PORT"
    ],
    "usageInstructions": "Configure with environment variables or a config file, then run the server.",
    "category": "API Integration"
  },
  "dev": {
    "name": "MCP Development Server",
    "githubLink": "https://github.com/dillip285/mcp-dev-server",
    "package": "mcp-dev-server",
    "description": "An MCP server for managing software development projects with complete project context awareness and Docker environment execution.",
    "installCommand": "pip install mcp-dev-server",
    "requiredEnvVars": [
      "Docker"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop configuration file to use the server, then use the provided MCP capabilities for project management and development tasks.",
    "category": "Development"
  },
  "aws-resources-python": {
    "name": "AWS Resources MCP Server",
    "githubLink": "https://github.com/baryhuang/mcp-server-aws-resources-python",
    "package": "mcp-server-aws-resources-python",
    "description": "A Model Context Protocol (MCP) server implementation that provides running generated python code to query any AWS resources through boto3.",
    "installCommand": "npx -y @smithery/cli install mcp-server-aws-resources-python --client claude",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY",
      "AWS_DEFAULT_REGION"
    ],
    "optionalParams": [
      "AWS_SESSION_TOKEN",
      "AWS_PROFILE"
    ],
    "usageInstructions": "Run the Docker container with required environment variables set, then use the MCP client to query AWS resources.",
    "category": "Database"
  },
  "protolint": {
    "name": "protolint",
    "githubLink": "https://github.com/yoheimuta/protolint",
    "package": "protolint",
    "description": "A pluggable linting/fixing utility for Protocol Buffer files (proto2+proto3)",
    "installCommand": "npm install protolint --save-dev",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run protolint with --mcp option",
    "category": "Development"
  },
  "brave-search": {
    "name": "Brave Search MCP Server",
    "githubLink": "https://github.com/arben-adm/brave-mcp-search",
    "package": "@arben-adm/brave-mcp-search",
    "description": "MCP server for Brave Search integration with AI assistants",
    "installCommand": "npx -y @smithery/cli install @arben-adm/brave-mcp-search --client claude",
    "requiredEnvVars": [
      "BRAVE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure MCP settings file to include the Brave Search MCP server and start the server",
    "category": "API Integration"
  },
  "salesforce": {
    "name": "MCP Salesforce Connector",
    "githubLink": "https://github.com/smn2gnt/MCP-Salesforce",
    "package": "mcp-salesforce-connector",
    "description": "MCP server implementation for Salesforce integration, allowing LLMs to interact with Salesforce data through SOQL queries and SOSL searches.",
    "installCommand": "npx mcp-salesforce-connector",
    "requiredEnvVars": [
      "SALESFORCE_ACCESS_TOKEN",
      "SALESFORCE_INSTANCE_URL"
    ],
    "optionalParams": [
      "SALESFORCE_USERNAME",
      "SALESFORCE_PASSWORD",
      "SALESFORCE_SECURITY_TOKEN"
    ],
    "usageInstructions": "Configure the server in your claude_desktop_config.json file and set required environment variables.",
    "category": "API Integration"
  },
  "hitchcode": {
    "name": "MCP Server Template for Cursor IDE",
    "githubLink": "https://github.com/jankowtf/mcp-hitchcode",
    "package": "@kirill-markin/example-mcp-server",
    "description": "A template for creating custom tools for Cursor IDE using Model Context Protocol",
    "installCommand": "npx -y @smithery/cli install @kirill-markin/example-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "MCP_SERVER_PORT",
      "MCP_SERVER_HOST",
      "DEBUG",
      "MCP_USER_AGENT"
    ],
    "usageInstructions": "Configure Cursor IDE settings to connect to the MCP server using the provided URL or script path",
    "category": "Development"
  },
  "linear": {
    "name": "Linear MCP Server",
    "githubLink": "https://github.com/Iwark/linear-mcp-server",
    "package": "linear-mcp-server",
    "description": "A Linear Model Context Protocol (MCP) server implementation that provides an MCP interface for accessing Linear resources.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "LINEAR_API_KEY"
    ],
    "optionalParams": [
      "title",
      "teamId",
      "description",
      "priority",
      "stateId",
      "assigneeId",
      "estimate",
      "labelIds"
    ],
    "usageInstructions": "Use the Linear MCP server from within Cursor to access Linear resources.",
    "category": "API Integration"
  },
  "siri-shortcuts": {
    "name": "Siri Shortcuts MCP Server",
    "githubLink": "https://github.com/dvcrn/mcp-server-siri-shortcuts",
    "package": "mcp-server-siri-shortcuts",
    "description": "Provides access to Siri shortcuts functionality via the Model Context Protocol (MCP).",
    "installCommand": "npx -y mcp-server-siri-shortcuts",
    "requiredEnvVars": [],
    "optionalParams": [
      "GENERATE_SHORTCUT_TOOLS",
      "INJECT_SHORTCUT_LIST"
    ],
    "usageInstructions": "Configure the server in your MCP setup and use the provided tools to list, open, and run Siri shortcuts.",
    "category": "API Integration"
  },
  "ghost": {
    "name": "Ghost MCP Server",
    "githubLink": "https://github.com/MFYDev/ghost-mcp",
    "package": "@fanyangmeng/ghost-mcp",
    "description": "A Model Context Protocol (MCP) server providing secure access to Ghost CMS resources via LLM interfaces, enabling management of posts, members, newsletters, and more through API integration.",
    "installCommand": "npx -y @fanyangmeng/ghost-mcp",
    "requiredEnvVars": [
      "GHOST_API_URL",
      "GHOST_ADMIN_API_KEY",
      "GHOST_API_VERSION"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure in your MCP client's config file (e.g., claude_desktop_config.json) with the specified environment variables and command parameters.",
    "category": "API Integration"
  },
  "file-merger": {
    "name": "File Merger MCP Server",
    "githubLink": "https://github.com/exoticknight/mcp-file-merger",
    "package": "@exoticknight/mcp-file-merger",
    "description": "A utility to combine multiple files into one, reporting file sizes and merge summary.",
    "installCommand": "npx -y @exoticknight/mcp-file-merger",
    "requiredEnvVars": [],
    "optionalParams": [
      "/path/to/allowed/dir"
    ],
    "usageInstructions": "Add to claude_desktop_config.json with command and args specifying allowed directory",
    "category": "File Management"
  },
  "typesense": {
    "name": "Typesense MCP Server",
    "githubLink": "https://github.com/suhail-ak-s/mcp-typesense-server",
    "package": "typesense-mcp-server",
    "description": "A Model Context Protocol (MCP) server implementation that provides AI models with access to Typesense search capabilities.",
    "installCommand": "npm install -g typesense-mcp-server",
    "requiredEnvVars": [
      "TYPESENSE_HOST",
      "TYPESENSE_PORT",
      "TYPESENSE_PROTOCOL",
      "TYPESENSE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Use with Claude Desktop by adding server config to claude_desktop_config.json.",
    "category": "Database"
  },
  "hfspace": {
    "name": "mcp-hfspace MCP Server",
    "githubLink": "https://github.com/evalstate/mcp-hfspace",
    "package": "@llmindset/mcp-hfspace",
    "description": "Connects to Hugging Face Spaces with minimal setup for use with Claude Desktop",
    "installCommand": "npx -y @llmindset/mcp-hfspace",
    "requiredEnvVars": [
      "HF_TOKEN",
      "MCP_HF_WORK_DIR"
    ],
    "optionalParams": [
      "--work-dir",
      "--hf-token",
      "--desktop-mode"
    ],
    "usageInstructions": "Add spaces to connect to in arguments, optionally set working directory and Hugging Face token",
    "category": "API Integration"
  },
  "docsmcp": {
    "name": "DocsMCP",
    "githubLink": "https://github.com/da1z/docsmcp",
    "package": "docsmcp",
    "description": "A Model Context Protocol (MCP) server providing documentation access to Large Language Models (LLMs) from local files or remote URLs.",
    "installCommand": "npx -y docsmcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "source"
    ],
    "usageInstructions": "Configure DocsMCP by specifying a source, then use tools like getDocumentationSources and getDocumentation to interact with documentation.",
    "category": "API Integration"
  },
  "zonos-tts": {
    "name": "Zonos TTS MCP Integration",
    "githubLink": "https://github.com/PhialsBasement/Zonos-TTS-MCP",
    "package": "@PhialsBasement/zonos-tts-mcp",
    "description": "MCP integration for Zonos TTS, enabling Claude to generate speech directly with text-to-speech capabilities",
    "installCommand": "npx -y @smithery/cli install @PhialsBasement/zonos-tts-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "language",
      "emotion"
    ],
    "usageInstructions": "Configure Claude to use the MCP server, then use the speak_response tool in Python: speak_response(text='Your text here', language='en-us', emotion='happy')",
    "category": "Media"
  },
  "duck-duck": {
    "name": "Duck Duck MCP",
    "githubLink": "https://github.com/qwang07/duck-duck-mcp",
    "package": "duck-duck-mcp",
    "description": "An MCP server implementation using DuckDuckGo for web search, providing structured results with metadata and content classification.",
    "installCommand": "npx -y @smithery/cli install duck-duck-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "region",
      "safeSearch",
      "numResults"
    ],
    "usageInstructions": "Start with 'npx duck-duck-mcp' and send search queries via MCP clients using JSON parameters for query and options.",
    "category": "Web Scraping"
  },
  "jira": {
    "name": "JIRA MCP Server",
    "githubLink": "https://github.com/CamdenClark/jira-mcp",
    "package": "jira-mcp",
    "description": "An MCP server that enables Large Language Models to interact with JIRA through standardized tools and context.",
    "installCommand": "npx -y jira-mcp",
    "requiredEnvVars": [
      "JIRA_INSTANCE_URL",
      "JIRA_USER_EMAIL",
      "JIRA_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Add the server configuration to Claude Desktop's config file and restart Claude Desktop to load the new configuration.",
    "category": "API Integration"
  },
  "agent-toolkit": {
    "name": "Stripe Agent Toolkit MCP Server",
    "githubLink": "https://github.com/stripe/agent-toolkit",
    "package": "@umed/mcp-server not found use @stripe/mcp",
    "description": "Enables integration of Stripe APIs with agent frameworks via Model Context Protocol (MCP).",
    "installCommand": "npx -y @stripe/mcp --tools=all --api-key=YOUR_STRIPE_SECRET_KEY",
    "requiredEnvVars": [
      "STRIPE_SECRET_KEY"
    ],
    "optionalParams": [
      "configuration"
    ],
    "usageInstructions": "Run with npx or set up your own MCP server with StripeAgentToolkit",
    "category": "API Integration"
  },
  "jina-reader": {
    "name": "Jina Reader MCP Server",
    "githubLink": "https://github.com/wong2/mcp-jina-reader",
    "package": "mcp-jina-reader",
    "description": "Fetches remote URL content as Markdown using Jina Reader",
    "installCommand": "npx -y mcp-jina-reader",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use with MCP client to fetch URL content",
    "category": "Web Scraping"
  },
  "airbnb": {
    "name": "Airbnb MCP Server",
    "githubLink": "https://github.com/openbnb-org/mcp-server-airbnb",
    "package": "@openbnb/mcp-server-airbnb",
    "description": "MCP Server for searching Airbnb and getting listing details.",
    "installCommand": "npx -y @openbnb/mcp-server-airbnb",
    "requiredEnvVars": [],
    "optionalParams": [
      "placeId",
      "checkin",
      "checkout",
      "adults",
      "children",
      "infants",
      "pets",
      "minPrice",
      "maxPrice",
      "cursor",
      "ignoreRobotsText"
    ],
    "usageInstructions": "Use the airbnb_search tool to search for listings and airbnb_listing_details to get detailed information about a specific listing.",
    "category": "Web Scraping"
  },
  "wolframalpha-llm": {
    "name": "WolframAlpha LLM MCP Server",
    "githubLink": "https://github.com/Garoth/wolframalpha-llm-mcp",
    "package": "wolframalpha-llm-mcp",
    "description": "A Model Context Protocol (MCP) server providing access to WolframAlpha's LLM API for querying and retrieving structured responses.",
    "installCommand": "git clone https://github.com/Garoth/wolframalpha-llm-mcp.git && npm install",
    "requiredEnvVars": [
      "WOLFRAM_LLM_APP_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure with your WolframAlpha API key and use tools like 'ask_llm', 'get_simple_answer', and 'validate_key'.",
    "category": "API Integration"
  },
  "minimax-js": {
    "name": "MiniMax MCP JS",
    "githubLink": "https://github.com/MiniMax-AI/MiniMax-MCP-JS",
    "package": "minimax-mcp-js",
    "description": "JavaScript/TypeScript implementation of MiniMax MCP, providing image generation, video generation, text-to-speech, and more",
    "installCommand": "npx -y @smithery/cli install @MiniMax-AI/MiniMax-MCP-JS --client claude",
    "requiredEnvVars": [
      "MINIMAX_API_HOST",
      "MINIMAX_API_KEY",
      "MINIMAX_MCP_BASE_PATH"
    ],
    "optionalParams": [
      "MINIMAX_RESOURCE_MODE"
    ],
    "usageInstructions": "Configure MCP client with server settings, including API key and host",
    "category": "API Integration"
  },
  "frontend-review": {
    "name": "Frontend Review MCP Server",
    "githubLink": "https://github.com/zueai/frontend-review-mcp",
    "package": "frontend-review-mcp",
    "description": "An MCP server that performs a visual review of a UI edit request by comparing before and after screenshots.",
    "installCommand": "npx frontend-review-mcp HYPERBOLIC_API_KEY=<your-hyperbolic-api-key>",
    "requiredEnvVars": [
      "HYPERBOLIC_API_KEY"
    ],
    "optionalParams": [
      "MODEL"
    ],
    "usageInstructions": "Use the 'reviewEdit' tool to review UI edit requests by providing before and after screenshots and a detailed description of the edit.",
    "category": "Development"
  },
  "gnews": {
    "name": "MCP GNews Server",
    "githubLink": "https://github.com/algonacci/mcp-gnews",
    "package": "mcp-gnews",
    "description": "MCP server for searching related news on the internet",
    "installCommand": "git clone https://github.com/algonacci/mcp-gnews.git",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure MCP server in config file with command and args",
    "category": "Web Scraping"
  },
  "sqlite": {
    "name": "SQLite MCP Server",
    "githubLink": "https://github.com/mekanixms/sqlite-mcp-server",
    "package": "mcp",
    "description": "An MCP server for comprehensive SQLite database management and analysis",
    "installCommand": "pip install mcp pandas",
    "requiredEnvVars": [
      "DB_PATH"
    ],
    "optionalParams": [
      "table",
      "analysis_type"
    ],
    "usageInstructions": "Set DB_PATH in .env file, configure claude_desktop_config.json with server path",
    "category": "Database"
  },
  "together-ai-image": {
    "name": "Together AI Image Server",
    "githubLink": "https://github.com/zym9863/together-ai-image-server",
    "package": "together-ai-image-server",
    "description": "A TypeScript-based MCP server for generating images using Together AI API.",
    "installCommand": "git clone https://github.com/zym9863/together-ai-image-server.git && cd together-ai-image-server && npm install",
    "requiredEnvVars": [
      "TOGETHER_API_KEY"
    ],
    "optionalParams": [
      "steps",
      "n"
    ],
    "usageInstructions": "Use the generate_image tool to create images from text prompts.",
    "category": "Media"
  },
  "mcpsqlserver": {
    "name": "SQL Server MCP Server",
    "githubLink": "https://github.com/ian-cowley/MCPSqlServer",
    "package": "MCPSqlServer",
    "description": "A standalone MCP server providing SQL Server integration for Windsurf IDE",
    "installCommand": "dotnet build && dotnet publish -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true",
    "requiredEnvVars": [
      "ConnectionStrings:DefaultConnection",
      "LogPath"
    ],
    "optionalParams": [
      "DebugMode"
    ],
    "usageInstructions": "Configure appsettings.json, then run the executable",
    "category": "Database"
  },
  "ddg": {
    "name": "DuckDuckGo MCP Server",
    "githubLink": "https://github.com/misanthropic-ai/ddg-mcp",
    "package": "ddg-mcp",
    "description": "A server providing DuckDuckGo search capabilities through the Model Context Protocol.",
    "installCommand": "uv install ddg-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "region",
      "safesearch",
      "timelimit",
      "max_results",
      "style",
      "size",
      "color",
      "type_image",
      "layout",
      "license_image",
      "resolution",
      "duration",
      "license_videos",
      "model"
    ],
    "usageInstructions": "Use tools like ddg-text-search, ddg-image-search, ddg-news-search, ddg-video-search, or ddg-ai-chat with required and optional parameters.",
    "category": "Web Scraping"
  },
  "teams": {
    "name": "Teams MCP",
    "githubLink": "https://github.com/floriscornel/teams-mcp",
    "package": "@floriscornel/teams-mcp",
    "description": "A Model Context Protocol (MCP) server that provides seamless integration with Microsoft Graph APIs, enabling AI assistants to interact with Microsoft Teams, users, and organizational data.",
    "installCommand": "npx -y @floriscornel/teams-mcp@latest",
    "requiredEnvVars": [
      "NODEJS_18+",
      "MICROSOFT_365_ACCOUNT",
      "AZURE_APP_REGISTRATION"
    ],
    "optionalParams": [
      "format"
    ],
    "usageInstructions": "Use the provided MCP tools to interact with Microsoft Teams, users, and organizational data.",
    "category": "API Integration"
  },
  "tavily-search": {
    "name": "MCP Tavily Search Server",
    "githubLink": "https://github.com/spences10/mcp-tavily-search",
    "package": "mcp-tavily-search",
    "description": "A Model Context Protocol (MCP) server for integrating Tavily's search API with LLMs, providing intelligent web search capabilities.",
    "installCommand": "npx -y mcp-tavily-search",
    "requiredEnvVars": [
      "TAVILY_API_KEY"
    ],
    "optionalParams": [
      "search_depth",
      "topic",
      "days",
      "time_range",
      "max_results",
      "include_answer",
      "include_images",
      "include_image_descriptions",
      "include_raw_content",
      "include_domains",
      "exclude_domains",
      "response_format",
      "cache_ttl",
      "force_refresh",
      "max_tokens"
    ],
    "usageInstructions": "Configure through MCP client, set TAVILY_API_KEY environment variable",
    "category": "API Integration"
  },
  "databricks": {
    "name": "Databricks MCP Server",
    "githubLink": "https://github.com/RafaelCartenet/mcp-databricks-server",
    "package": "mcp-databricks-server",
    "description": "An MCP server for interacting with Databricks, leveraging Unity Catalog metadata and enabling data lineage exploration.",
    "installCommand": "npm install mcp-databricks-server",
    "requiredEnvVars": [
      "DATABRICKS_HOST",
      "DATABRICKS_TOKEN"
    ],
    "optionalParams": [
      "catalog_name",
      "schema_name",
      "full_table_name"
    ],
    "usageInstructions": "Run the server using 'mcp-databricks-server' command after installation. Configure environment variables as needed.",
    "category": "Database"
  },
  "mac-messages": {
    "name": "Mac Messages MCP",
    "githubLink": "https://github.com/carterlasalle/mac_messages_mcp",
    "package": "mac-messages-mcp",
    "description": "A Python bridge for interacting with the macOS Messages app using MCP (Multiple Context Protocol).",
    "installCommand": "uv pip install mac-messages-mcp",
    "requiredEnvVars": [
      "uv",
      "Full Disk Access permission"
    ],
    "optionalParams": [
      "claude_desktop_config.json",
      "cursor settings"
    ],
    "usageInstructions": "Run the MCP server directly with 'mac-messages-mcp' or use as a module with 'from mac_messages_mcp import get_recent_messages, send_message'",
    "category": "Communication"
  },
  "stability-ai": {
    "name": "Stability AI MCP Server",
    "githubLink": "https://github.com/tadasant/mcp-server-stability-ai",
    "package": "mcp-server-stability-ai",
    "description": "An MCP server integrating Stability AI's image generation and manipulation tools, enabling functionalities like generate, edit, upscale, and more via the Model Context Protocol.",
    "installCommand": "npx -y mcp-server-stability-ai",
    "requiredEnvVars": [
      "STABILITY_API_KEY",
      "IMAGE_STORAGE_DIRECTORY"
    ],
    "optionalParams": [],
    "usageInstructions": "Set STABILITY_API_KEY and IMAGE_STORAGE_DIRECTORY environment variables. Run the server and use MCP clients to execute commands like generate-image, remove-background, outpaint, and other Stability AI integrations.",
    "category": "Media"
  },
  "architect": {
    "name": "MCP Architect",
    "githubLink": "https://github.com/squirrelogic/mcp-architect",
    "package": "mcp-architect",
    "description": "A Model Context Protocol server providing comprehensive architectural expertise through specialized agents, resources, and tools.",
    "installCommand": "npm install mcp-architect",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Install dependencies, setup environment variables, and run the server.",
    "category": "Development"
  },
  "openapi": {
    "name": "OpenAPI MCP Server",
    "githubLink": "https://github.com/ivo-toby/mcp-openapi-server",
    "package": "@ivotoby/openapi-mcp-server",
    "description": "An MCP server that exposes OpenAPI endpoints as MCP resources, allowing Large Language Models to interact with REST APIs through the MCP protocol.",
    "installCommand": "npx @ivotoby/openapi-mcp-server",
    "requiredEnvVars": [
      "API_BASE_URL",
      "OPENAPI_SPEC_PATH"
    ],
    "optionalParams": [
      "SERVER_NAME",
      "SERVER_VERSION",
      "TRANSPORT_TYPE",
      "HTTP_PORT",
      "HTTP_HOST",
      "ENDPOINT_PATH",
      "TOOLS_MODE",
      "DISABLE_ABBREVIATION"
    ],
    "usageInstructions": "Use 'npx @ivotoby/openapi-mcp-server' with command-line arguments for quick setup, or import the OpenAPIServer class in Node.js applications for custom implementations.",
    "category": "API Integration"
  },
  "aidd": {
    "name": "SkyDeckAI Code",
    "githubLink": "https://github.com/skydeckai/mcp-server-aidd",
    "package": "skydeckai-code",
    "description": "An MCP server providing AI-driven development workflow tools, including file system operations, code analysis, code execution, web content fetching, and system information retrieval.",
    "installCommand": "pip install skydeckai-code",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Install using pip, then configure Claude Desktop or SkyDeck AI Helper App to use the server.",
    "category": "Development"
  },
  "google-gmail": {
    "name": "Gmail MCP Server",
    "githubLink": "https://github.com/cablate/mcp-google-gmail",
    "package": "@cablate/mcp-gmail",
    "description": "An MCP server integrating Gmail for email management, processing, and LLM capabilities.",
    "installCommand": "npm install -g @cablate/mcp-gmail",
    "requiredEnvVars": [
      "GMAIL_CLIENT_ID",
      "GMAIL_CLIENT_SECRET",
      "GMAIL_REFRESH_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Use 'map-gmail' CLI or configure with Dive Desktop by setting up the provided configuration with your Gmail API credentials.",
    "category": "Communication"
  },
  "kube": {
    "name": "kube-mcp",
    "githubLink": "https://github.com/lochgeo/kube-mcp",
    "package": "kube-mcp",
    "description": "A Model Context Protocol (MCP) server for interacting with Minikube using Codename Goose.",
    "installCommand": "git clone https://github.com/lochgeo/kube-mcp.git && cd kube-mcp && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "GOOGLE_API_KEY",
      "KUBECONFIG"
    ],
    "optionalParams": [],
    "usageInstructions": "Connect to Codename Goose using `goose session --with-builtin developer --with-extension \"uvx kube-mcp\"`",
    "category": "Development"
  },
  "google-calendar": {
    "name": "Calendar Tools MCP Server",
    "githubLink": "https://github.com/cablate/mcp-google-calendar",
    "package": "@cablate/mcp-google-calendar",
    "description": "A powerful MCP server providing comprehensive calendar management capabilities",
    "installCommand": "npm install -g @cablate/mcp-google-calendar",
    "requiredEnvVars": [
      "GOOGLE_CALENDAR_ID",
      "GOOGLE_TIME_ZONE",
      "GOOGLE_CREDENTIALS_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'mcp-google-calendar' in the terminal or configure with Dive Desktop",
    "category": "Productivity"
  },
  "gpt-proxy": {
    "name": "GPT MCP Proxy",
    "githubLink": "https://github.com/wricardo/gpt-mcp-proxy",
    "package": "gpt-mcp-proxy",
    "description": "A REST API server providing HTTP access to Multiple Command Protocol (MCP) tools, allowing integration with custom GPT through Actions.",
    "installCommand": "go build",
    "requiredEnvVars": [
      "NGROK_AUTH_TOKEN",
      "NGROK_DOMAIN"
    ],
    "optionalParams": [
      "MCP_CONFIG_FILE"
    ],
    "usageInstructions": "Set environment variables, prepare configuration file, and run the server with 'go run main.go'",
    "category": "API Integration"
  },
  "dnstwist": {
    "name": "DNStwist MCP Server",
    "githubLink": "https://github.com/BurtTheCoder/mcp-dnstwist",
    "package": "mcp-dnstwist",
    "description": "An MCP server for analyzing domain permutations to detect typosquatting, phishing, and corporate espionage using the dnstwist tool.",
    "installCommand": "npm install -g mcp-dnstwist",
    "requiredEnvVars": [],
    "optionalParams": [
      "nameservers",
      "threads",
      "format",
      "registered_only",
      "mxcheck",
      "ssdeep",
      "banners"
    ],
    "usageInstructions": "Install via npm or Docker, configure in Claude Desktop, then use the fuzz_domain tool with domain analysis parameters to detect malicious domains.",
    "category": "Security"
  },
  "freeagent": {
    "name": "FreeAgent MCP Server",
    "githubLink": "https://github.com/markpitt/freeagent-mcp",
    "package": "freeagent-mcp",
    "description": "A Claude MCP server for managing FreeAgent timeslips and timers. It allows Claude to interact with your FreeAgent account to track time, manage timers, and handle timeslip operations.",
    "installCommand": "npm install freeagent-mcp",
    "requiredEnvVars": [
      "FREEAGENT_CLIENT_ID",
      "FREEAGENT_CLIENT_SECRET",
      "FREEAGENT_ACCESS_TOKEN",
      "FREEAGENT_REFRESH_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure the server in your MCP settings and use tools to list timeslips, create timeslips, and control timers.",
    "category": "API Integration"
  },
  "gmail": {
    "name": "Gmail MCP Server",
    "githubLink": "https://github.com/Samarthsinghal28/gmail_mcp_server",
    "package": "gmail_mcp_server",
    "description": "An MCP server for Gmail integration",
    "installCommand": "npm install gmail_mcp_server",
    "requiredEnvVars": [
      "GMAIL_API_KEY",
      "GMAIL_API_SECRET"
    ],
    "optionalParams": [
      "port",
      "debug"
    ],
    "usageInstructions": "Run the server using 'npm start' and configure environment variables",
    "category": "Communication"
  },
  "npm": {
    "name": "project-npm MCP Server",
    "githubLink": "https://github.com/seido/mcp_npm",
    "package": "project-npm",
    "description": "A TypeScript-based MCP server that implements a simple npm system, executing npm and npx commands.",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add server config to claude_desktop_config.json and run the server.",
    "category": "Development"
  },
  "react": {
    "name": "React MCP Server",
    "githubLink": "https://github.com/Streen9/react-mcp",
    "package": "@Streen9/react-mcp",
    "description": "A powerful server implementation that enables Claude AI to interact with React applications through the Model Context Protocol.",
    "installCommand": "npx -y @smithery/cli install @Streen9/react-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "template",
      "directory",
      "dev"
    ],
    "usageInstructions": "Add configuration to claude_desktop_config.json and run using Smithery or manual installation",
    "category": "Development"
  },
  "meilisearch": {
    "name": "Meilisearch MCP Server",
    "githubLink": "https://github.com/meilisearch/meilisearch-mcp",
    "package": "meilisearch-mcp",
    "description": "A Model Context Protocol server that enables any MCP-compatible client to interact with Meilisearch, allowing AI assistants to manage search indices, perform searches, and handle data through natural conversation.",
    "installCommand": "pip install meilisearch-mcp",
    "requiredEnvVars": [
      "MEILI_HTTP_ADDR",
      "MEILI_MASTER_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Install the package, configure Claude Desktop, and start Meilisearch to enable natural language control over Meilisearch capabilities.",
    "category": "Database"
  },
  "puppeteer-py": {
    "name": "Puppeteer MCP Server (Python Implementation)",
    "githubLink": "https://github.com/twolven/mcp-server-puppeteer-py",
    "package": "mcp-server-puppeteer-py",
    "description": "A Model Context Protocol server providing browser automation capabilities using Playwright.",
    "installCommand": "pip install -r requirements.txt && playwright install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run the server with 'python puppeteer_server.py'",
    "category": "Browser Automation"
  },
  "screeny": {
    "name": "Screeny MCP Server",
    "githubLink": "https://github.com/rohanrav/screeny",
    "package": "mcp-server-screeny",
    "description": "A privacy-first MCP server for capturing screenshots of pre-approved macOS application windows",
    "installCommand": "pipx install mcp-server-screeny",
    "requiredEnvVars": [],
    "optionalParams": [
      "--setup",
      "--debug"
    ],
    "usageInstructions": "Run 'mcp-server-screeny' after granting Screen Capture permission and approving windows via '--setup'",
    "category": "Development"
  },
  "email-checker": {
    "name": "Email Checker MCP Server",
    "githubLink": "https://github.com/ravinahp/email-checker-mcp",
    "package": "email-checker-mcp",
    "description": "Validate email addresses with this tool, providing a simple JSON response format without requiring an API key.",
    "installCommand": "git clone https://github.com/ravinahp/email-checker-mcp.git && cd email-checker-mcp && uv sync",
    "requiredEnvVars": [
      "PYTHON_VERSION"
    ],
    "optionalParams": [],
    "usageInstructions": "Use the validate_email function to check if an email address exists, providing the email address as a string parameter.",
    "category": "Communication"
  },
  "docling": {
    "name": "docling-mcp",
    "githubLink": "https://github.com/Deep070203/docling-mcp",
    "package": "docling-mcp",
    "description": "Model Context Protocol (MCP) server using IBM's Docling to convert documents to Markdown format",
    "installCommand": "uvx docling-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add the provided JSON configuration to your Claude config file to use the published server",
    "category": "File Management"
  },
  "hefeng-weather": {
    "name": "HeFeng Weather MCP Server",
    "githubLink": "https://github.com/shanggqm/hefeng-mcp-weather",
    "package": "hefeng-mcp-weather",
    "description": "Provides weather forecast data for locations in China through HeFeng Weather API.",
    "installCommand": "npx hefeng-mcp-weather@latest",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure with your API key and use the 'get-weather' tool.",
    "category": "API Integration"
  },
  "onesignal": {
    "name": "OneSignal MCP Server",
    "githubLink": "https://github.com/WeirdBrains/onesignal-mcp",
    "package": "onesignal-mcp",
    "description": "A comprehensive Model Context Protocol (MCP) server for interacting with the OneSignal API, providing a complete interface for managing push notifications, emails, SMS, users, devices, segments, templates, analytics, and more.",
    "installCommand": "pip install onesignal-mcp",
    "requiredEnvVars": [
      "ONESIGNAL_APP_ID",
      "ONESIGNAL_API_KEY",
      "ONESIGNAL_ORG_API_KEY"
    ],
    "optionalParams": [
      "ONESIGNAL_MANDIBLE_APP_ID",
      "ONESIGNAL_MANDIBLE_API_KEY",
      "LOG_LEVEL"
    ],
    "usageInstructions": "Create a .env file with OneSignal credentials, then run 'python onesignal_server.py'",
    "category": "API Integration"
  },
  "sequential-thinking": {
    "name": "Sequential Thinking MCP Server",
    "githubLink": "https://github.com/arben-adm/mcp-sequential-thinking",
    "package": "mcp-sequential-thinking",
    "description": "A Model Context Protocol (MCP) server that facilitates structured, progressive thinking through defined stages.",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [
      "UV",
      "PYTHONPATH"
    ],
    "optionalParams": [
      "dev",
      "all"
    ],
    "usageInstructions": "Use the process_thought tool to record and analyze thoughts in sequence, generate summaries with generate_summary, and clear history with clear_history.",
    "category": "Productivity"
  },
  "barnsworthburning": {
    "name": "Barnsworthburning MCP",
    "githubLink": "https://github.com/Aias/barnsworthburning-mcp",
    "package": "@Aias/barnsworthburning-mcp",
    "description": "A Model Context Protocol server for searching barnsworthburning.net through its API endpoint.",
    "installCommand": "npx -y @smithery/cli install @Aias/barnsworthburning-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "query"
    ],
    "usageInstructions": "Refer to the Model Context Protocol documentation for information on how to use MCP servers with compatible clients.",
    "category": "API Integration"
  },
  "expert": {
    "name": "MCP Expert Server",
    "githubLink": "https://github.com/crazyrabbitLTC/mcp-expert-server",
    "package": "mcp-expert-server",
    "description": "An MCP server providing intelligent query generation and documentation assistance using Claude AI",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "ANTHROPIC_API_KEY"
    ],
    "optionalParams": [
      "system-prompt.txt",
      "tool-metadata.txt",
      "query-metadata.txt",
      "service-description.txt"
    ],
    "usageInstructions": "Start the server with 'npm start'. Use 'create-query' to generate queries or 'documentation' to get information from documentation",
    "category": "API Integration"
  },
  "reddit": {
    "name": "MCP Reddit Server",
    "githubLink": "https://github.com/nangeplus/mcp-reddit",
    "package": "ghcr.io/nangeplus/mcp-reddit:latest",
    "description": "A Reddit server based on the Model Context Protocol (MCP) for interacting with large language models like Claude.",
    "installCommand": "docker run -i --rm -e REDDIT_CLIENT_ID=your_client_id -e REDDIT_CLIENT_SECRET=your_client_secret -e REDDIT_USER_AGENT=your_user_agent ghcr.io/nangeplus/mcp-reddit:latest",
    "requiredEnvVars": [
      "REDDIT_CLIENT_ID",
      "REDDIT_CLIENT_SECRET",
      "REDDIT_USER_AGENT"
    ],
    "optionalParams": [],
    "usageInstructions": "Use the provided Docker installation command and set the required environment variables to interact with the Reddit server.",
    "category": "API Integration"
  },
  "thoughtful-claude": {
    "name": "Thoughtful Claude - DeepSeek R1 Reasoning Server",
    "githubLink": "https://github.com/martinbowling/thoughtful-claude",
    "package": "mcp",
    "description": "Enhances Claude's reasoning capabilities with DeepSeek R1's advanced reasoning engine.",
    "installCommand": "pip install \"mcp[cli]\" httpx python-dotenv",
    "requiredEnvVars": [
      "DEEPSEEK_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Start the server with Claude Desktop configuration. Send queries to DeepSeek R1 for advanced reasoning.",
    "category": "API Integration"
  },
  "memory-libsql": {
    "name": "mcp-memory-libsql",
    "githubLink": "https://github.com/spences10/mcp-memory-libsql",
    "package": "mcp-memory-libsql",
    "description": "A high-performance, persistent memory system for MCP with vector search capabilities",
    "installCommand": "npx -y mcp-memory-libsql",
    "requiredEnvVars": [
      "LIBSQL_URL"
    ],
    "optionalParams": [
      "LIBSQL_AUTH_TOKEN"
    ],
    "usageInstructions": "Configure LIBSQL_URL for local or remote database, then run using 'npx mcp-memory-libsql'",
    "category": "Data Storage"
  },
  "claude": {
    "name": "Claude Server MCP",
    "githubLink": "https://github.com/davidteren/claude-server",
    "package": "claude-server",
    "description": "A Model Context Protocol (MCP) server providing sophisticated context management capabilities for Claude, enabling persistent context across sessions, project-specific context organization, and conversation continuity.",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure the server through the Claude desktop app's configuration file and use the provided tools for project context management, conversation management, and context retrieval.",
    "category": "Development"
  },
  "tana": {
    "name": "Tana MCP Server",
    "githubLink": "https://github.com/tim-mcdonnell/tana-mcp",
    "package": "tana-mcp",
    "description": "Connects to Tana's Input API to allow LLMs and MCP clients to create/manipulate data in Tana workspaces",
    "installCommand": "npm install -g tana-mcp",
    "requiredEnvVars": [
      "TANA_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure with TANA_API_TOKEN environment variable and use MCP clients to create nodes, tasks, projects, and manage knowledge in Tana workspaces",
    "category": "Productivity"
  },
  "google-tasks": {
    "name": "Google Tasks MCP Server",
    "githubLink": "https://github.com/mstfe/mcp-google-tasks",
    "package": "mcp-google-tasks",
    "description": "A Model Context Protocol (MCP) server for managing Google Tasks. It integrates with the Google Tasks API to manage tasks in a structured and efficient way.",
    "installCommand": "npm install mcp-google-tasks",
    "requiredEnvVars": [
      "GOOGLE_TASK_LIST_ID",
      "GOOGLE_CREDENTIALS"
    ],
    "optionalParams": [],
    "usageInstructions": "Start the server with 'node build/index.js' and use tools like 'create_task', 'list_tasks', 'delete_task', 'update_task', 'complete_task' to manage tasks.",
    "category": "Productivityy"
  },
  "batchdata-real-estate": {
    "name": "BatchData Real Estate MCP Server",
    "githubLink": "https://github.com/zellerhaus/batchdata-mcp-real-estate",
    "package": "@zellerhaus/batchdata-mcp-real-estate",
    "description": "MCP server integrating BatchData.io's property and address APIs for property data, address verification, and advanced property search",
    "installCommand": "npx -y @smithery/cli install @zellerhaus/batchdata-mcp-real-estate --client claude",
    "requiredEnvVars": [
      "BATCHDATA_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure BATCHDATA_API_KEY in .env file, then run 'npm start' or use Docker with 'docker-compose up -d'",
    "category": "API Integration"
  },
  "file-tool": {
    "name": "MCP File Server",
    "githubLink": "https://github.com/codyde/mcp-file-tool",
    "package": "@modelcontextprotocol/sdk",
    "description": "A Model Context Protocol (MCP) server implementation providing file system operations through a standardized interface.",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "SENTRY_DSN"
    ],
    "usageInstructions": "Start the MCP File Server with 'node src/index.js' and communicate through stdin/stdout using the MCP protocol.",
    "category": "File Management"
  },
  "gatherings-python": {
    "name": "Gatherings MCP Server",
    "githubLink": "https://github.com/abutbul/gatherings-mcp-python",
    "package": "gatherings-mcp-python",
    "description": "A Model Context Protocol server for managing gatherings and expense sharing.",
    "installCommand": "git clone https://github.com/abutbul/gatherings-mcp-python.git && cd gatherings-mcp-python && pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "GATHERINGS_DB_PATH",
      "GATHERINGS_SCRIPT"
    ],
    "usageInstructions": "Start the MCP server with 'python gatherings_mcp_server.py'",
    "category": "Productivity"
  },
  "wolfram-alpha": {
    "name": "MCP Wolfram Alpha",
    "githubLink": "https://github.com/SecretiveShell/MCP-wolfram-alpha",
    "package": "@wong2/mcp-cli",
    "description": "An MCP server connecting to Wolfram Alpha API for querying and answering questions",
    "installCommand": "npx @wong2/mcp-cli -c config.json",
    "requiredEnvVars": [
      "WOLFRAM_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Set WOLFRAM_API_KEY environment variable and run using npx @wong2/mcp-cli with a config.json file",
    "category": "API Integration"
  },
  "apple-notes": {
    "name": "Apple Notes Model Context Protocol Server for Claude Desktop",
    "githubLink": "https://github.com/sirmews/apple-notes-mcp",
    "package": "apple-notes-mcp",
    "description": "Reads local Apple Notes database and provides it to Claude Desktop for searching and analysis.",
    "installCommand": "uvx apple-notes-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Install the server, add config, and grant Full Disk Access on Mac OS.",
    "category": "Productivity"
  },
  "tenki": {
    "name": "mcp-tenki",
    "githubLink": "https://github.com/acxelerator/mcp-tenki",
    "package": "mcp-tenki",
    "description": "A Model Context Protocol (MCP) server providing weather information for Japan.",
    "installCommand": "uv sync",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run the server using 'uvx' with the provided git URL or clone the repository and execute 'uv' with the local directory path.",
    "category": "API Integration"
  },
  "cua": {
    "name": "C/ua",
    "githubLink": "https://github.com/trycua/cua",
    "package": "cua-computer",
    "description": "C/ua enables AI agents to control full operating systems in virtual containers and deploy them locally or to the cloud.",
    "installCommand": "pip install -U \"cua-computer[all]\" \"cua-agent[all]\"",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Follow the usage guide to install Lume CLI, pull the macOS CUA image, and use the Python SDK in your code.",
    "category": "Browser Automation"
  },
  "tigris": {
    "name": "Tigris MCP Server",
    "githubLink": "https://github.com/tigrisdata/tigris-mcp-server",
    "package": "@tigrisdata/tigris-mcp-server",
    "description": "Tigris MCP Server implements the MCP specification to create a seamless connection between AI agents and Tigris key features like bucket and object management.",
    "installCommand": "npx -y @tigrisdata/tigris-mcp-server init",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY",
      "AWS_ENDPOINT_URL_S3"
    ],
    "optionalParams": [
      "USE_AWS_PROFILES",
      "AWS_PROFILE"
    ],
    "usageInstructions": "Sign up for an account at storage.new, get an access key, and configure AWS credentials to use the Tigris MCP Server",
    "category": "Data Storage"
  },
  "yt-description": {
    "name": "YouTube Transcript Extractor MCP",
    "githubLink": "https://github.com/MalikElate/yt-description-mcp",
    "package": "@modelcontextprotocol/sdk",
    "description": "Extracts transcripts from public YouTube videos for AI analysis and integration with Cursor and Claude Desktop.",
    "installCommand": "git clone https://github.com/MalikElate/yt-description-mcp.git && cd yt-mcp && pnpm install && pnpm run build",
    "requiredEnvVars": [
      "NODE_OPTIONS",
      "pnpm"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure the server with a YouTube video URL to extract transcripts.",
    "category": "Media"
  },
  "steam": {
    "name": "MCP Steam Server",
    "githubLink": "https://github.com/dsp/mcp-server-steam",
    "package": "ghcr.io/dsp/mcp-server-steam",
    "description": "Provides Steam gaming context to AI assistants via the Model Context Protocol by integrating with the Steam API.",
    "installCommand": "docker run --rm -i ghcr.io/dsp/mcp-server-steam:latest",
    "requiredEnvVars": [
      "STEAM_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Set the STEAM_API_KEY environment variable and run the Docker container to start the server.",
    "category": "API Integration"
  },
  "canvas": {
    "name": "Canvas MCP Server",
    "githubLink": "https://github.com/vishalsachdev/canvas-mcp",
    "package": "canvas-mcp",
    "description": "A Message Control Protocol (MCP) server for interacting with Canvas Learning Management System API, enabling natural language interactions while maintaining FERPA compliance.",
    "installCommand": "pip install uv && uv pip install -e .",
    "requiredEnvVars": [
      "CANVAS_API_TOKEN",
      "CANVAS_API_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure environment variables, then run 'canvas-mcp-server' to start the server.",
    "category": "API Integration"
  },
  "cursor10x": {
    "name": "Cursor10x MCP Server",
    "githubLink": "https://github.com/aurda012/cursor10x-mcp",
    "package": "cursor10x-mcp",
    "description": "A Model Context Protocol server providing continuous context awareness for AI development",
    "installCommand": "npx cursor10x-mcp",
    "requiredEnvVars": [
      "TURSO_DATABASE_URL",
      "TURSO_AUTH_TOKEN"
    ],
    "optionalParams": [
      "importance",
      "metadata"
    ],
    "usageInstructions": "Configure Turso database, update .cursor/mcp.json with database credentials, then run using npx",
    "category": "Development"
  },
  "datetime": {
    "name": "mcp-datetime",
    "githubLink": "https://github.com/ZeparHyfar/mcp-datetime",
    "package": "mcp-datetime",
    "description": "A datetime formatting service implemented as an MCP server for the Claude Desktop Application.",
    "installCommand": "pip install mcp-datetime",
    "requiredEnvVars": [
      "PYTHON"
    ],
    "optionalParams": [],
    "usageInstructions": "Add the server to your Claude Desktop App config file and use the get_datetime tool with a format argument.",
    "category": "Productivity"
  },
  "tmdb": {
    "name": "TMDB MCP Server",
    "githubLink": "https://github.com/Laksh-star/mcp-server-tmdb",
    "package": "@Laksh-star/mcp-server-tmdb",
    "description": "Integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.",
    "installCommand": "npx -y @smithery/cli install @Laksh-star/mcp-server-tmdb --client claude",
    "requiredEnvVars": [
      "TMDB_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Set TMDB_API_KEY environment variable and configure in Claude Desktop's config.json with server command path.",
    "category": "API Integration"
  },
  "jentic-tools": {
    "name": "Jentic MCP Server",
    "githubLink": "https://github.com/jentic/jentic-tools",
    "package": "jentic",
    "description": "Jentic MCP empowers AI agent builders to discover and integrate external APIs and workflows rapidly without writing or maintaining API-specific code.",
    "installCommand": "pip install jentic",
    "requiredEnvVars": [
      "JENTIC_UUID"
    ],
    "optionalParams": [],
    "usageInstructions": "Integrate the Jentic MCP plugin with your preferred MCP client and configure it to use the Jentic MCP server.",
    "category": "API Integration"
  },
  "last9": {
    "name": "Last9 MCP Server",
    "githubLink": "https://github.com/last9/last9-mcp-server",
    "package": "@last9/mcp-server",
    "description": "Enables AI agents to bring real-time production context into local environments.",
    "installCommand": "npx @last9/mcp-server",
    "requiredEnvVars": [
      "LAST9_BASE_URL",
      "LAST9_AUTH_TOKEN",
      "LAST9_REFRESH_TOKEN"
    ],
    "optionalParams": [
      "limit",
      "lookback_minutes",
      "start_time_iso",
      "end_time_iso",
      "span_name",
      "service",
      "severity",
      "name",
      "filters"
    ],
    "usageInstructions": "Configure Claude, Cursor, Windsurf, or VS Code to use the MCP server by editing their respective config files.",
    "category": "Development"
  },
  "visitbeijing": {
    "name": "Visit Beijing MCP Server",
    "githubLink": "https://github.com/solution9th/visitbeijing-mcp",
    "package": "visitbeijing-mcp",
    "description": "Provides real-time Beijing tourism information, including scenic spot visitor flow, performance and exhibition updates, and inbound travel guides.",
    "installCommand": "npx -y visitbeijing-mcp",
    "requiredEnvVars": [
      "ak"
    ],
    "optionalParams": [],
    "usageInstructions": "Use the provided installation command to set up the server, then access the API at the specified URL.",
    "category": "API Integration"
  },
  "text-editor": {
    "name": "MCP Text Editor Server",
    "githubLink": "https://github.com/tumf/mcp-text-editor",
    "package": "mcp-text-editor",
    "description": "A Model Context Protocol (MCP) server for line-oriented text file editing and reading.",
    "installCommand": "uvx mcp-text-editor",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server with 'python -m mcp_text_editor' or via Docker with 'docker run -i --rm --mount \"type=bind,src=/some/path/src,dst=/some/path/dst\" mcp/text-editor'",
    "category": "File Management"
  },
  "tuyactl": {
    "name": "Tuya Control CLI",
    "githubLink": "https://github.com/cabra-lat/tuyactl",
    "package": "tuyactl",
    "description": "Command-line interface for controlling Tuya devices",
    "installCommand": "uv pip install git+https://github.com/cabra-lat/tuyactl.git",
    "requiredEnvVars": [
      "TUYA_DEVICE_KEYS"
    ],
    "optionalParams": [
      "snapshot.json location"
    ],
    "usageInstructions": "Run 'tuyactl --help' to see available commands and options",
    "category": "API Integration"
  },
  "gmail-gas": {
    "name": "MCP Gmail",
    "githubLink": "https://github.com/kazuph/mcp-gmail-gas",
    "package": "@kazuph/mcp-gmail-gas",
    "description": "Model Context Protocol server for Gmail integration, allowing Claude Desktop to interact with Gmail accounts through Google Apps Script.",
    "installCommand": "npx -y @kazuph/mcp-gmail-gas",
    "requiredEnvVars": [
      "GAS_ENDPOINT",
      "VALID_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Deploy Google Apps Script, configure Claude Desktop, and add Gmail credentials to interact with Gmail account.",
    "category": "API Integration"
  },
  "k8s": {
    "name": "MCP Kubernetes Server",
    "githubLink": "https://github.com/abhijeetka/mcp-k8s-server",
    "package": "@abhijeetka/mcp-k8s-server",
    "description": "An MCP server for Kubernetes that enables control over clusters via interactions with LLMs.",
    "installCommand": "npx -y @smithery/cli install @abhijeetka/mcp-k8s-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Install via Smithery CLI, ensure kubectl is configured, and use natural language commands through an LLM interface to manage Kubernetes resources.",
    "category": "Other"
  },
  "test-repo": {
    "name": "Uber Eats MCP Server",
    "githubLink": "https://github.com/skudskud/test-repo-mcp",
    "package": "Not specified",
    "description": "A proof-of-concept MCP server built on top of Uber Eats, enabling integration with LLM applications.",
    "installCommand": "uv pip install -r requirements.txt && playwright install",
    "requiredEnvVars": [
      "ANTHROPIC_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Update .env with API key, then run the server",
    "category": "API Integration"
  },
  "ideagram": {
    "name": "Ideogram MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/ideagram-mcp-server",
    "package": "@sunwood-ai-labs/ideagram-mcp-server",
    "description": "MCP server providing image generation using Ideogram API v3.0",
    "installCommand": "npx @sunwood-ai-labs/ideagram-mcp-server",
    "requiredEnvVars": [
      "IDEOGRAM_API_KEY"
    ],
    "optionalParams": [
      "aspect_ratio",
      "resolution",
      "seed",
      "magic_prompt",
      "rendering_speed",
      "style_codes",
      "style_type",
      "negative_prompt",
      "num_images",
      "style_reference",
      "output_dir",
      "base_filename",
      "blur_mask"
    ],
    "usageInstructions": "Configure in Claude Desktop or other MCP clients using the provided JSON snippet",
    "category": "Media"
  },
  "loxo": {
    "name": "Loxo MCP Server",
    "githubLink": "https://github.com/tbensonwest/loxo-mcp-server",
    "package": "loxo-mcp-server",
    "description": "A Model Context Protocol (MCP) server for interacting with the Loxo recruitment platform API, enabling AI assistants to perform various recruitment-related tasks.",
    "installCommand": "git clone https://github.com/tbensonwest/loxo-mcp-server && cd loxo-mcp-server && npm install && npm run build",
    "requiredEnvVars": [
      "LOXO_API_KEY",
      "LOXO_AGENCY_SLUG"
    ],
    "optionalParams": [
      "LOXO_DOMAIN"
    ],
    "usageInstructions": "Configure the .env file with your Loxo API key, agency slug, and domain (optional), then start the server with npm start.",
    "category": "API Integration"
  },
  "claudecomputercommander": {
    "name": "Desktop Commander MCP",
    "githubLink": "https://github.com/wonderwhy-er/ClaudeComputerCommander",
    "package": "@wonderwhy-er/desktop-commander",
    "description": "AI-powered file management and terminal command execution with process control, code execution, and comprehensive filesystem operations",
    "installCommand": "npx @wonderwhy-er/desktop-commander@latest setup",
    "requiredEnvVars": [],
    "optionalParams": [
      "--debug"
    ],
    "usageInstructions": "Install via npx or bash script, then use Claude Desktop to execute terminal commands, manage files, analyze data, and control processes through the MCP interface",
    "category": "Development"
  },
  "ephor": {
    "name": "LLM Responses MCP Server",
    "githubLink": "https://github.com/kstrikis/ephor-mcp",
    "package": "ephor-mcp",
    "description": "A Model Context Protocol (MCP) server for sharing and reading AI agent responses to the same prompt.",
    "installCommand": "bun install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use the 'submit-response' tool to submit an LLM's response to a prompt, and 'get-responses' to retrieve all LLM responses for a specific prompt.",
    "category": "API Integration"
  },
  "zoomeye": {
    "name": "ZoomEye MCP Server",
    "githubLink": "https://github.com/zoomeye-ai/mcp_zoomeye",
    "package": "mcp-server-zoomeye",
    "description": "An MCP server providing network asset information based on query conditions using ZoomEye API",
    "installCommand": "pip install mcp-server-zoomeye",
    "requiredEnvVars": [
      "ZOOMEYE_API_KEY"
    ],
    "optionalParams": [
      "page",
      "pagesize",
      "fields",
      "sub_type",
      "facets",
      "ignore_cache"
    ],
    "usageInstructions": "Start the server using 'python -m mcp_server_zoomeye', then configure your AI assistant to use it and query network information using natural language",
    "category": "API Integration"
  },
  "local-dev": {
    "name": "MCP Local Dev",
    "githubLink": "https://github.com/txbm/mcp-local-dev",
    "package": "mcp-local-dev",
    "description": "A local development environment manager that lets LLMs configure and manage dev environments for you.",
    "installCommand": "npx --from git+https://github.com/txbm/mcp-local-dev@main mcp-local-dev",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Point Claude at any GitHub repository and ask it to set up a dev environment!",
    "category": "Development"
  },
  "xcode": {
    "name": "Xcode MCP Server",
    "githubLink": "https://github.com/r-huijts/xcode-mcp-server",
    "package": "xcode-mcp-server",
    "description": "An MCP server enabling AI assistants to interact with Xcode projects, manage iOS simulators, and perform build/test operations through the Model Context Protocol.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "PROJECTS_BASE_DIR"
    ],
    "optionalParams": [
      "PORT",
      "DEBUG",
      "ALLOWED_PATHS",
      "LOG_LEVEL"
    ],
    "usageInstructions": "Start the server with 'npm start', configure the .env file with your project directory, and set up your AI assistant to connect to http://localhost:3000",
    "category": "Development"
  },
  "bing-searches": {
    "name": "Bing Searches Analysis Toolkit",
    "githubLink": "https://github.com/seanivore/bing-searches-mcp",
    "package": "bing-searches-toolkit",
    "description": "A comprehensive system for collecting, processing, and analyzing Bing search data to extract insights and patterns.",
    "installCommand": "npm install bing-searches-toolkit",
    "requiredEnvVars": [],
    "optionalParams": [
      "BING_API_KEY",
      "PROXY_URL"
    ],
    "usageInstructions": "Run 'bingsearch collect' to gather search results and 'bingsearch analyze' to analyze collected data.",
    "category": "Web Scraping"
  },
  "brianknows": {
    "name": "BrianKnows MCP Server",
    "githubLink": "https://github.com/antoncoding/mcp-brianknows",
    "package": "mcp-brianknows",
    "description": "An MCP server connecting Claude to BrianKnows' blockchain knowledge base, providing tools for ping, search, and agent interactions.",
    "installCommand": "npx mcp-brianknows",
    "requiredEnvVars": [
      "BRIAN_API_KEY"
    ],
    "optionalParams": [
      "knowledge bases including public-knowledge-box, circle_kb, lido_kb, Polygon_kb, near_kb, clave_kb, starknet_kb, consensys_kb"
    ],
    "usageInstructions": "Configure Claude Desktop to use this server by adding it to the configuration file with the BRIAN_API_KEY environment variable set to your actual BrianKnows API key.",
    "category": "API Integration"
  },
  "xrpl-service": {
    "name": "XRPL MCP Service",
    "githubLink": "https://github.com/tedlikeskix/xrpl-mcp-service",
    "package": "xrpl-py",
    "description": "A Model Context Protocol (MCP) server providing comprehensive access to the XRP Ledger (XRPL) through standardized endpoints.",
    "installCommand": "pip install xrpl-py fastapi uvicorn python-dotenv",
    "requiredEnvVars": [
      "XRPL_NODE_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Create a .env file with XRPL_NODE_URL, install dependencies, and run the server with uvicorn.",
    "category": "API Integration"
  },
  "memory-file": {
    "name": "MCP Server Memory File",
    "githubLink": "https://github.com/g0t4/mcp-server-memory-file",
    "package": "mcp-server-memory-file",
    "description": "An MCP server enabling Claude to manage inter-chat context by storing and retrieving text-based memories from a file.",
    "installCommand": "npx -y mcp-server-memory-file",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server and use MCP clients to call memory_add, memory_search, memory_delete, and memory_list functions to interact with stored memories in the text file.",
    "category": "Data Storage"
  },
  "mcp2serial": {
    "name": "MCP2Serial",
    "githubLink": "https://github.com/mcp2everything/mcp2serial",
    "package": "mcp2serial",
    "description": "Connects physical serial devices to AI models via Model Context Protocol (MCP), enabling natural language control of hardware.",
    "installCommand": "python install.py",
    "requiredEnvVars": [],
    "optionalParams": [
      "port",
      "baud_rate",
      "timeout",
      "read_timeout",
      "response_start_string"
    ],
    "usageInstructions": "Configure serial port and commands in config.yaml, then use MCP client like Claude Desktop or Cline.",
    "category": "File Management"
  },
  "bybit": {
    "name": "MCP Bybit API Interface",
    "githubLink": "https://github.com/dlwjdtn535/mcp-bybit-server",
    "package": "@dlwjdtn535/mcp-bybit-server",
    "description": "Provides a convenient interface to interact with the Bybit API using MCP tools, allowing market data fetching, account management, and order placement/cancellation.",
    "installCommand": "npx -y @smithery/cli install @dlwjdtn535/mcp-bybit-server --client claude",
    "requiredEnvVars": [
      "ACCESS_KEY",
      "SECRET_KEY"
    ],
    "optionalParams": [
      "TESTNET"
    ],
    "usageInstructions": "Configure MCP settings file with server details and environment variables, then use tools like get_orderbook, place_order, etc.",
    "category": "API Integration"
  },
  "memory-bank": {
    "name": "Memory Bank MCP Server",
    "githubLink": "https://github.com/ipospelov/mcp-memory-bank",
    "package": "@ipospelov/mcp-memory-bank",
    "description": "MCP server for building structured documentation system based on Cline's Memory Bank pattern for context preservation in AI assistant environments.",
    "installCommand": "npx -y @smithery/cli@latest run @ipospelov/mcp-memory-bank --key your_smithery_key",
    "requiredEnvVars": [
      "your_smithery_key"
    ],
    "optionalParams": [],
    "usageInstructions": "Use with Cursor or any other AI code assistant to create memory banks for projects.",
    "category": "Development"
  },
  "knowledge-graph": {
    "name": "mcp-knowledge-graph",
    "githubLink": "https://github.com/shaneholloman/mcp-knowledge-graph",
    "package": "mcp-knowledge-graph",
    "description": "A knowledge graph-based memory server for the Model Context Protocol (MCP), enabling AI models to retain user information across interactions using a customizable local storage path.",
    "installCommand": "npx -y mcp-knowledge-graph",
    "requiredEnvVars": [],
    "optionalParams": [
      "--memory-path"
    ],
    "usageInstructions": "Configure the server by specifying a custom memory path using --memory-path. Integrate with MCP-compatible AI platforms by adding the server configuration to their settings (e.g., claude_desktop_config.json). Use the provided API tools to manage entities, relations, and observations in the knowledge graph.",
    "category": "Data Storage"
  },
  "simulator": {
    "name": "iOS Simulator MCP Server",
    "githubLink": "https://github.com/JoshuaRileyDev/simulator-mcp-server",
    "package": "@joshuarileydev/simulator-mcp-server",
    "description": "A Model Context Protocol (MCP) server for programmatic control over iOS simulators.",
    "installCommand": "npx -y @joshuarileydev/simulator-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure the server through your Claude Config JSON file.",
    "category": "development"
  },
  "userfuls": {
    "name": "Useful Model Context Protocol Servers",
    "githubLink": "https://github.com/daltonnyx/userful-mcps",
    "package": "uv",
    "description": "A collection of standalone Python scripts implementing MCP servers for various utility functions",
    "installCommand": "pip install uv",
    "requiredEnvVars": [
      "MERMAID_CHART_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "language",
      "chapters",
      "replacements",
      "blocks",
      "output_filename",
      "theme"
    ],
    "usageInstructions": "Run each MCP server using 'uv run --directory <path>' pointing to the specific MCP's directory",
    "category": "Productivity"
  },
  "penrose": {
    "name": "Penrose MCP Server",
    "githubLink": "https://github.com/bmorphism/penrose-mcp",
    "package": "penrose-mcp",
    "description": "A Model Context Protocol (MCP) server for creating mathematical diagrams using Penrose's domain-specific languages.",
    "installCommand": "npx -y penrose-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use the justfile to access documentation and reference materials.",
    "category": "Development"
  },
  "discord-webhook": {
    "name": "MCP Server Discord Webhook",
    "githubLink": "https://github.com/genm/mcp-server-discord-webhook",
    "package": "@genpm/mcp-server-discord-webhook",
    "description": "An MCP server for posting messages to Discord webhooks",
    "installCommand": "npm install @genpm/mcp-server-discord-webhook",
    "requiredEnvVars": [
      "DISCORD_WEBHOOK_URL"
    ],
    "optionalParams": [
      "username",
      "avatar_url"
    ],
    "usageInstructions": "Configure in MCP config with Discord webhook URL and use send_message to post messages",
    "category": "Communication"
  },
  "unichat-ts": {
    "name": "Unichat MCP Server",
    "githubLink": "https://github.com/amidabuddha/unichat-ts-mcp-server",
    "package": "unichat-ts-mcp-server",
    "description": "Send requests to OpenAI, MistralAI, Anthropic, xAI, Google AI or DeepSeek using MCP protocol via tool or predefined prompts.",
    "installCommand": "npx -y unichat-ts-mcp-server",
    "requiredEnvVars": [
      "UNICHAT_MODEL",
      "UNICHAT_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run with 'npx -y unichat-ts-mcp-server --sse' or 'npx -y unichat-ts-mcp-server --stdio'",
    "category": "API Integration"
  },
  "scholarly": {
    "name": "Scholarly MCP Server",
    "githubLink": "https://github.com/adityak74/mcp-scholarly",
    "package": "mcp-scholarly",
    "description": "MCP server for searching academic articles on arxiv",
    "installCommand": "npx -y @smithery/cli install mcp-scholarly --client claude",
    "requiredEnvVars": [
      "UV_PUBLISH_TOKEN",
      "UV_PUBLISH_USERNAME",
      "UV_PUBLISH_PASSWORD"
    ],
    "optionalParams": [
      "keyword"
    ],
    "usageInstructions": "Use the 'search-arxiv' tool with a 'keyword' argument to search for articles",
    "category": "API Integration"
  },
  "shiprocket": {
    "name": "Shiprocket MCP Integration",
    "githubLink": "https://github.com/bfrs/shiprocket-mcp",
    "package": "shiprocket-mcp",
    "description": "MCP server for Shiprocket, enabling courier partner and shipping rate management, order creation, tracking, and more.",
    "installCommand": "git clone https://github.com/bfrs/shiprocket-mcp.git && cd shiprocket-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "SELLER_EMAIL",
      "SELLER_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop or Cursor with the provided MCP server settings to access Shiprocket integration tools.",
    "category": "API Integration"
  },
  "umami": {
    "name": "Umami Analytics MCP Server",
    "githubLink": "https://github.com/jakeyShakey/umami_mcp_server",
    "package": "umami_mcp_server",
    "description": "Connects Claude to Umami analytics, enabling analysis of user behavior and website performance.",
    "installCommand": "git clone https://github.com/jakeyShakey/umami_mcp_server.git && cd umami_mcp_server && pip install -r requirements.txt",
    "requiredEnvVars": [
      "UMAMI_API_URL",
      "UMAMI_USERNAME",
      "UMAMI_PASSWORD",
      "UMAMI_TEAM_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop with server details, then use natural language or Create Dashboard Prompt to analyze website data.",
    "category": "Analytics"
  },
  "ens": {
    "name": "ENS MCP Server",
    "githubLink": "https://github.com/JustaName-id/ens-mcp-server",
    "package": "mcp-server-ens",
    "description": "MCP Server for Ethereum Name Service (ENS) to resolve names, check availability, and retrieve records",
    "installCommand": "npx -y mcp-server-ens",
    "requiredEnvVars": [],
    "optionalParams": [
      "duration"
    ],
    "usageInstructions": "Configure in claude_desktop_config.json using npx or local script",
    "category": "API Integration"
  },
  "pandoc": {
    "name": "mcp-pandoc: A Document Conversion MCP Server",
    "githubLink": "https://github.com/vivekVells/mcp-pandoc",
    "package": "mcp-pandoc",
    "description": "A Model Context Protocol server for document format conversion using pandoc, providing tools to transform content between different document formats while preserving formatting and structure.",
    "installCommand": "npx -y mcp-pandoc",
    "requiredEnvVars": [
      "pandoc",
      "uv",
      "TeX Live"
    ],
    "optionalParams": [
      "reference_doc",
      "output_file"
    ],
    "usageInstructions": "Use the provided CHEATSHEET.md for copy-paste examples and common workflows.",
    "category": "File Management"
  },
  "todo": {
    "name": "mcp-todo-server",
    "githubLink": "https://github.com/mutker/mcp-todo-server",
    "package": "mcp-todo-server",
    "description": "MCP server for managing TODO.md and CHANGELOG.md files, providing precise editing and efficient partial file access.",
    "installCommand": "go install codeberg.org/mutker/mcp-todo-server/cmd/mcp-todo-server@latest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Interact with the server using TODO.md and CHANGELOG.md operations like get-todo-tasks, add-todo-task, get-changelog, add-changelog-entry, etc.",
    "category": "Productivity"
  },
  "rememberizer": {
    "name": "Rememberizer MCP Server",
    "githubLink": "https://github.com/skydeckai/mcp-server-rememberizer",
    "package": "mcp-server-rememberizer",
    "description": "An MCP server for interacting with Rememberizer's document and knowledge management API",
    "installCommand": "npx -y @smithery/cli install mcp-server-rememberizer --client claude",
    "requiredEnvVars": [
      "REMEMBERIZER_API_TOKEN"
    ],
    "optionalParams": [
      "n_results",
      "from_datetime_ISO8601",
      "to_datetime_ISO8601",
      "page",
      "page_size",
      "user_context"
    ],
    "usageInstructions": "Configure REMEMBERIZER_API_TOKEN environment variable and use with Claude Desktop or SkyDeck AI Helper App",
    "category": "API Integration"
  },
  "quickchart": {
    "name": "Quickchart-MCP-Server",
    "githubLink": "https://github.com/GongRzhe/Quickchart-MCP-Server",
    "package": "@gongrzhe/quickchart-mcp-server",
    "description": "A Model Context Protocol server for generating charts using QuickChart.io",
    "installCommand": "npx -y @gongrzhe/quickchart-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use Chart.js configuration format to generate charts",
    "category": "Media"
  },
  "tools": {
    "name": "mcp",
    "githubLink": "https://github.com/algonacci/mcp-tools",
    "package": "mcp-tools",
    "description": "A collection of Model Context Protocol tools for various functionalities",
    "installCommand": "npx -y mcp-tools",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Refer to the GitHub repository for setup and usage details",
    "category": "Other"
  },
  "systemprompt-core": {
    "name": "SystemPrompt Agent Server",
    "githubLink": "https://github.com/Ejb503/systemprompt-mcp-core",
    "package": "systemprompt-mcp-core",
    "description": "A specialized Model Context Protocol (MCP) server for creating, managing, and extending AI agents through a powerful prompt and tool management system.",
    "installCommand": "npx -y systemprompt-mcp-core",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Requires an API key from systemprompt.io. Integrates with multimodal-mcp-client for full functionality.",
    "category": "API Integration"
  },
  "polygon": {
    "name": "Polygon MCP Server",
    "githubLink": "https://github.com/Dbillionaer/polygon-mcp",
    "package": "polygon-mcp",
    "description": "An MCP server providing integration with Polygon blockchain network for AI assistants",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "POLYGON_MAINNET_RPC",
      "POLYGON_AMOY_RPC",
      "ETHEREUM_RPC_URL",
      "POLYGONSCAN_API_KEY",
      "PRIVATE_KEY",
      "DEFAULT_NETWORK"
    ],
    "optionalParams": [
      "DEFAULT_SLIPPAGE",
      "DEFAULT_DEADLINE_MINUTES"
    ],
    "usageInstructions": "Create .env file with required variables, then run 'npm start'",
    "category": "Blockchain"
  },
  "sol": {
    "name": "Model Context Protocol Server for Solana Client",
    "githubLink": "https://github.com/tywenk/mcp-sol",
    "package": "@tywenk/mcp-solana",
    "description": "MCP server for interacting with Solana blockchain, providing various methods for querying and interacting with the blockchain.",
    "installCommand": "npx -y @smithery/cli install @tywenk/mcp-solana --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Install and configure the server using the provided installation instructions, then use the provided methods to interact with the Solana blockchain.",
    "category": "Blockchain"
  },
  "python-toolbox": {
    "name": "MCP Python Toolbox",
    "githubLink": "https://github.com/gianlucamazza/mcp_python_toolbox",
    "package": "mcp_python_toolbox",
    "description": "A Model Context Protocol server providing comprehensive tools for Python development, enabling AI assistants to work with Python code and projects.",
    "installCommand": "pip install -e \".[dev]\"",
    "requiredEnvVars": [
      "PYTHONPATH",
      "VIRTUAL_ENV"
    ],
    "optionalParams": [
      "workspace"
    ],
    "usageInstructions": "Run as CLI tool with 'python -m mcp_python_toolbox' or specify workspace directory",
    "category": "Development"
  },
  "myip": {
    "name": "MyIP MCP Server",
    "githubLink": "https://github.com/nikolaypavlov/mcp-myip",
    "package": "mcp-myip",
    "description": "MCP server that retrieves public IP address from ifconfig.me",
    "installCommand": "uvx mcp-myip",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use the get_ip_info tool to retrieve public IP address",
    "category": "API Integration"
  },
  "clever-doc": {
    "name": "Clever Cloud Documentation MCP Server",
    "githubLink": "https://github.com/LostInBrittany/clever-doc-mcp-server",
    "package": "mcp-clever-demo",
    "description": "MCP server exposing Clever Cloud's documentation, based on FastMCP and MCP Clever Demo.",
    "installCommand": "npx -y mcp-clever-demo",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use in an MCP client such as Claude Desktop with the provided JSON configuration.",
    "category": "Documentation"
  },
  "doris": {
    "name": "Apache Doris MCP Server",
    "githubLink": "https://github.com/morningman/mcp-doris",
    "package": "mcp-doris",
    "description": "An MCP server for Apache Doris, enabling database interactions through the Model Context Protocol",
    "installCommand": "uv run --with mcp-doris",
    "requiredEnvVars": [
      "DORIS_HOST",
      "DORIS_PORT",
      "DORIS_USER",
      "DORIS_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Set required environment variables and run the server using uv. For development, sync dependencies, activate the virtual environment, and start with mcp dev command.",
    "category": "Database"
  },
  "tavily-proxy": {
    "name": "Tavily MCP Server with Proxy Support",
    "githubLink": "https://github.com/tulong66/mcp-tavily-proxy",
    "package": "mcp-tavily-proxy",
    "description": "A Model Context Protocol server providing AI-powered web search capabilities with Tavily's search API and HTTP/HTTPS proxy support.",
    "installCommand": "pip install mcp-tavily-proxy",
    "requiredEnvVars": [
      "TAVILY_API_KEY"
    ],
    "optionalParams": [
      "HTTP_PROXY",
      "HTTPS_PROXY",
      "TAVILY_LOG_LEVEL"
    ],
    "usageInstructions": "Set TAVILY_API_KEY and optional proxy environment variables, then run with python -m mcp_server_tavily",
    "category": "API Integration"
  },
  "opendatamcp": {
    "name": "Open Data Model Context Protocol",
    "githubLink": "https://github.com/OpenDataMCP/OpenDataMCP",
    "package": "odmcp",
    "description": "Access and publish open data for LLM applications through MCP servers",
    "installCommand": "uvx odmcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "$PROVIDER_NAME"
    ],
    "usageInstructions": "Use 'uvx odmcp setup $PROVIDER_NAME' to setup a provider's MCP server, then restart Claude Desktop app",
    "category": "Data Storage"
  },
  "src-tree": {
    "name": "MCP Source Tree Server",
    "githubLink": "https://github.com/owayo/mcp-src-tree",
    "package": "mcp-src-tree",
    "description": "Generates a file tree for a specified directory, excluding files and directories based on .gitignore rules.",
    "installCommand": "curl -LsSf https://astral.sh/uv/install.sh | sh && uv sync",
    "requiredEnvVars": [
      "PYTHON_VERSION",
      "UV_VERSION"
    ],
    "optionalParams": [],
    "usageInstructions": "Specify the root directory to generate a file tree, considering .gitignore rules.",
    "category": "Development"
  },
  "rosetta": {
    "name": "MCP Rosetta Server",
    "githubLink": "https://github.com/vrtejus/mcp-rosetta",
    "package": "mcp-rosetta",
    "description": "A Model Context Protocol (MCP) server for Rosetta",
    "installCommand": "git clone https://github.com/vrtejus/mcp-rosetta.git",
    "requiredEnvVars": [
      "ROSETTA_SCRIPT_PATH",
      "PDB_DIR",
      "OUTPUT_DIR",
      "ROSETTA_BIN_PATH",
      "ROSETTA_DB_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Define paths and run the server",
    "category": "Other"
  },
  "safe": {
    "name": "Safe MCP Server",
    "githubLink": "https://github.com/5ajaki/safe-mcp-server",
    "package": "safe-mcp-server",
    "description": "An MCP server implementation for interacting with Safe smart contract wallets.",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "limit",
      "offset",
      "to"
    ],
    "usageInstructions": "Run 'npm start' after installation. The server uses the Safe Transaction API mainnet endpoint by default.",
    "category": "API Integration"
  },
  "claude-repl": {
    "name": "Claude REPL Server",
    "githubLink": "https://github.com/lyuhau/claude-mcp-repl",
    "package": "claude-mcp-repl",
    "description": "A Python-based REPL server that enhances Claude with Python execution, shell commands, and file manipulation capabilities.",
    "installCommand": "poetry install or pip install -r pyproject.toml",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop to use the REPL server by adding the command and args to the config file.",
    "category": "Development"
  },
  "evm-signer": {
    "name": "MCP EVM Signer",
    "githubLink": "https://github.com/zhangzhongnan928/mcp-evm-signer",
    "package": "mcp-evm-signer",
    "description": "A Model Context Protocol (MCP) server for managing Ethereum private keys and deploying smart contracts using Infura.",
    "installCommand": "npx -y mcp-evm-signer",
    "requiredEnvVars": [
      "INFURA_API_KEY",
      "DEFAULT_NETWORK",
      "ENCRYPT_KEYS",
      "KEY_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Use with Claude for Desktop to interact with EVM-compatible blockchains.",
    "category": "Blockchain"
  },
  "workos": {
    "name": "WorkOS MCP Server",
    "githubLink": "https://github.com/zueai/workos-mcp",
    "package": "workos-mcp",
    "description": "MCP server for interacting with WorkOS API, allowing agents to access WorkOS functionality",
    "installCommand": "bun create mcp --clone https://github.com/zueai/workos-mcp",
    "requiredEnvVars": [
      "WORKOS_API_KEY",
      "WORKOS_CLIENT_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "Install using bun create command, configure WorkOS API key and client ID as secrets, then add MCP server in Cursor Settings",
    "category": "API Integration"
  },
  "vercel-api": {
    "name": "Vercel MCP Server",
    "githubLink": "https://github.com/zueai/vercel-api-mcp",
    "package": "vercel-mcp",
    "description": "An MCP server connecting to Vercel API for managing deployments, DNS, domains, projects, and environment variables.",
    "installCommand": "npx vercel-mcp VERCEL_API_KEY=<your-vercel-api-key>",
    "requiredEnvVars": [
      "VERCEL_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Add MCP server to .cursor/mcp.json or install globally with npx command",
    "category": "API Integration"
  },
  "shortcut": {
    "name": "Shortcut MCP Server",
    "githubLink": "https://github.com/zekus/shortcut-mcp",
    "package": "shortcut_mcp",
    "description": "A Model Context Protocol (MCP) server for interacting with Shortcut (formerly Clubhouse), allowing read-only operations and safe creation capabilities.",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [
      "SHORTCUT_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server with 'python -m shortcut_mcp' and configure Claude Desktop to use it.",
    "category": "API Integration"
  },
  "confluence": {
    "name": "Better Confluence Communication Server",
    "githubLink": "https://github.com/zereight/confluence-mcp",
    "package": "@zereight/mcp-confluence",
    "description": "MCP server providing Confluence functionalities including CQL queries and page content retrieval.",
    "installCommand": "npx -y @zereight/mcp-confluence",
    "requiredEnvVars": [
      "CONFLUENCE_API_MAIL",
      "CONFLUENCE_API_KEY",
      "CONFLUENCE_URL",
      "JIRA_URL"
    ],
    "optionalParams": [
      "CONFLUENCE_IS_CLOUD"
    ],
    "usageInstructions": "Set environment variables and run 'npx -y @zereight/mcp-confluence' to start the server.",
    "category": "API Integration"
  },
  "anilist": {
    "name": "AniList MCP Server",
    "githubLink": "https://github.com/yuna0x0/anilist-mcp",
    "package": "@yuna0x0/anilist-mcp",
    "description": "An MCP server that interfaces with the AniList API for anime, manga, and user data",
    "installCommand": "npx -y @smithery/cli install @yuna0x0/anilist-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "ANILIST_TOKEN"
    ],
    "usageInstructions": "Use tools like 'search_anime' or 'get_character' to interact with AniList data",
    "category": "API Integration"
  },
  "cosense": {
    "name": "Cosense MCP Server",
    "githubLink": "https://github.com/yosider/cosense-mcp-server",
    "package": "@yosider/cosense-mcp-server",
    "description": "A MCP server for interacting with Cosense pages, providing tools for page retrieval, listing, searching, and editing.",
    "installCommand": "npx -y @yosider/cosense-mcp-server",
    "requiredEnvVars": [
      "COSENSE_PROJECT_NAME",
      "COSENSE_SID"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure JSR registry, set environment variables, and run the server with the provided installation command.",
    "category": "Web Scraping"
  },
  "redmine": {
    "name": "Redmine MCP Server",
    "githubLink": "https://github.com/yonaka15/mcp-server-redmine",
    "package": "mcp-server-redmine",
    "description": "MCP server integrating Redmine's REST API to provide ticket/project data to LLMs",
    "installCommand": "npx -y mcp-server-redmine",
    "requiredEnvVars": [
      "REDMINE_HOST",
      "REDMINE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Set REDMINE_HOST and REDMINE_API_KEY environment variables. Use MCP Inspector to test functionality or integrate with Claude using the provided JSON configuration format.",
    "category": "API Integration"
  },
  "hackmd": {
    "name": "HackMD MCP Server",
    "githubLink": "https://github.com/yuna0x0/hackmd-mcp",
    "package": "@yuna0x0/hackmd-mcp",
    "description": "A Model Context Protocol (MCP) server for interacting with the HackMD API, allowing AI assistants to perform operations on HackMD notes and teams.",
    "installCommand": "npx -y @smithery/cli install @yuna0x0/hackmd-mcp --client claude",
    "requiredEnvVars": [
      "HACKMD_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Use commands like 'Please list all my notes.' after setting up the server with your HackMD API token.",
    "category": "API Integration"
  },
  "openmetadata": {
    "name": "OpenMetadata MCP Server",
    "githubLink": "https://github.com/yangkyeongmo/mcp-server-openmetadata",
    "package": "mcp-server-openmetadata",
    "description": "A Model Context Protocol (MCP) server implementation for OpenMetadata, enabling seamless integration with MCP clients.",
    "installCommand": "npx mcp-server-openmetadata",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use this server to interact with OpenMetadata through the Model Context Protocol.",
    "category": "Database"
  },
  "mongodb-mysql": {
    "name": "MCP-MongoDB-MySQL-Server",
    "githubLink": "https://github.com/yaoxiaolinglong/mcp-mongodb-mysql-server",
    "package": "@yaoxiaolinglong/mcp-mongodb-mysql-server",
    "description": "A Model Context Protocol server providing MySQL and MongoDB database operations",
    "installCommand": "npx -y @smithery/cli install @yaoxiaolinglong/mcp-mongodb-mysql-server --client claude",
    "requiredEnvVars": [
      "DATABASE_URL",
      "MONGODB_URI"
    ],
    "optionalParams": [
      "DB_HOST",
      "DB_USER",
      "DB_PASSWORD",
      "DB_DATABASE",
      "MONGODB_DATABASE"
    ],
    "usageInstructions": "Configure database connections using .env file or direct connection tools, then use available tools like query, execute, mongodb_find",
    "category": "Database"
  },
  "js": {
    "name": "YepCode MCP Server",
    "githubLink": "https://github.com/yepcode/mcp-server-js",
    "package": "@yepcode/mcp-server",
    "description": "An MCP server enabling AI platforms to interact with YepCode's infrastructure, allowing execution of LLM generated scripts and turning YepCode processes into AI-ready tools.",
    "installCommand": "npx -y @yepcode/mcp-server",
    "requiredEnvVars": [
      "YEPCODE_API_TOKEN"
    ],
    "optionalParams": [
      "YEPCODE_MCP_OPTIONS"
    ],
    "usageInstructions": "Integrate with AI platforms using remote or local approach, configure with YepCode API credentials",
    "category": "API Integration"
  },
  "pdf-extraction": {
    "name": "PDF Extraction MCP Server",
    "githubLink": "https://github.com/xraywu/mcp-pdf-extraction-server",
    "package": "mcp-pdf-extraction-server",
    "description": "MCP server to extract contents from PDF files, supporting both text extraction and OCR for scanned documents",
    "installCommand": "pip install -e git+https://github.com/lh/mcp-pdf-extraction-server.git#egg=mcp-pdf-extraction-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "pages"
    ],
    "usageInstructions": "Use Claude to extract PDF contents by specifying the PDF path and optionally the pages parameter",
    "category": "File Management"
  },
  "swagger-viewer": {
    "name": "Swagger Viewer MCP Tool",
    "githubLink": "https://github.com/xiezhuo0513/swagger-viewer",
    "package": "@xc_angelwatch/swagger-viewer",
    "description": "An MCP tool for viewing and using Swagger API documents, providing features like auto-loading, real-time monitoring, and code generation.",
    "installCommand": "npx -y @xc_angelwatch/swagger-viewer",
    "requiredEnvVars": [
      "swaggerUrl"
    ],
    "optionalParams": [],
    "usageInstructions": "Initialize the tool with mcp_swagger_initialize(), then use other MCP interfaces to search, generate code, and get all endpoints.",
    "category": "Development"
  },
  "wegene-assistant": {
    "name": "WeGene Assistant MCP Server",
    "githubLink": "https://github.com/xraywu/mcp-wegene-assistant",
    "package": "@xraywu/mcp-wegene-assistant",
    "description": "MCP server for WeGene Assistant, using LLM to analyze genetic testing reports.",
    "installCommand": "npx -y @smithery/cli install @xraywu/mcp-wegene-assistant --client claude",
    "requiredEnvVars": [
      "WEGENE_OPEN_API_KEY",
      "WEGENE_OPEN_API_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "Authorize with WeGene, then use LLM to analyze genetic reports.",
    "category": "API Integration"
  },
  "repomix": {
    "name": "Repomix",
    "githubLink": "https://github.com/yamadashy/repomix",
    "package": "repomix",
    "description": "A tool to pack your codebase into AI-friendly formats for use with Large Language Models (LLMs).",
    "installCommand": "npx repomix@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "--compress",
      "--format",
      "--output",
      "--exclude",
      "--include"
    ],
    "usageInstructions": "Run 'repomix' in your project directory to generate a repomix-output.xml file containing your codebase in AI-friendly format.",
    "category": "Development"
  },
  "mysql": {
    "name": "MySQL Model Context Protocol Server",
    "githubLink": "https://github.com/wwwyo/mysql-mcp",
    "package": "@modelcontextprotocol/inspector",
    "description": "A MySQL Model Context Protocol server for data storage and management.",
    "installCommand": "npx @modelcontextprotocol/inspector node build/index.js",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Copy .env.example to .env, run npm run build, and then start the server with npx @modelcontextprotocol/inspector node build/index.js",
    "category": "Database"
  },
  "trader": {
    "name": "MCP Trader Server",
    "githubLink": "https://github.com/wshobson/mcp-trader",
    "package": "mcp-trader",
    "description": "A simplified Model Context Protocol (MCP) server for stock and cryptocurrency analysis",
    "installCommand": "uv sync",
    "requiredEnvVars": [
      "TIINGO_API_KEY"
    ],
    "optionalParams": [
      "BINANCE_API_KEY",
      "BINANCE_API_SECRET"
    ],
    "usageInstructions": "Run 'uv run mcp-trader' to start the server. Use commands like 'Analyze the technical setup for NVDA' or 'Analyze BTC using Binance data'",
    "category": "API Integration"
  },
  "grpcurl": {
    "name": "MCP Grpcurl",
    "githubLink": "https://github.com/wricardo/grpcurl-mcp",
    "package": "mcp-grpcurl",
    "description": "MCP server for interacting with gRPC services using grpcurl tool, providing features like invoking methods, listing services, and describing service details.",
    "installCommand": "go install github.com/wricardo/mcp-grpcurl@latest",
    "requiredEnvVars": [
      "ADDRESS"
    ],
    "optionalParams": [
      "headers"
    ],
    "usageInstructions": "Run the MCP server with 'mcp-grpc-client' command and use tools like 'invoke', 'list', and 'describe' to interact with gRPC services.",
    "category": "Development"
  },
  "file-converter": {
    "name": "File Converter MCP Server",
    "githubLink": "https://github.com/wowyuarm/file-converter-mcp",
    "package": "mcp",
    "description": "Provides multiple file conversion tools for converting various document and image formats.",
    "installCommand": "pip install mcp docx2pdf pdf2docx pillow pandas pdfkit markdown",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run 'mcp dev file_converter_server.py' to test the server",
    "category": "File Management"
  },
  "textwell": {
    "name": "Textwell Write Tool",
    "githubLink": "https://github.com/worldnine/textwell-mcp",
    "package": "textwell-mcp",
    "description": "MCP server for writing text to Textwell on macOS.",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "mode"
    ],
    "usageInstructions": "Use the write-text tool with replace, insert, or add mode.",
    "category": "Productivity"
  },
  "scrapbox-cosense": {
    "name": "Scrapbox Cosense MCP Server",
    "githubLink": "https://github.com/worldnine/scrapbox-cosense-mcp",
    "package": "scrapbox-cosense-mcp",
    "description": "MCP server for Scrapbox/Cosense, providing features like page content retrieval, page listing, searching, creation, and URL generation.",
    "installCommand": "npx scrapbox-cosense-mcp",
    "requiredEnvVars": [
      "COSENSE_PROJECT_NAME",
      "COSENSE_SID"
    ],
    "optionalParams": [
      "API_DOMAIN",
      "SERVICE_LABEL",
      "COSENSE_PAGE_LIMIT",
      "COSENSE_SORT_METHOD",
      "COSENSE_TOOL_SUFFIX",
      "COSENSE_CONVERT_NUMBERED_LISTS"
    ],
    "usageInstructions": "Configure the server with environment variables and use it with Claude Desktop to access Scrapbox/Cosense features.",
    "category": "Web Scraping"
  },
  "go": {
    "name": "go-mcp",
    "githubLink": "https://github.com/wricardo/go-mcp",
    "package": "github.com/wricardo/go-mcp",
    "description": "Model Context Protocol (MCP) server that provides Go documentation and package listing tools for AI assistants to access official Go documentation and understand codebases.",
    "installCommand": "go install github.com/wricardo/go-mcp@latest",
    "requiredEnvVars": [
      "WORKDIR"
    ],
    "optionalParams": [
      "cmd_flags"
    ],
    "usageInstructions": "Install using 'go install github.com/wricardo/go-mcp@latest'. Configure MCP-compatible assistant with the 'go-mcp' command and set the WORKDIR environment variable to your Go project path. Use 'go_doc' and 'go_list' tools with appropriate parameters to access documentation and package listings.",
    "category": "Development"
  },
  "dingding": {
    "name": "钉钉 MCP 服务",
    "githubLink": "https://github.com/wllcnm/dingding-mcp",
    "package": "dingding-mcp",
    "description": "基于MCP的钉钉服务，提供钉钉API的访问功能。",
    "installCommand": "docker pull ghcr.io/wllcnm/dingding-mcp:latest",
    "requiredEnvVars": [
      "DINGDING_APP_KEY",
      "DINGDING_APP_SECRET"
    ],
    "optionalParams": [
      "fetch_child"
    ],
    "usageInstructions": "配置环境变量后，使用docker运行容器即可使用。",
    "category": "API Integration"
  },
  "wix": {
    "name": "Wix MCP Server",
    "githubLink": "https://github.com/wix/wix-mcp",
    "package": "@wix/mcp-remote",
    "description": "Wix MCP server for integrating Wix tools and services with AI clients",
    "installCommand": "npx -y @wix/mcp-remote https://mcp.wix.com/sse",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure the Wix MCP server in your AI tool using the provided JSON object",
    "category": "API Integration"
  },
  "hotnews": {
    "name": "HotNews MCP Server",
    "githubLink": "https://github.com/wopal-cn/mcp-hotnews-server",
    "package": "@wopal/mcp-server-hotnews",
    "description": "Provides real-time hot trending topics from major Chinese social platforms and news sites via MCP protocol",
    "installCommand": "npx -y @wopal/mcp-server-hotnews",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use the 'get_hot_news' tool with platform ID list as arguments (e.g., [1,3,7]) to fetch hot topics from specified sources",
    "category": "API Integration"
  },
  "osm": {
    "name": "MCP-OSM: OpenStreetMap Integration for MCP",
    "githubLink": "https://github.com/wiseman/osm-mcp",
    "package": "mcp-osm",
    "description": "Provides OpenStreetMap integration for MCP, allowing users to query and visualize map data through an MCP interface.",
    "installCommand": "npx -y mcp-osm",
    "requiredEnvVars": [
      "FLASK_HOST",
      "FLASK_PORT",
      "PGHOST",
      "PGPORT",
      "PGDB",
      "PGUSER",
      "PGPASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Start the MCP server and access the map interface at http://localhost:8889/",
    "category": "Database"
  },
  "wildfly": {
    "name": "WildFly MCP Server",
    "githubLink": "https://github.com/wildfly-extras/wildfly-mcp",
    "package": "wildfly-mcp-server",
    "description": "A WildFly MCP server to integrate with AI chatbots for natural language interaction with WildFly servers.",
    "installCommand": "npx -y wildfly-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Integrate with AI chatbot for natural language interaction with WildFly servers",
    "category": "API Integration"
  },
  "cursor-a11y": {
    "name": "Cursor A11y MCP",
    "githubLink": "https://github.com/westsideori/cursor-a11y-mcp",
    "package": "cursor-a11y-mcp",
    "description": "An MCP server providing accessibility testing capabilities using axe-core and Puppeteer.",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "URL or relative path to test"
    ],
    "usageInstructions": "Start the MCP server with 'npm start' after building with 'npm run build'. Use 'npm run start:test-site' to run the test site at http://localhost:5000.",
    "category": "Development"
  },
  "db-tool": {
    "name": "Database Explorer MCP Tool",
    "githubLink": "https://github.com/wirdes/db-mcp-tool",
    "package": "@wirdes/db-mcp-tool",
    "description": "A Model Context Protocol (MCP) tool for exploring and managing PostgreSQL, MySQL, and Firestore databases with operations like connecting, listing tables, executing queries, and exporting data.",
    "installCommand": "npx -y @wirdes/db-mcp-tool",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Connect to a database using !pg, !mysql, or !firestore with connection details, then use commands like !tables, !query, etc., to manage the database.",
    "category": "Database"
  },
  "webscraping-ai": {
    "name": "WebScraping.AI MCP Server",
    "githubLink": "https://github.com/webscraping-ai/webscraping-ai-mcp-server",
    "package": "webscraping-ai-mcp",
    "description": "A Model Context Protocol (MCP) server implementation that integrates with WebScraping.AI for web data extraction capabilities.",
    "installCommand": "npx -y webscraping-ai-mcp",
    "requiredEnvVars": [
      "WEBSCRAPING_AI_API_KEY"
    ],
    "optionalParams": [
      "WEBSCRAPING_AI_CONCURRENCY_LIMIT",
      "WEBSCRAPING_AI_DEFAULT_PROXY_TYPE",
      "WEBSCRAPING_AI_DEFAULT_JS_RENDERING",
      "WEBSCRAPING_AI_DEFAULT_TIMEOUT",
      "WEBSCRAPING_AI_DEFAULT_JS_TIMEOUT"
    ],
    "usageInstructions": "Run the server with the required environment variable WEBSCRAPING_AI_API_KEY set, and optionally customize behavior with other environment variables.",
    "category": "Web Scraping"
  },
  "waldur": {
    "name": "Waldur MCP Server",
    "githubLink": "https://github.com/waldur/waldur-mcp-server",
    "package": "waldur-mcp-server",
    "description": "Enables integration between Waldur instance and Claude Desktop via Model Context Protocol (MCP).",
    "installCommand": "pip install waldur-mcp-server",
    "requiredEnvVars": [
      "WALDUR_API_URL",
      "WALDUR_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure with Waldur API URL and token, then run the server.",
    "category": "API Integration"
  },
  "websocket": {
    "name": "MCP WebSocket Server",
    "githubLink": "https://github.com/virajsharma2000/mcp-websocket",
    "package": "mcp-sdk",
    "description": "MCP server with WebSocket enhancements for real-time data updates, allowing clients to make standard MCP requests and subscribe for push notifications.",
    "installCommand": "pip install websockets mcp-sdk",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server with 'python server.py', then connect via WebSocket at 'ws://localhost:8765' or send MCP requests to 'http://localhost:8080'.",
    "category": "API Integration"
  },
  "make": {
    "name": "MCP Server Make",
    "githubLink": "https://github.com/wrale/mcp-server-make",
    "package": "mcp-server-make",
    "description": "A Model Context Protocol server enabling LLMs to execute make targets from Makefiles in a safe and controlled manner.",
    "installCommand": "uv pip install mcp-server-make",
    "requiredEnvVars": [],
    "optionalParams": [
      "--make-path",
      "--working-dir"
    ],
    "usageInstructions": "Run the server with 'uvx mcp-server-make' optionally specifying --make-path and --working-dir for custom Makefile locations.",
    "category": "Development"
  },
  "x": {
    "name": "X(Twitter) MCP Server",
    "githubLink": "https://github.com/vidhupv/x-mcp",
    "package": "@smithery/cli",
    "description": "An MCP server to create, manage and publish X/Twitter posts directly through Claude chat.",
    "installCommand": "npx -y @smithery/cli install x-mcp --client claude",
    "requiredEnvVars": [
      "TWITTER_API_KEY",
      "TWITTER_API_SECRET",
      "TWITTER_ACCESS_TOKEN",
      "TWITTER_ACCESS_TOKEN_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "Use commands like 'Tweet \"Just learned how to tweet through AI - mind blown!\"' or 'Create a thread about the history of pizza'",
    "category": "API Integration"
  },
  "gdrive": {
    "name": "Google Drive MCP Server",
    "githubLink": "https://github.com/w-jeon/mcp-gdrive",
    "package": "@modelcontextprotocol/server-gdrive",
    "description": "MCP server integrating with Google Drive for file listing, reading, and searching",
    "installCommand": "npx -y @modelcontextprotocol/server-gdrive",
    "requiredEnvVars": [
      "GDRIVE_OAUTH_PATH",
      "GDRIVE_CREDENTIALS_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Authenticate using 'node ./dist auth' or docker command with auth argument, then configure in app's server configuration",
    "category": "File Management"
  },
  "vectara": {
    "name": "Vectara MCP Server",
    "githubLink": "https://github.com/vectara/vectara-mcp",
    "package": "vectara-mcp",
    "description": "Provides access to fast, reliable RAG with reduced hallucination, powered by Vectara's Trusted RAG platform, through the MCP protocol.",
    "installCommand": "pip install vectara-mcp",
    "requiredEnvVars": [
      "Vectara API key",
      "corpus keys"
    ],
    "optionalParams": [
      "n_sentences_before",
      "n_sentences_after",
      "lexical_interpolation",
      "max_used_search_results",
      "generation_preset_name",
      "response_language"
    ],
    "usageInstructions": "Install Vectara-MCP, configure Claude Desktop, and use ask-vectara and search-vectara tools with Vectara API key and corpus key.",
    "category": "API Integration"
  },
  "valyu-js": {
    "name": "Valyu MCP Server",
    "githubLink": "https://github.com/valyu-network/valyu-mcp-js",
    "package": "@modelcontextprotocol/valyu-mcp-server",
    "description": "A Model Context Protocol server providing access to Valyu's knowledge retrieval and feedback APIs.",
    "installCommand": "docker pull ghcr.io/tiovikram/valyu-mcp-server",
    "requiredEnvVars": [
      "VALYU_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure with VALYU_API_KEY and use Docker to run the server",
    "category": "API Integration"
  },
  "groww": {
    "name": "Groww MCP Server",
    "githubLink": "https://github.com/venkatakaushikvemani/groww-mcp",
    "package": "groww-mcp",
    "description": "An MCP server for interacting with the Groww trading API, allowing portfolio management and market data access.",
    "installCommand": "pnpm dlx groww-mcp",
    "requiredEnvVars": [
      "GROWW_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "Start the server using 'npm start' or 'pnpm start', then use intent-based tools for portfolio, market data, and order management.",
    "category": "API Integration"
  },
  "uiflowchartcreator": {
    "name": "UIFlowchartCreator",
    "githubLink": "https://github.com/umshere/uiflowchartcreator",
    "package": "uiflowchartcreator",
    "description": "MCP server for creating UI flowcharts, helping developers and designers visualize user interfaces and their interactions.",
    "installCommand": "npm install uiflowchartcreator",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add UIFlowchartCreator to your MCP configuration and use its API for flowchart creation.",
    "category": "Development"
  },
  "surfpool": {
    "name": "Surfpool",
    "githubLink": "https://github.com/txtx/surfpool",
    "package": "surfpool",
    "description": "A blazing-fast, developer-friendly simulation of Solana Mainnet that runs seamlessly on your local machine.",
    "installCommand": "brew install txtx/taps/surfpool",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start a local Solana network with: surfpool start",
    "category": "Development"
  },
  "wazuh": {
    "name": "Wazuh MCP Server",
    "githubLink": "https://github.com/gensecaihq/Wazuh-MCP-Server",
    "package": "wazuh-mcp-server",
    "description": "Production-grade Model Context Protocol server for Wazuh security platform integration",
    "installCommand": "pip install -r requirements.txt && pip install -e .",
    "requiredEnvVars": [
      "WAZUH_HOST",
      "WAZUH_USER",
      "WAZUH_PASS",
      "VERIFY_SSL"
    ],
    "optionalParams": [
      "--stdio"
    ],
    "usageInstructions": "Configure .env file with Wazuh credentials, then run python wazuh_mcp_server.py --stdio",
    "category": "Security"
  },
  "interactive": {
    "name": "Interactive MCP Server",
    "githubLink": "https://github.com/ttommyth/interactive-mcp",
    "package": "interactive-mcp",
    "description": "A Node.js/TypeScript MCP Server facilitating interactive communication between LLMs and users, enabling features like user input prompts, OS notifications, and command-line chat sessions.",
    "installCommand": "npx -y interactive-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "-t",
      "--disable-tools"
    ],
    "usageInstructions": "Configure your MCP client to use this server, then run the server locally to enable interactive features.",
    "category": "Development"
  },
  "shell": {
    "name": "MCP Shell Server",
    "githubLink": "https://github.com/tumf/mcp-shell-server",
    "package": "mcp-shell-server",
    "description": "A secure shell command execution server implementing the Model Context Protocol (MCP)",
    "installCommand": "pip install mcp-shell-server",
    "requiredEnvVars": [
      "ALLOW_COMMANDS"
    ],
    "optionalParams": [
      "stdin",
      "directory",
      "timeout"
    ],
    "usageInstructions": "Set ALLOW_COMMANDS environment variable with allowed commands, then run 'uvx mcp-shell-server'",
    "category": "Development"
  },
  "vertexai-search": {
    "name": "MCP Server for Vertex AI Search",
    "githubLink": "https://github.com/ubie-oss/mcp-vertexai-search",
    "package": "git+https://github.com/ubie-oss/mcp-vertexai-search.git",
    "description": "An MCP server that enables document search using Vertex AI with Gemini grounding for improved result quality.",
    "installCommand": "pip install git+https://github.com/ubie-oss/mcp-vertexai-search.git",
    "requiredEnvVars": [],
    "optionalParams": [
      "--transport"
    ],
    "usageInstructions": "Install the package, create a config.yml based on the template, then run 'mcp-vertexai-search serve --config config.yml --transport <stdio|sse>' to start the server.",
    "category": "API Integration"
  },
  "facebook-ads-library": {
    "name": "Facebook Ads Library MCP Server",
    "githubLink": "https://github.com/trypeggy/facebook-ads-library-mcp",
    "package": "@trypeggy/facebook-ads-library-mcp",
    "description": "A Model Context Protocol (MCP) server for searching Facebook's public ads library and analyzing company advertising strategies.",
    "installCommand": "npx -y @smithery/cli install @trypeggy/facebook-ads-library-mcp --client claude",
    "requiredEnvVars": [
      "SCRAPECREATORS_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Connect to the MCP server with Scrape Creators API token and use with Claude Desktop or Cursor.",
    "category": "API Integration"
  },
  "variance-log": {
    "name": "MCP Variance Log",
    "githubLink": "https://github.com/truaxki/mcp-variance-log",
    "package": "mcp-variance-log",
    "description": "Agentic tool that logs unusual conversation patterns to a SQLite database using Model Context Protocol (MCP)",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Clone repository, install using 'uv pip install -e .', configure Claude Desktop to use the server",
    "category": "Analytics"
  },
  "pdf2png": {
    "name": "PDF to PNG MCP Server",
    "githubLink": "https://github.com/truaxki/mcp-Pdf2png",
    "package": "mcp-Pdf2png",
    "description": "A Model Context Protocol (MCP) server that provides PDF to PNG conversion capabilities.",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [
      "uv",
      "poppler"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure MCP Client, then use the pdf2png tool with read_file_path and write_folder_path parameters.",
    "category": "Media"
  },
  "lara": {
    "name": "Lara Translate MCP Server",
    "githubLink": "https://github.com/translated/lara-mcp",
    "package": "@translated/lara-mcp",
    "description": "A Model Context Protocol (MCP) Server for Lara Translate API, enabling powerful translation capabilities with support for language detection, context-aware translations and translation memories.",
    "installCommand": "npx -y @translated/lara-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Connect AI applications to Lara Translate's API for translation capabilities through the standardized Model Context Protocol.",
    "category": "API Integration"
  },
  "pdf-reader": {
    "name": "PDF Reader MCP Server",
    "githubLink": "https://github.com/trafflux/pdf-reader-mcp",
    "package": "mcp/pdf-reader",
    "description": "An MCP server for reading and extracting text from PDF files, supporting both local files and URLs.",
    "installCommand": "docker build -t mcp/pdf-reader .",
    "requiredEnvVars": [],
    "optionalParams": [
      "/path/to/pdfs"
    ],
    "usageInstructions": "Run with 'docker run -i --rm -v /path/to/pdfs:/pdfs mcp/pdf-reader' for local PDFs or 'docker run -i --rm mcp/pdf-reader' for URLs.",
    "category": "File Management"
  },
  "memory-cache": {
    "name": "Memory Cache Server",
    "githubLink": "https://github.com/tosin2013/mcp-memory-cache-server",
    "package": "@tosin2013/mcp-memory-cache-server",
    "description": "A Model Context Protocol (MCP) server that reduces token consumption by efficiently caching data between language model interactions.",
    "installCommand": "npx -y @smithery/cli install @tosin2013/mcp-memory-cache-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "MAX_ENTRIES",
      "MAX_MEMORY",
      "DEFAULT_TTL",
      "CHECK_INTERVAL",
      "STATS_INTERVAL",
      "CONFIG_PATH"
    ],
    "usageInstructions": "Install and configure the server, then use your MCP client to interact with any language model that uses tokens.",
    "category": "Data Storage"
  },
  "cognee": {
    "name": "Cognee",
    "githubLink": "https://github.com/topoteretes/cognee",
    "package": "cognee",
    "description": "Provides memory for AI agents using scalable ECL (Extract, Cognify, Load) pipelines to replace RAG systems and interconnect conversations, documents, and media.",
    "installCommand": "pip install cognee",
    "requiredEnvVars": [
      "LLM_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Import the package, set the LLM_API_KEY environment variable, and use add(), cognify(), and search() methods to process and query data.",
    "category": "Analytics"
  },
  "strava": {
    "name": "Strava MCP Server",
    "githubLink": "https://github.com/tomekkorbak/strava-mcp-server",
    "package": "strava-mcp-server",
    "description": "An MCP server providing access to Strava API for athlete activities data",
    "installCommand": "uvx strava-mcp-server",
    "requiredEnvVars": [
      "STRAVA_CLIENT_ID",
      "STRAVA_CLIENT_SECRET",
      "STRAVA_REFRESH_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Set required environment variables, then run 'uvx strava-mcp-server'. Configure Claude for Desktop or use Claude Web with MCP extension",
    "category": "API Integration"
  },
  "claude-data-explorer": {
    "name": "Claude MCP Data Explorer for Windows",
    "githubLink": "https://github.com/tofunori/claude-mcp-data-explorer",
    "package": "claude-mcp-data-explorer",
    "description": "A TypeScript implementation of a Model Context Protocol (MCP) server for data exploration with Claude.",
    "installCommand": "git clone https://github.com/tofunori/claude-mcp-data-explorer.git && cd claude-mcp-data-explorer && npm install && npm run setup",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start Claude Desktop, select the 'Explore Data' prompt template, enter CSV file path and exploration topic, and let Claude analyze your data.",
    "category": "Data Storage"
  },
  "toolhouse": {
    "name": "Toolhouse MCP Server",
    "githubLink": "https://github.com/toolhouse-community/mcp-server-toolhouse",
    "package": "mcp-server-toolhouse",
    "description": "Connects MCP clients with Toolhouse's tools for enhanced AI capabilities.",
    "installCommand": "git clone https://github.com/toolhouse-community/mcp-server-toolhouse.git",
    "requiredEnvVars": [
      "TOOLHOUSE_API_KEY",
      "TOOLHOUSE_BUNDLE"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure MCP client with server details and environment variables.",
    "category": "API Integration"
  },
  "tinybird": {
    "name": "Tinybird MCP server",
    "githubLink": "https://github.com/tinybirdco/mcp-tinybird",
    "package": "mcp-tinybird",
    "description": "An MCP server to interact with a Tinybird Workspace from any MCP client",
    "installCommand": "npx @michaellatman/mcp-get@latest install mcp-tinybird",
    "requiredEnvVars": [
      "TB_API_URL",
      "TB_ADMIN_TOKEN"
    ],
    "optionalParams": [
      "topic"
    ],
    "usageInstructions": "Configure Claude Desktop and set TB_API_URL and TB_ADMIN_TOKEN environment variables",
    "category": "Data Storage"
  },
  "terraform": {
    "name": "Terraform Registry MCP Server",
    "githubLink": "https://github.com/thrashr888/terraform-mcp-server",
    "package": "terraform-mcp-server",
    "description": "A Model Context Protocol (MCP) server that provides tools for interacting with the Terraform Registry API.",
    "installCommand": "npx -y terraform-mcp-server",
    "requiredEnvVars": [
      "TFC_TOKEN"
    ],
    "optionalParams": [
      "TERRAFORM_REGISTRY_URL",
      "DEFAULT_PROVIDER_NAMESPACE",
      "LOG_LEVEL",
      "REQUEST_TIMEOUT_MS",
      "RATE_LIMIT_ENABLED",
      "RATE_LIMIT_REQUESTS",
      "RATE_LIMIT_WINDOW_MS"
    ],
    "usageInstructions": "Install and configure the MCP server to interact with the Terraform Registry API and Terraform Cloud.",
    "category": "Development"
  },
  "youtube-transcripts": {
    "name": "YouTube Transcript Extractor",
    "githubLink": "https://github.com/tlofreso/mcp-youtube-transcripts",
    "package": "mcp-youtube-transcripts",
    "description": "Extracts YouTube video transcripts with support for multiple URL formats and optional timestamp inclusion",
    "installCommand": "git clone https://github.com/tlofreso/mcp-youtube-transcripts.git",
    "requiredEnvVars": [],
    "optionalParams": [
      "--output",
      "--timestamps",
      "--no-timestamps"
    ],
    "usageInstructions": "Run 'python youtube_transcript.py <youtube-url>' with optional parameters like --output and --timestamps",
    "category": "Web Scraping"
  },
  "ai": {
    "name": "thirdweb AI",
    "githubLink": "https://github.com/thirdweb-dev/ai",
    "package": "thirdweb-mcp",
    "description": "A comprehensive toolkit for blockchain data analysis, wallet management, and AI agent interaction with blockchains.",
    "installCommand": "pipx install thirdweb-mcp",
    "requiredEnvVars": [
      "THIRDWEB_SECRET_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Install via pipx, set the THIRDWEB_SECRET_KEY environment variable, and run the thirdweb-mcp command to start the server.",
    "category": "Development"
  },
  "ietf": {
    "name": "MCP-Server-IETF",
    "githubLink": "https://github.com/tizee/mcp-server-ietf",
    "package": "mcp-server-ietf",
    "description": "A Model Context Protocol server for fetching IETF documents (RFCs) for Large Language Models.",
    "installCommand": "pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "LOG_LEVEL"
    ],
    "usageInstructions": "Start the server with 'mcp-server-ietf' or use with MCP inspector: 'npx @modelcontextprotocol/inspector uv run mcp-server-ietf'",
    "category": "API Integration"
  },
  "homeassistant": {
    "name": "Home Assistant MCP Server",
    "githubLink": "https://github.com/tevonsb/homeassistant-mcp",
    "package": "homeassistant-mcp",
    "description": "A powerful bridge between Home Assistant and Language Learning Models (LLMs) using the Model Context Protocol (MCP)",
    "installCommand": "npx -y homeassistant-mcp",
    "requiredEnvVars": [
      "HASS_HOST",
      "HASS_TOKEN",
      "HASS_SOCKET_URL"
    ],
    "optionalParams": [
      "PORT",
      "NODE_ENV",
      "DEBUG"
    ],
    "usageInstructions": "Configure environment variables in .env file, then run with Docker Compose or npm start",
    "category": "API Integration"
  },
  "squad": {
    "name": "Squad MCP Server",
    "githubLink": "https://github.com/the-basilisk-ai/squad-mcp",
    "package": "@squadai/tools",
    "description": "A Model Context Protocol (MCP) server connecting Squad AI to large-language-model applications, enabling product discovery and strategy planning.",
    "installCommand": "npm install @squadai/tools",
    "requiredEnvVars": [
      "SQUAD_API_KEY"
    ],
    "optionalParams": [
      "SQUAD_ENV"
    ],
    "usageInstructions": "Obtain a Squad API key, then run the server using your preferred installation method (standalone, Docker, or from source).",
    "category": "API Integration"
  },
  "smartsheet": {
    "name": "Smartsheet MCP Server",
    "githubLink": "https://github.com/terilios/smartsheet-server",
    "package": "smartsheet-server",
    "description": "A Model Context Protocol (MCP) server that provides seamless integration with Smartsheet, enabling automated operations on Smartsheet documents through a standardized interface.",
    "installCommand": "npx -y smartsheet-server",
    "requiredEnvVars": [
      "SMARTSHEET_API_KEY",
      "MCP_SERVER_PORT"
    ],
    "optionalParams": [
      "LOCAL_DEV_TOOLS",
      "MONITORING_SYSTEM"
    ],
    "usageInstructions": "Use this server to integrate AI-powered automation tools with Smartsheet's collaboration platform, enabling automated operations on Smartsheet documents.",
    "category": "API Integration"
  },
  "ip-geolocator": {
    "name": "MCP IP Geolocation Server",
    "githubLink": "https://github.com/tedlikeskix/mcp-ip-geolocator",
    "package": "mcp-ip-geolocator",
    "description": "Provides IP geolocation services via IP-API.com, offering detailed location information, network data, and timezone information for any IP address.",
    "installCommand": "npm install -g mcp-ip-geolocator",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Connect to the server in Claude Desktop and ask for IP address location information.",
    "category": "API Integration"
  },
  "alpaca": {
    "name": "Alpaca MCP Server",
    "githubLink": "https://github.com/tedlikeskix/alpaca-mcp-server",
    "package": "alpaca-py",
    "description": "MCP server for interacting with Alpaca trading API through natural language",
    "installCommand": "pip install mcp alpaca-py python-dotenv",
    "requiredEnvVars": [
      "API_KEY_ID",
      "API_SECRET_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Start server by running: python alpaca_mcp_server.py",
    "category": "API Integration"
  },
  "tecton": {
    "name": "Tecton MCP Server & Cursor Rules",
    "githubLink": "https://github.com/tecton-ai/tecton-mcp",
    "package": "tecton-mcp",
    "description": "Tecton's Co-Pilot integrates with LLM-powered editors like Cursor to provide tool-based context and assistance for feature engineering.",
    "installCommand": "git clone https://github.com/tecton-ai/tecton-mcp.git && brew install uv",
    "requiredEnvVars": [
      "TECTON_API_KEY"
    ],
    "optionalParams": [
      "MCP_SMOKE_TEST"
    ],
    "usageInstructions": "Configure Cursor with the Tecton MCP server and start developing features with Tecton's Co-Pilot.",
    "category": "Development"
  },
  "bart": {
    "name": "BART MCP Server",
    "githubLink": "https://github.com/tchbw/bart-mcp",
    "package": "bart-mcp",
    "description": "A simple MCP server for accessing BART departures data.",
    "installCommand": "npm install bart-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use the server to fetch BART departures data",
    "category": "API Integration"
  },
  "cursor-rust-tools": {
    "name": "Cursor Rust Tools",
    "githubLink": "https://github.com/terhechte/cursor-rust-tools",
    "package": "cursor-rust-tools",
    "description": "MCP server enabling Cursor's LLM to access Rust Analyzer, Crate Docs, and Cargo commands for type information, documentation, and project analysis",
    "installCommand": "cargo install --git https://github.com/terhechte/cursor-rust-tools",
    "requiredEnvVars": [],
    "optionalParams": [
      "--no-ui"
    ],
    "usageInstructions": "Run with `cursor-rust-tools` to launch the UI for project configuration, or use `cursor-rust-tools --no-ui` with a pre-configured `~/.cursor-rust-tools` TOML file. Add `mcp.json` to projects to enable integration with Cursor's AI.",
    "category": "Development"
  },
  "github-projects": {
    "name": "GitHub Projects MCP Server",
    "githubLink": "https://github.com/taylor-lindores-reeves/mcp-github-projects",
    "package": "@smithery/cli",
    "description": "An MCP server that enables AI agents to create and manage Agile Sprint-based projects using GitHub Projects.",
    "installCommand": "npx -y @smithery/cli install taylor-lindores-reeves/mcp-github-projects --client claude",
    "requiredEnvVars": [
      "GITHUB_TOKEN",
      "GITHUB_OWNER"
    ],
    "optionalParams": [
      "GITHUB_OWNER_TYPE",
      "ALLOWED_REPOS"
    ],
    "usageInstructions": "Create a .env file with required environment variables, then run 'bun install' and 'bun run build'",
    "category": "Version Control"
  },
  "tavily": {
    "name": "Tavily MCP Server",
    "githubLink": "https://github.com/tavily-ai/tavily-mcp",
    "package": "tavily-mcp",
    "description": "The Tavily MCP server provides search, extract, map, crawl tools and real-time web search capabilities through the tavily-search tool.",
    "installCommand": "npx -y tavily-mcp@latest",
    "requiredEnvVars": [
      "TAVILY_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Integrate with Claude Desktop, VS Code, or Cursor to use the tavily-mcp server.",
    "category": "Web Scraping"
  },
  "diff-python": {
    "name": "MCP Server Diff Python",
    "githubLink": "https://github.com/tatn/mcp-server-diff-python",
    "package": "mcp-server-diff-python",
    "description": "An MCP server for obtaining text differences between two strings using Python's difflib.",
    "installCommand": "git clone https://github.com/tatn/mcp-server-diff-python.git && cd mcp-server-diff-python && uv sync && uv build",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure the server in Claude Desktop using the provided JSON configuration.",
    "category": "Development"
  },
  "u301": {
    "name": "U301 URL Shortener MCP Server",
    "githubLink": "https://github.com/tealight-uk/u301-mcp",
    "package": "@u301/mcp",
    "description": "A URL shortening service using MCP Server that requires a U301 API key for creating short URLs.",
    "installCommand": "npx -y @u301/mcp",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "slug",
      "expires",
      "password",
      "comment"
    ],
    "usageInstructions": "Create an API key in U301 Dashboard, configure the server with the API_KEY environment variable, and use it to shorten URLs via MCP commands.",
    "category": "Other"
  },
  "perplexity": {
    "name": "Perplexity MCP Server",
    "githubLink": "https://github.com/tanigami/mcp-server-perplexity",
    "package": "mcp-server-perplexity",
    "description": "MCP Server for the Perplexity API providing chat completion with citations",
    "installCommand": "uvx mcp-server-perplexity",
    "requiredEnvVars": [
      "PERPLEXITY_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure in Claude Desktop config file with PERPLEXITY_API_KEY",
    "category": "API Integration"
  },
  "usescraper": {
    "name": "UseScraper MCP Server",
    "githubLink": "https://github.com/tanevanwifferen/usescraper-mcp-server",
    "package": "usescraper-server",
    "description": "A TypeScript-based MCP server providing web scraping capabilities using the UseScraper API.",
    "installCommand": "npx -y @smithery/cli install usescraper-server --client claude",
    "requiredEnvVars": [
      "USESCRAPER_API_KEY"
    ],
    "optionalParams": [
      "format",
      "advanced_proxy",
      "extract_object"
    ],
    "usageInstructions": "Use the 'scrape' tool through the MCP interface, providing the URL and optional format, advanced proxy, and extract object parameters.",
    "category": "Web Scraping"
  },
  "ssh-rails-runner": {
    "name": "MCP Server: SSH Rails Runner",
    "githubLink": "https://github.com/tadasant/mcp-server-ssh-rails-runner",
    "package": "mcp-server-ssh-rails-runner",
    "description": "Enables secure remote execution of Rails console commands via SSH.",
    "installCommand": "npm install mcp-server-ssh-rails-runner",
    "requiredEnvVars": [
      "SSH_HOST",
      "SSH_USER",
      "SSH_PRIVATE_KEY_PATH",
      "RAILS_WORKING_DIR"
    ],
    "optionalParams": [
      "PROJECT_NAME_AS_CONTEXT",
      "CODE_SNIPPET_FILE_DIRECTORY"
    ],
    "usageInstructions": "Configure with environment variables and use with Claude Desktop or other MCP clients.",
    "category": "Development"
  },
  "ts-introspect": {
    "name": "TypeScript Package Introspector",
    "githubLink": "https://github.com/t3ta/ts-introspect-mcp-server",
    "package": "ts-introspect-mcp-server",
    "description": "Introspects TypeScript packages and source code to extract exported symbols and their type information",
    "installCommand": "npx ts-introspect-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "packageName",
      "source"
    ],
    "usageInstructions": "Run using 'npx ts-introspect-mcp-server' and configure in .roo/mcp.json",
    "category": "Development"
  },
  "cgv": {
    "name": "CGV Cinema API Client",
    "githubLink": "https://github.com/t-rekttt/cgv-mcp",
    "package": "cgv-mcp",
    "description": "A Python client for interacting with CGV Cinema's mobile API, providing access to movie listings, cinema locations, seat maps, and booking capabilities.",
    "installCommand": "pip install cgv-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use this client to access CGV Cinema's mobile API and retrieve information on movie listings, cinema locations, and more.",
    "category": "API Integration"
  },
  "claude-chatgpt": {
    "name": "Claude ChatGPT MCP Tool",
    "githubLink": "https://github.com/syedazharmbnr1/claude-chatgpt-mcp",
    "package": "claude-chatgpt-mcp",
    "description": "A Model Context Protocol (MCP) tool that allows Claude to interact with the ChatGPT desktop app on macOS.",
    "installCommand": "npx claude-chatgpt-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use the ChatGPT tool directly from Claude by asking questions like 'Can you ask ChatGPT what the capital of France is?'",
    "category": "API Integration"
  },
  "paradex-py": {
    "name": "MCP Paradex Server",
    "githubLink": "https://github.com/sv/mcp-paradex-py",
    "package": "@sv/mcp-paradex-py",
    "description": "MCP server implementation for Paradex trading platform, enabling AI assistants to interact with Paradex market data and trading accounts.",
    "installCommand": "npx -y @smithery/cli install @sv/mcp-paradex-py --client claude",
    "requiredEnvVars": [
      "PARADEX_ENVIRONMENT",
      "PARADEX_ACCOUNT_PRIVATE_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Set PARADEX_ENVIRONMENT and PARADEX_ACCOUNT_PRIVATE_KEY environment variables, then run 'uvx mcp-paradex' to start the server.",
    "category": "API Integration"
  },
  "redash": {
    "name": "Redash MCP Server",
    "githubLink": "https://github.com/suthio/redash-mcp",
    "package": "@suthio/redash-mcp",
    "description": "MCP server for integrating Redash with AI assistants like Claude, providing query management and execution capabilities.",
    "installCommand": "npx -y @suthio/redash-mcp",
    "requiredEnvVars": [
      "REDASH_URL",
      "REDASH_API_KEY"
    ],
    "optionalParams": [
      "REDASH_TIMEOUT",
      "REDASH_MAX_RESULTS"
    ],
    "usageInstructions": "Configure the server with Redash API key and URL, then start the server with 'npm start'.",
    "category": "API Integration"
  },
  "upload-file": {
    "name": "MCP Upload File Server",
    "githubLink": "https://github.com/sujianqingfeng/mcp-upload-file",
    "package": "mcp-upload-file",
    "description": "A file upload service based on Model Context Protocol (MCP).",
    "installCommand": "npx -y mcp-upload-file@latest",
    "requiredEnvVars": [
      "UPLOAD_URL",
      "FILE_KEY"
    ],
    "optionalParams": [
      "FILE_NAME",
      "EXTRA_FORM"
    ],
    "usageInstructions": "Add configuration to MCP config file and set required environment variables.",
    "category": "File Management"
  },
  "k8s-go": {
    "name": "MCP K8S Go",
    "githubLink": "https://github.com/strowk/mcp-k8s-go",
    "package": "@strowk/mcp-k8s",
    "description": "Golang-based MCP server connecting to Kubernetes, enabling interactions with Kubernetes resources",
    "installCommand": "npx -y @smithery/cli install @strowk/mcp-k8s --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "--allowed-contexts",
      "--readonly",
      "--help",
      "--version"
    ],
    "usageInstructions": "Use with Claude Desktop or other MCP clients by configuring the server in claude_desktop_config.json",
    "category": "Development"
  },
  "imagesorcery": {
    "name": "ImageSorcery MCP",
    "githubLink": "https://github.com/sunriseapps/imagesorcery-mcp",
    "package": "imagesorcery-mcp",
    "description": "Empowers AI assistants with local image processing capabilities including cropping, OCR, object detection, and more using computer vision tools.",
    "installCommand": "pip install imagesorcery-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "1. Create and activate a Python virtual environment. 2. Install with `pip install imagesorcery-mcp`. 3. Run `imagesorcery-mcp --post-install` to download models. 4. Configure MCP client to use the server.",
    "category": "Media"
  },
  "beeminder": {
    "name": "MCP Beeminder Server",
    "githubLink": "https://github.com/strickvl/mcp-beeminder",
    "package": "mcp-beeminder",
    "description": "MCP server for interacting with the Beeminder API, enabling AI assistants to manage Beeminder goals and datapoints.",
    "installCommand": "npx mcp-beeminder",
    "requiredEnvVars": [
      "BEEMINDER_API_KEY",
      "BEEMINDER_USERNAME"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server with your Beeminder API key and username, then use Claude Desktop app to interact with Beeminder goals and datapoints.",
    "category": "API Integration"
  },
  "semgrep": {
    "name": "Semgrep Server",
    "githubLink": "https://github.com/stefanskiasan/semgrep-mcp-server",
    "package": "semgrep-mcp-server",
    "description": "A Model Context Protocol (MCP) server for integrating Semgrep into development environments, enabling static code analysis and Semgrep rule management.",
    "installCommand": "npm install semgrep-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server with 'npm start' for production or 'npm run dev' for development mode.",
    "category": "Development"
  },
  "steel": {
    "name": "Steel MCP Server",
    "githubLink": "https://github.com/steel-dev/steel-mcp-server",
    "package": "@steel-dev/steel-mcp-server",
    "description": "An MCP server enabling LLMs to navigate the web through Puppeteer-based tools and Steel integration",
    "installCommand": "npx @steel-dev/steel-mcp-server",
    "requiredEnvVars": [
      "STEEL_API_KEY",
      "STEEL_LOCAL"
    ],
    "optionalParams": [
      "STEEL_BASE_URL",
      "GLOBAL_WAIT_SECONDS"
    ],
    "usageInstructions": "Configure Claude Desktop by adding a server entry to claude_desktop_config.json, then start Claude Desktop to launch the MCP server",
    "category": "Browser Automation"
  },
  "svelte-docs": {
    "name": "mcp-svelte-docs",
    "githubLink": "https://github.com/spences10/mcp-svelte-docs",
    "package": "mcp-svelte-docs",
    "description": "A Model Context Protocol (MCP) server providing a comprehensive reference guide for Svelte5, including migration patterns and best practices.",
    "installCommand": "npx -y mcp-svelte-docs",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use the MCP server to provide accurate guidance for Svelte5 development",
    "category": "Development"
  },
  "sequentialthinking-tools": {
    "name": "MCP Sequential Thinking Tools",
    "githubLink": "https://github.com/spences10/mcp-sequentialthinking-tools",
    "package": "mcp-sequentialthinking-tools",
    "description": "An MCP server that guides tool usage in problem-solving through sequential thinking and intelligent tool recommendations.",
    "installCommand": "npx -y mcp-sequentialthinking-tools",
    "requiredEnvVars": [],
    "optionalParams": [
      "is_revision",
      "revises_thought",
      "branch_from_thought",
      "branch_id",
      "needs_more_thoughts",
      "current_step",
      "previous_steps",
      "remaining_steps"
    ],
    "usageInstructions": "Configure the server through your MCP client settings, then use the 'sequentialthinking_tools' tool with required parameters: thought, next_thought_needed, thought_number, and total_thoughts.",
    "category": "Productivity"
  },
  "perplexity-search": {
    "name": "mcp-perplexity-search",
    "githubLink": "https://github.com/spences10/mcp-perplexity-search",
    "package": "mcp-perplexity-search",
    "description": "MCP server integrating Perplexity's AI API with LLMs for advanced chat completion capabilities with specialized prompt templates.",
    "installCommand": "npx -y mcp-perplexity-search",
    "requiredEnvVars": [
      "PERPLEXITY_API_KEY"
    ],
    "optionalParams": [
      "prompt_template",
      "custom_template",
      "format",
      "include_sources",
      "model",
      "temperature",
      "max_tokens"
    ],
    "usageInstructions": "Configure through your MCP client and provide required environment variables.",
    "category": "API Integration"
  },
  "chain-of-draft": {
    "name": "Chain of Draft (CoD) MCP Server",
    "githubLink": "https://github.com/stat-guy/chain-of-draft",
    "package": "chain-of-draft",
    "description": "MCP server implementing the Chain of Draft reasoning approach for efficient and accurate problem-solving",
    "installCommand": "npx -y chain-of-draft",
    "requiredEnvVars": [
      "ANTHROPIC_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Clone the repository, install dependencies, configure API keys, and run the server",
    "category": "Development"
  },
  "project-orchestrator": {
    "name": "MCP Project Orchestrator",
    "githubLink": "https://github.com/sparesparrow/mcp-project-orchestrator",
    "package": "mcp-project-orchestrator",
    "description": "A comprehensive project orchestration tool for managing Model Context Protocol (MCP) projects, templates, prompts, and Mermaid diagrams.",
    "installCommand": "pip install mcp-project-orchestrator",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Initialize managers for templates, prompts, or Mermaid diagrams using classes like TemplateManager, PromptManager, or MermaidGenerator",
    "category": "Development"
  },
  "prompts": {
    "name": "MCP Prompts Server",
    "githubLink": "https://github.com/sparesparrow/mcp-prompts",
    "package": "@sparesparrow/mcp-prompts",
    "description": "A robust server for managing, versioning, and serving prompts and templates for LLM applications.",
    "installCommand": "npx -y @sparesparrow/mcp-prompts",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run with NPX or Docker, then access via HTTP endpoints",
    "category": "API Integration"
  },
  "excel-reader": {
    "name": "Excel Reader Server",
    "githubLink": "https://github.com/softgridinc-pte-ltd/mcp-excel-reader-server",
    "package": "excel-reader-server",
    "description": "A Model Context Protocol (MCP) server for reading Excel (xlsx) files.",
    "installCommand": "pip install excel-reader-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use tools like read_excel, read_excel_by_sheet_name, read_excel_by_sheet_index to read Excel files.",
    "category": "File Management"
  },
  "s3": {
    "name": "S3 Tools MCP Server",
    "githubLink": "https://github.com/sofianhamiti/mcp-server-s3",
    "package": "s3-tools",
    "description": "An MCP server providing tools for interacting with AWS S3 buckets",
    "installCommand": "uvx install s3-tools",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY"
    ],
    "optionalParams": [
      "region"
    ],
    "usageInstructions": "Configure AWS credentials and install using 'uvx install s3-tools', then add to Claude Desktop config",
    "category": "Data Storage"
  },
  "youtube": {
    "name": "Youtube MCP server",
    "githubLink": "https://github.com/sparfenyuk/mcp-youtube",
    "package": "mcp-youtube",
    "description": "A Model Context Protocol server connecting YouTube API with AI assistants for downloading video captions and generating summaries.",
    "installCommand": "uv tool install git+https://github.com/sparfenyuk/mcp-youtube",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Install via 'uv tool install', configure Claude Desktop with server details in claude_desktop_config.json, and ensure the server is running.",
    "category": "API Integration"
  },
  "pdf": {
    "name": "PDF MCP Server",
    "githubLink": "https://github.com/sirix-v/pdf-mcp-server",
    "package": "pdf-mcp-server",
    "description": "A Model Context Protocol (MCP) server for reading papers in a local specified directory.",
    "installCommand": "go build -o pdf-mcp-server main.go",
    "requiredEnvVars": [],
    "optionalParams": [
      "pdfdir"
    ],
    "usageInstructions": "Start the server with -pdfdir option, e.g., pdf-mcp-server -pdfdir=/path/to/papers",
    "category": "File Management"
  },
  "worldpay": {
    "name": "Worldpay MCP Server",
    "githubLink": "https://github.com/simonwfarrow/worldpay-mcp",
    "package": "worldpay-mcp",
    "description": "MCP server for Worldpay APIs, enabling payment processing and queries",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "WORLDPAY_USERNAME",
      "WORLDPAY_PASSWORD"
    ],
    "optionalParams": [
      "checkoutId",
      "framework",
      "method",
      "instrument",
      "language",
      "startDate",
      "endDate",
      "pageSize",
      "currency",
      "minAmount",
      "maxAmount",
      "last4Digits",
      "entityReferences",
      "receivedEvents"
    ],
    "usageInstructions": "Run 'npm run build' to build server distributions, then start with 'node dist/server-sse.js' for SSE transport",
    "category": "API Integration"
  },
  "nebius": {
    "name": "mcp-nebius",
    "githubLink": "https://github.com/shivaylamba/mcp-nebius",
    "package": "mcp-nebius",
    "description": "A Model Context Protocol (MCP) server",
    "installCommand": "npm install mcp-nebius",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Follow the GitHub repository instructions",
    "category": "Other"
  },
  "tidb-ai": {
    "name": "TiDB AI MCP Server",
    "githubLink": "https://github.com/siddontang/tidb-ai-mcp",
    "package": "github.com/siddontang/tidb-ai-mcp",
    "description": "A Model Control Protocol (MCP) server enabling Cursor to interact with TiDB AI via stdio transport.",
    "installCommand": "go get github.com/siddontang/tidb-ai-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Build with 'go build -o tidb-ai-mcp' then run './tidb-ai-mcp' to start the server. Configure Cursor to use the binary as a stdio transport tool.",
    "category": "Other"
  },
  "cargo-doc": {
    "name": "Cargo Doc MCP Server",
    "githubLink": "https://github.com/spacemeowx2/cargo-doc-mcp",
    "package": "cargo-doc-mcp",
    "description": "A MCP server for managing Rust documentation through cargo doc commands, providing tools to check, build, and search Rust documentation locally.",
    "installCommand": "pnpm install && pnpm run build",
    "requiredEnvVars": [
      "NODE_OPTIONS",
      "RUSTUP_HOME"
    ],
    "optionalParams": [
      "limit"
    ],
    "usageInstructions": "Add the server configuration to your MCP settings and run the server with the provided command.",
    "category": "Development"
  },
  "imessage": {
    "name": "MCP Server for iMessage",
    "githubLink": "https://github.com/shirhatti/mcp-server-imessage",
    "package": "mcp-server-imessage",
    "description": "MCP server for iMessage integration",
    "installCommand": "npx -y mcp-server-imessage",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run the server and use it to send and receive iMessages",
    "category": "Communication"
  },
  "couchbase": {
    "name": "Couchbase Model Context Protocol Server",
    "githubLink": "https://github.com/shivay-couchbase/couchbase-mcp",
    "package": "couchbase-mcp",
    "description": "MCP server providing semantic search for Star Wars planets using Couchbase vector search",
    "installCommand": "npm install couchbase-mcp",
    "requiredEnvVars": [
      "COUCHBASE_URL",
      "COUCHBASE_USERNAME",
      "COUCHBASE_PASSWORD",
      "COUCHBASE_BUCKET",
      "COUCHBASE_SCOPE",
      "COUCHBASE_COLLECTION"
    ],
    "optionalParams": [],
    "usageInstructions": "Start server with 'npm start', then interact via stdin/stdout with MCP requests",
    "category": "Database"
  },
  "postman": {
    "name": "Postman MCP Server",
    "githubLink": "https://github.com/shannonlal/mcp-postman",
    "package": "mcp-postman",
    "description": "An MCP server that enables running Postman collections using Newman, allowing LLMs to execute API tests and get detailed results through a standardized interface.",
    "installCommand": "npx -y @smithery/cli install mcp-postman --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "collection",
      "environment",
      "globals",
      "iterationCount"
    ],
    "usageInstructions": "Add the server to your Claude desktop configuration file and use the run-collection tool to run a Postman collection.",
    "category": "API Integration"
  },
  "github-pr": {
    "name": "GitHub PR Comments MCP Server",
    "githubLink": "https://github.com/shaileshahuja/github-pr-mcp",
    "package": "github-pr-mcp",
    "description": "An MCP server that fetches GitHub Pull Request comments using a GitHub personal access token.",
    "installCommand": "npx -y @smithery/cli install github-pr-mcp --client claude",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "owner",
      "repo",
      "pull_number"
    ],
    "usageInstructions": "Run 'npm start' or 'node dist/server.js your_github_token_here' to start the server, which exposes a 'get_pr_comments' tool.",
    "category": "Version Control"
  },
  "shieldmcp": {
    "name": "Shield MCP",
    "githubLink": "https://github.com/shieldmcp/shieldmcp",
    "package": "shieldmcp",
    "description": "Security middleware for Model Context Protocol (MCP) servers that adds access control, result sanitization, and rate limiting without modifying the official SDK.",
    "installCommand": "pip install shieldmcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Import and apply the @secure_tool decorator to MCP tools, configure access control, sanitization, and rate limiting as shown in the Quick Start example.",
    "category": "Security"
  },
  "wallpaper": {
    "name": "Wallpaper MCP",
    "githubLink": "https://github.com/shahanneda/wallpaper-mcp",
    "package": "wallpaper-mcp",
    "description": "Generate wallpaper images and set them as your desktop wallpaper on MacOS using Luma Labs AI.",
    "installCommand": "git clone git@github.com:shahanneda/wallpaper-mcp.git",
    "requiredEnvVars": [
      "LUMAAI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server with Luma Labs API key and use MCP clients to generate and set wallpapers.",
    "category": "Media"
  },
  "anki": {
    "name": "Anki MCP Server",
    "githubLink": "https://github.com/scorzeth/anki-mcp-server",
    "package": "anki-mcp-server",
    "description": "MCP server for interacting with Anki flashcard app",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "answers",
      "front",
      "back",
      "num",
      "ease",
      "cardId"
    ],
    "usageInstructions": "Configure with Claude Desktop by adding server config to claude_desktop_config.json",
    "category": "Productivity"
  },
  "function-hub": {
    "name": "Function Hub MCP Server",
    "githubLink": "https://github.com/segun/mcp-server-function-hub",
    "package": "github:segun/mcp-server-function-hub",
    "description": "MCP server for interacting with the Function Hub API to access various functions and services.",
    "installCommand": "npx -y github:segun/mcp-server-function-hub",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure the server in claude_desktop_config.json with your API_KEY environment variable and start the server via npx or Docker.",
    "category": "API Integration"
  },
  "scrapeless": {
    "name": "Scrapeless MCP Server",
    "githubLink": "https://github.com/scrapeless-ai/scrapeless-mcp-server",
    "package": "scrapeless-mcp-server",
    "description": "Seamlessly integrate real-time Google SERP results into LLM applications using the Scrapeless MCP server.",
    "installCommand": "npx -y scrapeless-mcp-server",
    "requiredEnvVars": [
      "SCRAPELESS_KEY"
    ],
    "optionalParams": [
      "query",
      "gl",
      "hl"
    ],
    "usageInstructions": "Configure with Scrapeless API key and use with LLM applications like Claude.",
    "category": "API Integration"
  },
  "atlassian": {
    "name": "MCP Atlassian Server",
    "githubLink": "https://github.com/samwang0723/mcp-atlassian",
    "package": "mcp-atlassian",
    "description": "An MCP server for interacting with Atlassian products like Confluence and Jira",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "ATLASSIAN_HOST",
      "ATLASSIAN_EMAIL",
      "ATLASSIAN_API_TOKEN"
    ],
    "optionalParams": [
      "limit",
      "maxResults"
    ],
    "usageInstructions": "Start the server using 'npm start' or 'make start'. Use available tools like 'search-confluence' and 'search-jira-issues'",
    "category": "API Integration"
  },
  "onesies": {
    "name": "onesies",
    "githubLink": "https://github.com/samsel/onesies",
    "package": "onesies",
    "description": "A collection of small-sized projects.",
    "installCommand": "npx -y onesies",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run the installation command to access the collection of small projects.",
    "category": "Other"
  },
  "sumologic": {
    "name": "MCP Sumo Logic",
    "githubLink": "https://github.com/samwang0723/mcp-sumologic",
    "package": "mcp-sumologic",
    "description": "A Model Context Protocol (MCP) server integrating with Sumo Logic's API for log searches.",
    "installCommand": "npm install mcp-sumologic",
    "requiredEnvVars": [
      "ENDPOINT",
      "SUMO_API_ID",
      "SUMO_API_KEY"
    ],
    "optionalParams": [
      "from",
      "to"
    ],
    "usageInstructions": "Use the 'search-sumologic' tool with a query and optional time range.",
    "category": "API Integration"
  },
  "package-version": {
    "name": "Package Version MCP Server",
    "githubLink": "https://github.com/sammcj/mcp-package-version",
    "package": "mcp-package-version",
    "description": "An MCP server that checks latest stable package versions from multiple registries including npm, PyPI, Maven Central, and more",
    "installCommand": "go install github.com/sammcj/mcp-package-version/v2@HEAD",
    "requiredEnvVars": [],
    "optionalParams": [
      "--transport",
      "--port",
      "--base-url"
    ],
    "usageInstructions": "Run with 'mcp-package-version' for default stdio transport or add --transport sse --port 18080 --base-url \"http://localhost:18080\" for SSE. Configure clients with the command path or container URL.",
    "category": "Development"
  },
  "llm": {
    "name": "MCP LLM Server",
    "githubLink": "https://github.com/sammcj/mcp-llm",
    "package": "@sammcj/mcp-llm",
    "description": "An MCP server providing access to LLMs using LlamaIndexTS library.",
    "installCommand": "npx -y @smithery/cli install @sammcj/mcp-llm --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use the provided tools like generate_code, generate_code_to_file, generate_documentation, and ask_question.",
    "category": "API Integration"
  },
  "data-extractor": {
    "name": "MCP Data Extractor",
    "githubLink": "https://github.com/sammcj/mcp-data-extractor",
    "package": "mcp-data-extractor",
    "description": "Extracts embedded data from TypeScript/JavaScript source code into structured JSON configuration files.",
    "installCommand": "npx -y mcp-data-extractor",
    "requiredEnvVars": [],
    "optionalParams": [
      "DISABLE_SOURCE_REPLACEMENT"
    ],
    "usageInstructions": "Use extract_data or extract_svg tools with sourcePath and targetPath/targetDir arguments",
    "category": "Development"
  },
  "monday": {
    "name": "Monday.com MCP Server",
    "githubLink": "https://github.com/sakce/mcp-server-monday",
    "package": "@sakce/mcp-server-monday",
    "description": "MCP Server for monday.com, enabling MCP clients to interact with Monday.com boards, items, updates, and documents.",
    "installCommand": "npx -y @sakce/mcp-server-monday",
    "requiredEnvVars": [
      "MONDAY_API_KEY",
      "MONDAY_WORKSPACE_NAME"
    ],
    "optionalParams": [],
    "usageInstructions": "Install and configure with MONDAY_API_KEY and MONDAY_WORKSPACE_NAME environment variables",
    "category": "API Integration"
  },
  "graphql-tools": {
    "name": "GraphQL MCP Tools",
    "githubLink": "https://github.com/saewoohan/mcp-graphql-tools",
    "package": "mcp-graphql-tools",
    "description": "An MCP server that enables AI assistants to interact with GraphQL APIs through standardized tools.",
    "installCommand": "npx -y mcp-graphql-tools",
    "requiredEnvVars": [],
    "optionalParams": [
      "endpoint",
      "headers",
      "timeout",
      "maxComplexity",
      "allowMutations",
      "includeDeprecated"
    ],
    "usageInstructions": "Run using 'npx -y mcp-graphql-tools' with optional parameters like '--endpoint' and '--headers'.",
    "category": "API Integration"
  },
  "raindrop.io": {
    "name": "Raindrop.io MCP Server",
    "githubLink": "https://github.com/sachin-philip/raindrop.io-mcp",
    "package": "@sachin-philip/raindrop-io-mcp",
    "description": "MCP server integration for Raindrop.io, allowing programmatic management of bookmarks.",
    "installCommand": "npx -y @smithery/cli install @sachin-philip/raindrop-io-mcp --client claude",
    "requiredEnvVars": [
      "RAINDROP_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Add the Raindrop.io API token to your MCP config and restart your LLM app.",
    "category": "API Integration"
  },
  "runpod-ts": {
    "name": "RunPod MCP Server",
    "githubLink": "https://github.com/runpod/runpod-mcp-ts",
    "package": "@runpod/runpod-mcp-ts",
    "description": "Enables interaction with the RunPod REST API through Claude or other MCP-compatible clients.",
    "installCommand": "npx -y @smithery/cli install @runpod/runpod-mcp-ts --client claude",
    "requiredEnvVars": [
      "RUNPOD_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Use with Claude for Desktop or another MCP-compatible client to manage RunPod resources.",
    "category": "API Integration"
  },
  "notmuch-sendmail": {
    "name": "MCP Notmuch Sendmail",
    "githubLink": "https://github.com/runekaagaard/mcp-notmuch-sendmail",
    "package": "mcp-notmuch-sendmail",
    "description": "Connects Claude Desktop to notmuch email database for searching, composing, and sending emails",
    "installCommand": "uvx --from mcp-notmuch-sendmail==2025.04.09.174710 --python 3.10 mcp-notmuch-sendmail",
    "requiredEnvVars": [
      "NOTMUCH_DATABASE_PATH",
      "NOTMUCH_REPLY_SEPARATORS",
      "SENDMAIL_FROM_EMAIL"
    ],
    "optionalParams": [
      "SENDMAIL_EMAIL_SIGNATURE_HTML",
      "NOTMUCH_SYNC_SCRIPT",
      "LOG_FILE_PATH",
      "DRAFT_DIR"
    ],
    "usageInstructions": "Add configuration to claude_desktop_config.json with command, args, and env variables",
    "category": "Communication"
  },
  "rowik": {
    "name": "rowik-mcp",
    "githubLink": "https://github.com/roshan/rowik-mcp",
    "package": "rowik-mcp",
    "description": "A Model Context Protocol (MCP) server",
    "installCommand": "npm install rowik-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Follow the GitHub repository instructions",
    "category": "Other"
  },
  "aws-kb": {
    "name": "AWS Knowledge Base Retrieval MCP Server",
    "githubLink": "https://github.com/sammcj/mcp-aws-kb",
    "package": "@modelcontextprotocol/server-aws-kb-retrieval",
    "description": "An MCP server implementation for retrieving information from the AWS Knowledge Base using the Bedrock Agent Runtime.",
    "installCommand": "npx -y @modelcontextprotocol/server-aws-kb-retrieval",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY",
      "AWS_REGION"
    ],
    "optionalParams": [
      "AWS_KB_IDS",
      "AWS_SESSION_TOKEN"
    ],
    "usageInstructions": "Use the retrieve_from_aws_kb tool to perform retrieval operations using the AWS Knowledge Base.",
    "category": "Database"
  },
  "robinhood": {
    "name": "Robinhood MCP Server",
    "githubLink": "https://github.com/rohitsingh-iitd/robinhood-mcp-server",
    "package": "robinhood-mcp-server",
    "description": "A comprehensive interface to the Robinhood Crypto API with REST and WebSocket interfaces",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "ROBINHOOD_API_KEY",
      "ROBINHOOD_PRIVATE_KEY"
    ],
    "optionalParams": [
      "HOST",
      "PORT",
      "DEBUG",
      "LOG_LEVEL",
      "LOG_FILE",
      "RATE_LIMIT_ENABLED",
      "RATE_LIMIT_REQUESTS",
      "RATE_LIMIT_PERIOD"
    ],
    "usageInstructions": "Create a .env file with required environment variables, then run 'python -m src.main' to start the server",
    "category": "API Integration"
  },
  "cve-search": {
    "name": "CVE-Search MCP Server",
    "githubLink": "https://github.com/roadwy/cve-search",
    "package": "cve-search-mcp",
    "description": "A Model Context Protocol (MCP) server for querying the CVE-Search API.",
    "installCommand": "git clone https://github.com/roadwy/cve-search_mcp.git && cd cve-search_mcp && uv sync",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add to your MCP client configuration file and modify the directory path.",
    "category": "Security"
  },
  "image-gen": {
    "name": "Image Generator MCP Server",
    "githubLink": "https://github.com/rmcendarfer2017/MCP-image-gen",
    "package": "image-generator",
    "description": "An MCP server that generates images using Replicate's Stable Diffusion model and saves them locally.",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "REPLICATE_API_TOKEN"
    ],
    "optionalParams": [
      "style",
      "negative_prompt",
      "width",
      "height",
      "num_inference_steps",
      "guidance_scale"
    ],
    "usageInstructions": "Generate an image using the 'generate-image' tool, save it with 'save-image', and list saved images with 'list-saved-images'.",
    "category": "Media"
  },
  "riza": {
    "name": "Riza MCP Server",
    "githubLink": "https://github.com/riza-io/riza-mcp",
    "package": "@riza-io/riza-mcp",
    "description": "Riza MCP server implementation wrapping Riza API endpoints as individual tools for LLM-generated code.",
    "installCommand": "npx @riza-io/riza-mcp",
    "requiredEnvVars": [
      "RIZA_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure with Claude Desktop or adapt for your MCP client, and get a free Riza API key from the Riza Dashboard.",
    "category": "Development"
  },
  "mock-data": {
    "name": "Mock Data MCP Server",
    "githubLink": "https://github.com/rhitune2/mock-data-mcp",
    "package": "mock-data-mcp",
    "description": "A server for generating mock data",
    "installCommand": "npm install mock-data-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server to generate mock data",
    "category": "Development"
  },
  "api-gateway": {
    "name": "MCP API Gateway",
    "githubLink": "https://github.com/rflpazini/mcp-api-gateway",
    "package": "rflpazini/mcp-api-gateway",
    "description": "Universal MCP server to integrate any API with Claude Desktop using Docker configurations",
    "installCommand": "docker run --rm -it rflpazini/mcp-api-gateway:latest",
    "requiredEnvVars": [
      "API_N_NAME",
      "API_N_SWAGGER_URL"
    ],
    "optionalParams": [
      "API_N_BASE_URL",
      "API_N_HEADER_*",
      "API_N_HEADERS"
    ],
    "usageInstructions": "Add API configurations to claude_desktop_config.json using environment variables",
    "category": "API Integration"
  },
  "pubmed": {
    "name": "PubMed MCP Server",
    "githubLink": "https://github.com/rikachu225/mcp-pubmed-server",
    "package": "@rikachu225/pubmed-server",
    "description": "An MCP server for accessing PubMed data with a focus on open access research articles",
    "installCommand": "npm install @rikachu225/pubmed-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "maxResults",
      "sort",
      "filterOpenAccess",
      "days"
    ],
    "usageInstructions": "Use the PubMedServer class to search for articles, retrieve open access papers, and find full-text links using methods like search(), getLatestOpenAccess(), and getOpenAccessLinks().",
    "category": "API Integration"
  },
  "ancestry": {
    "name": "Ancestry MCP Server",
    "githubLink": "https://github.com/reeeeemo/ancestry-mcp",
    "package": "mcp-server-ancestry",
    "description": "A Python server for interacting with .ged files (GEDCOM files) via the Model Context Protocol.",
    "installCommand": "pip install mcp-server-ancestry",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure with --gedcom-path and use gedcom://{file_name} for .ged operations",
    "category": "File Management"
  },
  "langchain": {
    "name": "LangChain MCP",
    "githubLink": "https://github.com/rectalogic/langchain-mcp",
    "package": "langchain-mcp",
    "description": "Model Context Protocol tool calling support in LangChain",
    "installCommand": "pip install langchain-mcp",
    "requiredEnvVars": [
      "GROQ_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Create a langchain_mcp.MCPToolkit with an mcp.ClientSession, then initialize and get tools",
    "category": "API Integration"
  },
  "quickvoice": {
    "name": "QuickVoice MCP",
    "githubLink": "https://github.com/rexanity/quickvoice",
    "package": "quickvoice-mcp",
    "description": "A MCP server to communicate with QuickVoice AI Voice agents, enabling AI phone calls with natural language prompts.",
    "installCommand": "docker pull rexanity/quickvoice-mcp",
    "requiredEnvVars": [
      "QUICKVOICE_AGENT_ID",
      "QUICKVOICE_API_KEY"
    ],
    "optionalParams": [
      "QUICKVOICE_API_ENDPOINT",
      "LOG_LEVEL"
    ],
    "usageInstructions": "Use the MCP server to initiate calls with QuickVoice AI agents using natural language prompts.",
    "category": "Communication"
  },
  "neo4j": {
    "name": "Neo4j MCP Server",
    "githubLink": "https://github.com/rebots-online/mcp-neo4j",
    "package": "mcp-neo4j",
    "description": "A Neo4j-based Model Context Protocol (MCP) server with environment variable support and improved configuration options.",
    "installCommand": "npm install mcp-neo4j",
    "requiredEnvVars": [
      "NEO4J_URL",
      "NEO4J_USER",
      "NEO4J_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Set environment variables for Neo4j connection and run the server using npm start.",
    "category": "Database"
  },
  "safari-screenshot": {
    "name": "Safari Screenshot",
    "githubLink": "https://github.com/rogerheykoop/mcp-safari-screenshot",
    "package": "safari-screenshot",
    "description": "A Node.js MCP Server for capturing screenshots using Safari on macOS.",
    "installCommand": "npm install safari-screenshot",
    "requiredEnvVars": [
      "macOS",
      "Safari",
      "Node.js >= 14.0.0",
      "Terminal Accessibility permissions"
    ],
    "optionalParams": [
      "width",
      "height",
      "waitTime",
      "zoomLevel"
    ],
    "usageInstructions": "Use the takeScreenshot function with required URL and optional parameters for window size, wait time, and zoom level.",
    "category": "Browser Automation"
  },
  "coin": {
    "name": "Cryptocurrency Daemon MCP Server",
    "githubLink": "https://github.com/raw391/coin",
    "package": "@raw391/coin-daemon-mcp",
    "description": "An MCP server for interacting with cryptocurrency daemon RPC interfaces, enabling AI assistants to manage cryptocurrency nodes.",
    "installCommand": "npx -y @smithery/cli install @raw391/coin_daemon_mcp --client claude",
    "requiredEnvVars": [
      "CONFIG_PATH"
    ],
    "optionalParams": [
      "coinName",
      "nickname",
      "rpcEndpoint",
      "rpcUser",
      "rpcPassword"
    ],
    "usageInstructions": "Configure Claude Desktop to use the MCP server by modifying claude_desktop_config.json, then create a configuration file for cryptocurrency daemons.",
    "category": "API Integration"
  },
  "git-repo-browser": {
    "name": "MCP Git Repo Browser",
    "githubLink": "https://github.com/razorback16/mcp-git-repo-browser",
    "package": "mcp-git-repo-browser",
    "description": "A Node.js implementation of a Git repository browser using the Model Context Protocol (MCP).",
    "installCommand": "git clone https://github.com/razorback16/mcp-git-repo-browser.git && cd mcp-git-repo-browser && npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server with 'node src/index.js'",
    "category": "Version Control"
  },
  "data-exploration": {
    "name": "MCP Server for Data Exploration",
    "githubLink": "https://github.com/reading-plus-ai/mcp-server-data-exploration",
    "package": "mcp-server-ds",
    "description": "Interactive data exploration tool that transforms complex datasets into actionable insights using CSV files and customizable analysis topics.",
    "installCommand": "python setup.py",
    "requiredEnvVars": [],
    "optionalParams": [
      "df_name"
    ],
    "usageInstructions": "Run the server, load a CSV file using 'load-csv' with the 'csv_path' parameter, and specify an exploration topic. Use 'run-script' for custom Python analysis.",
    "category": "Analytics"
  },
  "adobe-commerce-dev": {
    "name": "Adobe Commerce Dev MCP Server",
    "githubLink": "https://github.com/rafaelstz/adobe-commerce-dev-mcp",
    "package": "@rafaelcg/adobe-commerce-dev-mcp",
    "description": "MCP server interacting with Adobe Commerce GraphQL APIs",
    "installCommand": "npx -y @rafaelcg/adobe-commerce-dev-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure MCP client to use the NPM package",
    "category": "API Integration"
  },
  "kintone": {
    "name": "kintone MCP Server",
    "githubLink": "https://github.com/r3-yamauchi/kintone-mcp-server",
    "package": "kintone-mcp-server",
    "description": "MCP server for interacting with kintone, allowing data reference, update, and app creation",
    "installCommand": "npm i",
    "requiredEnvVars": [
      "KINTONE_DOMAIN",
      "KINTONE_USERNAME",
      "KINTONE_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop app settings, restart the app, and use Claude to query kintone data",
    "category": "API Integration"
  },
  "ns": {
    "name": "NS Travel Information MCP Server",
    "githubLink": "https://github.com/r-huijts/ns-mcp-server",
    "package": "ns-mcp-server",
    "description": "Connects Claude to real-time Dutch railways (NS) travel information for journey planning, disruptions, pricing, and station details",
    "installCommand": "npx -y ns-mcp-server",
    "requiredEnvVars": [
      "NS_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Install via npx, obtain NS API key from https://apiportal.ns.nl/, and configure in Claude's MCP servers settings with the API key in environment variables",
    "category": "API Integration"
  },
  "blastengine-mailer": {
    "name": "Blastengine Mailer MCP Server",
    "githubLink": "https://github.com/r3-yamauchi/mcp-server-blastengine-mailer",
    "package": "mcp-server-blastengine-mailer",
    "description": "An MCP server that enables LLMs to send emails via the Blastengine API.",
    "installCommand": "npm install mcp-server-blastengine-mailer",
    "requiredEnvVars": [
      "BLASTENGINE_USER_ID",
      "BLASTENGINE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure the server in Claude Desktop and use the 'send_email' tool to send emails.",
    "category": "API Integration"
  },
  "communicator-telegram": {
    "name": "MCP Communicator (Telegram)",
    "githubLink": "https://github.com/qpd-v/mcp-communicator-telegram",
    "package": "mcp-communicator-telegram",
    "description": "An MCP server enabling communication with users through Telegram, providing tools to interact via a Telegram bot.",
    "installCommand": "npm install -g mcp-communicator-telegram",
    "requiredEnvVars": [
      "TELEGRAM_TOKEN",
      "CHAT_ID"
    ],
    "optionalParams": [
      "directory"
    ],
    "usageInstructions": "Configure TELEGRAM_TOKEN and CHAT_ID environment variables, then use available tools like ask_user, notify_user, send_file, and zip_project.",
    "category": "Communication"
  },
  "quarkus-servers": {
    "name": "Quarkus MCP Servers",
    "githubLink": "https://github.com/quarkiverse/quarkus-mcp-servers",
    "package": "quarkus-mcp-servers",
    "description": "A collection of Model Context Protocol servers implemented in Java using the Quarkus MCP server framework.",
    "installCommand": "jbang <server-name>@quarkiverse/quarkus-mcp-servers",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run a specific server using 'jbang <server-name>@quarkiverse/quarkus-mcp-servers'",
    "category": "Development"
  },
  "pty": {
    "name": "pty-mcp",
    "githubLink": "https://github.com/qododavid/pty-mcp",
    "package": "pty-mcp",
    "description": "An MCP tool server that provides a stateful terminal",
    "installCommand": "pipx install git+https://github.com/qodo-ai/pty-mcp.git",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Install via pipx and run the server using the 'pty-mcp' command",
    "category": "Development"
  },
  "mattermost": {
    "name": "Mattermost MCP Server",
    "githubLink": "https://github.com/pvev/mattermost-mcp",
    "package": "mattermost-mcp",
    "description": "MCP Server for interacting with Mattermost API, enabling tools for channel monitoring and message management",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "mattermostUrl",
      "token",
      "teamId"
    ],
    "optionalParams": [
      "notificationChannelId",
      "userId",
      "limit",
      "page",
      "messageLimit"
    ],
    "usageInstructions": "Configure the server using config.local.json, then run 'npm start'",
    "category": "Communication"
  },
  "youtube-watchlater": {
    "name": "YouTube Watch Later MCP Server",
    "githubLink": "https://github.com/rados10/youtube-watchlater-mcp",
    "package": "youtube-watchlater",
    "description": "Provides access to a custom YouTube playlist, exposing a simple tool to retrieve URLs of videos added within a specified timeframe.",
    "installCommand": "npx -y @smithery/cli install youtube-watchlater --client claude",
    "requiredEnvVars": [
      "OAUTH_CLIENT_ID",
      "OAUTH_CLIENT_SECRET",
      "OAUTH_REFRESH_TOKEN"
    ],
    "optionalParams": [
      "daysBack"
    ],
    "usageInstructions": "Use the get_watch_later_urls tool with an optional daysBack parameter to retrieve YouTube URLs.",
    "category": "API Integration"
  },
  "a11y": {
    "name": "A11y MCP Server",
    "githubLink": "https://github.com/priyankark/a11y-mcp",
    "package": "a11y-mcp",
    "description": "An MCP server for performing accessibility audits on webpages using axe-core.",
    "installCommand": "npm install -g a11y-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "includeHtml",
      "tags"
    ],
    "usageInstructions": "Configure the MCP server in your MCP settings and use it to audit webpages for accessibility issues.",
    "category": "Accessibility"
  },
  "clarity": {
    "name": "Clarity Mcp Server",
    "githubLink": "https://github.com/pronitdas/clarity-mcp",
    "package": "clarity-mcp-server",
    "description": "A Model Context Protocol (MCP) server offering structured reasoning and thinking tools for AI assistants, enhancing problem-solving with various cognitive frameworks and methodologies.",
    "installCommand": "npx -y clarity-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Integrate with AI assistants using the Model Context Protocol (MCP) by configuring your MCP client to use the 'clarity-mcp-server' command. Connect via stdio transport with the URL 'mcp://localhost:0/clear-thinking'.",
    "category": "Development"
  },
  "webcrawl": {
    "name": "MCP Server Webcrawl",
    "githubLink": "https://github.com/pragmar/mcp-server-webcrawl",
    "package": "mcp-server-webcrawl",
    "description": "Advanced search and retrieval for web crawler data with full-text search and resource filtering",
    "installCommand": "pip install mcp-server-webcrawl",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Refer to the Setup Guides at https://pragmar.github.io/mcp-server-webcrawl/guides.html for step-by-step MCP server setup",
    "category": "Web Scraping"
  },
  "pollinations": {
    "name": "Pollinations MCP Server",
    "githubLink": "https://github.com/pollinations/pollinations",
    "package": "@pollinations/model-context-protocol",
    "description": "Enables AI assistants to generate images and audio via Model Context Protocol, integrating with Pollinations.AI models.",
    "installCommand": "npx @pollinations/model-context-protocol",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run with npx @pollinations/model-context-protocol to start the server, enabling AI assistants to access Pollinations.AI models for image and audio generation.",
    "category": "API Integration"
  },
  "cli": {
    "name": "PlanetScale MCP Server",
    "githubLink": "https://github.com/planetscale/cli",
    "package": "pscale",
    "description": "The PlanetScale MCP server provides AI tools direct access to your PlanetScale databases, allowing AI assistants to list organizations, databases, branches, and run SQL queries with proper authentication.",
    "installCommand": "brew install planetscale/tap/pscale",
    "requiredEnvVars": [
      "PLANETSCALE_SERVICE_TOKEN_ID",
      "PLANETSCALE_SERVICE_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure AI tools to use the PlanetScale MCP server by running 'pscale mcp install --target <tool>' or manually add MCP server configuration",
    "category": "Database"
  },
  "substack-fetcher": {
    "name": "Substack Reader",
    "githubLink": "https://github.com/pl728/substack-fetcher-mcp",
    "package": "substack-fetcher-mcp",
    "description": "A tool to fetch and read articles from Trade Companion by Adam Mancini on Substack.",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure Claude to use this MCP server by adding the server configuration to your Claude config file.",
    "category": "Web Scraping"
  },
  "port": {
    "name": "Port MCP Server",
    "githubLink": "https://github.com/port-experimental/port-mcp-server",
    "package": "mcp-server-port",
    "description": "A Model Context Protocol (MCP) server enabling advanced automations and natural language interactions for developers and AI applications.",
    "installCommand": "uvx mcp-server-port --client-id your_port_client_id --client-secret your_port_client_secret --region EU --log-level DEBUG",
    "requiredEnvVars": [
      "PORT_CLIENT_ID",
      "PORT_CLIENT_SECRET",
      "PORT_REGION"
    ],
    "optionalParams": [
      "log-level",
      "api-validation-enabled"
    ],
    "usageInstructions": "Use with Claude Desktop or Cursor to enable advanced automations and natural language interactions.",
    "category": "Development"
  },
  "pubnub": {
    "name": "PubNub Model Context Protocol (MCP) Server",
    "githubLink": "https://github.com/pubnub/pubnub-mcp-server",
    "package": "@pubnub/mcp",
    "description": "A CLI-based Model Context Protocol (MCP) server that exposes PubNub SDK documentation and PubNub API resources to LLM-powered tools.",
    "installCommand": "npx -y @pubnub/mcp",
    "requiredEnvVars": [
      "PUBNUB_PUBLISH_KEY",
      "PUBNUB_SUBSCRIBE_KEY"
    ],
    "optionalParams": [
      "HTTP_PORT"
    ],
    "usageInstructions": "Run the MCP server with `npx -y @pubnub/mcp` and configure with `~/.cursor/mcp.json` or `.cursor/mcp.json` in your project directory.",
    "category": "API Integration"
  },
  "taskflow": {
    "name": "TaskFlow MCP",
    "githubLink": "https://github.com/pinkpixel-dev/taskflow-mcp",
    "package": "@pinkpixel/taskflow-mcp",
    "description": "A task management Model Context Protocol (MCP) server for planning and executing tasks with AI assistants.",
    "installCommand": "npm install -g @pinkpixel/taskflow-mcp",
    "requiredEnvVars": [
      "TASK_MANAGER_FILE_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Start the server with 'taskflow-mcp' or 'npx taskflow-mcp' and configure your MCP client to use the server.",
    "category": "Productivity"
  },
  "mermaid": {
    "name": "Mermaid MCP Server",
    "githubLink": "https://github.com/peng-shawn/mermaid-mcp-server",
    "package": "@peng-shawn/mermaid-mcp-server",
    "description": "An MCP server that converts Mermaid diagrams to PNG images or SVG files, supporting multiple themes and customizable background colors.",
    "installCommand": "npx -y @peng-shawn/mermaid-mcp-server",
    "requiredEnvVars": [
      "CONTENT_IMAGE_SUPPORTED"
    ],
    "optionalParams": [
      "theme",
      "backgroundColor",
      "outputFormat",
      "name",
      "folder"
    ],
    "usageInstructions": "Run the server using 'npx -y @peng-shawn/mermaid-mcp-server' or with specific environment variables like 'env CONTENT_IMAGE_SUPPORTED=false npx -y @peng-shawn/mermaid-mcp-server'",
    "category": "Development"
  },
  "domaintools": {
    "name": "Domain Tools MCP Server",
    "githubLink": "https://github.com/patrickdappollonio/mcp-domaintools",
    "package": "mcp-domaintools",
    "description": "Provides network and domain analysis capabilities for AI assistants, including DNS lookups, WHOIS queries, and TLS certificate analysis.",
    "installCommand": "brew install patrickdappollonio/tap/mcp-domaintools",
    "requiredEnvVars": [],
    "optionalParams": [
      "--remote-server-address",
      "--custom-whois-server",
      "--timeout",
      "--ping-timeout",
      "--ping-count",
      "--http-ping-timeout",
      "--http-ping-count",
      "--tls-timeout",
      "--sse-port"
    ],
    "usageInstructions": "Run 'mcp-domaintools' for stdio mode or 'mcp-domaintools --sse --sse-port=3000' for SSE mode",
    "category": "API Integration"
  },
  "redshift-js": {
    "name": "Redshift MCP Server",
    "githubLink": "https://github.com/paschmaria/redshift-js-mcp-server",
    "package": "redshift-js-mcp-server",
    "description": "MCP server for Amazon Redshift providing rich contextual information about data warehouse",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "DATABASE_URL"
    ],
    "optionalParams": [
      "timeout",
      "keepalives",
      "keepalives_idle"
    ],
    "usageInstructions": "export DATABASE_URL=\"redshift://username:password@hostname:port/database?ssl=true\" npm start",
    "category": "Database"
  },
  "openapi-client-generator": {
    "name": "OpenAPI Client Generator MCP Server",
    "githubLink": "https://github.com/orhanveli/openapi-client-generator-mcp",
    "package": "openapi-client-generator-mcp",
    "description": "Generates API clients using TypeScript and OpenAPI/Swagger specs",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add server config to Claude Desktop configuration file",
    "category": "API Integration"
  },
  "digitalocean-database": {
    "name": "DigitalOcean Database MCP Server",
    "githubLink": "https://github.com/oladejibidmus/DigitalOcean-Database-MCP-Server",
    "package": "digitalocean-database-mcp",
    "description": "Connect AI-powered IDEs to DigitalOcean databases using an API token",
    "installCommand": "git clone https://github.com/oladejibidmus/DigitalOcean-Database-MCP-Server.git && cd digitalocean-database-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "DO_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Set DigitalOcean API token in AI assistant: 'Set my DigitalOcean API token: dop_v1_your_actual_token_here'",
    "category": "Database"
  },
  "edit-file-lines": {
    "name": "Edit File Lines MCP Server",
    "githubLink": "https://github.com/oakenai/mcp-edit-file-lines",
    "package": "mcp-edit-file-lines",
    "description": "A TypeScript-based MCP server for precise line-based text file edits with dry run and approval workflow",
    "installCommand": "npx -y mcp-edit-file-lines",
    "requiredEnvVars": [],
    "optionalParams": [
      "dryRun",
      "context"
    ],
    "usageInstructions": "Use 'edit_file_lines' with path and edits (including optional dryRun), then apply changes with 'approve_edit' using the provided state ID",
    "category": "File Management"
  },
  "ntropy": {
    "name": "Ntropy MCP Server",
    "githubLink": "https://github.com/ntropy-network/ntropy-mcp",
    "package": "ntropy-mcp",
    "description": "MCP server for enriching banking data using the Ntropy API.",
    "installCommand": "npx -y ntropy-mcp --api-key YOUR_NTROPY_API_KEY",
    "requiredEnvVars": [
      "NTROPY_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Replace YOUR_NTROPY_API_KEY with your actual Ntropy API key and run the server using the install command.",
    "category": "API Integration"
  },
  "nx-console": {
    "name": "Nx Console MCP Server",
    "githubLink": "https://github.com/nrwl/nx-console",
    "package": "nx-mcp",
    "description": "MCP server for Nx Console, enhancing AI features and providing visual workflows",
    "installCommand": "npm install nx-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Install the nx-mcp NPM package separately from the Nx Console extension",
    "category": "Development"
  },
  "local-git": {
    "name": "Local Git MCP Server",
    "githubLink": "https://github.com/okdshin/local-git-mcp-server",
    "package": "local-git-mcp-server",
    "description": "A Python-based Git repository management server using the MCP server framework, allowing creation, management, and interaction with local Git repositories.",
    "installCommand": "pip install local-git-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "--repositories-dir"
    ],
    "usageInstructions": "Run the server with 'python git_server.py [--repositories-dir ./repositories]'",
    "category": "Version Control"
  },
  "servers": {
    "name": "MCP-Servers",
    "githubLink": "https://github.com/parthshr370/MCP-Servers",
    "package": "mcp-servers",
    "description": "Collection of MCP servers for various use cases, including Filesystem, SQL, and Markdown servers, integrated with CAMEL-AI.",
    "installCommand": "npx mcp-servers",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run the respective server scripts for the desired use case.",
    "category": "Other"
  },
  "cursor-trivy": {
    "name": "Trivy Security Scanner MCP Server",
    "githubLink": "https://github.com/norbinsh/cursor-mcp-trivy",
    "package": "cursor-mcp-trivy",
    "description": "A Model Context Protocol (MCP) server providing Trivy security scanning capabilities.",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server using SSE transport: python server.py --transport sse --port 54321",
    "category": "Security"
  },
  "restart": {
    "name": "MCP Server Restart",
    "githubLink": "https://github.com/non-dirty/mcp-server-restart",
    "package": "mcp-server-restart",
    "description": "MCP server for restarting Claude Desktop for Mac",
    "installCommand": "uvx mcp-server-restart",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Ask Claude Desktop 'restart Claude' to restart the application",
    "category": "Productivity"
  },
  "idb": {
    "name": "mcp-idb",
    "githubLink": "https://github.com/noahlozevski/mcp-idb",
    "package": "@noahlozevski/mcp-idb",
    "description": "Enables automated iOS device management and test execution through MCP using Facebook's idb.",
    "installCommand": "npx -y @noahlozevski/mcp-idb",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server using 'npx -y @noahlozevski/mcp-idb' and configure in mcp-config.json as specified.",
    "category": "Development"
  },
  "nile": {
    "name": "Nile MCP Server",
    "githubLink": "https://github.com/niledatabase/nile-mcp-server",
    "package": "@niledatabase/nile-mcp-server",
    "description": "A Model Context Protocol (MCP) server implementation for Nile database platform, allowing LLM applications to interact with Nile through a standardized interface.",
    "installCommand": "npm install @niledatabase/nile-mcp-server",
    "requiredEnvVars": [
      "NILE_API_KEY",
      "NILE_WORKSPACE_SLUG"
    ],
    "optionalParams": [
      "MCP_SERVER_MODE"
    ],
    "usageInstructions": "Configure with .env file, then start server with 'node dist/index.js' or 'npm run dev' for development mode.",
    "category": "Database"
  },
  "render": {
    "name": "Render MCP Server",
    "githubLink": "https://github.com/niyogi/render-mcp",
    "package": "@niyogi/render-mcp",
    "description": "An MCP server enabling AI assistants to manage Render.com services via the Render API",
    "installCommand": "npm install -g @niyogi/render-mcp",
    "requiredEnvVars": [
      "RENDER_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Install the package globally, configure with your Render API key using 'render-mcp configure', then start the server with 'render-mcp start'. Use with AI assistants like Claude to manage Render services.",
    "category": "API Integration"
  },
  "mongodb-model-context-protocol-": {
    "name": "MongoDB MCP Server",
    "githubLink": "https://github.com/nickiiitu/MongoDB-Model-Context-Protocol-MCP-",
    "package": "mongo-mcp",
    "description": "An MCP server enabling LLMs to interact with MongoDB databases through natural language",
    "installCommand": "npx mongo-mcp mongodb://<username>:<password>@<host>:<port>/<database>?authSource=admin",
    "requiredEnvVars": [],
    "optionalParams": [
      "mongodb connection string"
    ],
    "usageInstructions": "Add configuration to Claude Desktop config file with npx command and MongoDB connection string",
    "category": "Database"
  },
  "smithery": {
    "name": "Novu MCP Implementation",
    "githubLink": "https://github.com/novuhq/smithery-mcp",
    "package": "smithery-mcp",
    "description": "A TypeScript implementation of a Model Context Protocol (MCP) server for Novu, allowing AI agents to interact with Novu's notification infrastructure.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "NOVU_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Novu API key in smithery.yml and start the MCP server with npm start.",
    "category": "API Integration"
  },
  "duckduckgo": {
    "name": "DuckDuckGo Search MCP Server",
    "githubLink": "https://github.com/nickclyde/duckduckgo-mcp-server",
    "package": "duckduckgo-mcp-server",
    "description": "A Model Context Protocol (MCP) server that provides web search capabilities through DuckDuckGo, with additional features for content fetching and parsing.",
    "installCommand": "npx -y @smithery/cli install @nickclyde/duckduckgo-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "max_results"
    ],
    "usageInstructions": "Install and configure the server for Claude Desktop, then use the search and content fetching tools with MCP CLI.",
    "category": "Web Scraping"
  },
  "libsql": {
    "name": "LibSQL Model Context Protocol Server",
    "githubLink": "https://github.com/nicholasq/mcp-server-libsql",
    "package": "mcp-server-libsql",
    "description": "A server application that interfaces with LibSQL databases, providing schema information and enabling table queries.",
    "installCommand": "deno run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "--auth-token"
    ],
    "usageInstructions": "Run the server using './mcp-server-libsql <database-url>' for unauthenticated access or './mcp-server-libsql --auth-token <token> <database-url>' for authenticated access.",
    "category": "Database"
  },
  "release-notes": {
    "name": "Release Notes Server",
    "githubLink": "https://github.com/nickbaumann98/release-notes-server",
    "package": "release-notes-server",
    "description": "Generates structured release notes from GitHub repositories by organizing commits into markdown with statistics and PR data.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "fromCommit",
      "toCommit",
      "includeStats"
    ],
    "usageInstructions": "Add to MCP config with node command and GITHUB_TOKEN. Use generate_release_notes tool with repository details and formatting options.",
    "category": "API Integration"
  },
  "clipboard": {
    "name": "MacOS Clipboard MCP Server",
    "githubLink": "https://github.com/newbeb/clipboard-mcp",
    "package": "clipboard-mcp",
    "description": "Provides access to the macOS clipboard via OSAScript for AI assistants",
    "installCommand": "bun install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run 'bun run start' to start the server",
    "category": "API Integration"
  },
  "neon": {
    "name": "Neon MCP Server",
    "githubLink": "https://github.com/neondatabase-labs/mcp-server-neon",
    "package": "@neondatabase/mcp-server-neon",
    "description": "An open-source tool that lets you interact with Neon Postgres databases in natural language",
    "installCommand": "npx -y @neondatabase/mcp-server-neon start <YOUR_NEON_API_KEY>",
    "requiredEnvVars": [
      "NEON_API_KEY"
    ],
    "optionalParams": [
      "limit"
    ],
    "usageInstructions": "Run the Neon MCP server locally on your machine, authenticating with a Neon API key, or connect to Neon's managed MCP server using OAuth",
    "category": "Database"
  },
  "deepseek-thinking-claude-3.5-sonnet-cline": {
    "name": "Deepseek-Thinking-Claude-3.5-Sonnet-CLINE-MCP",
    "githubLink": "https://github.com/newideas99/Deepseek-Thinking-Claude-3.5-Sonnet-CLINE-MCP",
    "package": "@newideas99/Deepseek-Thinking-Claude-3.5-Sonnet-CLINE-MCP",
    "description": "A Model Context Protocol server combining DeepSeek R1 reasoning with Claude 3.5 Sonnet responses via OpenRouter API for two-stage AI processing",
    "installCommand": "npx -y @smithery/cli install @newideas99/Deepseek-Thinking-Claude-3.5-Sonnet-CLINE-MCP --client claude",
    "requiredEnvVars": [
      "OPENROUTER_API_KEY"
    ],
    "optionalParams": [
      "showReasoning",
      "clearContext",
      "includeHistory"
    ],
    "usageInstructions": "Install via Smithery, configure OpenRouter API key in .env, and add to Cline MCP settings to use generate_response and check_response_status tools for two-stage AI processing",
    "category": "API Integration"
  },
  "needle": {
    "name": "Needle MCP Server",
    "githubLink": "https://github.com/needle-ai/needle-mcp",
    "package": "needle-mcp",
    "description": "MCP server for document management and search using Needle and Claude Desktop.",
    "installCommand": "npx -y @smithery/cli install needle-mcp --client claude",
    "requiredEnvVars": [
      "NEEDLE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Use Claude Desktop to connect and execute commands for document management and search.",
    "category": "Other"
  },
  "livecode": {
    "name": "LiveCode MCP Server",
    "githubLink": "https://github.com/namin/livecode-mcp",
    "package": "server.py",
    "description": "MCP server for io.livecode.ch, enabling live coding interactions",
    "installCommand": "mcp install server.py && mcp dev server.py --with requests",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run using 'mcp dev server.py --with requests' after installation",
    "category": "Development"
  },
  "ctgov": {
    "name": "AACT Clinical Trials MCP Server",
    "githubLink": "https://github.com/navisbio/ctgov",
    "package": "mcp-server-aact",
    "description": "Provides access to the AACT database of ClinicalTrials.gov data for AI assistants.",
    "installCommand": "npx -y mcp-server-aact",
    "requiredEnvVars": [
      "DB_USER",
      "DB_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure with DB_USER and DB_PASSWORD, then query clinical trial data.",
    "category": "API Integration"
  },
  "nefino": {
    "name": "Nefino MCP Server",
    "githubLink": "https://github.com/nefino/mcp-nefino",
    "package": "mcp-nefino",
    "description": "Provides Large Language Models with access to news and information about renewable energy projects in Germany, integrating with the Nefino API.",
    "installCommand": "pip install git+https://github.com/nefino/mcp-nefino.git",
    "requiredEnvVars": [
      "NEFINO_USERNAME",
      "NEFINO_PASSWORD",
      "NEFINO_JWT_SECRET",
      "NEFINO_BASE_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server with Python and set required environment variables for Nefino API credentials.",
    "category": "API Integration"
  },
  "web-search": {
    "name": "Web Search MCP Server",
    "githubLink": "https://github.com/muka/web-search-mcp",
    "package": "web-search-mcp",
    "description": "MCP server for performing web searches",
    "installCommand": "git clone https://github.com/muka/web-search-mcp.git && cd web-search-mcp",
    "requiredEnvVars": [
      "SERPER_API_KEY",
      "PORT"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure .env file or environment variables, then run with docker compose up",
    "category": "API Integration"
  },
  "contentful-delivery": {
    "name": "Contentful Delivery MCP Server",
    "githubLink": "https://github.com/mshaaban0/contentful-delivery-mcp",
    "package": "@mshaaban0/contentful-delivery-mcp-server",
    "description": "MCP server providing access to Contentful's Delivery API through AI assistants for content queries and retrieval",
    "installCommand": "npm install -g @mshaaban0/contentful-delivery-mcp-server",
    "requiredEnvVars": [
      "CONTENTFUL_SPACE_ID",
      "CONTENTFUL_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "CONTENTFUL_CONTENT_TYPE_IDS"
    ],
    "usageInstructions": "Set Contentful credentials as environment variables and use natural language queries to access content",
    "category": "API Integration"
  },
  "blockchain": {
    "name": "MCP Blockchain Server",
    "githubLink": "https://github.com/zhangzhongnan928/mcp-blockchain-server",
    "package": "mcp-blockchain-server",
    "description": "A secure MCP server enabling AI assistants to interact with blockchain smart contracts while maintaining user control over private keys.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "Infura API key",
      "Etherscan API key",
      "PostgreSQL connection details"
    ],
    "optionalParams": [
      "Redis configuration"
    ],
    "usageInstructions": "Start the server using 'npm run dev' or 'yarn dev'. Use Docker Compose for a quick start with 'docker-compose up -d'.",
    "category": "Blockchain"
  },
  "warpcast": {
    "name": "Warpcast MCP Server",
    "githubLink": "https://github.com/zhangzhongnan928/mcp-warpcast-server",
    "package": "mcp-warpcast-server",
    "description": "An MCP server for Warpcast integration allowing Claude to interact with Warpcast accounts",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "WARPCAST_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Start the server manually using 'uvicorn main:app --reload' or let Claude Desktop launch it automatically",
    "category": "API Integration"
  },
  "pa-ai-agent": {
    "name": "MCP Personal Assistant Agent",
    "githubLink": "https://github.com/zhangzhongnan928/mcp-pa-ai-agent",
    "package": "mcp-pa-ai-agent",
    "description": "A versatile personal assistant AI agent that helps with calendar, tasks, emails, and more through MCP integration.",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "Google API credentials",
      "Weather API key",
      "News API key",
      "Home Assistant credentials"
    ],
    "optionalParams": [
      "various API settings"
    ],
    "usageInstructions": "Clone the repository, install dependencies, configure .env file, and run 'python mcp_server.py'",
    "category": "Productivity"
  },
  "zaj-mysql": {
    "name": "zaj-MySQL-MCP Server",
    "githubLink": "https://github.com/zajTools/zaj-MySQL-MCP",
    "package": "zaj-MySQL-MCP",
    "description": "An MCP server for MySQL database interaction and business intelligence",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "DB_USER",
      "DB_PASSWORD",
      "DB_NAME"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure .env file with database credentials, then run 'node build/index.js'",
    "category": "Database"
  },
  "code-indexer": {
    "name": "MCP Code Indexer",
    "githubLink": "https://github.com/zxfgds/mcp-code-indexer",
    "package": "mcp-code-indexer",
    "description": "An intelligent code retrieval tool based on Model Context Protocol, providing efficient and accurate code base retrieval for AI large language models.",
    "installCommand": "pip install -r requirements.txt && python setup.py install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use tools like identify_project, index_project, search_code, get_code_structure, analyze_code_quality, extract_documentation, find_similar_code, get_code_metrics, analyze_dependencies to manage and analyze code.",
    "category": "Development"
  },
  "gitlab": {
    "name": "Better GitLab MCP Server",
    "githubLink": "https://github.com/zereight/gitlab-mcp",
    "package": "@zereight/mcp-gitlab",
    "description": "GitLab MCP(Model Context Protocol) Server with bug fixes and improvements over the original GitLab MCP server.",
    "installCommand": "npx -y @zereight/mcp-gitlab",
    "requiredEnvVars": [
      "GITLAB_PERSONAL_ACCESS_TOKEN",
      "GITLAB_API_URL"
    ],
    "optionalParams": [
      "GITLAB_PROJECT_ID",
      "GITLAB_READ_ONLY_MODE",
      "USE_GITLAB_WIKI",
      "USE_MILESTONE",
      "USE_PIPELINE",
      "GITLAB_AUTH_COOKIE_PATH",
      "SSE",
      "STREAMABLE_HTTP"
    ],
    "usageInstructions": "Set up your API key and URLs directly when using with Claude App, Cline, Roo Code, or Cursor. Use npx command or Docker to run the server.",
    "category": "Version Control"
  },
  "cipher42": {
    "name": "Cipher42 MCP Server",
    "githubLink": "https://github.com/yevgenypats/cipher42-mcp",
    "package": "@yevgenyp/cipher42-mcp",
    "description": "Unified MCP server for database and data warehouse integration with tools like Claude and Cursor",
    "installCommand": "npx -y @yevgenyp/cipher42-mcp@v0.0.7",
    "requiredEnvVars": [
      "CIPHER42_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop by editing claude_desktop_config.json to include the MCP server details and CIPHER42_API_KEY",
    "category": "Database"
  },
  "neodb": {
    "name": "NeoDB MCP Server",
    "githubLink": "https://github.com/xytangme/neodb-mcp",
    "package": "neodb-mcp",
    "description": "An MCP server implementation for interacting with NeoDB, a social book cataloging service.",
    "installCommand": "uv pip install .",
    "requiredEnvVars": [
      "API_BASE",
      "ACCESS_TOKEN"
    ],
    "optionalParams": [
      "query",
      "book_id"
    ],
    "usageInstructions": "Update claude_desktop_config.json with command and args, then run using Claude Desktop",
    "category": "API Integration"
  },
  "pg-schema": {
    "name": "PostgreSQL MCP Server",
    "githubLink": "https://github.com/vinsidious/mcp-pg-schema",
    "package": "@modelcontextprotocol/server-postgres",
    "description": "Provides read-only access to PostgreSQL databases, enabling schema inspection and query execution.",
    "installCommand": "npx -y @modelcontextprotocol/server-postgres postgresql://localhost/mydb",
    "requiredEnvVars": [],
    "optionalParams": [
      "postgresql://user:password@host:port/db-name"
    ],
    "usageInstructions": "Use with Claude Desktop by configuring mcpServers section in claude_desktop_config.json",
    "category": "Database"
  },
  "slim": {
    "name": "Slim-MCP: Claude Tools",
    "githubLink": "https://github.com/webdevtodayjason/slim-MCP",
    "package": "claude_tools",
    "description": "Python-based MCP server providing calculator, weather, and datetime tools for Claude AI",
    "installCommand": "pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure Claude or Cursor IDE with the Python executable path and module name",
    "category": "Productivity"
  },
  "datadog": {
    "name": "Datadog MCP Server",
    "githubLink": "https://github.com/winor30/mcp-server-datadog",
    "package": "@winor30/mcp-server-datadog",
    "description": "MCP server for Datadog API, enabling incident management and more",
    "installCommand": "npx -y @winor30/mcp-server-datadog",
    "requiredEnvVars": [
      "DATADOG_API_KEY",
      "DATADOG_APP_KEY"
    ],
    "optionalParams": [
      "filter",
      "pagination",
      "groupStates",
      "name",
      "tags",
      "query",
      "from",
      "to",
      "limit",
      "sort",
      "service",
      "operation"
    ],
    "usageInstructions": "Use npx to run the server, configure Datadog API credentials as environment variables",
    "category": "API Integration"
  },
  "deepseek": {
    "name": "Deepseek MCP Server",
    "githubLink": "https://github.com/vincentf305/mcp-server-deepseek",
    "package": "mcp-server-deepseek",
    "description": "MCP server implementation for Deepseek models integration with Claude Desktop",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "DEEPSEEK_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run using Docker or locally with python -m mcp_server_deepseek.server",
    "category": "API Integration"
  },
  "bc": {
    "name": "Business Central MCP Server",
    "githubLink": "https://github.com/vanachterjacob/BC-MCP",
    "package": "bc-mcp",
    "description": "Server providing standardized development rules for Business Central projects",
    "installCommand": "git clone https://github.com/vanachterjacob/BC-MCP.git && cd BC-MCP && npm install",
    "requiredEnvVars": [
      "MCP_SERVER_PORT"
    ],
    "optionalParams": [
      "MONGODB_URI"
    ],
    "usageInstructions": "Clone repository, install dependencies, and run node scripts/generateRules.js to update static rules",
    "category": "Development"
  },
  "vantage": {
    "name": "Vantage MCP Server",
    "githubLink": "https://github.com/vantage-sh/vantage-mcp-server",
    "package": "vantage-sh/tap/vantage-mcp-server",
    "description": "An open-source tool to interact with cloud cost data through AI assistants and MCP clients.",
    "installCommand": "brew install vantage-sh/tap/vantage-mcp-server",
    "requiredEnvVars": [
      "VANTAGE_BEARER_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Use with MCP clients like Claude, Cursor, or Goose by configuring the server binary path and VANTAGE_BEARER_TOKEN.",
    "category": "API Integration"
  },
  "basescan": {
    "name": "Base Network MCP Server",
    "githubLink": "https://github.com/u-Operating-System/basescan-mcp-server",
    "package": "basescan-mcp-server",
    "description": "MCP server for accessing Base Network blockchain data, providing tools for querying blocks, transactions, and smart contracts.",
    "installCommand": "npx basescan-mcp-server",
    "requiredEnvVars": [
      "MCP_TRANSPORT_TYPE"
    ],
    "optionalParams": [
      "BASESCAN_API_KEY",
      "MCP_HTTP_PORT",
      "MCP_LOG_LEVEL",
      "NODE_ENV"
    ],
    "usageInstructions": "Run 'npm start' for Claude Desktop or 'MCP_TRANSPORT_TYPE=http npm start' for HTTP server. Configure via environment variables.",
    "category": "Blockchain"
  },
  "akshare": {
    "name": "AKShare MCP Server",
    "githubLink": "https://github.com/ttjslbz001/akshare",
    "package": "akshare-mcp-server",
    "description": "An MCP server providing financial data analysis capabilities using AKShare library",
    "installCommand": "pip install -e git+https://github.com/ttjslbz001/akshare.git#egg=akshare-mcp-server",
    "requiredEnvVars": [
      "AKSHARE_API_KEY"
    ],
    "optionalParams": [
      "param2"
    ],
    "usageInstructions": "Run the server using 'python run_server.py' after activating the virtual environment",
    "category": "Data Storage"
  },
  "youtube-summarizer": {
    "name": "YouTube Summarizer MCP Server",
    "githubLink": "https://github.com/trilogy-group/youtube-summarizer-mcp",
    "package": "youtube-summarizer-mcp",
    "description": "MCP server exposing YouTube Summarizer APIs as tools for AI applications",
    "installCommand": "docker build -t youtube-summarizer-mcp .",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run using Docker: docker run -i --rm youtube-summarizer-mcp",
    "category": "Media"
  },
  "instagram": {
    "name": "Instagram DM MCP Server",
    "githubLink": "https://github.com/trypeggy/instagram",
    "package": "instagram_dm_mcp",
    "description": "MCP server for sending Instagram Direct Messages and managing Instagram interactions",
    "installCommand": "git clone https://github.com/trypeggy/instagram_dm_mcp.git && cd instagram_dm_mcp && uv sync",
    "requiredEnvVars": [
      "INSTAGRAM_USERNAME",
      "INSTAGRAM_PASSWORD"
    ],
    "optionalParams": [
      "username",
      "password"
    ],
    "usageInstructions": "Configure Instagram credentials using environment variables or command line arguments, then connect to MCP server using Claude Desktop or Cursor configuration",
    "category": "API Integration"
  },
  "python-run": {
    "name": "Python MCP Server",
    "githubLink": "https://github.com/topherbc/python-run-mcp",
    "package": "python-run-mcp",
    "description": "MCP server for executing Python code via standardized API endpoints",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start server with 'python src/server.py', then send POST requests to /run_python endpoint",
    "category": "Development"
  },
  "aws-pricing": {
    "name": "AWS EC2 Pricing MCP Server",
    "githubLink": "https://github.com/trilogy-group/aws-pricing-mcp",
    "package": "@trilogy-group/aws-pricing-mcp",
    "description": "Server that provides real-time EC2 pricing information to LLMs and automation scripts",
    "installCommand": "npx -y @trilogy-group/aws-pricing-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use with Docker or run locally with Python after downloading pricing data",
    "category": "API Integration"
  },
  "unix-manual": {
    "name": "Unix Manual Server",
    "githubLink": "https://github.com/tizee/mcp-unix-manual",
    "package": "mcp-unix-manual",
    "description": "An MCP server providing Unix command documentation within Claude conversations.",
    "installCommand": "pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use commands like 'I need help with the grep command. Can you show me the documentation?' or 'What Unix commands are available on my system?' directly in Claude.",
    "category": "Productivity"
  },
  "terminal": {
    "name": "The AI Language Terminal Server",
    "githubLink": "https://github.com/theailanguage/terminal",
    "package": "theailanguage-terminal-server",
    "description": "An MCP server that enables AI models to execute terminal commands and interact with the file system.",
    "installCommand": "npx -y @theailanguage/terminal-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "transport-method",
      "environment"
    ],
    "usageInstructions": "Run the server locally using Python or Docker, then test it using prompts in Claude.",
    "category": "Development"
  },
  "supabase-nextjs": {
    "name": "Supabase NextJS Server MCP",
    "githubLink": "https://github.com/tengfone/supabase-nextjs-mcp-server",
    "package": "@tengfone/supabase-nextjs-mcp-server",
    "description": "MCP server implementing a simple notes system for NextJS with Supabase integration",
    "installCommand": "npx -y @smithery/cli install @tengfone/supabase-nextjs-mcp-server --client claude",
    "requiredEnvVars": [
      "NEXT_PUBLIC_SUPABASE_URL",
      "NEXT_PUBLIC_SUPABASE_ANON_KEY"
    ],
    "optionalParams": [
      "title",
      "content"
    ],
    "usageInstructions": "Configure in Claude Desktop config file or install via Smithery CLI",
    "category": "Productivity"
  },
  "docker-servers": {
    "name": "Docker MCP Servers",
    "githubLink": "https://github.com/tatsuiman/docker-mcp-servers",
    "package": "docker-mcp-servers",
    "description": "A collection of MCP servers for various services like Slack, Notion, and GitHub",
    "installCommand": "docker run -i --rm ghcr.io/tatsuiman/docker-mcp-notion-server-<service>:main",
    "requiredEnvVars": [
      "SLACK_BOT_TOKEN",
      "SLACK_TEAM_ID",
      "NOTION_API_TOKEN",
      "GITHUB_PERSONAL_ACCESS_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the Docker container with the required environment variables for the desired service",
    "category": "API Integration"
  },
  "diff-typescript": {
    "name": "Diff TypeScript MCP Server",
    "githubLink": "https://github.com/tatn/mcp-server-diff-typescript",
    "package": "mcp-server-diff-typescript",
    "description": "MCP server providing unified diff generation between two text strings",
    "installCommand": "npm install -g mcp-server-diff-typescript",
    "requiredEnvVars": [],
    "optionalParams": [
      "oldString",
      "newString"
    ],
    "usageInstructions": "Add server config to Claude Desktop configuration file with 'npx mcp-server-diff-typescript' command",
    "category": "Development"
  },
  "twitter-scraper": {
    "name": "Twitter MCP Server",
    "githubLink": "https://github.com/takiAA/twitter-scraper-mcp",
    "package": "agent-twitter-client",
    "description": "An MCP server providing tools for interacting with Twitter",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "TWITTER_USERNAME",
      "TWITTER_PASSWORD"
    ],
    "optionalParams": [
      "tweetId",
      "text",
      "TWITTER_EMAIL",
      "TWITTER_2FA_SECRET",
      "TWITTER_API_KEY",
      "TWITTER_API_SECRET_KEY",
      "TWITTER_ACCESS_TOKEN",
      "TWITTER_ACCESS_TOKEN_SECRET"
    ],
    "usageInstructions": "Run the server using 'npx fastmcp dev' or 'npx fastmcp inspect'. Use tools like getTweet({\"tweetId\": \"1734609533274853865\"}) or sendTweet({\"text\": \"Hello World from MCP!\"})",
    "category": "Web Scraping"
  },
  "supavec": {
    "name": "Supavec MCP Server",
    "githubLink": "https://github.com/taishikato/supavec-mcp-server",
    "package": "@supavec/mcp-server",
    "description": "MCP server that enables AI assistants to fetch relevant embeddings and content from Supavec",
    "installCommand": "npx @supavec/mcp-server --api-key your_api_key",
    "requiredEnvVars": [
      "SUPAVEC_API_KEY"
    ],
    "optionalParams": [
      "limit",
      "offset",
      "order_dir"
    ],
    "usageInstructions": "Use with Cursor, Claude, or VS Code Copilot by configuring mcp.json with 'npx @supavec/mcp-server@latest'",
    "category": "API Integration"
  },
  "sumup-agent-toolkit": {
    "name": "SumUp Model Context Protocol (MCP) Server",
    "githubLink": "https://github.com/sumup/sumup-agent-toolkit",
    "package": "@sumup/mcp",
    "description": "MCP Server that integrates with AI-powered code editors and apps",
    "installCommand": "npx -y @sumup/mcp",
    "requiredEnvVars": [
      "SUMUP_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Set SUMUP_API_KEY environment variable and run 'npx -y @sumup/mcp'",
    "category": "API Integration"
  },
  "claude-outlook": {
    "name": "Claude Outlook MCP Tool",
    "githubLink": "https://github.com/syedazharmbnr1/claude-outlook-mcp",
    "package": "@modelcontextprotocol/sdk",
    "description": "MCP tool allowing Claude to interact with Microsoft Outlook for macOS",
    "installCommand": "bun install",
    "requiredEnvVars": [],
    "optionalParams": [
      "isHtml",
      "attachments"
    ],
    "usageInstructions": "Use Claude to ask questions like 'Check my unread emails in Outlook' or 'Create a meeting for tomorrow at 2pm'",
    "category": "Productivity"
  },
  "dblp": {
    "name": "MCP-DBLP Server",
    "githubLink": "https://github.com/szeider/mcp-dblp",
    "package": "mcp-dblp",
    "description": "An MCP server providing access to DBLP computer science bibliography database for Large Language Models",
    "installCommand": "git clone https://github.com/szeider/mcp-dblp.git && cd mcp-dblp && uv venv && source .venv/bin/activate && uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "max_results",
      "year_from",
      "year_to",
      "venue_filter",
      "include_bibtex",
      "similarity_threshold"
    ],
    "usageInstructions": "Configure claude_desktop_config.json with the absolute path to mcp-dblp directory and export folder",
    "category": "Database"
  },
  "trino": {
    "name": "Trino MCP Server",
    "githubLink": "https://github.com/stinkgen/trino",
    "package": "trino_mcp",
    "description": "MCP server providing AI models with structured access to Trino's distributed SQL query engine",
    "installCommand": "docker-compose up -d",
    "requiredEnvVars": [],
    "optionalParams": [
      "--transport",
      "--trino-host",
      "--trino-port",
      "--trino-user",
      "--trino-catalog"
    ],
    "usageInstructions": "Start the server with docker-compose up -d. The server will be available at http://localhost:9096",
    "category": "Database"
  },
  "harvester": {
    "name": "Harvester MCP Server",
    "githubLink": "https://github.com/starbops/harvester-mcp-server",
    "package": "github.com/starbops/harvester-mcp-server/cmd/harvester-mcp-server",
    "description": "MCP server for Harvester HCI enabling AI assistants to interact with Harvester clusters",
    "installCommand": "go install github.com/starbops/harvester-mcp-server/cmd/harvester-mcp-server@latest",
    "requiredEnvVars": [
      "KUBECONFIG"
    ],
    "optionalParams": [
      "--kubeconfig",
      "--log-level"
    ],
    "usageInstructions": "Run 'harvester-mcp-server' after setting KUBECONFIG or using --kubeconfig flag",
    "category": "API Integration"
  },
  "feature-discussion": {
    "name": "Feature Discussion MCP Server",
    "githubLink": "https://github.com/squirrelogic/mcp-feature-discussion",
    "package": "mcp-feature-discussion",
    "description": "An AI lead developer server for intelligent feature discussions and architectural guidance",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add server config to Claude Desktop configuration file",
    "category": "Development"
  },
  "peekaboo": {
    "name": "Peekaboo MCP Server",
    "githubLink": "https://github.com/steipete/Peekaboo",
    "package": "@steipete/peekaboo-mcp",
    "description": "Powerful macOS utility for capturing screenshots and analyzing them with AI vision models",
    "installCommand": "npm install -g @steipete/peekaboo-mcp",
    "requiredEnvVars": [
      "PEEKABOO_AI_PROVIDERS",
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "PEEKABOO_OLLAMA_BASE_URL",
      "PEEKABOO_DEFAULT_SAVE_PATH",
      "PEEKABOO_LOG_LEVEL",
      "PEEKABOO_LOG_FILE"
    ],
    "usageInstructions": "Use 'npx -y @steipete/peekaboo-mcp' as the command in Claude Desktop or Cursor IDE configuration",
    "category": "Development"
  },
  "embedding-search": {
    "name": "MCP Embedding Search",
    "githubLink": "https://github.com/spences10/mcp-embedding-search",
    "package": "mcp-embedding-search",
    "description": "An MCP server for vector similarity search in transcript databases containing embeddings",
    "installCommand": "npm install mcp-embedding-search",
    "requiredEnvVars": [
      "TURSO_URL",
      "TURSO_AUTH_TOKEN"
    ],
    "optionalParams": [
      "limit",
      "min_score"
    ],
    "usageInstructions": "Configure the server with TURSO_URL and TURSO_AUTH_TOKEN, then use the 'search_embeddings' tool with a question parameter",
    "category": "Database"
  },
  "solana-dev": {
    "name": "Solana Model Context Protocol (MCP) Demo",
    "githubLink": "https://github.com/solana-foundation/solana-dev-mcp",
    "package": "@modelcontextprotocol/inspector",
    "description": "A simple MCP server implementation providing basic RPC methods for Solana development",
    "installCommand": "npx @modelcontextprotocol/inspector ts-node index.ts",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Generate configuration file using 'pnpm generate-config' or 'pnpm build && pnpm generate-config:js'",
    "category": "Development"
  },
  "binance": {
    "name": "Binance Cryptocurrency MCP",
    "githubLink": "https://github.com/snjyor/binance-mcp",
    "package": "@snjyor/binance-mcp",
    "description": "MCP service for accessing Binance cryptocurrency market data, including prices, candlestick charts, and order books.",
    "installCommand": "npx -y @snjyor/binance-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure in Cursor IDE or other MCP-compatible environments using the install command, then query cryptocurrency data using available tools like get_price or get_24hr_ticker.",
    "category": "API Integration"
  },
  "systemd-coredump": {
    "name": "systemd-coredump MCP Server",
    "githubLink": "https://github.com/signal-slot/mcp-systemd-coredump",
    "package": "@taskjp/server-systemd-coredump",
    "description": "An MCP server for managing and analyzing system core dumps using systemd-coredump functionality",
    "installCommand": "npm install -g @taskjp/server-systemd-coredump",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add the server to your MCP settings configuration file and use available tools like list_coredumps, get_coredump_info, extract_coredump, remove_coredump",
    "category": "Development"
  },
  "etoroportfoliomcp": {
    "name": "eToro MCP Server",
    "githubLink": "https://github.com/shlomico-tr/etoroPortfolioMCP",
    "package": "etoro-portfolio-mcp",
    "description": "MCP server for interacting with eToro's public API endpoints, allowing portfolio fetching, instrument lookup, and instrument searching",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "authToken",
      "fields"
    ],
    "usageInstructions": "Start server with 'npm start', then use REST API endpoints like POST /tools/fetch_etoro_portfolio/execute",
    "category": "API Integration"
  },
  "pinecone": {
    "name": "Pinecone MCP Server",
    "githubLink": "https://github.com/sirmews/mcp-pinecone",
    "package": "mcp-pinecone",
    "description": "Server for reading and writing to a Pinecone index, providing semantic search and document operations.",
    "installCommand": "uvx install mcp-pinecone",
    "requiredEnvVars": [
      "PINECONE_API_KEY",
      "PINECONE_INDEX_NAME"
    ],
    "optionalParams": [
      "--index-name",
      "--api-key"
    ],
    "usageInstructions": "Configure Claude Desktop with mcp-pinecone command and required arguments, then use tools like semantic-search and read-document.",
    "category": "Data Storage"
  },
  "mcptools-langchain-integration": {
    "name": "Langchain TypeScript with MCP Tools Integration",
    "githubLink": "https://github.com/shashwat001/mcptools-langchain-integration",
    "package": "mcptools-langchain-integration",
    "description": "A TypeScript project integrating Langchain with MCP tools for LLM interaction and tool execution through chat",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "ollamaConfig",
      "mcpConfig",
      "systemPromptForTools"
    ],
    "usageInstructions": "Start Ollama server on http://localhost:11434, start MCP server on http://localhost:7000, then run 'node src/index.js'",
    "category": "API Integration"
  },
  "youtube-subtitles": {
    "name": "YouTube Subtitles MCP Server",
    "githubLink": "https://github.com/setkyar/youtube-subtitles-mcp",
    "package": "mcp/youtube-subtitles",
    "description": "An MCP server for downloading and analyzing YouTube video subtitles, supporting multiple languages and video metadata retrieval.",
    "installCommand": "docker build -t mcp/youtube-subtitles .",
    "requiredEnvVars": [],
    "optionalParams": [
      "language"
    ],
    "usageInstructions": "Use with Claude Desktop or other MCP-compatible clients to access YouTube video information and subtitles.",
    "category": "Media"
  },
  "sourcesyncai": {
    "name": "SourceSync.ai MCP Server",
    "githubLink": "https://github.com/scmdr/sourcesyncai-mcp",
    "package": "sourcesyncai-mcp",
    "description": "MCP server implementation for SourceSync.ai API, enabling AI models to interact with knowledge management platform",
    "installCommand": "npx -y sourcesyncai-mcp",
    "requiredEnvVars": [
      "SOURCESYNC_API_KEY"
    ],
    "optionalParams": [
      "SOURCESYNC_NAMESPACE_ID",
      "SOURCESYNC_TENANT_ID"
    ],
    "usageInstructions": "Run with 'npx -y sourcesyncai-mcp' and configure environment variables",
    "category": "API Integration"
  },
  "vilnius-transport": {
    "name": "Vilnius Transport MCP Server",
    "githubLink": "https://github.com/sarunasdaujotis/vilnius-transport-mcp-server",
    "package": "vilnius-transport-mcp-server",
    "description": "MCP server providing Vilnius public transport data to Large Language Models",
    "installCommand": "uv run client.py path/src/vilnius_transport_mcp/transport.py",
    "requiredEnvVars": [],
    "optionalParams": [
      "coordinates",
      "name"
    ],
    "usageInstructions": "Add configuration to claude_desktop_config.json and run client.py",
    "category": "API Integration"
  },
  "tesla": {
    "name": "Tesla MCP Server",
    "githubLink": "https://github.com/scald/tesla-mcp",
    "package": "tesla-mcp",
    "description": "An MCP server connecting to Tesla Fleet API for vehicle control through AI assistants",
    "installCommand": "pnpm install",
    "requiredEnvVars": [
      "TESLA_CLIENT_ID",
      "TESLA_CLIENT_SECRET",
      "TESLA_REFRESH_TOKEN"
    ],
    "optionalParams": [
      "vehicle_id"
    ],
    "usageInstructions": "Run 'pnpm start' to start the server, configure Claude to use it",
    "category": "API Integration"
  },
  "ankiconnect": {
    "name": "AnkiConnect MCP Server",
    "githubLink": "https://github.com/samefarrar/mcp-ankiconnect",
    "package": "mcp-ankiconnect",
    "description": "MCP server connecting Claude conversations with AnkiConnect for spaced repetition flashcards",
    "installCommand": "uv sync",
    "requiredEnvVars": [],
    "optionalParams": [
      "deck",
      "limit",
      "today_only",
      "reviews"
    ],
    "usageInstructions": "Configure Claude Desktop to use the server by adding mcpServers configuration, then restart Anki and Claude",
    "category": "Productivity"
  },
  "package-docs": {
    "name": "Package Documentation MCP Server",
    "githubLink": "https://github.com/sammcj/mcp-package-docs",
    "package": "mcp-package-docs",
    "description": "MCP server providing efficient access to package documentation across multiple programming languages and LSP capabilities",
    "installCommand": "npx -y mcp-package-docs",
    "requiredEnvVars": [],
    "optionalParams": [
      "ENABLE_LSP",
      "TYPESCRIPT_SERVER"
    ],
    "usageInstructions": "Run 'npx -y mcp-package-docs' to start the server, configure MCP settings to use it",
    "category": "Development"
  },
  "smtp": {
    "name": "SMTP Email MCP Server",
    "githubLink": "https://github.com/samihalawa/mcp-server-smtp",
    "package": "mcp-server-smtp",
    "description": "An MCP server providing email sending capabilities for AI assistants",
    "installCommand": "git clone https://github.com/samihalawa/mcp-server-smtp.git && cd mcp-server-smtp && npm install && npm run build",
    "requiredEnvVars": [
      "NODE_PATH",
      "PATH"
    ],
    "optionalParams": [
      "from",
      "cc",
      "bcc",
      "templateId",
      "templateData",
      "batchSize",
      "delayBetweenBatches",
      "smtpConfigId"
    ],
    "usageInstructions": "Start the server using 'npm start'. Configure SMTP servers and email templates using provided tools like add-smtp-config and add-email-template.",
    "category": "Communication"
  },
  "iceberg": {
    "name": "IcebergMCP",
    "githubLink": "https://github.com/ryft-io/iceberg-mcp",
    "package": "iceberg-mcp",
    "description": "An MCP server for interacting with Apache Iceberg Lakehouse using natural language",
    "installCommand": "uv pip install iceberg-mcp",
    "requiredEnvVars": [
      "ICEBERG_MCP_PROFILE"
    ],
    "optionalParams": [
      "ICEBERG_MCP_REGION"
    ],
    "usageInstructions": "Configure AWS profile and region, then use with Claude or Cursor MCP clients",
    "category": "Database"
  },
  "batchit": {
    "name": "MCP BatchIt",
    "githubLink": "https://github.com/ryanjoachim/mcp-batchit",
    "package": "@modelcontextprotocol/server-batchit",
    "description": "An MCP server that batches multiple tool calls into a single request, reducing overhead and token usage for AI agents.",
    "installCommand": "npx -y @modelcontextprotocol/server-batchit",
    "requiredEnvVars": [],
    "optionalParams": [
      "maxConcurrent",
      "stopOnError",
      "timeoutMs"
    ],
    "usageInstructions": "Send a JSON-RPC request with 'tools/call' method and 'name=batch_execute' to the server.",
    "category": "Development"
  },
  "deepseek-thinker": {
    "name": "Deepseek Thinker MCP Server",
    "githubLink": "https://github.com/ruixingshi/deepseek-thinker-mcp",
    "package": "deepseek-thinker-mcp",
    "description": "MCP provider for Deepseek reasoning content, supporting OpenAI API and local Ollama server",
    "installCommand": "npx -y deepseek-thinker-mcp",
    "requiredEnvVars": [
      "API_KEY",
      "BASE_URL",
      "USE_OLLAMA"
    ],
    "optionalParams": [
      "originPrompt"
    ],
    "usageInstructions": "Configure in claude_desktop_config.json or run locally with node build/index.js",
    "category": "API Integration"
  },
  "couchdb": {
    "name": "CouchDB MCP Server",
    "githubLink": "https://github.com/robertoamoreno/couchdb-mcp-server",
    "package": "@robertoamoreno/couchdb-mcp-server",
    "description": "An MCP server for managing CouchDB databases and documents, enabling AI assistants to interact with CouchDB.",
    "installCommand": "npx -y @smithery/cli install @robertoamoreno/couchdb-mcp-server --client claude",
    "requiredEnvVars": [
      "COUCHDB_URL"
    ],
    "optionalParams": [
      "COUCHDB_VERSION"
    ],
    "usageInstructions": "Configure COUCHDB_URL and COUCHDB_VERSION environment variables, then run the server with Claude Desktop configuration.",
    "category": "Database"
  },
  "alchemy": {
    "name": "MCP Alchemy",
    "githubLink": "https://github.com/runekaagaard/mcp-alchemy",
    "package": "mcp-alchemy",
    "description": "Connects Claude Desktop to various databases, enabling database exploration, SQL query assistance, and data analysis",
    "installCommand": "uvx --from mcp-alchemy==2025.6.19.201831 mcp-alchemy",
    "requiredEnvVars": [
      "DB_URL"
    ],
    "optionalParams": [
      "CLAUDE_LOCAL_FILES_PATH",
      "EXECUTE_QUERY_MAX_CHARS",
      "DB_ENGINE_OPTIONS"
    ],
    "usageInstructions": "Add configuration to claude_desktop_config.json with appropriate database driver and DB_URL",
    "category": "Database"
  },
  "asana": {
    "name": "MCP Server for Asana",
    "githubLink": "https://github.com/roychri/mcp-server-asana",
    "package": "@roychri/mcp-server-asana",
    "description": "Allows interaction with Asana API from MCP clients like Anthropic's Claude Desktop Application",
    "installCommand": "npx -y @roychri/mcp-server-asana",
    "requiredEnvVars": [
      "ASANA_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "READ_ONLY_MODE"
    ],
    "usageInstructions": "Ask about Asana tasks, projects, workspaces, or comments in an AI tool like Claude Desktop",
    "category": "Productivity"
  },
  "ollama-db": {
    "name": "Ollama MCP Database Assistant",
    "githubLink": "https://github.com/robdodson/ollama-mcp-db",
    "package": "@modelcontextprotocol/server-postgres",
    "description": "An interactive chat interface that combines Ollama's LLM capabilities with PostgreSQL database access through MCP",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "DATABASE_URL"
    ],
    "optionalParams": [
      "OLLAMA_MODEL"
    ],
    "usageInstructions": "Start the chat interface with 'npm start' and ask questions about your data in natural language",
    "category": "Database"
  },
  "send-email": {
    "name": "Resend Email MCP Server",
    "githubLink": "https://github.com/resend/mcp-send-email",
    "package": "@resend/mcp-send-email",
    "description": "MCP server that sends emails using Resend's API, supporting plain text and HTML emails with customizable sender and reply-to addresses",
    "installCommand": "npx -y @resend/mcp-send-email",
    "requiredEnvVars": [
      "RESEND_API_KEY"
    ],
    "optionalParams": [
      "SENDER_EMAIL_ADDRESS",
      "REPLY_TO_EMAIL_ADDRESS",
      "--sender",
      "--reply-to"
    ],
    "usageInstructions": "Clone the repository, run 'npm install' and 'npm run build', then configure the MCP server in Cursor or Claude Desktop with your Resend API key",
    "category": "Communication"
  },
  "rember": {
    "name": "Rember MCP",
    "githubLink": "https://github.com/rember/rember-mcp",
    "package": "@getrember/mcp",
    "description": "Create flashcards with spaced repetition reviews using Rember API",
    "installCommand": "npx -y @getrember/mcp --api-key=YOUR_REMBER_API_KEY",
    "requiredEnvVars": [
      "REMBER_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run using npx and provide Rember API key",
    "category": "Productivity"
  },
  "kite": {
    "name": "Kite MCP Server",
    "githubLink": "https://github.com/rhnvrm/kite-mcp-server",
    "package": "kite-mcp-server",
    "description": "MCP server providing secure access to Kite Connect trading API for AI assistants",
    "installCommand": "go build -o kite-mcp-server && ./kite-mcp-server",
    "requiredEnvVars": [
      "KITE_API_KEY",
      "KITE_API_SECRET"
    ],
    "optionalParams": [
      "APP_MODE",
      "APP_PORT",
      "APP_HOST"
    ],
    "usageInstructions": "Create .env file with Kite Connect credentials, then run 'go build -o kite-mcp-server && ./kite-mcp-server'",
    "category": "API Integration"
  },
  "razorpay": {
    "name": "Razorpay MCP Server",
    "githubLink": "https://github.com/razorpay/razorpay-mcp-server",
    "package": "razorpay-mcp-server",
    "description": "Razorpay MCP Server provides seamless integration with Razorpay APIs for advanced payment processing",
    "installCommand": "npm install razorpay-mcp-server",
    "requiredEnvVars": [
      "RAZORPAY_KEY_ID",
      "RAZORPAY_KEY_SECRET"
    ],
    "optionalParams": [
      "port",
      "logLevel"
    ],
    "usageInstructions": "Run the server using 'npx razorpay-mcp-server' and configure using environment variables",
    "category": "API Integration"
  },
  "flights": {
    "name": "Find Flights MCP Server",
    "githubLink": "https://github.com/ravinahp/flights-mcp",
    "package": "@ravinahp/travel-mcp",
    "description": "MCP server for searching and retrieving flight information using Duffel API",
    "installCommand": "npx -y @smithery/cli install @ravinahp/travel-mcp --client claude",
    "requiredEnvVars": [
      "DUFFEL_API_KEY_LIVE"
    ],
    "optionalParams": [
      "return_date",
      "adults",
      "cabin_class",
      "departure_time",
      "arrival_time",
      "max_connections"
    ],
    "usageInstructions": "Modify Claude desktop configuration file to include the server configuration with your Duffel Live API key",
    "category": "API Integration"
  },
  "stock-analysis": {
    "name": "Alpha Vantage Stock MCP Server",
    "githubLink": "https://github.com/ranveer0323/stock-analysis-mcp",
    "package": "stock-analysis-mcp",
    "description": "MCP server providing real-time and historical stock market data from Alpha Vantage API",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "ALPHA_VANTAGE_API_KEY"
    ],
    "optionalParams": [
      "interval",
      "outputsize",
      "threshold"
    ],
    "usageInstructions": "Run 'npm start' after setting ALPHA_VANTAGE_API_KEY in .env file",
    "category": "API Integration"
  },
  "deriv-api": {
    "name": "Deriv API Server",
    "githubLink": "https://github.com/raju-deriv/mcp-deriv-api-server",
    "package": "deriv-api-mcp",
    "description": "An MCP server for interacting with Deriv API, providing active symbols and account balance",
    "installCommand": "docker build -t deriv-api-mcp .",
    "requiredEnvVars": [
      "DERIV_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop to use this server by modifying claude_desktop_config.json",
    "category": "API Integration"
  },
  "ragie": {
    "name": "Ragie Model Context Protocol Server",
    "githubLink": "https://github.com/ragieai/ragie-mcp-server",
    "package": "@ragieai/mcp-server",
    "description": "An MCP server providing access to Ragie's knowledge base retrieval capabilities",
    "installCommand": "npx -y @ragieai/mcp-server",
    "requiredEnvVars": [
      "RAGIE_API_KEY"
    ],
    "optionalParams": [
      "--description",
      "--partition"
    ],
    "usageInstructions": "Set RAGIE_API_KEY environment variable and run 'npx -y @ragieai/mcp-server'",
    "category": "API Integration"
  },
  "linkedinads": {
    "name": "Radiate B2B LinkedIn Ads MCP Server",
    "githubLink": "https://github.com/radiateb2b/mcp-linkedinads",
    "package": "mcp-remote",
    "description": "MCP server for LinkedIn Ads performance analysis and optimization recommendations",
    "installCommand": "npx mcp-remote https://mcp.radiateb2b.com/sse",
    "requiredEnvVars": [
      "Authorization: Bearer <your private access token>"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop by adding the MCP server config with your private access token",
    "category": "API Integration"
  },
  "airbyte-list-sources": {
    "name": "Airbyte Status Checker",
    "githubLink": "https://github.com/quintonwall/mcp-airbyte-list-sources",
    "package": "airbyte_status_checker",
    "description": "MCP server to check Airbyte connection status",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "AIRBYTE_WORKSPACE_ID",
      "AIRBYTE_CLIENT_ID",
      "AIRBYTE_CLIENT_SECRET",
      "AIRBYTE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Create .env file with Airbyte credentials, then run 'uv run airbyte_status_checker.py'",
    "category": "API Integration"
  },
  "cdata-connect-cloud": {
    "name": "CData Connect Cloud MCP Server",
    "githubLink": "https://github.com/r3-yamauchi/cdata-connect-cloud-mcp-server",
    "package": "cdata-connect-cloud-mcp-server",
    "description": "MCP server implementation for CData Connect Cloud",
    "installCommand": "npm i",
    "requiredEnvVars": [
      "CDATA_CONNECT_CLOUD_CATALOG_NAME",
      "CDATA_CONNECT_CLOUD_USER",
      "CDATA_CONNECT_CLOUD_PAT"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure claude_desktop_config.json with server settings and restart Claude Desktop app",
    "category": "API Integration"
  },
  "raccoonai": {
    "name": "Raccoon AI MCP Server",
    "githubLink": "https://github.com/raccoonaihq/raccoonai-mcp-server",
    "package": "@raccoonaihq/raccoonai-mcp-server",
    "description": "MCP server enabling LAM API for web browsing and data extraction automation",
    "installCommand": "npx -y @smithery/cli@latest install @raccoonaihq/raccoonai-mcp-server --client claude",
    "requiredEnvVars": [
      "RACCOON_SECRET_KEY",
      "RACCOON_PASSCODE"
    ],
    "optionalParams": [],
    "usageInstructions": "Use with Claude Desktop or another MCP-compatible client to perform web tasks like data extraction and form filling",
    "category": "Web Scraping"
  },
  "security-audit": {
    "name": "Security Audit Tool",
    "githubLink": "https://github.com/qianniuspace/mcp-security-audit",
    "package": "mcp-security-audit",
    "description": "A powerful MCP server that audits npm package dependencies for security vulnerabilities",
    "installCommand": "npx -y @smithery/cli install @qianniuspace/mcp-security-audit --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add MCP configuration to Cline/Cursor using 'npx mcp-security-audit'",
    "category": "Security"
  },
  "deepwebresearch": {
    "name": "MCP Deep Web Research Server",
    "githubLink": "https://github.com/qpd-v/mcp-DEEPwebresearch",
    "package": "mcp-deepwebresearch",
    "description": "An MCP server for advanced web research with intelligent search queuing and content extraction",
    "installCommand": "npm install -g mcp-deepwebresearch",
    "requiredEnvVars": [],
    "optionalParams": [
      "MAX_PARALLEL_SEARCHES",
      "SEARCH_DELAY_MS",
      "MAX_RETRIES",
      "TIMEOUT_MS",
      "LOG_LEVEL"
    ],
    "usageInstructions": "Start a chat with Claude and use the provided 'agentic-research' prompt for deep web research",
    "category": "Web Scraping"
  },
  "logfire": {
    "name": "Logfire MCP Server",
    "githubLink": "https://github.com/pydantic/logfire-mcp",
    "package": "logfire-mcp",
    "description": "MCP server for accessing OpenTelemetry traces and metrics sent to Logfire",
    "installCommand": "uvx logfire-mcp@latest",
    "requiredEnvVars": [
      "LOGFIRE_READ_TOKEN"
    ],
    "optionalParams": [
      "--base-url",
      "--read-token"
    ],
    "usageInstructions": "Obtain a Logfire read token and run 'LOGFIRE_READ_TOKEN=YOUR_READ_TOKEN uvx logfire-mcp@latest'",
    "category": "Analytics"
  },
  "chucknorris": {
    "name": "C̷h̷u̷c̷k̷N̷o̷r̷r̷i̷s̷ MCP Server",
    "githubLink": "https://github.com/pollinations/chucknorris",
    "package": "@pollinations/chucknorris",
    "description": "MCP gateway for specialized LLM enhancement prompts with dynamic schema adaptation",
    "installCommand": "npx @pollinations/chucknorris",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run directly with 'npx @pollinations/chucknorris' and add to mcp_config.json",
    "category": "Security"
  },
  "lighthouse": {
    "name": "Lighthouse MCP Server",
    "githubLink": "https://github.com/priyankark/lighthouse-mcp",
    "package": "lighthouse-mcp",
    "description": "An MCP server that wraps Google's Lighthouse tool to measure web page performance metrics",
    "installCommand": "npx lighthouse-mcp",
    "requiredEnvVars": [
      "Node.js 16+"
    ],
    "optionalParams": [
      "categories",
      "device",
      "throttling"
    ],
    "usageInstructions": "Configure MCP settings to use the server, then use tools like 'run_audit' or 'get_performance_score' with required URL parameter",
    "category": "Analytics"
  },
  "mindbridge": {
    "name": "MindBridge MCP Server",
    "githubLink": "https://github.com/pinkpixel-dev/mindbridge-mcp",
    "package": "@pinkpixel/mindbridge",
    "description": "An AI command hub that unifies and orchestrates multiple LLM workflows",
    "installCommand": "npm install -g @pinkpixel/mindbridge",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "DEEPSEEK_API_KEY",
      "GOOGLE_API_KEY",
      "OPENROUTER_API_KEY",
      "OLLAMA_BASE_URL"
    ],
    "optionalParams": [
      "OPENAI_COMPATIBLE_API_KEY",
      "OPENAI_COMPATIBLE_API_BASE_URL",
      "OPENAI_COMPATIBLE_API_MODELS"
    ],
    "usageInstructions": "Run 'mindbridge' after global installation, or use 'npx @pinkpixel/mindbridge'",
    "category": "API Integration"
  },
  "project-hub": {
    "name": "Project Hub MCP Server",
    "githubLink": "https://github.com/peterparker57/project-hub-mcp-server",
    "package": "project-hub-mcp-server",
    "description": "An MCP server for comprehensive project management and GitHub integration",
    "installCommand": "npm install project-hub-mcp-server",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "GITHUB_USERNAME",
      "GITHUB_ORG"
    ],
    "usageInstructions": "Start the server and use MCP clients to manage projects and GitHub repositories",
    "category": "Development"
  },
  "blockchain-query": {
    "name": "MCP Blockchain Query Server",
    "githubLink": "https://github.com/pavel-bc/mcp-blockchain-query",
    "package": "mcp-blockchain-query",
    "description": "Server providing tools for querying BTC data via Blockchain Data and Query APIs",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "port",
      "transport"
    ],
    "usageInstructions": "Run using 'python main.py' for stdio mode or 'python main.py --transport sse --port 8000' for SSE mode",
    "category": "API Integration"
  },
  "mcpollinations": {
    "name": "MCPollinations Multimodal MCP Server",
    "githubLink": "https://github.com/pinkpixel-dev/MCPollinations",
    "package": "@pinkpixel/mcpollinations",
    "description": "An MCP server enabling AI assistants to generate images, text, and audio through Pollinations APIs",
    "installCommand": "npx -y @smithery/cli install @pinkpixel-dev/mcpollinations --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "model",
      "width",
      "height",
      "seed",
      "enhance",
      "safe",
      "saveToFile",
      "outputPath",
      "fileName",
      "format",
      "voice"
    ],
    "usageInstructions": "Run 'npx @pinkpixel/mcpollinations' to start the server, then integrate with MCP-compatible applications",
    "category": "Media"
  },
  "cribl": {
    "name": "Cribl MCP Server",
    "githubLink": "https://github.com/pebbletek/cribl-mcp",
    "package": "@pebbletek/cribl-mcp",
    "description": "An MCP server enabling AI interactions with the Cribl API for data operations",
    "installCommand": "npx @pebbletek/cribl-mcp",
    "requiredEnvVars": [
      "CRIBL_BASE_URL",
      "CRIBL_AUTH_TYPE",
      "CRIBL_CLIENT_ID",
      "CRIBL_CLIENT_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "Run using 'npx @pebbletek/cribl-mcp' with required environment variables set",
    "category": "API Integration"
  },
  "cursor-apple-notes": {
    "name": "Cursor MCP Apple Notes Plugin",
    "githubLink": "https://github.com/packetnomad/cursor-mcp-apple-notes",
    "package": "packetnomad/cursor-mcp-apple-notes",
    "description": "A plugin for Cursor MCP to interact with Apple Notes directly from the editor",
    "installCommand": "MCP: Install Plugin and enter packetnomad/cursor-mcp-apple-notes",
    "requiredEnvVars": [],
    "optionalParams": [
      "query",
      "id"
    ],
    "usageInstructions": "Use commands: notes.search <query>, notes.create, notes.read <id>",
    "category": "Productivity"
  },
  "voyp": {
    "name": "Voyp Model Context Protocol server",
    "githubLink": "https://github.com/paulotaylor/voyp-mcp",
    "package": "@paulotaylor/voyp-mcp",
    "description": "Enables AI assistants like Claude to integrate with VOYP's calling capabilities, allowing AI models to make phone calls and monitor their progress.",
    "installCommand": "npx -y @smithery/cli install @paulotaylor/voyp-mcp --client claude",
    "requiredEnvVars": [
      "VOYP_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop app by adding the Voyp server configuration to claude_desktop_config.json, then restart the app.",
    "category": "Communication"
  },
  "get-terminal-logs": {
    "name": "MCP Get Terminal Logs",
    "githubLink": "https://github.com/ozgrozer/mcp-get-terminal-logs",
    "package": "mcp-get-terminal-logs",
    "description": "An MCP server that retrieves terminal logs",
    "installCommand": "npx -y mcp-get-terminal-logs",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run the installation command to start the server",
    "category": "Development"
  },
  "source-relation": {
    "name": "MCP Source Relation Server",
    "githubLink": "https://github.com/owayo/mcp-source-relation",
    "package": "mcp-source-relation",
    "description": "Analyzes source code dependencies in the src directory, supporting multiple programming languages.",
    "installCommand": "uv sync",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure in claude_desktop_config.json and use with Claude for Desktop",
    "category": "Development"
  },
  "opslevel": {
    "name": "OpsLevel MCP Server",
    "githubLink": "https://github.com/OpsLevel/opslevel-mcp",
    "package": "opslevel-mcp",
    "description": "MCP server providing AIs with read-only access to OpsLevel account data",
    "installCommand": "brew install opslevel/tap/opslevel-mcp",
    "requiredEnvVars": [
      "OPSLEVEL_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure MCP server with API token and integrate with AI tools like Claude, VS Code, Cursor, Warp, or Windsurf",
    "category": "API Integration"
  },
  "solana": {
    "name": "Solana MCP Server",
    "githubLink": "https://github.com/openSVM/solana-mcp-server",
    "package": "solana-mcp-server",
    "description": "MCP server providing comprehensive access to Solana blockchain data through various RPC methods",
    "installCommand": "cargo build --release",
    "requiredEnvVars": [
      "SOLANA_RPC_URL"
    ],
    "optionalParams": [
      "commitment",
      "filter",
      "identity",
      "votePubkey"
    ],
    "usageInstructions": "Configure Claude Desktop with the server command and SOLANA_RPC_URL environment variable",
    "category": "Blockchain"
  },
  "osp": {
    "name": "OSP Marketing Tools for LLMs",
    "githubLink": "https://github.com/open-strategy-partners/osp",
    "package": "osp_marketing_tools",
    "description": "A comprehensive suite of tools for technical marketing content creation and optimization based on Open Strategy Partners' methodologies",
    "installCommand": "uvx --from git+https://github.com/open-strategy-partners/osp_marketing_tools@main osp_marketing_tools",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure in claude_desktop_config.json using 'osp_marketing_tools' with command 'uvx' and appropriate args",
    "category": "Productivity"
  },
  "nody": {
    "name": "Nody MCP Server",
    "githubLink": "https://github.com/olympeio/nody",
    "package": "@olympeio/nody-vmcp",
    "description": "Nody is a developer-first platform for managing and deploying Model Context Protocol (MCP) servers and toolsets.",
    "installCommand": "npx -y @olympeio/nody-vmcp@latest",
    "requiredEnvVars": [
      "NODY_CLIENT_ID"
    ],
    "optionalParams": [
      "NODY_USER_KEY"
    ],
    "usageInstructions": "Compose your Nody client at https://mcp.nody.dev, then click the `Run it` button to get installation instructions.",
    "category": "Development"
  },
  "unity": {
    "name": "Union - The Unity MCP Server",
    "githubLink": "https://github.com/nurture-tech/unity-mcp-server",
    "package": "@nurture-tech/unity-mcp-runner",
    "description": "A Model Context Protocol server for Unity, providing multimodal vision, powerful search, and superior code analysis.",
    "installCommand": "npx -y @nurture-tech/unity-mcp-runner",
    "requiredEnvVars": [],
    "optionalParams": [
      "-unityPath",
      "-projectPath"
    ],
    "usageInstructions": "Configure mcp.json with the command and args, then run with 'npx -y @nurture-tech/unity-mcp-runner -unityPath <path to unity editor> -projectPath <path to unity project>'",
    "category": "Development"
  },
  "gitee": {
    "name": "Gitee MCP Server",
    "githubLink": "https://github.com/normal-coder/gitee-mcp-server",
    "package": "gitee-mcp-server",
    "description": "AI-powered Gitee repository/Issue/Pull Request operations through MCP",
    "installCommand": "npx -y @smithery/cli install @normal-coder/gitee-mcp-server --client claude",
    "requiredEnvVars": [
      "GITEE_PERSONAL_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "GITEE_API_BASE_URL",
      "DEBUG"
    ],
    "usageInstructions": "Run via NPX or Docker with GITEE_PERSONAL_ACCESS_TOKEN environment variable set",
    "category": "Version Control"
  },
  "norman": {
    "name": "Norman Finance MCP Server",
    "githubLink": "https://github.com/norman-finance/norman-mcp-server",
    "package": "@norman-finance/norman-mcp-server",
    "description": "MCP server enabling AI interaction with Norman Finance API for accounting, invoices, and more",
    "installCommand": "npx mcp-remote https://mcp.norman.finance/sse",
    "requiredEnvVars": [
      "NORMAN_EMAIL",
      "NORMAN_PASSWORD",
      "NORMAN_ENVIRONMENT"
    ],
    "optionalParams": [
      "NORMAN_MCP_HOST",
      "NORMAN_MCP_PORT",
      "NORMAN_MCP_PUBLIC_URL",
      "NORMAN_API_TIMEOUT"
    ],
    "usageInstructions": "Use with Claude Desktop or Claude.ai by configuring the MCP server URL or through local installation",
    "category": "API Integration"
  },
  "nodit": {
    "name": "Nodit MCP Server",
    "githubLink": "https://github.com/noditlabs/nodit-mcp-server",
    "package": "@noditlabs/nodit-mcp-server",
    "description": "An MCP server connecting AI agents to structured blockchain data across multiple networks through Nodit's Web3 infrastructure.",
    "installCommand": "npx @noditlabs/nodit-mcp-server@latest",
    "requiredEnvVars": [
      "NODIT_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'npx @noditlabs/nodit-mcp-server@latest' and set NODIT_API_KEY environment variable with your API key.",
    "category": "API Integration"
  },
  "everart-forge": {
    "name": "EverArt Forge MCP",
    "githubLink": "https://github.com/nickbaumann98/everart-forge-mcp",
    "package": "everart-forge-mcp",
    "description": "An advanced Model Context Protocol (MCP) server for Cline that integrates with EverArt's AI models to generate vector and raster images.",
    "installCommand": "git clone https://github.com/nickbaumann98/everart-forge-mcp.git && cd everart-forge-mcp && npm install && npm run build",
    "requiredEnvVars": [
      "EVERART_API_KEY"
    ],
    "optionalParams": [
      "model",
      "format",
      "output_path",
      "web_project_path",
      "project_type",
      "asset_path",
      "image_count"
    ],
    "usageInstructions": "Use Cline to generate images with prompts like 'Generate a minimalist tech logo in SVG format using the Recraft-Vector model'. Configure the server in Cline MCP settings file with your EverArt API key.",
    "category": "Media"
  },
  "chrome-tools": {
    "name": "Chrome Tools MCP Server",
    "githubLink": "https://github.com/nicholmikey/chrome-tools-MCP",
    "package": "@nicholmikey/chrome-tools",
    "description": "An MCP server providing tools for interacting with Chrome through its DevTools Protocol, enabling remote control of Chrome tabs.",
    "installCommand": "npm install @nicholmikey/chrome-tools",
    "requiredEnvVars": [
      "CHROME_DEBUG_URL",
      "CHROME_CONNECTION_TYPE"
    ],
    "optionalParams": [
      "CHROME_ERROR_HELP",
      "tabId",
      "script",
      "format",
      "quality",
      "fullPage",
      "duration",
      "filters",
      "url",
      "selector"
    ],
    "usageInstructions": "Launch Chrome with remote debugging enabled, configure MCP settings with required environment variables, and use provided tools like list_tabs, execute_script, capture_screenshot, capture_network_events, load_url, query_dom_elements, and click_element.",
    "category": "Browser Automation"
  },
  "vercel": {
    "name": "Vercel MCP Integration",
    "githubLink": "https://github.com/nganiet/mcp-vercel",
    "package": "@modelcontextprotocol/sdk",
    "description": "MCP server implementing Vercel's core API endpoints for deployment management and team creation",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "VERCEL_API_TOKEN"
    ],
    "optionalParams": [
      "limit",
      "target",
      "name",
      "framework",
      "teamId",
      "project",
      "gitSource"
    ],
    "usageInstructions": "Start the MCP server with 'npm start', then connect using Claude or Cursor",
    "category": "API Integration"
  },
  "stealth-browser": {
    "name": "Stealth Browser MCP Server",
    "githubLink": "https://github.com/newbeb/stealth-browser-mcp",
    "package": "stealth-browser-mcp",
    "description": "An MCP server providing stealth browser capabilities using Playwright with anti-detection techniques.",
    "installCommand": "bun install",
    "requiredEnvVars": [],
    "optionalParams": [
      "fullPage",
      "selector",
      "headless"
    ],
    "usageInstructions": "Run 'bun start' to start the server. Use 'bun inspect' to view available tools.",
    "category": "Browser Automation"
  },
  "calc-tools": {
    "name": "MCP Calc Tools",
    "githubLink": "https://github.com/nbiish/mcp-calc-tools",
    "package": "mcp-calc-tools",
    "description": "MCP server providing advanced mathematical and financial calculation tools for AI code assistants",
    "installCommand": "npm install mcp-calc-tools",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run 'npm start' or 'node index.js' to start the server, then configure your AI assistant to use the MCP server",
    "category": "Development"
  },
  "code-research": {
    "name": "Code Research MCP Server",
    "githubLink": "https://github.com/nahmanmate/code-research-mcp-server",
    "package": "@nahmanmate/code-research-mcp-server",
    "description": "MCP server providing tools for searching programming resources across multiple platforms",
    "installCommand": "npx -y @smithery/cli install @nahmanmate/code-research-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "limit",
      "language"
    ],
    "usageInstructions": "Configure MCP settings file with server path and optional GITHUB_TOKEN environment variable",
    "category": "Development"
  },
  "bazel": {
    "name": "Bazel MCP Server",
    "githubLink": "https://github.com/nacgarg/bazel-mcp-server",
    "package": "github:nacgarg/bazel-mcp-server",
    "description": "A local MCP server exposing Bazel build system functionality to MCP-enabled AI agents.",
    "installCommand": "npx -y github:nacgarg/bazel-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "--bazel_path",
      "--workspace_path",
      "--workspace_config",
      "--log_path"
    ],
    "usageInstructions": "Run using 'npx -y github:nacgarg/bazel-mcp-server' or configure in .cursor/mcp.json",
    "category": "Development"
  },
  "webresearch": {
    "name": "MCP Web Research Server",
    "githubLink": "https://github.com/mzxrai/mcp-webresearch",
    "package": "@mzxrai/mcp-webresearch",
    "description": "An MCP server for web research, providing Google search integration and webpage content extraction",
    "installCommand": "npx -y @mzxrai/mcp-webresearch@latest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start a chat with Claude and send a prompt that would benefit from web research, or use the 'agentic-research' prompt",
    "category": "Web Scraping"
  },
  "django-migrations": {
    "name": "Django Migrations MCP Service",
    "githubLink": "https://github.com/mrrobotke/django-migrations-mcp",
    "package": "django-migrations-mcp",
    "description": "An MCP service for managing Django migrations in distributed environments.",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "DJANGO_SETTINGS_MODULE"
    ],
    "optionalParams": [
      "MCP_SERVICE_PORT",
      "REDIS_URL"
    ],
    "usageInstructions": "Run the service using 'python -m migrations_mcp.service' or with Docker.",
    "category": "Development"
  },
  "tailscale": {
    "name": "Tailscale MCP Server",
    "githubLink": "https://github.com/mrnugget/tailscale-mcp",
    "package": "tailscale-mcp",
    "description": "MCP server that allows querying Tailscale status using the Tailscale CLI on macOS",
    "installCommand": "pip install uv && uv sync",
    "requiredEnvVars": [],
    "optionalParams": [
      "--transport",
      "--port"
    ],
    "usageInstructions": "Run the server using 'python tailscale.py' for stdio transport or 'python tailscale.py --transport http --port 4001' for HTTP/SSE transport",
    "category": "Other"
  },
  "ledger": {
    "name": "Ledger Service MCP Server",
    "githubLink": "https://github.com/mprokopov/ledger-mcp-server",
    "package": "ledger-service",
    "description": "MCP Server for accessing and managing ledger files through Claude",
    "installCommand": "uv pip install ledger-service",
    "requiredEnvVars": [],
    "optionalParams": [
      "year",
      "account"
    ],
    "usageInstructions": "Configure Claude Desktop by adding server configuration to its config file",
    "category": "File Management"
  },
  "bigquery": {
    "name": "MCP BigQuery Server",
    "githubLink": "https://github.com/monochromegane/mcp-bigquery-server",
    "package": "monochromegane/tap/mcp-bigquery-server",
    "description": "A server that allows querying BigQuery tables using MCP",
    "installCommand": "brew tap monochromegane/tap && brew install monochromegane/tap/mcp-bigquery-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "--project",
      "--dataset"
    ],
    "usageInstructions": "Configure in .cursor/mcp.json with command and args, specifying project and dataset(s)",
    "category": "Database"
  },
  "mongodb-atlas": {
    "name": "MongoDB Atlas MCP Server",
    "githubLink": "https://github.com/mongodb-developer/mcp-mongodb-atlas",
    "package": "mcp-mongodb-atlas",
    "description": "An MCP server for managing MongoDB Atlas projects, clusters, users, and network access.",
    "installCommand": "npm install mcp-mongodb-atlas && npx mcp-mongodb-atlas",
    "requiredEnvVars": [
      "ATLAS_PUBLIC_KEY",
      "ATLAS_PRIVATE_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'npx mcp-mongodb-atlas' with environment variables ATLAS_PUBLIC_KEY and ATLAS_PRIVATE_KEY set, or pass API keys as arguments.",
    "category": "Database"
  },
  "motherduck": {
    "name": "MotherDuck's DuckDB MCP Server",
    "githubLink": "https://github.com/motherduckdb/mcp-server-motherduck",
    "package": "mcp-server-motherduck",
    "description": "An MCP server implementation that interacts with DuckDB and MotherDuck databases, providing SQL analytics capabilities to AI Assistants and IDEs.",
    "installCommand": "uvx mcp-server-motherduck",
    "requiredEnvVars": [
      "motherduck_token"
    ],
    "optionalParams": [
      "--transport",
      "--port",
      "--db-path",
      "--motherduck-token",
      "--read-only",
      "--home-dir",
      "--saas-mode",
      "--json-response"
    ],
    "usageInstructions": "Use 'uvx mcp-server-motherduck' with optional parameters to connect to DuckDB or MotherDuck databases.",
    "category": "Database"
  },
  "youtube-music": {
    "name": "YouTube Music MCP Server",
    "githubLink": "https://github.com/mondweep/youtube-music-mcp-server",
    "package": "youtube-music-mcp-server",
    "description": "MCP server enabling AI models to control YouTube Music playback through Google Chrome",
    "installCommand": "npx -y youtube-music-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "song name",
      "artist name"
    ],
    "usageInstructions": "Configure in Claude Desktop settings by adding server config to claude_desktop_config.json",
    "category": "Media"
  },
  "asset-price": {
    "name": "Asset Price MCP Server",
    "githubLink": "https://github.com/mk965/asset-price-mcp",
    "package": "@mk965/asset-price-mcp",
    "description": "A Model Context Protocol server for retrieving and displaying current asset price information",
    "installCommand": "npx -y @mk965/asset-price-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure the server in your configuration file using the command 'npx -y asset-price-mcp' or via Smithery",
    "category": "API Integration"
  },
  "mobile": {
    "name": "Mobile Next MCP Server",
    "githubLink": "https://github.com/mobile-next/mobile-mcp",
    "package": "@mobilenext/mobile-mcp",
    "description": "MCP server for mobile automation and development on iOS and Android devices",
    "installCommand": "npx -y @mobilenext/mobile-mcp@latest",
    "requiredEnvVars": [
      "node.js v22+",
      "Xcode command line tools",
      "Android Platform Tools"
    ],
    "optionalParams": [],
    "usageInstructions": "Add MCP server to your IDE/Client and use prompts to automate mobile workflows",
    "category": "Browser Automation"
  },
  "strapi": {
    "name": "Strapi MCP Server",
    "githubLink": "https://github.com/misterboe/strapi-mcp-server",
    "package": "@bschauer/strapi-mcp-server",
    "description": "A Model Context Protocol server for interacting with Strapi CMS, enabling AI assistants to interact with Strapi instances through a standardized interface.",
    "installCommand": "npx -y @bschauer/strapi-mcp-server@2.6.0",
    "requiredEnvVars": [],
    "optionalParams": [
      "version"
    ],
    "usageInstructions": "Create a configuration file at ~/.mcp/strapi-mcp-server.config.json with server details, then use functions like strapi_list_servers(), strapi_get_content_types(), and strapi_rest() to interact with your Strapi instance.",
    "category": "API Integration"
  },
  "todoist": {
    "name": "Todoist MCP",
    "githubLink": "https://github.com/miottid/todoist-mcp",
    "package": "@miottid/todoist-mcp",
    "description": "MCP server for interacting with Todoist task management service",
    "installCommand": "npx -y @smithery/cli install @miottid/todoist-mcp --client claude",
    "requiredEnvVars": [
      "TODOIST_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude desktop app with Todoist API key in claude_desktop_config.json",
    "category": "Productivity"
  },
  "biodiversity": {
    "name": "Biodiversity Model Context Protocol Server",
    "githubLink": "https://github.com/mikkohei13/mcp-biodiversity",
    "package": "mcp-biodiversity",
    "description": "MCP server for biodiversity data",
    "installCommand": "mcp install server.py",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run 'mcp run server.py' to start the server",
    "category": "Data Storage"
  },
  "task": {
    "name": "Task API Server - MCP TypeScript Implementation",
    "githubLink": "https://github.com/milkosten/task-mcp-server",
    "package": "@modelcontextprotocol/sdk",
    "description": "MCP implementation for Task Management API written in TypeScript, providing standardized interface for task management",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "TASK_MANAGER_API_BASE_URL",
      "TASK_MANAGER_API_KEY"
    ],
    "optionalParams": [
      "TASK_MANAGER_HTTP_PORT",
      "PORT"
    ],
    "usageInstructions": "Run 'npm start' for STDIO mode or 'npm run start:http' for HTTP mode",
    "category": "Productivity"
  },
  "ai-image-gen": {
    "name": "Image Generation MCP Server",
    "githubLink": "https://github.com/mikeyny/ai-image-gen-mcp",
    "package": "ai-image-gen-mcp",
    "description": "An MCP server for generating images using Replicate's flux-schnell model",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "go_fast",
      "megapixels",
      "num_outputs",
      "aspect_ratio",
      "output_format",
      "output_quality",
      "num_inference_steps"
    ],
    "usageInstructions": "Run with 'node ./path/to/dist/server.js' and configure in Cursor's MCP Servers settings",
    "category": "Media"
  },
  "aistor": {
    "name": "AIStor MCP Server",
    "githubLink": "https://github.com/minio/mcp-server-aistor",
    "package": "quay.io/minio/aistor/mcp-server-aistor:latest",
    "description": "MCP server for interacting with AIStor object stores, supporting read, write, and admin operations",
    "installCommand": "podman run -d --name aistor-mcp-server -v /Users/YOUR_USERNAME/Downloads:/Downloads -e MINIO_ENDPOINT=REPLACE_WITH_ENDPOINT -e MINIO_ACCESS_KEY=REPLACE_WITH_ACCESS_KEY -e MINIO_SECRET_KEY=REPLACE_WITH_SECRET_KEY -e MINIO_USE_SSL=true -p8090:8090 quay.io/minio/aistor/mcp-server-aistor:latest --allowed-directories /Downloads --allow-admin --allow-delete --allow-write --http --http-port8090",
    "requiredEnvVars": [
      "MINIO_ENDPOINT",
      "MINIO_ACCESS_KEY",
      "MINIO_SECRET_KEY",
      "MINIO_USE_SSL"
    ],
    "optionalParams": [
      "--allowed-directories",
      "--allow-write",
      "--allow-delete",
      "--allow-admin",
      "--max-keys"
    ],
    "usageInstructions": "Run the server using podman/docker, configure client with MCP server name, type StreamableHTTP, and URL http://localhost:8090/mcp",
    "category": "Data Storage"
  },
  "substack": {
    "name": "MCP Substack Server",
    "githubLink": "https://github.com/michalnaka/mcp-substack",
    "package": "mcp-substack",
    "description": "An MCP server for downloading and parsing Substack posts, integrating with Claude.ai desktop app",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "In Claude desktop app, use: 'Could you download and summarize this Substack post: [URL]'",
    "category": "API Integration"
  },
  "metricool": {
    "name": "Metricool MCP Server",
    "githubLink": "https://github.com/metricool/mcp-metricool",
    "package": "mcp-metricool",
    "description": "MCP server for interacting with Metricool API to access social media metrics and schedule posts",
    "installCommand": "uvx mcp-metricool",
    "requiredEnvVars": [
      "METRICOOL_USER_TOKEN",
      "METRICOOL_USER_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop with mcp-metricool server details and use available tools to interact with Metricool API",
    "category": "Analytics"
  },
  "semanticworkbench": {
    "name": "Semantic Workbench",
    "githubLink": "https://github.com/microsoft/semanticworkbench",
    "package": "semantic-workbench",
    "description": "A versatile tool for prototyping intelligent assistants quickly, supporting creation and integration of assistants within a cohesive interface.",
    "installCommand": "make install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the app and service using VS Code's 'Run and Debug' feature or command line scripts, then access at https://127.0.0.1:4000",
    "category": "Development"
  },
  "mcp2tavily": {
    "name": "MCP2Tavily",
    "githubLink": "https://github.com/mcp2everything/mcp2tavily",
    "package": "mcp2tavily",
    "description": "MCP protocol server implementing web search using Tavily API",
    "installCommand": "fastmcp install mcp2tavily.py",
    "requiredEnvVars": [
      "TAVILY_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'fastmcp dev mcp2tavily.py' for development mode, access MCP Inspector at http://localhost:5173",
    "category": "Web Scraping"
  },
  "gitlab-code-review": {
    "name": "GitLab MCP for Code Review",
    "githubLink": "https://github.com/mehmetakinn/gitlab-mcp-code-review",
    "package": "gitlab-mcp-code-review",
    "description": "An MCP server for integrating AI assistants with GitLab's merge requests",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "GITLAB_TOKEN"
    ],
    "optionalParams": [
      "GITLAB_HOST",
      "GITLAB_API_VERSION",
      "LOG_LEVEL",
      "DEBUG",
      "REQUEST_TIMEOUT",
      "MAX_RETRIES"
    ],
    "usageInstructions": "Clone the repository, create a virtual environment, install dependencies, and configure .env file with GitLab token",
    "category": "Version Control"
  },
  "metamcp": {
    "name": "MetaMCP MCP Server",
    "githubLink": "https://github.com/metatool-ai/mcp-server-metamcp",
    "package": "@metamcp/mcp-server-metamcp",
    "description": "A proxy server that joins multiple MCP servers into one, fetching configurations from MetaMCP App and routing requests to the correct underlying server.",
    "installCommand": "npx -y @metamcp/mcp-server-metamcp@latest",
    "requiredEnvVars": [
      "METAMCP_API_KEY"
    ],
    "optionalParams": [
      "--transport",
      "--port",
      "--require-api-auth",
      "--stateless",
      "--use-docker-host",
      "--stderr"
    ],
    "usageInstructions": "Run 'npx -y @metamcp/mcp-server-metamcp@latest' with METAMCP_API_KEY environment variable set, or use 'mcp-server-metamcp --metamcp-api-key <your-api-key>'",
    "category": "API Integration"
  },
  "mcp2brave": {
    "name": "Brave Search MCP Server",
    "githubLink": "https://github.com/mcp2everything/mcp2brave",
    "package": "mcp2brave",
    "description": "MCP server using Brave API for web search functionality",
    "installCommand": "fastmcp install mcp2brave.py",
    "requiredEnvVars": [
      "Brave_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'fastmcp dev mcp2brave.py' for development mode, access MCP inspector at http://localhost:5173",
    "category": "Web Scraping"
  },
  "community-servers": {
    "name": "Curl Server",
    "githubLink": "https://github.com/mcp-get/community-servers",
    "package": "@mcp-get-community/server-curl",
    "description": "A server that allows LLMs to make HTTP requests to any URL using a curl-like interface.",
    "installCommand": "npx @michaellatman/mcp-get@latest install @mcp-get-community/server-curl",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Install using MCP Get CLI and run with default configuration",
    "category": "API Integration"
  },
  "honk": {
    "name": "Minimal MCP Server in Nix",
    "githubLink": "https://github.com/mccartykim/honk",
    "package": "github:mccartykim/minimal-mcp-in-nix",
    "description": "A simple MCP server providing demo location and current time",
    "installCommand": "nix run github:mccartykim/minimal-mcp-in-nix",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add to Claude config as shown in README",
    "category": "Development"
  },
  "goose": {
    "name": "Goose FM",
    "githubLink": "https://github.com/mccartykim/goose",
    "package": "github:mccartykim/goose_fm",
    "description": "An MCP server that tunes into radio stations using an rtl-sdr dongle and plays them via speakers.",
    "installCommand": "nix run github:mccartykim/goose_fm",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run using 'nix run github:mccartykim/goose_fm' and add to Claude desktop using the provided configuration.",
    "category": "Media"
  },
  "arc": {
    "name": "ARC Model Context Protocol (MCP) Server",
    "githubLink": "https://github.com/maxmurphySF/arc-mcp-server",
    "package": "arc-mcp-server",
    "description": "AI-powered development server for ARC framework integration",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Clone repository, install dependencies, build project, and start server using 'npm start'",
    "category": "Development"
  },
  "thinking": {
    "name": "MCP Thinking Server",
    "githubLink": "https://github.com/mattzcarey/mcp-thinking",
    "package": "mcp-thinking",
    "description": "Extracts the thinking chain of thought of the Deepseek R1 reasoning model for use in Claude Desktop or other MCP clients",
    "installCommand": "bun install",
    "requiredEnvVars": [
      "Deepseek API key"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the setup script with 'bun setup', then open Claude Desktop",
    "category": "API Integration"
  },
  "aqicn": {
    "name": "AQICN MCP Server",
    "githubLink": "https://github.com/mattmarcin/aqicn-mcp",
    "package": "@mattmarcin/aqicn-mcp",
    "description": "Provides air quality data from the World Air Quality Index project",
    "installCommand": "npx -y @smithery/cli install @mattmarcin/aqicn-mcp --client claude",
    "requiredEnvVars": [
      "AQICN_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Create a .env file with AQICN_API_KEY or set it as an environment variable, then run 'mcp dev aqicn_server.py' for development or 'python aqicn_server.py' for direct execution",
    "category": "API Integration"
  },
  "brightsy": {
    "name": "Brightsy MCP Server",
    "githubLink": "https://github.com/mattlevine/brightsy-mcp",
    "package": "brightsy-mcp",
    "description": "An MCP server connecting to Brightsy AI agent, forwarding requests and returning responses",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "BRIGHTSY_AGENT_ID",
      "BRIGHTSY_API_KEY"
    ],
    "optionalParams": [
      "BRIGHTSY_TOOL_NAME",
      "message",
      "tool-name"
    ],
    "usageInstructions": "Start server using 'npm start' with required agent-id and api-key parameters",
    "category": "API Integration"
  },
  "cursor-installer": {
    "name": "Cursor MCP Installer",
    "githubLink": "https://github.com/matthewdcage/cursor-mcp-installer",
    "package": "cursor-mcp-installer-free",
    "description": "A Model Context Protocol (MCP) server for installing and configuring other MCP servers within Cursor IDE.",
    "installCommand": "npx cursor-mcp-installer-free",
    "requiredEnvVars": [],
    "optionalParams": [
      "path to local MCP server",
      "npm package name"
    ],
    "usageInstructions": "Add to Cursor configuration, restart Cursor, and use Claude to install MCP servers with commands like 'Install the web search MCP server'",
    "category": "Development"
  },
  "senechal": {
    "name": "Senechal MCP Server",
    "githubLink": "https://github.com/mattjoyce/senechal-mcp",
    "package": "senechal-mcp-server",
    "description": "MCP server providing health data from Senechal API to LLM applications",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "SENECHAL_API_KEY",
      "SENECHAL_API_BASE_URL"
    ],
    "optionalParams": [
      "period",
      "span",
      "metrics",
      "offset",
      "types",
      "days",
      "interval"
    ],
    "usageInstructions": "python senechal_mcp_server.py",
    "category": "Health Data Integration"
  },
  "bun-s3": {
    "name": "Bun S3 MCP Server",
    "githubLink": "https://github.com/mattbarlow-sg/bun-s3-mcp",
    "package": "bun-s3-mcp",
    "description": "An MCP service using Bun's S3 bindings to save and load code snippets to S3 as markdown files",
    "installCommand": "bun install bun-s3-mcp",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY",
      "AWS_BUCKET_NAME"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure AWS credentials and bucket name, then use with Claude Desktop to manage code snippets",
    "category": "Data Storage"
  },
  "taboola": {
    "name": "Taboola MCP Connector",
    "githubLink": "https://github.com/matlafu/taboola",
    "package": "taboola_mcp",
    "description": "An MCP tool connecting Taboola Advertising API with AI assistants for campaign data analysis.",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "TABOOLA_CLIENT_ID",
      "TABOOLA_CLIENT_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "Set up .env file with credentials, configure Cursor's MCP, and ask natural language queries.",
    "category": "API Integration"
  },
  "govee": {
    "name": "Govee MCP Server",
    "githubLink": "https://github.com/mathd/govee",
    "package": "@mathd/govee_mcp_server",
    "description": "An MCP server for controlling Govee LED devices through the Govee API.",
    "installCommand": "npx -y @smithery/cli install @mathd/govee_mcp_server --client claude",
    "requiredEnvVars": [
      "GOVEE_API_KEY",
      "GOVEE_DEVICE_ID",
      "GOVEE_SKU"
    ],
    "optionalParams": [],
    "usageInstructions": "The MCP server provides tools for controlling Govee devices. Available tools: turn_on_off, set_color, set_brightness.",
    "category": "API Integration"
  },
  "scaflog-zoho": {
    "name": "Zoho Creator Scaflog App MCP Server",
    "githubLink": "https://github.com/mastercode-io/scaflog-zoho-mcp-server",
    "package": "scaflog-zoho-mcp-server",
    "description": "MCP server for simple note storage and management",
    "installCommand": "uvx scaflog-zoho-mcp-server",
    "requiredEnvVars": [
      "UV_PUBLISH_TOKEN",
      "UV_PUBLISH_USERNAME",
      "UV_PUBLISH_PASSWORD"
    ],
    "optionalParams": [
      "style"
    ],
    "usageInstructions": "Use the add-note tool to add new notes and summarize-notes prompt to generate summaries",
    "category": "Productivity"
  },
  "podman": {
    "name": "Podman MCP Server",
    "githubLink": "https://github.com/manusa/podman-mcp-server",
    "package": "podman-mcp-server",
    "description": "A powerful and flexible MCP server for container runtimes supporting Podman and Docker.",
    "installCommand": "npx -y podman-mcp-server@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "--sse-port"
    ],
    "usageInstructions": "Run the Podman MCP server using npx or download the latest release binary and configure using CLI arguments.",
    "category": "Development"
  },
  "verge-news": {
    "name": "The Verge News MCP Server",
    "githubLink": "https://github.com/manimohans/verge-news-mcp",
    "package": "@manimohans/verge-news-mcp",
    "description": "An MCP server that provides tools to fetch and search news from The Verge's RSS feed.",
    "installCommand": "npx -y @anthropic-ai/smithery use https://github.com/manimohans/verge-news-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "keyword",
      "days"
    ],
    "usageInstructions": "Run 'npm start' to start the server, or use with Smithery by running 'smithery use https://github.com/manimohans/verge-news-mcp'",
    "category": "Web Scraping"
  },
  "farcaster": {
    "name": "Farcaster MCP Server",
    "githubLink": "https://github.com/manimohans/farcaster-mcp",
    "package": "@manimohans/farcaster-mcp",
    "description": "An MCP server that provides tools to interact with the Farcaster network, allowing AI models to fetch casts, search channels, and analyze content.",
    "installCommand": "npx @smithery/cli install @manimohans/farcaster-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "limit"
    ],
    "usageInstructions": "Run 'npm start' to start the server, or use with MCP Inspector via 'npx @modelcontextprotocol/inspector node ./build/index.js'",
    "category": "API Integration"
  },
  "serper": {
    "name": "Serper Search and Scrape MCP Server",
    "githubLink": "https://github.com/marcopesani/mcp-server-serper",
    "package": "serper-search-scrape-mcp-server",
    "description": "MCP server providing web search and webpage scraping capabilities using Serper API",
    "installCommand": "npx -y @smithery/cli install @marcopesani/mcp-server-serper --client claude",
    "requiredEnvVars": [
      "SERPER_API_KEY"
    ],
    "optionalParams": [
      "location",
      "pagination",
      "time filters",
      "autocorrection"
    ],
    "usageInstructions": "Configure in Claude Desktop or Cline settings with SERPER_API_KEY",
    "category": "Web Scraping"
  },
  "together": {
    "name": "Image Generation MCP Server",
    "githubLink": "https://github.com/manascb1344/together-mcp-server",
    "package": "together-mcp",
    "description": "MCP server for generating high-quality images using Flux.1 Schnell model via Together AI",
    "installCommand": "npx together-mcp@latest",
    "requiredEnvVars": [
      "TOGETHER_API_KEY"
    ],
    "optionalParams": [
      "model",
      "width",
      "height",
      "steps",
      "n",
      "response_format",
      "image_path"
    ],
    "usageInstructions": "Use the 'generate_image' tool with required 'prompt' parameter and optional parameters for customization",
    "category": "Media"
  },
  "ayd": {
    "name": "MCP Ayd Server",
    "githubLink": "https://github.com/macrat/mcp-ayd-server",
    "package": "mcp-ayd-server",
    "description": "MCP server for Ayd, providing status information",
    "installCommand": "Download the latest binary from https://github.com/macrat/mcp-ayd-server/releases",
    "requiredEnvVars": [],
    "optionalParams": [
      "http://127.0.0.1:9000"
    ],
    "usageInstructions": "Configure client's configuration file with server command and args, then run client app and ask about Ayd status",
    "category": "API Integration"
  },
  "n8n-workflow-builder": {
    "name": "n8n Workflow Builder MCP Server",
    "githubLink": "https://github.com/makafeli/n8n-workflow-builder",
    "package": "n8n-workflow-builder",
    "description": "An MCP server for managing n8n workflows, allowing listing, creation, update, deletion, activation, and deactivation of workflows.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "N8N_HOST",
      "N8N_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Clone the repository, navigate to the project directory, install dependencies using 'npm install', build the project using 'npm run build', and start the server using 'npm start'.",
    "category": "API Integration"
  },
  "elevenlabs": {
    "name": "ElevenLabs MCP Server",
    "githubLink": "https://github.com/mamertofabian/elevenlabs-mcp-server",
    "package": "elevenlabs-mcp-server",
    "description": "An MCP server integrating ElevenLabs text-to-speech API for audio generation and voice management",
    "installCommand": "npx -y @smithery/cli install elevenlabs-mcp-server --client claude",
    "requiredEnvVars": [
      "ELEVENLABS_API_KEY",
      "ELEVENLABS_VOICE_ID"
    ],
    "optionalParams": [
      "ELEVENLABS_MODEL_ID",
      "ELEVENLABS_STABILITY",
      "ELEVENLABS_SIMILARITY_BOOST",
      "ELEVENLABS_STYLE",
      "ELEVENLABS_OUTPUT_DIR"
    ],
    "usageInstructions": "Configure MCP settings with server command and environment variables, then use available tools like generate_audio_simple or list_voices",
    "category": "API Integration"
  },
  "fathom-analytics": {
    "name": "MCP Fathom Analytics",
    "githubLink": "https://github.com/mackenly/mcp-fathom-analytics",
    "package": "mcp-fathom-analytics",
    "description": "An MCP server for accessing Fathom Analytics data through an AI assistant",
    "installCommand": "npx -y mcp-fathom-analytics",
    "requiredEnvVars": [
      "FATHOM_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Add the MCP server using Claude Desktop JSON config with FATHOM_API_KEY environment variable",
    "category": "Analytics"
  },
  "everything-search": {
    "name": "Everything Search MCP Server",
    "githubLink": "https://github.com/mamertofabian/mcp-everything-search",
    "package": "mcp-server-everything-search",
    "description": "Provides fast file searching capabilities across Windows, macOS, and Linux using platform-specific search tools.",
    "installCommand": "npx -y @smithery/cli install mcp-server-everything-search --client claude",
    "requiredEnvVars": [
      "EVERYTHING_SDK_PATH"
    ],
    "optionalParams": [
      "max_results",
      "match_path",
      "match_case",
      "match_whole_word",
      "match_regex",
      "sort_by"
    ],
    "usageInstructions": "Use the 'search' tool with a 'query' parameter to search for files and folders. Additional optional parameters can be used to refine the search results.",
    "category": "File Management"
  },
  "ragrabbit": {
    "name": "RagRabbit MCP Server",
    "githubLink": "https://github.com/madarco/ragrabbit",
    "package": "@ragrabbit/mcp",
    "description": "MCP Server for semantic search of documentation",
    "installCommand": "npx @ragrabbit/mcp",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "ragrabbit-url",
      "name"
    ],
    "usageInstructions": "Use npx @ragrabbit/mcp with RagRabbit instance URL and custom documentation name",
    "category": "API Integration"
  },
  "searxng": {
    "name": "SearXNG MCP Server",
    "githubLink": "https://github.com/maccam912/searxng-mcp-server",
    "package": "searxng-mcp-server",
    "description": "An MCP server for SearXNG, enabling AI assistants to search the web",
    "installCommand": "uv run https://raw.githubusercontent.com/maccam912/searxng-mcp-server/refs/heads/main/server.py --url https://searxng.example.com",
    "requiredEnvVars": [],
    "optionalParams": [
      "--url"
    ],
    "usageInstructions": "Run using 'uv run server.py --url <your-searxng-url>' or via Docker",
    "category": "Web Scraping"
  },
  "websearch-tools": {
    "name": "WebSearch - Advanced Web Search and Content Extraction Tool",
    "githubLink": "https://github.com/m4s1t4/webSearch-Tools",
    "package": "uv",
    "description": "A powerful web search and content extraction tool built with Python, leveraging the Firecrawl API for advanced web scraping and searching capabilities.",
    "installCommand": "pip install uv",
    "requiredEnvVars": [
      "FIRECRAWL_API_KEY"
    ],
    "optionalParams": [
      "OPENAI_API_KEY",
      "TAVILY_API_KEY"
    ],
    "usageInstructions": "Clone the repository, create and activate a virtual environment with uv, install dependencies, set up environment variables, and configure Claude for Desktop to access the WebSearch tools.",
    "category": "Web Scraping"
  },
  "brightdata": {
    "name": "Bright Data MCP Server",
    "githubLink": "https://github.com/luminati-io/brightdata-mcp",
    "package": "@brightdata/mcp",
    "description": "MCP server enabling LLMs and AI agents to access web data in real-time",
    "installCommand": "npx @brightdata/mcp",
    "requiredEnvVars": [
      "API_TOKEN"
    ],
    "optionalParams": [
      "WEB_UNLOCKER_ZONE",
      "BROWSER_ZONE",
      "RATE_LIMIT"
    ],
    "usageInstructions": "Run using 'npx @brightdata/mcp' with required API_TOKEN environment variable",
    "category": "Web Scraping"
  },
  "lumbretravel": {
    "name": "LumbreTravel MCP Server",
    "githubLink": "https://github.com/lumile/lumbretravel-mcp",
    "package": "@lumile/lumbretravel-mcp",
    "description": "MCP server providing access to LumbreTravel API for managing travel programs and activities",
    "installCommand": "npx -y @smithery/cli install @lumile/lumbretravel-mcp --client claude",
    "requiredEnvVars": [
      "CLIENT_ID",
      "CLIENT_SECRET"
    ],
    "optionalParams": [
      "EMAIL",
      "PASSWORD"
    ],
    "usageInstructions": "Configure CLIENT_ID and CLIENT_SECRET environment variables, then use with Claude Desktop",
    "category": "API Integration"
  },
  "yapi": {
    "name": "Yapi Auto MCP Server",
    "githubLink": "https://github.com/lzsheng/Yapi-MCP",
    "package": "yapi-auto-mcp",
    "description": "MCP server for YApi interface management platform, enabling AI-assisted API documentation management",
    "installCommand": "npx -y yapi-auto-mcp",
    "requiredEnvVars": [
      "YAPI_BASE_URL",
      "YAPI_TOKEN"
    ],
    "optionalParams": [
      "--yapi-cache-ttl",
      "--yapi-log-level",
      "--port"
    ],
    "usageInstructions": "Configure Cursor with MCP server settings using npx or local installation, then use natural language to manage YApi interfaces",
    "category": "API Integration"
  },
  "voice-call": {
    "name": "Voice Call MCP Server",
    "githubLink": "https://github.com/lukaskai/voice-call-mcp-server",
    "package": "voice-call-mcp-server",
    "description": "An MCP server enabling AI assistants to initiate and manage voice calls using Twilio and OpenAI's GPT-4o Realtime model.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "TWILIO_ACCOUNT_SID",
      "TWILIO_AUTH_TOKEN",
      "TWILIO_NUMBER",
      "OPENAI_API_KEY",
      "NGROK_AUTHTOKEN"
    ],
    "optionalParams": [
      "RECORD_CALLS"
    ],
    "usageInstructions": "Clone the repository, install dependencies, configure environment variables, and run the server with 'node dist/start-all.cjs'",
    "category": "Communication"
  },
  "stocks": {
    "name": "YFinance Trader MCP Tool",
    "githubLink": "https://github.com/luigiajah/mcp-stocks",
    "package": "yfinance",
    "description": "Provides stock market data and trading capabilities using the yfinance library",
    "installCommand": "pip install .",
    "requiredEnvVars": [],
    "optionalParams": [
      "symbol"
    ],
    "usageInstructions": "Run the server using 'python3 /path/to/main.py' and integrate with Cursor through MCP settings",
    "category": "API Integration"
  },
  "digitalocean": {
    "name": "MCP DigitalOcean Server",
    "githubLink": "https://github.com/luc-io/mcp-digitalocean-server",
    "package": "mcp-digitalocean-server",
    "description": "An MCP server implementation for DigitalOcean server management",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "DIGITALOCEAN_TOKEN"
    ],
    "optionalParams": [
      "MCP_SERVER_PORT",
      "MCP_SERVER_HOST"
    ],
    "usageInstructions": "Clone the repository, configure .env file, install dependencies, and run python src/server.py",
    "category": "API Integration"
  },
  "mitmproxy": {
    "name": "mitmproxy-mcp MCP Server",
    "githubLink": "https://github.com/lucasoeth/mitmproxy-mcp",
    "package": "mitmproxy-mcp",
    "description": "A simple note storage system with custom note:// URI scheme and note management capabilities",
    "installCommand": "uvx mitmproxy-mcp",
    "requiredEnvVars": [
      "UV_PUBLISH_TOKEN",
      "UV_PUBLISH_USERNAME",
      "UV_PUBLISH_PASSWORD"
    ],
    "optionalParams": [
      "style"
    ],
    "usageInstructions": "Use the add-note tool to add new notes and summarize-notes prompt to generate summaries",
    "category": "Productivity"
  },
  "vikunja": {
    "name": "Vikunja Reminders MCP Server",
    "githubLink": "https://github.com/lowlyocean/mcp-vikunja",
    "package": "mcp-vikunja",
    "description": "MCP server for setting Vikunja reminders",
    "installCommand": "npx -y mcp-vikunja",
    "requiredEnvVars": [
      "environment variables in .env"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure environment variables in .env",
    "category": "Productivity"
  },
  "arango": {
    "name": "ArangoDB MCP Server",
    "githubLink": "https://github.com/lucas-deangelis/arango-mcp-server",
    "package": "arango-mcp-server",
    "description": "An implementation of the Model Context Protocol for ArangoDB, enabling database operations through AQL queries and collection management.",
    "installCommand": "npx -y arango-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "http://localhost:8529",
      "root",
      "root"
    ],
    "usageInstructions": "Add configuration to claude_desktop_config.json with command and args for npx arango-mcp-server",
    "category": "Database"
  },
  "ddgs": {
    "name": "Duck Duck Go Search MCP Server",
    "githubLink": "https://github.com/lowlyocean/mcp-ddgs",
    "package": "mcp-ddgs",
    "description": "MCP server for searching Duck Duck Go using SSE transport",
    "installCommand": "npx -y mcp-ddgs",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use with Model Context Protocol clients to search Duck Duck Go",
    "category": "Web Scraping"
  },
  "imcp": {
    "name": "iMCP",
    "githubLink": "https://github.com/loopwork-ai/iMCP",
    "package": "loopwork/tap/iMCP",
    "description": "A macOS app for connecting your digital life with AI, providing various personal data services",
    "installCommand": "brew install --cask loopwork/tap/iMCP",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Download and install the iMCP app, activate required services, and connect to Claude Desktop",
    "category": "Productivity"
  },
  "devdocs": {
    "name": "DevDocs MCP Implementation",
    "githubLink": "https://github.com/llmian-space/devdocs-mcp",
    "package": "devdocs-mcp",
    "description": "MCP implementation for documentation management and integration",
    "installCommand": "pip install devdocs-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Follow the development guidelines and contributing steps in the README",
    "category": "Development"
  },
  "simple-files-vectorstore": {
    "name": "Simple Files Vectorstore",
    "githubLink": "https://github.com/lishenxydlgzs/simple-files-vectorstore",
    "package": "@lishenxydlgzs/simple-files-vectorstore",
    "description": "MCP server providing semantic search across files by creating vector embeddings of file contents.",
    "installCommand": "npx -y @lishenxydlgzs/simple-files-vectorstore",
    "requiredEnvVars": [
      "WATCH_DIRECTORIES",
      "WATCH_CONFIG_FILE"
    ],
    "optionalParams": [
      "CHUNK_SIZE",
      "CHUNK_OVERLAP",
      "IGNORE_FILE",
      "limit"
    ],
    "usageInstructions": "Configure environment variables and add to MCP settings file",
    "category": "File Management"
  },
  "wecom-bot": {
    "name": "WeCom Bot MCP Server",
    "githubLink": "https://github.com/loonghao/wecom-bot-mcp-server",
    "package": "wecom-bot-mcp-server",
    "description": "An MCP compliant server implementation for WeCom (WeChat Work) bot, supporting multiple message types and features.",
    "installCommand": "npx -y @smithery/cli install wecom-bot-mcp-server --client claude",
    "requiredEnvVars": [
      "WECOM_WEBHOOK_URL"
    ],
    "optionalParams": [
      "MCP_LOG_LEVEL",
      "MCP_LOG_FILE"
    ],
    "usageInstructions": "Start the server using 'wecom-bot-mcp-server' command after installation and configuration.",
    "category": "Communication"
  },
  "git-tools": {
    "name": "MCP Git Tools",
    "githubLink": "https://github.com/lileeei/mcp-git-tools",
    "package": "mcp-git-tools",
    "description": "Git tool integration library for the Model Context Protocol (MCP)",
    "installCommand": "git clone https://github.com/lileeei/mcp-git-tools.git && cd mcp-git-tools && cargo build",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run as a standalone server using 'cargo run --bin mcp-git-server'",
    "category": "Version Control"
  },
  "splunk": {
    "name": "Splunk MCP Tool",
    "githubLink": "https://github.com/livehybrid/splunk-mcp",
    "package": "livehybrid/splunk-mcp",
    "description": "A FastMCP-based tool for interacting with Splunk Enterprise/Cloud through natural language, providing capabilities for searching Splunk data and managing resources.",
    "installCommand": "docker pull livehybrid/splunk-mcp:latest",
    "requiredEnvVars": [
      "SPLUNK_HOST",
      "SPLUNK_PORT",
      "SPLUNK_USERNAME",
      "SPLUNK_PASSWORD",
      "SPLUNK_SCHEME",
      "VERIFY_SSL"
    ],
    "optionalParams": [
      "earliest_time",
      "latest_time",
      "max_results",
      "collection_name",
      "index_name"
    ],
    "usageInstructions": "Run using Docker: 'docker run -i --env-file .env livehybrid/splunk-mcp' or locally with 'poetry run python splunk_mcp.py'",
    "category": "API Integration"
  },
  "ssh-tools": {
    "name": "SSH Tools MCP",
    "githubLink": "https://github.com/lightfate/ssh-tools-mcp",
    "package": "ssh-tools-mcp",
    "description": "An MCP server for SSH connections and remote command execution",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "username",
      "port"
    ],
    "usageInstructions": "Run 'python ssh_server.py' to start the server, then use 'connect_ssh', 'run_command', and 'disconnect_ssh' commands",
    "category": "Development"
  },
  "emotion": {
    "name": "MCP Emotions Server",
    "githubLink": "https://github.com/leovoon/mcp-emotion",
    "package": "mcp-emotion",
    "description": "An MCP server for emotion-related functionality",
    "installCommand": "bun install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run using 'bun run index.ts'",
    "category": "Other"
  },
  "xcode-diagnostics": {
    "name": "Xcode Diagnostics MCP Plugin",
    "githubLink": "https://github.com/leftspin/mcp-xcode-diagnostics",
    "package": "mcp-xcode-diagnostics",
    "description": "An MCP plugin for extracting and viewing errors and warnings from Xcode build logs.",
    "installCommand": "pip install mcp-xcode-diagnostics",
    "requiredEnvVars": [],
    "optionalParams": [
      "project_dir_name",
      "include_warnings"
    ],
    "usageInstructions": "Use with any MCP-compatible client to list Xcode projects and extract diagnostics.",
    "category": "Development"
  },
  "bluesky-context": {
    "name": "Bluesky Context Server",
    "githubLink": "https://github.com/laulauland/bluesky-context-server",
    "package": "@laulauland/bluesky-context-server",
    "description": "MCP server for querying Bluesky instances",
    "installCommand": "npx -y @smithery/cli install @laulauland/bluesky-context-server --client claude",
    "requiredEnvVars": [
      "BLUESKY_APP_KEY",
      "BLUESKY_IDENTIFIER"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop app to use the MCP server by modifying config.json",
    "category": "API Integration"
  },
  "playwright-cdp": {
    "name": "MCP Playwright CDP",
    "githubLink": "https://github.com/lars-hagen/mcp-playwright-cdp",
    "package": "@lars-hagen/mcp-playwright-cdp",
    "description": "Browser automation server using Playwright with Chrome DevTools Protocol support",
    "installCommand": "npx -y @smithery/cli install @lars-hagen/mcp-playwright-cdp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Launch Chrome with remote debugging enabled, then configure Claude Desktop to use the server",
    "category": "Browser Automation"
  },
  "langfuse": {
    "name": "Langfuse Prompt Management MCP Server",
    "githubLink": "https://github.com/langfuse/mcp-server-langfuse",
    "package": "@modelcontextprotocol/inspector",
    "description": "MCP server for managing Langfuse prompts through Model Context Protocol",
    "installCommand": "npx @modelcontextprotocol/inspector node ./build/index.js",
    "requiredEnvVars": [
      "LANGFUSE_PUBLIC_KEY",
      "LANGFUSE_SECRET_KEY",
      "LANGFUSE_BASEURL"
    ],
    "optionalParams": [
      "cursor",
      "arguments"
    ],
    "usageInstructions": "Build the server using 'npm install' and 'npm run build', then configure in Claude Desktop or Cursor with required environment variables",
    "category": "API Integration"
  },
  "telegram": {
    "name": "Telegram MCP Server",
    "githubLink": "https://github.com/lane83/mcp-telegram",
    "package": "mcp-telegram",
    "description": "An MCP server providing Telegram integration for sending messages and secure chat ID validation",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "Telegram bot token",
      "Valid chat ID"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure bot token and chat ID, then run 'npm run build && npm start'",
    "category": "Communication"
  },
  "remote": {
    "name": "BluestoneApps MCP Server",
    "githubLink": "https://github.com/lallen30/mcp-remote-server",
    "package": "mcp-remote-server",
    "description": "Provides React Native coding standards and code examples through the Model Context Protocol",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server with 'npm start' and configure MCP clients to connect",
    "category": "Development"
  },
  "client-configuration": {
    "name": "MCP Client Configuration Server",
    "githubLink": "https://github.com/landicefu/mcp-client-configuration-server",
    "package": "@landicefu/mcp-client-configuration-server",
    "description": "Manages configurations for different MCP clients, providing tools to retrieve, list, add, and remove server configurations.",
    "installCommand": "npm install -g @landicefu/mcp-client-configuration-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "client",
      "server_name",
      "json_config",
      "allow_override"
    ],
    "usageInstructions": "Use npx @landicefu/mcp-client-configuration-server to run without installing, or install globally and use the provided tools like get_configuration_path, list_servers, and add_server_configuration.",
    "category": "Development"
  },
  "coder-toolbox": {
    "name": "Coder Toolbox MCP Server",
    "githubLink": "https://github.com/lamemind/coder-toolbox-mcp-server",
    "package": "coder-toolbox-mcp-server",
    "description": "A utility toolkit for enhancing interaction between Claude and code, providing tools for code analysis and manipulation.",
    "installCommand": "npx -y coder-toolbox-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "className",
      "sourceType",
      "packagePath",
      "classBody",
      "edits",
      "targetContent",
      "dryRun"
    ],
    "usageInstructions": "Use tools like get_test_execution_logs, locate_java_class, create_java_class, class_add_body, class_replace_body, class_delete_body to manage Java classes and test execution logs.",
    "category": "Development"
  },
  "divide-and-conquer": {
    "name": "Divide and Conquer MCP Server",
    "githubLink": "https://github.com/landicefu/divide-and-conquer-mcp-server",
    "package": "@landicefu/divide-and-conquer-mcp-server",
    "description": "An MCP server that breaks down complex tasks into manageable pieces using a structured JSON format.",
    "installCommand": "npx -y @landicefu/divide-and-conquer-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "task_description",
      "context_for_all_tasks",
      "initial_checklist",
      "metadata"
    ],
    "usageInstructions": "Add the server to your MCP configuration and use tools like initialize_task, add_checklist_item, and get_checklist_summary.",
    "category": "Productivity"
  },
  "comfy": {
    "name": "Comfy MCP Server",
    "githubLink": "https://github.com/lalanikarim/comfy-mcp-server",
    "package": "@lalanikarim/comfy-mcp-server",
    "description": "A server that generates images based on prompts using a remote Comfy server.",
    "installCommand": "uvx mcp[cli]",
    "requiredEnvVars": [
      "COMFY_URL",
      "COMFY_WORKFLOW_JSON_FILE",
      "PROMPT_NODE_ID",
      "OUTPUT_NODE_ID",
      "OUTPUT_MODE"
    ],
    "optionalParams": [
      "OLLAMA_API_BASE",
      "PROMPT_LLM"
    ],
    "usageInstructions": "Launch the server using 'uvx comfy-mcp-server' after setting required environment variables.",
    "category": "Media"
  },
  "file-finder": {
    "name": "File Finder MCP Server",
    "githubLink": "https://github.com/kyan9400/file-finder-mcp",
    "package": "mcp",
    "description": "MCP server that searches for files in the file system by path fragment and returns results in JSON format",
    "installCommand": "pip install mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run the server manually with 'python file_finder_server.py' or let Cline launch it automatically",
    "category": "File Management"
  },
  "cryptopanic": {
    "name": "CryptoPanic MCP Server",
    "githubLink": "https://github.com/kukapay/cryptopanic-mcp-server",
    "package": "cryptopanic-mcp-server",
    "description": "Provides cryptocurrency news to AI agents powered by CryptoPanic",
    "installCommand": "pip install git+https://github.com/kukapay/cryptopanic-mcp-server.git",
    "requiredEnvVars": [
      "CRYPTOPANIC_API_KEY",
      "CRYPTOPANIC_API_PLAN"
    ],
    "optionalParams": [
      "kind",
      "num_pages"
    ],
    "usageInstructions": "Configure CryptoPanic API key and plan, then run the server using uv run main.py",
    "category": "API Integration"
  },
  "duckdb": {
    "name": "DuckDB MCP Server",
    "githubLink": "https://github.com/ktanaka101/mcp-server-duckdb",
    "package": "mcp-server-duckdb",
    "description": "An MCP server implementation for interacting with DuckDB databases, enabling database operations like querying and schema inspection.",
    "installCommand": "npx -y @smithery/cli install mcp-server-duckdb --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "--readonly",
      "--keep-connection"
    ],
    "usageInstructions": "Configure the MCP server in Claude Desktop's configuration file with the command 'uvx' and args ['mcp-server-duckdb', '--db-path', '/path/to/database.db']",
    "category": "Database"
  },
  "whale-tracker": {
    "name": "Whale Tracker MCP Server",
    "githubLink": "https://github.com/kukapay/whale-tracker-mcp",
    "package": "@kukapay/whale-tracker-mcp",
    "description": "Tracks cryptocurrency whale transactions using the Whale Alert API",
    "installCommand": "npx -y @smithery/cli install @kukapay/whale-tracker-mcp --client claude",
    "requiredEnvVars": [
      "WHALE_ALERT_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'mcp dev whale_tracker.py --with-editable .' for development mode or 'mcp install whale_tracker.py --name \"WhaleTracker\" -f .env' for Claude Desktop integration",
    "category": "API Integration"
  },
  "azuredevops-bridge": {
    "name": "MCP Azure DevOps Bridge",
    "githubLink": "https://github.com/krishh-amilineni/mcp-azuredevops-bridge",
    "package": "mcp-azuredevops-bridge",
    "description": "An MCP integration server for Azure DevOps, managing work items, wiki documentation, sprint planning, and attachments",
    "installCommand": "git clone https://github.com/krishh-amilineni/mcp-azuredevops-bridge.git && cd mcp-azuredevops-bridge && go build",
    "requiredEnvVars": [
      "AZURE_DEVOPS_ORG",
      "AZDO_PAT",
      "AZURE_DEVOPS_PROJECT"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure environment variables, build the project, and add to Windsurf/Cursor configuration",
    "category": "API Integration"
  },
  "paypal-java": {
    "name": "PayPal Java MCP Server",
    "githubLink": "https://github.com/kumartheashwani/paypal-java-mcp-server",
    "package": "paypal-java-mcp-server",
    "description": "A Java implementation of a PayPal MCP server providing tools for analyzing and improving payment processing",
    "installCommand": "mvn clean package",
    "requiredEnvVars": [],
    "optionalParams": [
      "spring.profiles.active",
      "spring.main.web-application-type",
      "jsonrpc.stdio.interactive"
    ],
    "usageInstructions": "Run the server using 'java -jar target/paypal-java-mcp-server-0.0.1-SNAPSHOT.jar' for web mode or 'java -Dspring.profiles.active=stdio -Dspring.main.web-application-type=NONE -Djsonrpc.stdio.interactive=true -jar target/paypal-java-mcp-server-0.0.1-SNAPSHOT-stdio.jar' for stdio mode",
    "category": "API Integration"
  },
  "devrev": {
    "name": "DevRev MCP Server",
    "githubLink": "https://github.com/kpsunil97/devrev-mcp-server",
    "package": "devrev-mcp",
    "description": "A Model Context Protocol server for searching and retrieving DevRev information",
    "installCommand": "uvx devrev-mcp",
    "requiredEnvVars": [
      "DEVREV_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure DEVREV_API_KEY and use with Claude Desktop",
    "category": "API Integration"
  },
  "generate-pr": {
    "name": "Generate PR MCP",
    "githubLink": "https://github.com/kpndevroot/generate-pr-mcp",
    "package": "generate-pr-mcp",
    "description": "Automatically generates detailed Pull Request descriptions from code changes.",
    "installCommand": "npm install -g generate-pr-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run 'mcp-server' in your project directory if installed globally, or use 'npx generate-pr-mcp'",
    "category": "Development"
  },
  "for-sensor-device": {
    "name": "MCP Server for sensor device",
    "githubLink": "https://github.com/kmwebnet/MCP-Server-for-sensor-device",
    "package": "mcp-server-for-sensor-device",
    "description": "A Node.js application simulating a CO2 sensor device, providing a JSON-RPC server to interact with the device.",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run 'node index.js' to start the server",
    "category": "Other"
  },
  "discord-chat": {
    "name": "MCP Discord Chat Server",
    "githubLink": "https://github.com/koladev32/mcp-discord-chat",
    "package": "mcp-discord-chat",
    "description": "An MCP server implementing note storage and summarization",
    "installCommand": "uvx mcp-discord-chat",
    "requiredEnvVars": [
      "UV_PUBLISH_USERNAME",
      "UV_PUBLISH_PASSWORD"
    ],
    "optionalParams": [
      "style"
    ],
    "usageInstructions": "Use the add-note tool to create new notes and summarize-notes prompt to generate summaries",
    "category": "Productivity"
  },
  "trinity": {
    "name": "Trinity-MCP Server",
    "githubLink": "https://github.com/kklab-com/trinity-mcp",
    "package": "trinity-mcp",
    "description": "A Model Context Protocol (MCP) server implementation",
    "installCommand": "npm install -g trinity-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "token"
    ],
    "usageInstructions": "Start server with './trinity-mcp -t <token>'",
    "category": "Development"
  },
  "ynab": {
    "name": "MCP YNAB Server",
    "githubLink": "https://github.com/klauern/mcp-ynab",
    "package": "mcp-ynab",
    "description": "MCP server providing access to YNAB account balances, transactions, and creation of new transactions",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [
      "YNAB_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'task dev' for development mode or 'task install' for production",
    "category": "API Integration"
  },
  "kibela": {
    "name": "Kibela MCP Server",
    "githubLink": "https://github.com/kiwamizamurai/mcp-kibela-server",
    "package": "@kiwamizamurai/mcp-kibela-server",
    "description": "MCP server for Kibela API integration, enabling LLMs to interact with Kibela content",
    "installCommand": "npx -y @kiwamizamurai/mcp-kibela-server",
    "requiredEnvVars": [
      "KIBELA_TEAM",
      "KIBELA_TOKEN"
    ],
    "optionalParams": [
      "coediting",
      "isArchived",
      "sortBy",
      "userIds",
      "folderIds",
      "limit",
      "include_image_data",
      "parentFolderId",
      "path"
    ],
    "usageInstructions": "Add to ~/.cursor/mcp.json with 'kibela' configuration and required environment variables",
    "category": "API Integration"
  },
  "anthropic-code-analyzer": {
    "name": "Anthropic MCP Code Analyzer",
    "githubLink": "https://github.com/kivo360/anthropic-mcp-code-analyzer",
    "package": "anthropic-mcp-code-analyzer",
    "description": "MCP server that analyzes open source projects and generates intelligent merge strategies using Claude",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "ANTHROPIC_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "Start server with 'npm start', then analyze repositories using curl -X POST http://localhost:3000/analyze",
    "category": "Development"
  },
  "book-fetch": {
    "name": "Book Fetch MCP",
    "githubLink": "https://github.com/kinshukk/book-fetch-mcp",
    "package": "book-fetch-mcp",
    "description": "An MCP server to access published books within Claude or other MCP clients.",
    "installCommand": "uv run main.py",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add the server configuration to claude_desktop_config.json with the appropriate path to the repository.",
    "category": "Other"
  },
  "shopify-py": {
    "name": "Shopify Python MCP Server",
    "githubLink": "https://github.com/kishimoto-banana/shopify-py-mcp",
    "package": "shopify-py-mcp",
    "description": "MCP server that integrates with Shopify API to manage products",
    "installCommand": "npx -y @modelcontextprotocol/inspector uv --directory /your_path/shopify-py-mcp run shopify-py-mcp",
    "requiredEnvVars": [
      "SHOPIFY_SHOP_URL",
      "SHOPIFY_API_KEY",
      "SHOPIFY_API_PASSWORD"
    ],
    "optionalParams": [
      "SHOPIFY_API_VERSION",
      "limit",
      "product_id",
      "title",
      "body_html",
      "vendor",
      "product_type",
      "tags",
      "status",
      "variants",
      "options",
      "images"
    ],
    "usageInstructions": "Use Claude Desktop to call tools like 'list_products', 'get_product', 'create_product', 'update_product', 'delete_product'",
    "category": "API Integration"
  },
  "youtube-transcript": {
    "name": "YouTube Transcript Server",
    "githubLink": "https://github.com/kimtaeyoon83/mcp-server-youtube-transcript",
    "package": "@kimtaeyoon83/mcp-server-youtube-transcript",
    "description": "An MCP server that retrieves transcripts from YouTube videos, providing direct access to video captions and subtitles.",
    "installCommand": "npx -y @smithery/cli install @kimtaeyoon83/mcp-server-youtube-transcript --client claude",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "lang"
    ],
    "usageInstructions": "Use with Claude Desktop by configuring the server with the command 'npx -y @kimtaeyoon83/mcp-server-youtube-transcript'",
    "category": "Web Scraping"
  },
  "mongo": {
    "name": "MCP MongoDB Server",
    "githubLink": "https://github.com/kiliczsh/mcp-mongo-server",
    "package": "mcp-mongo-server",
    "description": "A Model Context Protocol server for interacting with MongoDB databases, enabling schema inspection and MongoDB operations.",
    "installCommand": "npm install -g mcp-mongo-server",
    "requiredEnvVars": [
      "MCP_MONGODB_URI"
    ],
    "optionalParams": [
      "--read-only",
      "objectIdMode"
    ],
    "usageInstructions": "Start server with MongoDB URI: npx -y mcp-mongo-server mongodb://user:pass@localhost:27017/database",
    "category": "Database"
  },
  "weather": {
    "name": "Weather MCP Server",
    "githubLink": "https://github.com/kevinlin/mcp-server-weather",
    "package": "mcp-server-weather",
    "description": "MCP server providing weather information",
    "installCommand": "npx mcp-server-weather",
    "requiredEnvVars": [
      "OPENWEATHERMAP_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server using 'npx mcp-server-weather', then connect with an MCP client",
    "category": "API Integration"
  },
  "yt-dlp": {
    "name": "yt-dlp MCP Server",
    "githubLink": "https://github.com/kevinwatt/yt-dlp-mcp",
    "package": "@kevinwatt/yt-dlp-mcp",
    "description": "MCP server integrating yt-dlp for video and audio content download",
    "installCommand": "npx @kevinwatt/yt-dlp-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "url",
      "language",
      "resolution"
    ],
    "usageInstructions": "Use with MCP-compatible LLM service; ask to download videos, subtitles, or transcripts",
    "category": "Media"
  },
  "webhook": {
    "name": "MCP Webhook Server",
    "githubLink": "https://github.com/kevinwatt/mcp-webhook",
    "package": "@kevinwatt/mcp-webhook",
    "description": "An MCP server that integrates with webhooks for message sending",
    "installCommand": "npx -y @smithery/cli install @kevinwatt/mcp-webhook --client claude",
    "requiredEnvVars": [
      "WEBHOOK_URL"
    ],
    "optionalParams": [
      "username",
      "avatar_url"
    ],
    "usageInstructions": "Configure with Dive Desktop or start manually with 'npx @kevinwatt/mcp-webhook'",
    "category": "Communication"
  },
  "mamp-mysql": {
    "name": "MySQL MCP Server",
    "githubLink": "https://github.com/kerongon/mcp-server-mamp-mysql",
    "package": "mcp-server-mamp-mysql",
    "description": "An MCP server providing MySQL database access functionality",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "MYSQL_HOST",
      "MYSQL_USER",
      "MYSQL_PASS",
      "MYSQL_DB"
    ],
    "optionalParams": [
      "MYSQL_PORT",
      "MYSQL_SOCKET",
      "MYSQL_POOL_LIMIT"
    ],
    "usageInstructions": "The server starts automatically when initialized by the MCP system",
    "category": "Database"
  },
  "choose": {
    "name": "Choose MCP Server",
    "githubLink": "https://github.com/keurcien/choose-mcp-server",
    "package": "choose-mcp-server",
    "description": "MCP server for data analysis and querying with dbt integration",
    "installCommand": "uvx choose-mcp-server",
    "requiredEnvVars": [
      "PROJECT_ID",
      "DATASETS"
    ],
    "optionalParams": [
      "DBT_MANIFEST_FILEPATH"
    ],
    "usageInstructions": "Edit claude_desktop_config.json to include server configuration, then start Claude Desktop and ask questions",
    "category": "Data Storage"
  },
  "taskmanager": {
    "name": "MCP TaskManager",
    "githubLink": "https://github.com/kazuph/mcp-taskmanager",
    "package": "@kazuph/mcp-taskmanager",
    "description": "Task management server for Claude Desktop using Model Context Protocol",
    "installCommand": "npx -y @kazuph/mcp-taskmanager",
    "requiredEnvVars": [],
    "optionalParams": [
      "action",
      "tasks",
      "taskId",
      "getNext"
    ],
    "usageInstructions": "Configure in Claude Desktop settings by adding 'taskmanager' tool with command 'npx' and args '[-y, @kazuph/mcp-taskmanager]'",
    "category": "Productivity"
  },
  "github-pera1": {
    "name": "GitHub MCP Server for Pera1",
    "githubLink": "https://github.com/kazuph/mcp-github-pera1",
    "package": "@kazuph/mcp-github-pera1",
    "description": "MCP server connecting GitHub code to Claude.ai using Pera1 service",
    "installCommand": "npx -y @kazuph/mcp-github-pera1",
    "requiredEnvVars": [],
    "optionalParams": [
      "dir",
      "ext",
      "mode",
      "branch",
      "file"
    ],
    "usageInstructions": "Add server to Claude config, then ask about GitHub repositories using URL and optional parameters",
    "category": "Version Control"
  },
  "docs-rag": {
    "name": "MCP Docs RAG Server",
    "githubLink": "https://github.com/kazuph/mcp-docs-rag",
    "package": "@kazuph/mcp-docs-rag",
    "description": "A TypeScript-based MCP server implementing RAG system for local documents",
    "installCommand": "npx -y @kazuph/mcp-docs-rag",
    "requiredEnvVars": [
      "GEMINI_API_KEY",
      "DOCS_PATH"
    ],
    "optionalParams": [
      "document_name",
      "subdirectory"
    ],
    "usageInstructions": "Configure with Claude Desktop, set DOCS_PATH and GEMINI_API_KEY, then use tools like list_documents, rag_query, add_git_repository, and add_text_file",
    "category": "Development"
  },
  "browser-tabs": {
    "name": "MCP Browser Tabs",
    "githubLink": "https://github.com/kazuph/mcp-browser-tabs",
    "package": "@kazuph/mcp-browser-tabs",
    "description": "Model Context Protocol server for managing Chrome browser tabs, allowing clients to fetch tab information and control open tabs",
    "installCommand": "npx -y @kazuph/mcp-browser-tabs",
    "requiredEnvVars": [],
    "optionalParams": [
      "windowIndex",
      "tabIndex"
    ],
    "usageInstructions": "Add the tool to Claude Desktop configuration using the provided command and args, then enable Accessibility for Chrome",
    "category": "Browser Automation"
  },
  "backlog": {
    "name": "Backlog MCP Server",
    "githubLink": "https://github.com/katsuhirohonda/mcp-backlog-server",
    "package": "mcp-backlog-server",
    "description": "A TypeScript-based server integrating Backlog with Model Context Protocol (MCP), providing resource access, tools, and prompts for Backlog data.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "BACKLOG_API_KEY",
      "BACKLOG_SPACE_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Add server configuration to Claude Desktop config file with BACKLOG_API_KEY and BACKLOG_SPACE_URL",
    "category": "API Integration"
  },
  "cairo-coder": {
    "name": "Cairo Coder MCP Server",
    "githubLink": "https://github.com/kasarlabs/cairo-coder-mcp",
    "package": "@kasarlabs/cairo-coder-mcp",
    "description": "MCP server for Cairo and Starknet development assistance via Cairo Coder API",
    "installCommand": "npx -y @kasarlabs/cairo-coder-mcp",
    "requiredEnvVars": [
      "CAIRO_CODER_API_KEY",
      "CAIRO_CODER_API_ENDPOINT"
    ],
    "optionalParams": [
      "context"
    ],
    "usageInstructions": "Use npx command with required environment variables set",
    "category": "Development"
  },
  "lichess": {
    "name": "Lichess MCP",
    "githubLink": "https://github.com/karayaman/lichess-mcp",
    "package": "@karayaman/lichess-mcp",
    "description": "Interact with Lichess chess platform using natural language",
    "installCommand": "npx -y @smithery/cli install @karayaman/lichess-mcp --client claude",
    "requiredEnvVars": [
      "LICHESS_TOKEN"
    ],
    "optionalParams": [
      "DEBUG"
    ],
    "usageInstructions": "Configure Claude Desktop to use the MCP server by adding it to claude_desktop_config.json",
    "category": "API Integration"
  },
  "snak": {
    "name": "Snak Agent Engine",
    "githubLink": "https://github.com/kasarlabs/snak",
    "package": "@snakagent",
    "description": "A powerful AI Agent engine for Starknet, available as NPM package and backend server",
    "installCommand": "pnpm add @snakagent",
    "requiredEnvVars": [
      "STARKNET_PUBLIC_ADDRESS",
      "STARKNET_PRIVATE_KEY",
      "STARKNET_RPC_URL",
      "SERVER_API_KEY",
      "POSTGRES_USER",
      "POSTGRES_HOST",
      "POSTGRES_DB",
      "POSTGRES_PASSWORD",
      "POSTGRES_PORT",
      "NODE_ENV"
    ],
    "optionalParams": [
      "LANGSMITH_TRACING",
      "LANGSMITH_ENDPOINT",
      "LANGSMITH_API_KEY",
      "LANGSMITH_PROJECT"
    ],
    "usageInstructions": "Create agent configuration file, configure .env file, then run 'pnpm run start' or 'pnpm run start:server'",
    "category": "API Integration"
  },
  "hoverfly": {
    "name": "Hoverfly MCP Server",
    "githubLink": "https://github.com/kapishmalik/hoverfly-mcp-server",
    "package": "docker.io/kapish88/hoverfly-mcp-server",
    "description": "A Spring Boot-based Model Context Protocol (MCP) server exposing Hoverfly for dynamic mocking of third-party APIs.",
    "installCommand": "docker run -i --rm -p8500:8500 -p8888:8888 -v /path/to/your/data:/opt/hoverfly-mcp/simulation-data docker.io/kapish88/hoverfly-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "auto-load simulation"
    ],
    "usageInstructions": "Configure in .mcp.json or mcp.config.json and run using Docker",
    "category": "Development"
  },
  "webflow": {
    "name": "Webflow MCP Server",
    "githubLink": "https://github.com/kapilduraphe/webflow-mcp-server",
    "package": "@kapilduraphe/webflow-mcp-server",
    "description": "MCP server enabling Claude to interact with Webflow's APIs",
    "installCommand": "npx -y @smithery/cli install @kapilduraphe/webflow-mcp-server --client claude",
    "requiredEnvVars": [
      "WEBFLOW_API_TOKEN"
    ],
    "optionalParams": [
      "siteId"
    ],
    "usageInstructions": "Configure WEBFLOW_API_TOKEN, set up Claude Desktop configuration, and restart",
    "category": "API Integration"
  },
  "scrape-copilot": {
    "name": "Puppeteer MCP Server",
    "githubLink": "https://github.com/jwaldor/mcp-scrape-copilot",
    "package": "@modelcontextprotocol/server-puppeteer",
    "description": "A Model Context Protocol server providing browser automation capabilities using Puppeteer, enabling LLMs to interact with web pages and execute JavaScript.",
    "installCommand": "npx -y @modelcontextprotocol/server-puppeteer",
    "requiredEnvVars": [],
    "optionalParams": [
      "DOCKER_CONTAINER"
    ],
    "usageInstructions": "Use NPX to run the server, or Docker for headless chromium execution",
    "category": "Browser Automation"
  },
  "kagimcp": {
    "name": "Kagi MCP Server",
    "githubLink": "https://github.com/kagisearch/kagimcp",
    "package": "kagimcp",
    "description": "Kagi MCP server providing search and summarization capabilities",
    "installCommand": "npx -y @smithery/cli install kagimcp --client claude",
    "requiredEnvVars": [
      "KAGI_API_KEY"
    ],
    "optionalParams": [
      "KAGI_SUMMARIZER_ENGINE",
      "FASTMCP_LOG_LEVEL"
    ],
    "usageInstructions": "Pose queries like 'Who was time's 2024 person of the year?' for search or 'summarize this video: https://www.youtube.com/watch?v=jNQXAC9IVRw' for summarizer",
    "category": "API Integration"
  },
  "fred": {
    "name": "FRED MCP Server",
    "githubLink": "https://github.com/kablewy/fred-mcp-server",
    "package": "fred-mcp-server",
    "description": "An MCP server for accessing Federal Reserve Economic Data (FRED) API, providing tools to search and retrieve economic data series.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "FRED_API_KEY"
    ],
    "optionalParams": [
      "date range",
      "frequency adjustment",
      "aggregation methods",
      "sorting and pagination"
    ],
    "usageInstructions": "Run 'npm run dev' for development mode or 'npm start' for production mode after building with 'npm run build'.",
    "category": "API Integration"
  },
  "biomart": {
    "name": "Biomart MCP Server",
    "githubLink": "https://github.com/jzinno/biomart-mcp",
    "package": "@jzinno/biomart-mcp",
    "description": "An MCP server that interfaces with Biomart databases, providing tools for mart and dataset discovery, attribute and filter exploration, data retrieval, and ID translation.",
    "installCommand": "npx -y @smithery/cli install @jzinno/biomart-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "To use the Biomart MCP server, first install it via Smithery using the provided command, then configure it according to the instructions for Claude Desktop, Cursor, or Glama.",
    "category": "Database"
  },
  "qrcode": {
    "name": "MCP QR Code Server",
    "githubLink": "https://github.com/jwalsh/mcp-server-qrcode",
    "package": "@jwalsh/mcp-server-qrcode",
    "description": "Generate QR codes for various content types using the Model Context Protocol",
    "installCommand": "npm install -g @jwalsh/mcp-server-qrcode",
    "requiredEnvVars": [],
    "optionalParams": [
      "size",
      "error correction level",
      "format"
    ],
    "usageInstructions": "Use npx -y @jwalsh/mcp-server-qrcode to run the server, or integrate with MCP-compatible clients like Claude Desktop or Emacs with mcp.el",
    "category": "Productivity"
  },
  "api-expert": {
    "name": "MCP API Connect",
    "githubLink": "https://github.com/jwaldor/mcp-api-expert",
    "package": "mcp-api-connect",
    "description": "MCP server to connect to any REST API using API documentation and keys",
    "installCommand": "npm i -g mcp-api-connect",
    "requiredEnvVars": [],
    "optionalParams": [
      "API documentation",
      "API keys"
    ],
    "usageInstructions": "Run 'mcpapiconnect install' after installation, then restart Claude",
    "category": "API Integration"
  },
  "laravel": {
    "name": "Laravel Helpers MCP",
    "githubLink": "https://github.com/jsonallen/laravel-mcp",
    "package": "laravel-mcp",
    "description": "A collection of Laravel helper tools for Cursor IDE integration",
    "installCommand": "git clone https://github.com/jsonallen/laravel-mcp.git && cd laravel-mcp",
    "requiredEnvVars": [
      "LARAVEL_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Create a shell script wrapper to run the MCP server, pointing to your Laravel project path",
    "category": "Development"
  },
  "untappd": {
    "name": "Untappd MCP Server",
    "githubLink": "https://github.com/jtucker/mcp-untappd-server",
    "package": "mcp-untappd-server",
    "description": "MCP server for querying Untappd API for beer information and user checkins",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "beer_id"
    ],
    "usageInstructions": "Configure in Claude Desktop config file with server path",
    "category": "API Integration"
  },
  "mcpunk": {
    "name": "MCPunk",
    "githubLink": "https://github.com/jurasofish/mcpunk",
    "package": "mcpunk",
    "description": "MCP server providing tools to configure projects, search code, and analyze git repositories",
    "installCommand": "uvx mcpunk",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop to use MCPunk by adding it to claude_desktop_config.json",
    "category": "Development"
  },
  "globalping": {
    "name": "Globalping MCP Server",
    "githubLink": "https://github.com/jsdelivr/globalping-mcp-server",
    "package": "mcp-remote",
    "description": "Enables AI models to interact with Globalping's global network measurement platform through natural language.",
    "installCommand": "npx mcp-remote https://mcp.globalping.dev/sse",
    "requiredEnvVars": [
      "GLOBALPING_CLIENT_ID"
    ],
    "optionalParams": [
      "locations",
      "limits",
      "getMeasurement",
      "compareLocations"
    ],
    "usageInstructions": "Use natural language to interact with Globalping, e.g., 'Ping google.com from 3 locations in Europe'",
    "category": "API Integration"
  },
  "sketch-context": {
    "name": "Sketch Context MCP",
    "githubLink": "https://github.com/jshmllr/Sketch-Context-MCP",
    "package": "sketch-context-mcp",
    "description": "An MCP server for integrating Sketch designs with IDEs like Cursor, Cline, or Windsurf",
    "installCommand": "npx sketch-context-mcp --local-file=/path/to/your/file.sketch",
    "requiredEnvVars": [
      "SKETCH_API_KEY"
    ],
    "optionalParams": [
      "--local-file",
      "--sketch-api-key",
      "--port"
    ],
    "usageInstructions": "Run 'sketch-context-mcp --local-file=/path/to/your/file.sketch' and connect to Cursor IDE",
    "category": "Development"
  },
  "file-modifier": {
    "name": "MCP Server File Modifier",
    "githubLink": "https://github.com/jpinillagoshawk/mcp-server-file-modifier",
    "package": "mcp-server-file-modifier",
    "description": "A Model Context Protocol server for modifying files through AI assistants",
    "installCommand": "npm install -g mcp-server-file-modifier",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run 'mcp-server-file-modifier' to start the server on port 3000",
    "category": "File Management"
  },
  "tmux": {
    "name": "Tmux MCP Server",
    "githubLink": "https://github.com/jonrad/tmux-mcp",
    "package": "tmux-mcp",
    "description": "Provides programmatic control over tmux sessions through MCP implementation",
    "installCommand": "uvx --from git+https://github.com/jonrad/tmux-mcp tmux-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure in MCP client using 'uvx --from git+https://github.com/jonrad/tmux-mcp tmux-mcp'",
    "category": "Development"
  },
  "timeplus": {
    "name": "Timeplus MCP Server",
    "githubLink": "https://github.com/jovezhong/mcp-timeplus",
    "package": "mcp-timeplus",
    "description": "An MCP server for Timeplus that enables SQL queries and Kafka topic management",
    "installCommand": "uvx mcp-timeplus",
    "requiredEnvVars": [
      "TIMEPLUS_HOST",
      "TIMEPLUS_USER",
      "TIMEPLUS_PASSWORD"
    ],
    "optionalParams": [
      "TIMEPLUS_PORT",
      "TIMEPLUS_SECURE",
      "TIMEPLUS_VERIFY",
      "TIMEPLUS_CONNECT_TIMEOUT",
      "TIMEPLUS_SEND_RECEIVE_TIMEOUT",
      "TIMEPLUS_DATABASE",
      "TIMEPLUS_READ_ONLY",
      "TIMEPLUS_KAFKA_CONFIG"
    ],
    "usageInstructions": "Configure environment variables in Claude Desktop configuration file or .env file, then run 'uvx mcp-timeplus' to start the server",
    "category": "Data Storage"
  },
  "comfy-ui": {
    "name": "Comfy UI MCP Server",
    "githubLink": "https://github.com/jonpojonpo/comfy-ui-mcp-server",
    "package": "comfy-ui-mcp-server",
    "description": "A server for connecting to a local Comfy UI, providing note storage and summarization capabilities",
    "installCommand": "uvx comfy-ui-mcp-server",
    "requiredEnvVars": [
      "UV_PUBLISH_USERNAME",
      "UV_PUBLISH_PASSWORD"
    ],
    "optionalParams": [
      "style"
    ],
    "usageInstructions": "Use the add-note tool to add new notes and the summarize-notes prompt to generate summaries",
    "category": "Productivity"
  },
  "mongodb": {
    "name": "MongoDB MCP Server",
    "githubLink": "https://github.com/jonfreeland/mongodb-mcp",
    "package": "mongodb-mcp",
    "description": "A Model Context Protocol server providing read-only access to MongoDB databases through standardized MCP tools and resources.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "MONGODB_URI"
    ],
    "optionalParams": [
      "MONGODB_DEFAULT_DATABASE"
    ],
    "usageInstructions": "Configure the server with MongoDB connection string and default database name, then integrate with Claude Desktop, Claude Web, or Claude Code.",
    "category": "Database"
  },
  "juliadoc": {
    "name": "Julia Documentation MCP Server",
    "githubLink": "https://github.com/jonathanfischer97/juliadoc-mcp",
    "package": "@jonathanfischer97/server-juliadoc",
    "description": "An MCP server that serves Julia documentation and source code to Claude Desktop.",
    "installCommand": "npx -y @jonathanfischer97/server-juliadoc",
    "requiredEnvVars": [
      "JULIA_PROJECT"
    ],
    "optionalParams": [
      "path"
    ],
    "usageInstructions": "Add the server to Claude Desktop configuration using the provided command and args, and set JULIA_PROJECT environment variable if needed.",
    "category": "Development"
  },
  "sqlite-npx": {
    "name": "MCP SQLite Server",
    "githubLink": "https://github.com/johnnyoshika/mcp-server-sqlite-npx",
    "package": "mcp-server-sqlite-npx",
    "description": "Node.js implementation of the Model Context Protocol SQLite server",
    "installCommand": "npx -y @smithery/cli install mcp-server-sqlite-npx --client claude",
    "requiredEnvVars": [
      "PATH",
      "NODE_PATH"
    ],
    "optionalParams": [
      "/absolute/path/to/database.db"
    ],
    "usageInstructions": "Add configuration to claude_desktop_config.json with database path",
    "category": "Database"
  },
  "netskope": {
    "name": "Netskope NPA MCP Server",
    "githubLink": "https://github.com/johnneerdael/netskope-mcp",
    "package": "@johnneerdael/netskope-mcp",
    "description": "MCP server for managing Netskope Network Private Access infrastructure through LLMs",
    "installCommand": "npm install @johnneerdael/netskope-mcp",
    "requiredEnvVars": [
      "NETSKOPE_BASE_URL",
      "NETSKOPE_API_KEY"
    ],
    "optionalParams": [
      "fields"
    ],
    "usageInstructions": "Configure NETSKOPE_BASE_URL and NETSKOPE_API_KEY environment variables, then use npx -y @johnneerdael/netskope-mcp to run the server",
    "category": "API Integration"
  },
  "md-webcrawl": {
    "name": "MD MCP Webcrawler",
    "githubLink": "https://github.com/jmh108/md-webcrawl-mcp",
    "package": "fastmcp",
    "description": "A Python-based MCP web crawler for extracting and saving website content as markdown files",
    "installCommand": "fastmcp install server.py",
    "requiredEnvVars": [],
    "optionalParams": [
      "OUTPUT_PATH",
      "MAX_CONCURRENT_REQUESTS",
      "REQUEST_TIMEOUT"
    ],
    "usageInstructions": "Use 'mcp call' commands like 'extract_content' or 'scan_linked_content' to interact with the server",
    "category": "Web Scraping"
  },
  "readability-python": {
    "name": "MCP Server Readability Parser",
    "githubLink": "https://github.com/jmh108/MCP-server-readability-python",
    "package": "MCP-server-readability-python",
    "description": "Extracts and transforms webpage content into clean, LLM-optimized Markdown using Readability algorithm",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "url"
    ],
    "usageInstructions": "Start server with 'fastmcp run server.py', then use curl to send POST request to http://localhost:8000/tools/extract_content with JSON body containing 'url'",
    "category": "Web Scraping"
  },
  "joesandboxmcp": {
    "name": "Joe Sandbox MCP Server",
    "githubLink": "https://github.com/joesecurity/joesandboxMCP",
    "package": "joesandboxMCP",
    "description": "An MCP server for interacting with Joe Sandbox Cloud, providing rich analysis and IOC extraction capabilities.",
    "installCommand": "uv venv && uv pip install -e .",
    "requiredEnvVars": [
      "JBXAPIKEY",
      "ACCEPTTAC"
    ],
    "optionalParams": [],
    "usageInstructions": "Clone the repository, install dependencies using uv, and launch the MCP server with the required environment variables set.",
    "category": "Security"
  },
  "sanity": {
    "name": "Sanity MCP Server",
    "githubLink": "https://github.com/jlmelis/sanity-mcp-server",
    "package": "sanity-mcp-server",
    "description": "MCP server for interacting with Sanity.io content from Claude Desktop",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "SANITY_PROJECT_ID",
      "SANITY_DATASET",
      "SANITY_TOKEN"
    ],
    "optionalParams": [
      "type",
      "content",
      "id",
      "limit"
    ],
    "usageInstructions": "Create a .env file with Sanity credentials, then run with Claude Desktop MCP Servers settings",
    "category": "API Integration"
  },
  "dart": {
    "name": "Dart MCP Server",
    "githubLink": "https://github.com/jmanhype/dart-mcp-server",
    "package": "@jmanhype/dart-mcp-server",
    "description": "MCP server implementation for Dart, providing task management and workspace organization",
    "installCommand": "npx -y @smithery/cli install @jmanhype/dart-mcp-server --client claude",
    "requiredEnvVars": [
      "DART_TOKEN"
    ],
    "optionalParams": [
      "PYTHONPATH",
      "PYTHON_PATH"
    ],
    "usageInstructions": "Build TypeScript code with 'npm run build' and start server with 'npm start'",
    "category": "Productivity"
  },
  "florence2": {
    "name": "Florence-2 MCP Server",
    "githubLink": "https://github.com/jkawamoto/mcp-florence2",
    "package": "@jkawamoto/mcp-florence2",
    "description": "An MCP server for processing images using Florence-2 for OCR and caption generation",
    "installCommand": "uvx --from git+https://github.com/jkawamoto/mcp-florence2 mcp-florence2",
    "requiredEnvVars": [],
    "optionalParams": [
      "src"
    ],
    "usageInstructions": "Use the 'ocr' or 'caption' tools with a file path or URL as the 'src' argument",
    "category": "Media"
  },
  "webscrapemcpserver": {
    "name": "Web Crawler MCP Server",
    "githubLink": "https://github.com/jitsmaster/web-crawler-mcp",
    "package": "web-crawler-mcp",
    "description": "An MCP server providing web crawling functionality with configurable depth and concurrency",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "CRAWL_LINKS",
      "MAX_DEPTH",
      "REQUEST_DELAY",
      "TIMEOUT",
      "MAX_CONCURRENT"
    ],
    "usageInstructions": "Use the 'crawl' tool through MCP with a URL and depth, e.g., {\"url\": \"https://example.com\", \"depth\": 1}",
    "category": "Web Scraping"
  },
  "json-db-collection": {
    "name": "JSON Document Collection Server",
    "githubLink": "https://github.com/jimpick/mcp-json-db-collection-server",
    "package": "mcp-json-db-collection-server",
    "description": "MCP server for creating multiple JSON document databases with CRUD operations and cloud sync",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Build with 'npm build', then configure in Claude Desktop config file",
    "category": "Data Storage"
  },
  "elastic-semantic-search": {
    "name": "Elasticsearch Semantic Search MCP Server",
    "githubLink": "https://github.com/jedrazb/elastic-semantic-search-mcp-server",
    "package": "elastic-semantic-search-mcp-server",
    "description": "Python MCP server for semantic search through Search Labs blog posts indexed in Elasticsearch",
    "installCommand": "make dev",
    "requiredEnvVars": [
      "ES_URL",
      "ES_AP_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Start the server using 'make dev' and access MCP Inspector at http://localhost:5173",
    "category": "Data Storage"
  },
  "pure-model-context-protocol": {
    "name": "Pure Storage Model Context Protocol Server",
    "githubLink": "https://github.com/jboothomas/pure-model-context-protocol",
    "package": "pure-mcp-server",
    "description": "MCP server to interact with Pure Storage arrays and retrieve real-time information",
    "installCommand": "uv run pure-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add relevant entry to claude_desktop_config.json file with command and args",
    "category": "Storage"
  },
  "smartlead-local": {
    "name": "Smartlead Simplified MCP Server",
    "githubLink": "https://github.com/jean-technologies/smartlead-mcp-server-local",
    "package": "smartlead-mcp-server",
    "description": "Simplified interface to Smartlead API for email marketing features",
    "installCommand": "npx -y @smithery/cli install @jean-technologies/smartlead-mcp-server-local --client claude",
    "requiredEnvVars": [
      "SMARTLEAD_API_KEY"
    ],
    "optionalParams": [
      "--api-key",
      "--client"
    ],
    "usageInstructions": "Run 'npx smartlead-mcp-server start' for Claude or 'npx smartlead-mcp-server sse' for n8n",
    "category": "API Integration"
  },
  "document-reader": {
    "name": "MCP Document Reader",
    "githubLink": "https://github.com/jbchouinard/mcp-document-reader",
    "package": "mcp-document-reader",
    "description": "An MCP server for interacting with PDF and EPUB documents",
    "installCommand": "pipx install git+https://github.com/jbchouinard/mcp-document-reader.git",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Clone the repository, install with Poetry, and configure MCP server settings",
    "category": "File Management"
  },
  "clanki": {
    "name": "Clanki - Anki Integration for Claude",
    "githubLink": "https://github.com/jasperket/clanki",
    "package": "clanki",
    "description": "MCP server enabling AI assistants like Claude to interact with Anki flashcard decks",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "tags",
      "backExtra"
    ],
    "usageInstructions": "Configure Claude for Desktop to use the server by editing claude_desktop_config.json with the server path",
    "category": "Productivity"
  },
  "image-generation-cloudflare": {
    "name": "Image Generation MCP Cloudflare",
    "githubLink": "https://github.com/janwilmake/image-generation-mcp-cloudflare",
    "package": "image-generation-mcp-cloudflare",
    "description": "MCP server for image generation using Cloudflare",
    "installCommand": "npx image-generation-mcp-cloudflare",
    "requiredEnvVars": [
      "CLOUDFLARE_ACCOUNT_ID",
      "CLOUDFLARE_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Set required environment variables and run the installation command",
    "category": "Media"
  },
  "vibe-worldbuilding": {
    "name": "Vibe Worldbuilding MCP",
    "githubLink": "https://github.com/jasnonaz/vibe-worldbuilding-mcp",
    "package": "vibe-worldbuilding-mcp",
    "description": "Create detailed fictional worlds with AI-generated images and navigable websites using Claude",
    "installCommand": "pip install -e . && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "FAL_KEY"
    ],
    "usageInstructions": "Configure Claude Desktop to use the MCP server, then ask Claude to create a world",
    "category": "Productivity"
  },
  "draw-things-cursor": {
    "name": "Draw Things MCP",
    "githubLink": "https://github.com/jaokuohsuan/draw-things-mcp-cursor",
    "package": "draw-things-mcp-cursor",
    "description": "Draw Things API integration for Cursor using Model Context Protocol (MCP)",
    "installCommand": "npx draw-things-mcp-cursor",
    "requiredEnvVars": [],
    "optionalParams": [
      "negative_prompt",
      "width",
      "height",
      "steps",
      "model",
      "sampler"
    ],
    "usageInstructions": "Use in Cursor: generateImage({\"prompt\": \"a cute cat\"}) or via CLI: echo '{\"prompt\": \"your prompt here\"}' | npx draw-things-mcp-cursor",
    "category": "API Integration"
  },
  "webmcp": {
    "name": "WebMCP",
    "githubLink": "https://github.com/jasonjmcghee/WebMCP",
    "package": "@jason.today/webmcp",
    "description": "WebMCP allows websites to share tools and resources with LLMs through a websocket server",
    "installCommand": "npx -y @jason.today/webmcp@latest --config claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "--config",
      "--mcp",
      "--new",
      "-q",
      "--docker"
    ],
    "usageInstructions": "Run 'npx -y @jason.today/webmcp@latest --config claude' to start, then generate an MCP token and paste it on the website",
    "category": "API Integration"
  },
  "forevervm": {
    "name": "foreverVM",
    "githubLink": "https://github.com/jamsocket/forevervm",
    "package": "forevervm",
    "description": "API for running stateful Python code securely in machines that process instructions",
    "installCommand": "npx forevervm login",
    "requiredEnvVars": [
      "FOREVERVM_TOKEN"
    ],
    "optionalParams": [
      "machine_name",
      "tags",
      "memory_mb"
    ],
    "usageInstructions": "Use npx forevervm repl to open a REPL interface with a new machine, or npx forevervm repl [machine_name] to reconnect to an existing machine",
    "category": "Development"
  },
  "gatherer": {
    "name": "Magic: The Gathering MCP Tool Server",
    "githubLink": "https://github.com/james2037/mcp-gatherer",
    "package": "james2037/mcp-gatherer",
    "description": "A Model Context Protocol server for accessing Magic: The Gathering card data, rules, and set information.",
    "installCommand": "composer install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Clone the repository, navigate to the project directory, and run 'php path/to/mcp_server.php' to start the server.",
    "category": "Other"
  },
  "statsource": {
    "name": "Statsource MCP Server",
    "githubLink": "https://github.com/jamie7893/statsource-mcp",
    "package": "mcp-server-stats",
    "description": "A Model Context Protocol server providing statistical analysis capabilities for LLMs",
    "installCommand": "pip install mcp-server-stats",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "data_source",
      "source_type",
      "table_name",
      "statistics",
      "query_type",
      "periods",
      "filters",
      "groupby",
      "options",
      "date_column",
      "start_date",
      "end_date",
      "priority",
      "description",
      "use_case"
    ],
    "usageInstructions": "Run using 'python -m mcp_server_stats' or 'docker run -i --rm jamie78933/statsource-mcp'",
    "category": "Analytics"
  },
  "json-schema": {
    "name": "JSON Schema MCP Server",
    "githubLink": "https://github.com/jaho5/json-schema-mcp",
    "package": "mcp[cli]",
    "description": "An MCP server for managing JSON schemas and creating instances from them.",
    "installCommand": "pip install mcp[cli]",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run the server with 'python server.py' or install with Claude Desktop using 'mcp install server.py'",
    "category": "Development"
  },
  "solarwinds": {
    "name": "SolarWinds Logs MCP Server",
    "githubLink": "https://github.com/jakenuts/mcp-solarwinds",
    "package": "mcp-solarwinds",
    "description": "An MCP server for accessing and visualizing SolarWinds Observability logs.",
    "installCommand": "npx -y mcp-solarwinds",
    "requiredEnvVars": [
      "SOLARWINDS_API_TOKEN"
    ],
    "optionalParams": [
      "filter",
      "entityId",
      "startTime",
      "endTime",
      "interval",
      "use_utc",
      "format",
      "pageSize",
      "direction"
    ],
    "usageInstructions": "Configure SOLARWINDS_API_TOKEN in MCP settings or environment. Use tools like 'search_logs' and 'visualize_logs' with appropriate parameters.",
    "category": "API Integration"
  },
  "cli-exec": {
    "name": "MCP CLI Exec Server",
    "githubLink": "https://github.com/jakenuts/mcp-cli-exec",
    "package": "mcp-cli-exec",
    "description": "A powerful CLI command execution MCP server that enables running shell commands with structured output.",
    "installCommand": "npm install -g mcp-cli-exec",
    "requiredEnvVars": [],
    "optionalParams": [
      "timeout",
      "workingDirectory"
    ],
    "usageInstructions": "Use npx mcp-cli-exec or install globally with npm install -g mcp-cli-exec. Configure in cline_mcp_settings.json or claude_desktop_config.json.",
    "category": "Development"
  },
  "codechecker": {
    "name": "CodeChecker MCP",
    "githubLink": "https://github.com/jacklandis29/codechecker-mcp",
    "package": "codechecker-mcp",
    "description": "A code review tool for Cursor IDE using OpenAI's GPT models for intelligent code analysis.",
    "installCommand": "pip install -e .",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "--transport",
      "--port"
    ],
    "usageInstructions": "Start the server with 'python main.py --transport sse --port 8000' and configure Cursor IDE settings.",
    "category": "Development"
  },
  "obsidian-tools": {
    "name": "MCP Tools for Obsidian",
    "githubLink": "https://github.com/jacksteamdev/obsidian-mcp-tools",
    "package": "obsidian-mcp-tools",
    "description": "Enables AI applications to securely access Obsidian vault through Model Context Protocol",
    "installCommand": "npx obsidian-mcp-tools",
    "requiredEnvVars": [
      "OBSIDIAN_API_KEY"
    ],
    "optionalParams": [
      "Templater plugin",
      "Smart Connections plugin"
    ],
    "usageInstructions": "Install plugin from Obsidian's Community Plugins, enable plugin, and click 'Install Server'",
    "category": "Productivity"
  },
  "claude-pytorch-treehugger": {
    "name": "PyTorch HUD API MCP Server",
    "githubLink": "https://github.com/izaitsevfb/claude-pytorch-treehugger",
    "package": "git+https://github.com/izaitsevfb/claude-pytorch-treehugger.git",
    "description": "MCP server for PyTorch CI/CD analytics and log analysis",
    "installCommand": "pip install git+https://github.com/izaitsevfb/claude-pytorch-treehugger.git",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "claude mcp add hud pytorch-hud",
    "category": "Development"
  },
  "elastic-memory": {
    "name": "MCP Memory",
    "githubLink": "https://github.com/mcp-servers/mcp-servers",
    "package": "mcp-elastic-memory",
    "description": "Elasticsearch-backed knowledge graph system for persistent AI memory",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "ES_NODE"
    ],
    "optionalParams": [
      "memory zones",
      "entity types"
    ],
    "usageInstructions": "Start Elasticsearch using 'npm run es:start', then build the project with 'npm run build'",
    "category": "Data Storage"
  },
  "alchemy-sdk": {
    "name": "Alchemy MCP Plugin",
    "githubLink": "https://github.com/itsanishjain/alchemy-sdk-mcp",
    "package": "@itsanishjain/alchemy-sdk-mcp",
    "description": "MCP plugin providing Alchemy SDK integration for blockchain and NFT operations",
    "installCommand": "npx -y @smithery/cli install @itsanishjain/alchemy-sdk-mcp --client claude",
    "requiredEnvVars": [
      "ALCHEMY_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure ALCHEMY_API_KEY in settings.json, then start server with npm start",
    "category": "Blockchain"
  },
  "contentful": {
    "name": "Contentful MCP Server",
    "githubLink": "https://github.com/ivo-toby/contentful-mcp",
    "package": "@ivotoby/contentful-management-mcp-server",
    "description": "An MCP server implementation that integrates with Contentful's Content Management API, providing comprehensive content management capabilities.",
    "installCommand": "npx -y @ivotoby/contentful-management-mcp-server",
    "requiredEnvVars": [
      "CONTENTFUL_MANAGEMENT_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "CONTENTFUL_HOST",
      "ENABLE_HTTP_SERVER",
      "HTTP_PORT",
      "HTTP_HOST",
      "SPACE_ID",
      "ENVIRONMENT_ID",
      "app-id",
      "private-key",
      "space-id",
      "environment-id"
    ],
    "usageInstructions": "Add to claude_desktop_config.json with 'npx -y @ivotoby/contentful-management-mcp-server' command and set CONTENTFUL_MANAGEMENT_ACCESS_TOKEN environment variable",
    "category": "API Integration"
  },
  "litellm": {
    "name": "LiteLLM MCP Server",
    "githubLink": "https://github.com/itsDarianNgo/mcp-server-litellm",
    "package": "mcp-server-litellm",
    "description": "MCP server integrating LiteLLM for text completions using OpenAI models",
    "installCommand": "pip install mcp-server-litellm",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After installation, run the server",
    "category": "API Integration"
  },
  "langchain-ts-client": {
    "name": "LangChain.js MCP Client",
    "githubLink": "https://github.com/isaacwasserman/mcp-langchain-ts-client",
    "package": "mcp-langchain-ts-client",
    "description": "A LangChain.js client for Model Context Protocol, enabling integration with MCP servers.",
    "installCommand": "npm install mcp-langchain-ts-client",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Initialize the MCPToolkit with server parameters, extract LangChain.js compatible tools, and use them with a LangChain agent.",
    "category": "API Integration"
  },
  "iplocate": {
    "name": "IPLocate.io MCP Server",
    "githubLink": "https://github.com/iplocate/mcp-server-iplocate",
    "package": "@iplocate/mcp-server",
    "description": "MCP server providing comprehensive IP address intelligence including geolocation, network information, and privacy detection",
    "installCommand": "npx -y @iplocate/mcp-server",
    "requiredEnvVars": [
      "IPLOCATE_API_KEY"
    ],
    "optionalParams": [
      "ip"
    ],
    "usageInstructions": "Configure IPLOCATE_API_KEY in your MCP client or environment variables, then use tools like lookup_ip_address_details or pre-configured prompts",
    "category": "API Integration"
  },
  "ip2location-io": {
    "name": "IP2Location.io MCP Server",
    "githubLink": "https://github.com/ip2location/mcp-ip2location-io",
    "package": "@ip2location/mcp-ip2location-io",
    "description": "An MCP server that provides geolocation data for IP addresses using IP2Location.io API",
    "installCommand": "uv run server.py",
    "requiredEnvVars": [
      "IP2LOCATION_API_KEY"
    ],
    "optionalParams": [
      "ip"
    ],
    "usageInstructions": "Enter IP address queries in Claude Desktop to get geolocation data",
    "category": "API Integration"
  },
  "textin": {
    "name": "TextIn OCR MCP Server",
    "githubLink": "https://github.com/intsig-textin/textin-mcp",
    "package": "@intsig/server-textin",
    "description": "Extracts text and performs OCR on documents, including document text recognition, ID recognition, and invoice recognition.",
    "installCommand": "npx -y @intsig/server-textin",
    "requiredEnvVars": [
      "APP_ID",
      "APP_SECRET"
    ],
    "optionalParams": [
      "key",
      "table_header"
    ],
    "usageInstructions": "Register for a TextIn account, get APP_ID and APP_SECRET, then run using npx with required environment variables set.",
    "category": "Media"
  },
  "instant": {
    "name": "InstantDB",
    "githubLink": "https://github.com/instantdb/instant",
    "package": "@instantdb/react",
    "description": "A modern Firebase alternative providing a real-time database for frontend applications.",
    "installCommand": "npm install @instantdb/react",
    "requiredEnvVars": [
      "NEXT_PUBLIC_APP_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "Initialize the database with your app ID and use the provided hooks for queries and transactions.",
    "category": "Database"
  },
  "ytrnscrpt": {
    "name": "YouTube Transcript MCP Server",
    "githubLink": "https://github.com/index01d/ytrnscrpt-mcp-server",
    "package": "ytrnscrpt-mcp-server",
    "description": "MCP server that enables Claude to fetch and analyze YouTube video transcripts",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop by editing claude_desktop_config.json and adding the server configuration",
    "category": "API Integration"
  },
  "elasticsearch7": {
    "name": "Elasticsearch7.x MCP Server",
    "githubLink": "https://github.com/imlewc/elasticsearch7-mcp-server",
    "package": "@imlewc/elasticsearch7-mcp-server",
    "description": "An MCP server providing compatibility with Elasticsearch7.x versions",
    "installCommand": "npx -y @smithery/cli install @imlewc/elasticsearch7-mcp-server --client claude",
    "requiredEnvVars": [
      "ELASTIC_HOST",
      "ELASTIC_USERNAME",
      "ELASTIC_PASSWORD"
    ],
    "optionalParams": [
      "MCP_PORT"
    ],
    "usageInstructions": "Use any MCP client to connect to the MCP server, e.g., client = MCPClient('localhost:9999')",
    "category": "Database"
  },
  "serpapi": {
    "name": "SerpApi MCP Server",
    "githubLink": "https://github.com/ilyazub/serpapi-mcp-server",
    "package": "serpapi",
    "description": "MCP server integrating with SerpApi to perform searches across various search engines",
    "installCommand": "pip install mcp serpapi python-dotenv",
    "requiredEnvVars": [
      "SERPAPI_API_KEY"
    ],
    "optionalParams": [
      "query",
      "engine",
      "location"
    ],
    "usageInstructions": "Run 'python server.py' after setting SERPAPI_API_KEY in .env file",
    "category": "API Integration"
  },
  "excalidraw": {
    "name": "Excalidraw MCP Server",
    "githubLink": "https://github.com/i-tozer/excalidraw-mcp",
    "package": "excalidraw-mcp",
    "description": "MCP server providing API functionality for operating on Excalidraw drawings",
    "installCommand": "npx -y excalidraw-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server using 'npm start' after cloning and installing dependencies",
    "category": "Productivity"
  },
  "opensearch": {
    "name": "OpenSearch MCP Server",
    "githubLink": "https://github.com/ibrooksSDX/mcp-server-opensearch",
    "package": "@ibrooksSDX/mcp-server-opensearch",
    "description": "A Model Context Protocol server for OpenSearch, acting as a semantic memory layer",
    "installCommand": "npx -y @smithery/cli install @ibrooksSDX/mcp-server-opensearch --client claude",
    "requiredEnvVars": [
      "OPENSEARCH_HOST",
      "OPENSEARCH_HOSTPORT",
      "INDEX_NAME"
    ],
    "optionalParams": [
      "opensearch-url",
      "opensearch-api-key",
      "index-name"
    ],
    "usageInstructions": "Use with Claude Desktop by configuring mcpServers in claude_desktop_config.json",
    "category": "Database"
  },
  "party-time": {
    "name": "Party Time MCP Server",
    "githubLink": "https://github.com/idyll/party-time-mcp",
    "package": "party_time_mcp",
    "description": "A simple MCP server that responds with 'It's Party Time' when asked about the current time.",
    "installCommand": "mix escript.build",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Build the executable using 'mix escript.build', configure Claude Desktop with the executable path, and restart Claude Desktop.",
    "category": "Other"
  },
  "iaptic": {
    "name": "Iaptic MCP Server",
    "githubLink": "https://github.com/iaptic/mcp-server-iaptic",
    "package": "mcp-server-iaptic",
    "description": "MCP server for interacting with Iaptic API to answer questions about customers, purchases, transactions, and statistics",
    "installCommand": "npx -y mcp-server-iaptic --api-key YOUR_API_KEY --app-name YOUR_APP_NAME",
    "requiredEnvVars": [],
    "optionalParams": [
      "api-key",
      "app-name"
    ],
    "usageInstructions": "Add configuration to Claude Desktop config file with command: npx mcp-server-iaptic --api-key your-api-key-here --app-name your-app-name-here",
    "category": "API Integration"
  },
  "fileforge": {
    "name": "FileForge",
    "githubLink": "https://github.com/iMAGRAY/FileForge",
    "package": "github:iMAGRAY/FileForge",
    "description": "MCP server for advanced file and code management with optimized performance and vector embeddings support",
    "installCommand": "npx --yes github:iMAGRAY/FileForge node src/fileforge.cjs",
    "requiredEnvVars": [
      "NODE_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Use in MCP client configuration or run directly with npx",
    "category": "File Management"
  },
  "nodejs-debugger": {
    "name": "MCP Node.js Debugger",
    "githubLink": "https://github.com/hyperdrive-eng/mcp-nodejs-debugger",
    "package": "@hyperdrive-eng/mcp-nodejs-debugger",
    "description": "An MCP server for debugging Node.js applications at runtime",
    "installCommand": "npx @hyperdrive-eng/mcp-nodejs-debugger",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run 'node --inspect {file.js}' to start Node.js in debug mode, then use Cursor or Claude Code to debug",
    "category": "Development"
  },
  "metabase": {
    "name": "Metabase MCP Server",
    "githubLink": "https://github.com/hyeongjun-dev/metabase-mcp-server",
    "package": "@hyeongjun-dev/metabase-mcp-server",
    "description": "MCP server integrating AI assistants with Metabase analytics platform",
    "installCommand": "npx -y @hyeongjun-dev/metabase-mcp-server",
    "requiredEnvVars": [
      "METABASE_URL",
      "METABASE_API_KEY"
    ],
    "optionalParams": [
      "LOG_LEVEL"
    ],
    "usageInstructions": "Set required environment variables and run using npx or Docker",
    "category": "Analytics"
  },
  "hasura": {
    "name": "Advanced Hasura GraphQL MCP Server",
    "githubLink": "https://github.com/husamabusafa/hasura",
    "package": "mcp-hasura-advanced",
    "description": "An MCP server providing advanced interface to interact with Hasura GraphQL endpoint",
    "installCommand": "pnpm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "ADMIN_SECRET"
    ],
    "usageInstructions": "pnpm start <HASURA_GRAPHQL_ENDPOINT> [ADMIN_SECRET]",
    "category": "API Integration"
  },
  "brave": {
    "name": "Brave MCP Server",
    "githubLink": "https://github.com/human-spider/mcp-server-brave",
    "package": "mcp-server-brave",
    "description": "MCP server for Brave browser integration",
    "installCommand": "npx mcp-server-brave",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run using npx command",
    "category": "Browser Automation"
  },
  "arxiv": {
    "name": "ArXiv MCP Server",
    "githubLink": "https://github.com/blazickjp/arxiv-mcp-server",
    "package": "arxiv-mcp-server",
    "description": "Enables AI assistants to search and access arXiv papers through a simple MCP interface, providing a bridge between AI models and arXiv's research repository.",
    "installCommand": "uv tool install arxiv-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "--storage-path"
    ],
    "usageInstructions": "Configure storage path using ARXIV_STORAGE_PATH environment variable or --storage-path parameter, then integrate with MCP client config file",
    "category": "API Integration"
  },
  "claude-trello": {
    "name": "Claude MCP Trello",
    "githubLink": "https://github.com/hrs-asano/claude-mcp-trello",
    "package": "claude-mcp-trello",
    "description": "MCP server providing Trello board integration with rate limiting and type safety",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "TRELLO_API_KEY",
      "TRELLO_TOKEN",
      "TRELLO_BOARD_ID"
    ],
    "optionalParams": [
      "limit",
      "name",
      "description",
      "dueDate",
      "labels",
      "query"
    ],
    "usageInstructions": "Configure in ~/Library/Application Support/Claude/claude_desktop_config.json with TRELLO_API_KEY, TRELLO_TOKEN, and TRELLO_BOARD_ID",
    "category": "Productivity"
  },
  "wordware": {
    "name": "Wordware MCP Server",
    "githubLink": "https://github.com/hugobiais/wordware-mcp",
    "package": "wordware-mcp",
    "description": "Run Wordware apps locally and integrate AI flows into development environments",
    "installCommand": "npx wordware-mcp",
    "requiredEnvVars": [
      "WORDWARE_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "Run 'npx wordware-mcp' for interactive setup, then 'npx wordware-mcp start' to begin",
    "category": "Development"
  },
  "conductor-tasks": {
    "name": "Conductor Tasks",
    "githubLink": "https://github.com/hridaya423/conductor-tasks",
    "package": "conductor-tasks",
    "description": "AI-powered task manager for development workflow",
    "installCommand": "npm install -g conductor-tasks",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "GOOGLE_API_KEY",
      "DEFAULT_LLM_PROVIDER"
    ],
    "optionalParams": [
      "MISTRAL_API_KEY",
      "GROQ_API_KEY",
      "PERPLEXITY_API_KEY",
      "OPENROUTER_API_KEY",
      "XAI_API_KEY",
      "AZURE_OPENAI_API_KEY"
    ],
    "usageInstructions": "Use 'conductor-tasks init' to initialize, 'conductor-tasks parse-prd' to parse PRD files, and 'conductor-tasks visualize' to view tasks",
    "category": "Productivity"
  },
  "honeycomb": {
    "name": "Honeycomb MCP",
    "githubLink": "https://github.com/honeycombio/honeycomb-mcp",
    "package": "honeycomb-mcp",
    "description": "MCP server for interacting with Honeycomb observability data, enabling LLMs to analyze and query datasets.",
    "installCommand": "pnpm install && pnpm run build",
    "requiredEnvVars": [
      "HONEYCOMB_API_KEY"
    ],
    "optionalParams": [
      "HONEYCOMB_API_ENDPOINT",
      "HONEYCOMB_CACHE_ENABLED",
      "HONEYCOMB_CACHE_DEFAULT_TTL",
      "HONEYCOMB_CACHE_DATASET_TTL",
      "HONEYCOMB_CACHE_COLUMN_TTL",
      "HONEYCOMB_CACHE_BOARD_TTL",
      "HONEYCOMB_CACHE_SLO_TTL",
      "HONEYCOMB_CACHE_TRIGGER_TTL",
      "HONEYCOMB_CACHE_MARKER_TTL",
      "HONEYCOMB_CACHE_RECIPIENT_TTL",
      "HONEYCOMB_CACHE_AUTH_TTL",
      "HONEYCOMB_CACHE_MAX_SIZE",
      "HONEYCOMB_ENV_PROD_API_KEY",
      "HONEYCOMB_ENV_STAGING_API_KEY"
    ],
    "usageInstructions": "Configure environment variables, then run the server using 'node /path/to/build/index.mjs'",
    "category": "Analytics"
  },
  "box": {
    "name": "Box MCP Server",
    "githubLink": "https://github.com/hmk/box-mcp-server",
    "package": "box-mcp-server",
    "description": "An MCP server for integrating with Box, enabling file searching and reading capabilities",
    "installCommand": "npx box-mcp-server",
    "requiredEnvVars": [
      "BOX_USER_ID",
      "BOX_DEV_TOKEN"
    ],
    "optionalParams": [
      "BOX_JWT_BASE64",
      "BOX_JWT_CONFIG_PATH",
      "BOX_JWT"
    ],
    "usageInstructions": "Set required environment variables and run using 'npx box-mcp-server'",
    "category": "File Management"
  },
  "highlight-youtube": {
    "name": "YouTube Transcript MCP Server",
    "githubLink": "https://github.com/highlight-ing/highlight-youtube-mcp",
    "package": "highlight-youtube-mcp",
    "description": "Extracts transcripts from YouTube videos",
    "installCommand": "npx highlight-youtube-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "videoUrl"
    ],
    "usageInstructions": "Use the get_youtube_transcript method with a valid YouTube video URL",
    "category": "Media"
  },
  "tts-say": {
    "name": "MCP TTS Say",
    "githubLink": "https://github.com/hirokidaichi/mcp-tts-say",
    "package": "mcp-tts-say",
    "description": "Text-to-speech tool using OpenAI TTS SDK and MCP server",
    "installCommand": "npx -y mcp-tts-say",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Set OPENAI_API_KEY in .env file, then run using MCP inspector or development mode",
    "category": "Media"
  },
  "highlight-github": {
    "name": "GitHub Integration MCP Server",
    "githubLink": "https://github.com/highlight-ing/highlight-github-mcp",
    "package": "highlight-github-mcp",
    "description": "MCP server providing GitHub Pull Request diff functionality",
    "installCommand": "npx -y highlight-github-mcp",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "owner",
      "repo",
      "pr_number"
    ],
    "usageInstructions": "Set GITHUB_TOKEN environment variable and use get_diff_pr method with owner, repo, and pr_number parameters",
    "category": "API Integration"
  },
  "tripadvisor": {
    "name": "TripAdvisor Vacation Planner MCP Server",
    "githubLink": "https://github.com/hhw67865/tripadvisor-mcp-server",
    "package": "mcp[cli]",
    "description": "Provides access to TripAdvisor data for planning vacations, finding attractions, restaurants, and hotels.",
    "installCommand": "uv add \"mcp[cli]\"",
    "requiredEnvVars": [
      "TRIPADVISOR_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'mcp run server.py' after setting TRIPADVISOR_API_KEY environment variable",
    "category": "API Integration"
  },
  "windsurf-supabase": {
    "name": "Windsurf Supabase MCP Server",
    "githubLink": "https://github.com/hertzfelt/windsurf-supabase-mcp",
    "package": "windsurf-supabase-mcp",
    "description": "A Windsurf-optimized MCP server for Supabase integration, enhancing error handling and SQL query processing",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "SUPABASE_URL",
      "SUPABASE_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Supabase connection with SUPABASE_URL and SUPABASE_KEY environment variables, then use postgrestRequest or sqlToRest functions",
    "category": "Database"
  },
  "isitdown": {
    "name": "IsItDown MCP Server",
    "githubLink": "https://github.com/hesreallyhim/mcp-server-isitdown",
    "package": "@hesreallyhim/mcp-server-isitdown",
    "description": "An MCP server that checks if a website is currently down by querying isitdownrightnow.com",
    "installCommand": "npx -y @smithery/cli install @hesreallyhim/mcp-server-isitdown --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "root_domain"
    ],
    "usageInstructions": "Run as standalone MCP server using 'mcp-server-isitdown' or use with Claude Desktop",
    "category": "API Integration"
  },
  "heroku": {
    "name": "Heroku Platform MCP Server",
    "githubLink": "https://github.com/heroku/heroku-mcp-server",
    "package": "@heroku/mcp-server",
    "description": "A specialized Model Context Protocol (MCP) implementation for interacting with Heroku Platform resources",
    "installCommand": "npx -y @heroku/mcp-server",
    "requiredEnvVars": [
      "HEROKU_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Use 'heroku mcp:start' or 'npx -y @heroku/mcp-server' to launch the server, configure clients like Claude Desktop, Zed, or Cursor",
    "category": "API Integration"
  },
  "sqlexpress": {
    "name": "SQL Server Express MCP Server",
    "githubLink": "https://github.com/hanweg/mcp-sqlexpress",
    "package": "mcp-sqlexpress",
    "description": "An MCP server for interacting with Microsoft SQL Server Express, supporting Windows and SQL Server authentication.",
    "installCommand": "uv pip install --editable .",
    "requiredEnvVars": [],
    "optionalParams": [
      "--auth",
      "--username",
      "--password",
      "--trusted-connection",
      "--trust-server-certificate",
      "--allowed-databases"
    ],
    "usageInstructions": "Configure in claude_desktop_config.json with appropriate authentication and server details",
    "category": "Database"
  },
  "jenkins": {
    "name": "Jenkins Server MCP",
    "githubLink": "https://github.com/hekmon8/jenkins-server-mcp",
    "package": "jenkins-server-mcp",
    "description": "MCP server for interacting with Jenkins CI/CD servers, enabling build status checks, build triggering, and log retrieval.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "JENKINS_URL",
      "JENKINS_USER",
      "JENKINS_TOKEN"
    ],
    "optionalParams": [
      "jobPath",
      "buildNumber",
      "parameters"
    ],
    "usageInstructions": "Configure environment variables, then use tools like get_build_status, trigger_build, and get_build_log through mcpClient.",
    "category": "Development"
  },
  "titan": {
    "name": "Titan Memory MCP Server",
    "githubLink": "https://github.com/henryhawke/mcp-titan",
    "package": "@henryhawke/mcp-titan",
    "description": "Neural memory system for LLMs that can learn and predict sequences while maintaining state through a memory vector.",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "inputDim",
      "hiddenDim",
      "memoryDim",
      "transformerLayers",
      "numHeads",
      "ffDimension",
      "dropoutRate",
      "maxSequenceLength",
      "memorySlots",
      "similarityThreshold",
      "surpriseDecay",
      "pruningInterval",
      "gradientClip"
    ],
    "usageInstructions": "Start the server with 'npm start'. It listens on port 8080 by default. Configure Cursor or Claude to connect to http://localhost:8080.",
    "category": "Data Storage"
  },
  "discord": {
    "name": "Discord MCP Server",
    "githubLink": "https://github.com/hanweg/mcp-discord",
    "package": "@hanweg/mcp-discord",
    "description": "Provides Discord integration capabilities to MCP clients like Claude Desktop",
    "installCommand": "npx -y @smithery/cli install @hanweg/mcp-discord --client claude",
    "requiredEnvVars": [
      "DISCORD_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop by adding discord configuration to claude_desktop_config.json",
    "category": "Communication"
  },
  "sqlite-explorer-fastmcp": {
    "name": "SQLite Explorer MCP Server",
    "githubLink": "https://github.com/hannesrudolph/sqlite-explorer-fastmcp-mcp-server",
    "package": "fastmcp",
    "description": "An MCP server providing safe read-only access to SQLite databases through Model Context Protocol",
    "installCommand": "fastmcp install sqlite_explorer.py --name \"SQLite Explorer\" -e SQLITE_DB_PATH=/path/to/db",
    "requiredEnvVars": [
      "SQLITE_DB_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Clone the repository, then install using FastMCP with the required SQLITE_DB_PATH environment variable",
    "category": "Database"
  },
  "tpapi": {
    "name": "ThemeParks.wiki API MCP Server",
    "githubLink": "https://github.com/habuma/tpapi-mcp-server",
    "package": "habuma/tpapi-mcp-server",
    "description": "MCP Server exposing ThemeParks.wiki API data for theme park operating hours, attraction wait times, and show times",
    "installCommand": "./gradlew build",
    "requiredEnvVars": [],
    "optionalParams": [
      "entityId",
      "date"
    ],
    "usageInstructions": "Configure in Claude Desktop by adding config to claude_desktop_config.json referencing the Java command line and JAR file location",
    "category": "API Integration"
  },
  "openapi-schema": {
    "name": "OpenAPI Schema MCP Server",
    "githubLink": "https://github.com/hannesj/mcp-openapi-schema",
    "package": "mcp-openapi-schema",
    "description": "An MCP server exposing OpenAPI schema information to Large Language Models",
    "installCommand": "npx -y mcp-openapi-schema",
    "requiredEnvVars": [],
    "optionalParams": [
      "path/to/schema.yaml"
    ],
    "usageInstructions": "Run with 'npx -y mcp-openapi-schema [path/to/schema.yaml]' and configure in Claude Desktop or Claude Code",
    "category": "API Integration"
  },
  "research": {
    "name": "Research MCP Server",
    "githubLink": "https://github.com/h-yanagawa/research-mcp-server",
    "package": "research-mcp-server",
    "description": "An MCP server that retrieves survey data from Notion and creates survey pages",
    "installCommand": "uv run --with mcp[cli] --with notion-client --with pydantic mcp run /path/to/research-mcp-server/server.py",
    "requiredEnvVars": [
      "NOTION_TOKEN",
      "NOTION_ROOT_DATABASE_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "Clone the repository, set up Notion token and database ID, configure Claude Desktop Client, and restart",
    "category": "Productivity"
  },
  "pubmedmcp": {
    "name": "PubMed MCP Server",
    "githubLink": "https://github.com/grll/pubmedmcp",
    "package": "pubmedmcp",
    "description": "An MCP server for searching and fetching biomedical literature from PubMed.",
    "installCommand": "uvx pubmedmcp@latest",
    "requiredEnvVars": [
      "UV_PRERELEASE",
      "UV_PYTHON"
    ],
    "optionalParams": [],
    "usageInstructions": "Add pubmedmcp configuration to claude_desktop_config.json and ensure uv is installed.",
    "category": "API Integration"
  },
  "transistor": {
    "name": "Transistor MCP Server",
    "githubLink": "https://github.com/gxjansen/Transistor-MCP",
    "package": "@gxjansen/transistor-mcp",
    "description": "MCP server providing tools to interact with Transistor.fm API for podcast management and analytics",
    "installCommand": "npx @gxjansen/transistor-mcp",
    "requiredEnvVars": [
      "TRANSISTOR_API_KEY"
    ],
    "optionalParams": [
      "page",
      "per",
      "private",
      "query",
      "show_id",
      "episode_id",
      "start_date",
      "end_date",
      "filename",
      "event_name",
      "url",
      "webhook_id"
    ],
    "usageInstructions": "Add the server to MCP settings with TRANSISTOR_API_KEY environment variable",
    "category": "API Integration"
  },
  "stata": {
    "name": "Stata MCP Extension",
    "githubLink": "https://github.com/hanlulong/stata-mcp",
    "package": "DeepEcon.stata-mcp",
    "description": "VS Code extension providing Stata integration through Model Context Protocol",
    "installCommand": "code --install-extension DeepEcon.stata-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "stata-vscode.stataPath",
      "stata-vscode.mcpServerHost",
      "stata-vscode.mcpServerPort"
    ],
    "usageInstructions": "Open a Stata .do file, select code and press Ctrl+Shift+Enter (or Cmd+Shift+Enter on Mac) to run selection, or press Ctrl+Shift+D (or Cmd+Shift+D on Mac) to run entire file",
    "category": "Development"
  },
  "pubmed-search": {
    "name": "PubMedSearch MCP Server",
    "githubLink": "https://github.com/gradusnikov/pubmed-search-mcp-server",
    "package": "@gradusnikov/pubmed-search-mcp-server",
    "description": "A Model Content Protocol server for searching and retrieving academic papers from PubMed database",
    "installCommand": "npx -y @smithery/cli install @gradusnikov/pubmed-search-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server using 'mcp dev pubmed_search_mcp_server.py' or add it to Claude Desktop config",
    "category": "API Integration"
  },
  "graphlit": {
    "name": "Graphlit MCP Server",
    "githubLink": "https://github.com/graphlit/graphlit-mcp-server",
    "package": "graphlit-mcp-server",
    "description": "Enables integration between MCP clients and the Graphlit service for data ingestion and processing",
    "installCommand": "npx -y graphlit-mcp-server",
    "requiredEnvVars": [
      "GRAPHLIT_ENVIRONMENT_ID",
      "GRAPHLIT_ORGANIZATION_ID",
      "GRAPHLIT_JWT_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "Set required environment variables and run 'npx -y graphlit-mcp-server' to start the server",
    "category": "API Integration"
  },
  "google-search": {
    "name": "Google Search MCP Server",
    "githubLink": "https://github.com/gradusnikov/google-search-mcp-server",
    "package": "@gradusnikov/google-search-mcp-server",
    "description": "An MCP server providing Google Custom Search functionality.",
    "installCommand": "npx -y @smithery/cli install @gradusnikov/google-search-mcp-server --client claude",
    "requiredEnvVars": [
      "GOOGLE_API_KEY",
      "GOOGLE_CSE_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "Create a .env file with GOOGLE_API_KEY and GOOGLE_CSE_ID, then run 'mcp run google_search_mcp_server.py'",
    "category": "API Integration"
  },
  "difyworkflow": {
    "name": "Dify Workflow MCP Server",
    "githubLink": "https://github.com/gotoolkits/mcp-difyworkflow-server",
    "package": "mcp-difyworkflow-server",
    "description": "MCP server for querying and invoking Dify workflows",
    "installCommand": "git clone https://github.com/gotoolkits/mcp-difyworkflow-server.git && cd mcp-difyworkflow-server && go build .",
    "requiredEnvVars": [
      "DIFY_WORKFLOW_NAME",
      "DIFY_API_KEYS"
    ],
    "optionalParams": [
      "base-url"
    ],
    "usageInstructions": "Use 'list_workflows' to list authorized workflows and 'execute_workflow' to execute a specified workflow",
    "category": "API Integration"
  },
  "gotohuman": {
    "name": "gotoHuman MCP Server",
    "githubLink": "https://github.com/gotohuman/gotohuman-mcp-server",
    "package": "@gotohuman/mcp-server",
    "description": "Adds human approvals to AI agents and agentic workflows with customizable approval UI and built-in auth, webhooks, and notifications.",
    "installCommand": "npx @gotohuman/mcp-server",
    "requiredEnvVars": [
      "GOTOHUMAN_API_KEY"
    ],
    "optionalParams": [
      "metadata",
      "assignToUsers"
    ],
    "usageInstructions": "Use npx @gotohuman/mcp-server to start the server, then request human approvals from AI workflows via MCP",
    "category": "Productivity"
  },
  "filesys": {
    "name": "Filesystem MCP Server",
    "githubLink": "https://github.com/gomcpgo/filesys",
    "package": "github.com/gomcpgo/filesys",
    "description": "A secure MCP server providing controlled filesystem operations within specified directories.",
    "installCommand": "go get github.com/gomcpgo/filesys",
    "requiredEnvVars": [
      "MCP_ALLOWED_DIRS"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure allowed directories via MCP_ALLOWED_DIRS environment variable, then use with Claude Desktop by adding to claude_desktop_config.json",
    "category": "File Management"
  },
  "genai-toolbox": {
    "name": "MCP Toolbox for Databases",
    "githubLink": "https://github.com/googleapis/genai-toolbox",
    "package": "github.com/googleapis/genai-toolbox",
    "description": "An open source MCP server for databases, simplifying development, improving performance, and enhancing security.",
    "installCommand": "go install github.com/googleapis/genai-toolbox@v0.8.0",
    "requiredEnvVars": [],
    "optionalParams": [
      "--tools-file"
    ],
    "usageInstructions": "Configure a tools.yaml file and run ./toolbox --tools-file 'tools.yaml'",
    "category": "Database"
  },
  "gologin": {
    "name": "GoLogin MCP Server",
    "githubLink": "https://github.com/gologinapp/gologin-mcp",
    "package": "gologin-mcp",
    "description": "Manage GoLogin browser profiles and automation through AI conversations",
    "installCommand": "npx gologin-mcp",
    "requiredEnvVars": [
      "API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure in Claude Desktop or Cursor using the provided JSON configuration, then restart the client",
    "category": "Browser Automation"
  },
  "wp": {
    "name": "WordPress MCP Server",
    "githubLink": "https://github.com/glendaviesnz/wp-mcp",
    "package": "wp-mcp",
    "description": "A Python-based MCP server for WordPress instances",
    "installCommand": "uv pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run 'uv run wp.py' to start the server, configure claude_desktop_config.json with server path",
    "category": "API Integration"
  },
  "hive": {
    "name": "Hive MCP Server",
    "githubLink": "https://github.com/gluneau/hive-mcp-server",
    "package": "@gluneau/hive-mcp-server",
    "description": "An MCP server enabling AI assistants to interact with the Hive blockchain through the Model Context Protocol.",
    "installCommand": "npx -y @gluneau/hive-mcp-server",
    "requiredEnvVars": [
      "HIVE_USERNAME",
      "HIVE_POSTING_KEY",
      "HIVE_ACTIVE_KEY",
      "HIVE_MEMO_KEY"
    ],
    "optionalParams": [
      "username",
      "author",
      "permlink",
      "category",
      "tag",
      "limit",
      "operation_filter",
      "weight",
      "title",
      "body",
      "tags"
    ],
    "usageInstructions": "Use with Claude Desktop or other MCP clients by configuring the server command and required environment variables.",
    "category": "Blockchain"
  },
  "audius-atris": {
    "name": "Atris MCP for Audius",
    "githubLink": "https://github.com/glassBead-tc/audius-mcp-atris",
    "package": "audius-mcp-atris",
    "description": "MCP server providing comprehensive access to Audius music platform via LLMs",
    "installCommand": "npx audius-mcp-atris",
    "requiredEnvVars": [
      "AUDIUS_API_KEY",
      "AUDIUS_API_SECRET"
    ],
    "optionalParams": [
      "AUDIUS_ENVIRONMENT"
    ],
    "usageInstructions": "Start server with 'npm start' or use with 'npx audius-mcp-atris'",
    "category": "API Integration"
  },
  "postiz-app": {
    "name": "Postiz",
    "githubLink": "https://github.com/gitroomhq/postiz-app",
    "package": "postiz-app",
    "description": "Self-hosted social media scheduling tool supporting multiple platforms",
    "installCommand": "npx nx serve",
    "requiredEnvVars": [
      "DATABASE_URL",
      "REDIS_URL"
    ],
    "optionalParams": [
      "RESEND_API_KEY"
    ],
    "usageInstructions": "Follow the Quick Start Guide at https://docs.postiz.com/quickstart",
    "category": "Productivity"
  },
  "coding-standards": {
    "name": "Coding Standards MCP Server",
    "githubLink": "https://github.com/ggerve/coding-standards-mcp",
    "package": "mcp",
    "description": "Provides coding style guidelines and best practices for Java, Python, and React",
    "installCommand": "mcp install server.py",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run in development mode using 'mcp dev server.py'",
    "category": "Development"
  },
  "kokoro-tts": {
    "name": "Kokoro TTS MCP Server",
    "githubLink": "https://github.com/giannisanni/kokoro-tts-mcp",
    "package": "kokoro-tts-mcp",
    "description": "Text-to-speech synthesis server using Kokoro TTS engine",
    "installCommand": "uv pip install .",
    "requiredEnvVars": [],
    "optionalParams": [
      "voice",
      "speed",
      "save_path",
      "play_audio"
    ],
    "usageInstructions": "Use mcp.client.Client to connect to 'kokoro-tts' and call 'generate_speech' tool",
    "category": "Media"
  },
  "ashra": {
    "name": "Ashra MCP Server",
    "githubLink": "https://github.com/getrupt/ashra-mcp",
    "package": "ashra-mcp",
    "description": "A Model Context Protocol server for Ashra integration",
    "installCommand": "yarn",
    "requiredEnvVars": [
      "ASHRA_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure claude_desktop_config.json with server details and API key",
    "category": "API Integration"
  },
  "graphiti": {
    "name": "Graphiti MCP Server",
    "githubLink": "https://github.com/getzep/graphiti",
    "package": "graphiti-core",
    "description": "Framework for building and querying temporally-aware knowledge graphs for AI agents",
    "installCommand": "pip install graphiti-core",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "NEO4J_URI"
    ],
    "optionalParams": [
      "GOOGLE_GEMINI_API_KEY",
      "ANTHROPIC_API_KEY",
      "GROQ_API_KEY"
    ],
    "usageInstructions": "Install graphiti-core and configure Neo4j or FalkorDB as the graph database backend",
    "category": "Data Storage"
  },
  "lightning-tools": {
    "name": "Lightning Tools MCP Server",
    "githubLink": "https://github.com/getAlby/lightning-tools-mcp-server",
    "package": "@getalby/lightning-tools-mcp-server",
    "description": "Interact with lightning addresses and use other common lightning tools with your LLM",
    "installCommand": "npx -y @getalby/lightning-tools-mcp-server",
    "requiredEnvVars": [
      "NWC_CONNECTION_STRING"
    ],
    "optionalParams": [],
    "usageInstructions": "Add to Claude Desktop or Cline configuration with NWC CONNECTION STRING environment variable",
    "category": "API Integration"
  },
  "gemini": {
    "name": "Gemini MCP Server",
    "githubLink": "https://github.com/georgejeffers/gemini-mcp-server",
    "package": "@georgejeffers/gemini-mcp-server",
    "description": "A TypeScript implementation of a Model Context Protocol (MCP) server integrating with Google's Gemini Pro model.",
    "installCommand": "npx -y @smithery/cli install @georgejeffers/gemini-mcp-server --client claude",
    "requiredEnvVars": [
      "GEMINI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Clone the repository, install dependencies, build, and configure Claude Desktop to use the server.",
    "category": "API Integration"
  },
  "jessica": {
    "name": "Jessica TTS MCP Server",
    "githubLink": "https://github.com/georgi-io/jessica",
    "package": "jessica",
    "description": "MCP server integrating ElevenLabs Text-to-Speech capabilities with Cursor",
    "installCommand": "git clone https://github.com/georgi-io/jessica.git && cd jessica && poetry install",
    "requiredEnvVars": [
      "ELEVENLABS_API_KEY",
      "HOST",
      "PORT"
    ],
    "optionalParams": [
      "DEBUG",
      "RELOAD"
    ],
    "usageInstructions": "Start backend server with 'python -m src.backend', then configure Cursor MCP server with URL http://localhost:9020/sse",
    "category": "API Integration"
  },
  "git-go": {
    "name": "Git MCP Server",
    "githubLink": "https://github.com/geropl/git-mcp-go",
    "package": "github.com/geropl/git-mcp-go",
    "description": "An MCP server for Git repository interaction and automation",
    "installCommand": "go install github.com/geropl/git-mcp-go@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "--repository",
      "--mode",
      "--write-access",
      "--verbose"
    ],
    "usageInstructions": "Run with: ./git-mcp-go serve /path/to/repo1 /path/to/repo2",
    "category": "Version Control"
  },
  "switchbot": {
    "name": "SwitchBot MCP Server",
    "githubLink": "https://github.com/genm/switchbot-mcp",
    "package": "@genm/switchbot-mcp",
    "description": "MCP server providing SwitchBot device control capabilities to AI assistants",
    "installCommand": "npx -y @smithery/cli install @genm/switchbot-mcp --client claude",
    "requiredEnvVars": [
      "SWITCHBOT_TOKEN",
      "SWITCHBOT_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure SwitchBot API token and secret in claude_desktop_config.json or environment variables",
    "category": "API Integration"
  },
  "linear-go": {
    "name": "Linear MCP Server",
    "githubLink": "https://github.com/geropl/linear-mcp-go",
    "package": "linear-mcp-go",
    "description": "An MCP server for Linear, providing tools for interacting with the Linear API through the MCP protocol.",
    "installCommand": "curl -L -o ./linear-mcp-go https://github.com/geropl/linear-mcp-go/releases/latest/download/linear-mcp-go-linux && chmod +x ./linear-mcp-go",
    "requiredEnvVars": [
      "LINEAR_API_KEY"
    ],
    "optionalParams": [
      "write-access",
      "auto-approve",
      "tool"
    ],
    "usageInstructions": "Set LINEAR_API_KEY environment variable, then run './linear-mcp-go serve' to start the server. Use '--write-access' flag for write operations.",
    "category": "API Integration"
  },
  "workers": {
    "name": "workers-mcp",
    "githubLink": "https://github.com/geelen/workers-mcp",
    "package": "workers-mcp",
    "description": "MCP server implementation for Cloudflare Workers",
    "installCommand": "npm install workers-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Check the GitHub repository for usage instructions",
    "category": "Development"
  },
  "macos-defaults": {
    "name": "macOS Defaults MCP Server",
    "githubLink": "https://github.com/g0t4/mcp-server-macos-defaults",
    "package": "mcp-server-macos-defaults",
    "description": "MCP server for reading and writing macOS defaults (settings)",
    "installCommand": "uvx mcp-server-macos-defaults",
    "requiredEnvVars": [
      "UV_PUBLISH_TOKEN",
      "UV_PUBLISH_USERNAME",
      "UV_PUBLISH_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Use the MCP Inspector to debug and interact with the server",
    "category": "System Configuration"
  },
  "commands": {
    "name": "MCP Server Commands",
    "githubLink": "https://github.com/g0t4/mcp-server-commands",
    "package": "mcp-server-commands",
    "description": "An MCP server that allows LLMs to run shell commands and return output",
    "installCommand": "npx mcp-server-commands",
    "requiredEnvVars": [],
    "optionalParams": [
      "--verbose"
    ],
    "usageInstructions": "Configure in Claude Desktop config.json or use with Groq Desktop",
    "category": "Development"
  },
  "bitbucket": {
    "name": "Bitbucket Server MCP",
    "githubLink": "https://github.com/garc33/bitbucket-server-mcp-server",
    "package": "@garc33/bitbucket-server-mcp-server",
    "description": "MCP server for Bitbucket Server Pull Request management through the MCP protocol.",
    "installCommand": "npx -y @smithery/cli install @garc33/bitbucket-server-mcp-server --client claude",
    "requiredEnvVars": [
      "BITBUCKET_DEFAULT_PROJECT"
    ],
    "optionalParams": [
      "limit",
      "start",
      "project",
      "repository",
      "title",
      "description",
      "sourceBranch",
      "targetBranch",
      "reviewers",
      "prId",
      "message",
      "strategy",
      "parentId",
      "contextLines"
    ],
    "usageInstructions": "Use commands like list_projects, list_repositories, create_pull_request, get_pull_request, merge_pull_request with appropriate parameters.",
    "category": "Version Control"
  },
  "futuur": {
    "name": "Futuur API MCP Integration",
    "githubLink": "https://github.com/futuur/Futuur-MCP",
    "package": "@futuur/futuur-mcp",
    "description": "A TypeScript-based MCP server for seamless integration with the Futuur API, handling market data, categories, user information, and betting operations.",
    "installCommand": "npx -y @smithery/cli install @futuur/futuur-mcp --client claude",
    "requiredEnvVars": [
      "FUTUUR_PUBLIC_KEY",
      "FUTUUR_PRIVATE_KEY"
    ],
    "optionalParams": [
      "--client"
    ],
    "usageInstructions": "Build the project using 'npm run build', then run the MCP server using 'npx mcprunner FUTUUR_PUBLIC_KEY=*YOUR_FUTUUR_PUBLIC_KEY* FUTUUR_PRIVATE_KEY=*YOUR_FUTUUR_PRIVATE_KEY* -- node build/index.js'",
    "category": "API Integration"
  },
  "pdfsearch-zed": {
    "name": "PDF Search for Zed",
    "githubLink": "https://github.com/freespirit/pdfsearch-zed",
    "package": "pdfsearch-zed",
    "description": "A document search extension for Zed that lets you semantically search through PDF documents",
    "installCommand": "git clone https://github.com/freespirit/pdfsearch-zed.git && cd pdfsearch-zed/pdf_rag && uv venv && uv sync",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Open Zed's AI Assistant panel, type '/pdfsearch' followed by your search query",
    "category": "Productivity"
  },
  "inked": {
    "name": "Inked MCP Server",
    "githubLink": "https://github.com/frgmt0/mcp-inked",
    "package": "@frgmt/inked",
    "description": "A powerful MCP server for memory management with Claude apps, featuring fast text search and optional AI-powered search.",
    "installCommand": "npm install -g @frgmt/inked",
    "requiredEnvVars": [],
    "optionalParams": [
      "--use-embeddings",
      "--use-reranking"
    ],
    "usageInstructions": "Add to your MCP server configuration using 'npx @frgmt/inked' as the command",
    "category": "Data Storage"
  },
  "headline-vibes": {
    "name": "Headline Vibes Analysis MCP Server",
    "githubLink": "https://github.com/fred-em/headline-vibes",
    "package": "headline-vibes",
    "description": "Analyzes sentiment in news headlines from major US publications with natural language date parsing",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "NEWS_API_KEY"
    ],
    "optionalParams": [
      "input"
    ],
    "usageInstructions": "Use the analyze_headlines tool with natural language dates (e.g., 'yesterday') or specific dates (e.g., '2025-02-11')",
    "category": "Analytics"
  },
  "custom": {
    "name": "Custom MCP Server",
    "githubLink": "https://github.com/francesliang/custom",
    "package": "custom_mcp_servers",
    "description": "A custom MCP server implementation",
    "installCommand": "npm install custom_mcp_servers",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Follow the instructions in the GitHub repository to use this server",
    "category": "Other"
  },
  "hex": {
    "name": "Hex MCP Server",
    "githubLink": "https://github.com/franccesco/hex-mcp",
    "package": "hex-mcp",
    "description": "MCP server for Hex that implements various tools for managing Hex projects",
    "installCommand": "pip install hex-mcp",
    "requiredEnvVars": [
      "HEX_API_KEY"
    ],
    "optionalParams": [
      "HEX_API_URL"
    ],
    "usageInstructions": "Use 'hex-mcp config' to configure with API key and URL, then use with Cursor",
    "category": "API Integration"
  },
  "bloomy": {
    "name": "Bloomy MCP",
    "githubLink": "https://github.com/franccesco/bloomy-mcp",
    "package": "bloomy-mcp",
    "description": "MCP server for interacting with Bloom Growth's GraphQL API",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [
      "BLOOM_API_URL",
      "BLOOM_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Start the server with 'bloomy-server' and configure with Cursor settings",
    "category": "API Integration"
  },
  "folderr": {
    "name": "Folderr MCP Server",
    "githubLink": "https://github.com/folderr-tech/folderr-mcp-server",
    "package": "@folderr/folderr-mcp-server",
    "description": "An MCP server for interacting with Folderr's API and managing Folderr Assistants",
    "installCommand": "npx -y @folderr/folderr-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "email",
      "password",
      "token",
      "assistant_id",
      "question"
    ],
    "usageInstructions": "Authenticate using login or set_api_token, then use list_assistants or ask_assistant",
    "category": "API Integration"
  },
  "foursquare-places": {
    "name": "Foursquare Places MCP Server",
    "githubLink": "https://github.com/foursquare/foursquare-places-mcp",
    "package": "foursquare-places-mcp",
    "description": "MCP server enabling access to Foursquare API for location context and place search",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "FOURSQUARE_SERVICE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Set Foursquare Service API Key, download Claude Desktop App, and follow setup instructions in fsq-server-python/README.md",
    "category": "API Integration"
  },
  "dicom": {
    "name": "DICOM MCP Server",
    "githubLink": "https://github.com/fluxinc/dicom-mcp-server",
    "package": "mcp[cli]",
    "description": "An MCP server for DICOM connectivity testing and operations",
    "installCommand": "uv pip install mcp[cli]",
    "requiredEnvVars": [],
    "optionalParams": [
      "node_name",
      "local_ae_name",
      "remote_ae_title",
      "ip",
      "port",
      "local_ae_title"
    ],
    "usageInstructions": "Use MCP interface to list DICOM nodes or perform C-ECHO operations",
    "category": "Other"
  },
  "better-fetch": {
    "name": "Better Fetch",
    "githubLink": "https://github.com/flutterninja9/better-fetch",
    "package": "@flutterninja9/better-fetch",
    "description": "A powerful MCP server that fetches and processes web content with nested URL crawling capabilities.",
    "installCommand": "npx -y @smithery/cli install @flutterninja9/better-fetch --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "maxDepth",
      "maxPages",
      "sameDomainOnly",
      "excludePatterns",
      "includePatterns",
      "timeout"
    ],
    "usageInstructions": "Use commands like 'fetch_website_nested' or 'fetch_website_single' with appropriate parameters to fetch and process web content.",
    "category": "Web Scraping"
  },
  "authenticator": {
    "name": "Authenticator App MCP Server",
    "githubLink": "https://github.com/firstorderai/authenticator",
    "package": "authenticator-mcp",
    "description": "A secure MCP server enabling AI agents to interact with Authenticator App for 2FA codes and passwords",
    "installCommand": "npx -y authenticator-mcp",
    "requiredEnvVars": [
      "AUTHENTICATOR_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "--access-token"
    ],
    "usageInstructions": "Configure the server in your AI client's configuration file with access token",
    "category": "Security"
  },
  "sargoth": {
    "name": "Sargoth Mermaid Renderer MCP Server",
    "githubLink": "https://github.com/floor-licker/sargoth-mcp",
    "package": "sargoth-mcp",
    "description": "AI-powered diagram generation server that converts natural language to professional visuals using Mermaid",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "MERMAID_API_URL"
    ],
    "usageInstructions": "Run 'python mcp_server.py' for production or 'python mcp_server.py --api-url http://localhost:5000' for local development",
    "category": "Development"
  },
  "genkit": {
    "name": "Genkit AI Framework",
    "githubLink": "https://github.com/firebase/genkit",
    "package": "genkit",
    "description": "An open-source framework for building full-stack AI-powered applications with unified interface for multiple AI models",
    "installCommand": "npm install -g genkit-cli",
    "requiredEnvVars": [
      "API key for chosen AI model provider"
    ],
    "optionalParams": [
      "model provider",
      "programming language"
    ],
    "usageInstructions": "Initialize Genkit with chosen model provider API key, write AI features using Genkit SDK, test with CLI and Developer UI, deploy to supported environments",
    "category": "Development"
  },
  "opnsense": {
    "name": "OPNsense MCP Server",
    "githubLink": "https://github.com/floriangrousset/opnsense-mcp-server",
    "package": "opnsense-mcp-server",
    "description": "A Python server application implementing Anthropic's Model Context Protocol to manage OPNsense firewalls using natural language",
    "installCommand": "git clone https://github.com/floriangrousset/opnsense-mcp-server && cd opnsense-mcp-server && uv venv && source .venv/bin/activate && uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "OPNSENSE_URL",
      "OPNSENSE_API_KEY",
      "OPNSENSE_API_SECRET"
    ],
    "optionalParams": [
      "custom_api_endpoint"
    ],
    "usageInstructions": "Run the server using 'python opnsense-mcp-server.py' and configure Claude Desktop to connect to it",
    "category": "Security"
  },
  "findmine": {
    "name": "FindMine Shopping Stylist",
    "githubLink": "https://github.com/findmine/findmine-mcp",
    "package": "findmine-mcp",
    "description": "MCP server integrating FindMine's product styling and outfitting recommendations",
    "installCommand": "npx findmine-mcp",
    "requiredEnvVars": [
      "FINDMINE_APP_ID"
    ],
    "optionalParams": [
      "FINDMINE_API_URL",
      "FINDMINE_API_VERSION",
      "FINDMINE_DEFAULT_REGION",
      "FINDMINE_DEFAULT_LANGUAGE",
      "FINDMINE_CACHE_ENABLED",
      "FINDMINE_CACHE_TTL_MS",
      "NODE_ENV"
    ],
    "usageInstructions": "Run 'npx findmine-mcp' to start the server. The server automatically configures Claude Desktop during installation.",
    "category": "API Integration"
  },
  "iterm": {
    "name": "iTerm MCP Server",
    "githubLink": "https://github.com/ferrislucas/iterm-mcp",
    "package": "iterm-mcp",
    "description": "MCP server providing access to iTerm sessions for model interaction",
    "installCommand": "npx -y iterm-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add server config to Claude Desktop configuration file",
    "category": "Productivity"
  },
  "office": {
    "name": "MCP Server Office",
    "githubLink": "https://github.com/famano/mcp-server-office",
    "package": "mcp-server-office",
    "description": "An MCP server for reading and writing Microsoft Word (docx) files",
    "installCommand": "pip install mcp-server-office",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server with 'mcp-server-office' or 'uvx mcp-server-office'",
    "category": "File Management"
  },
  "intercom": {
    "name": "MCP Intercom Server",
    "githubLink": "https://github.com/fabian1710/mcp-intercom",
    "package": "mcp-intercom",
    "description": "An MCP server providing access to Intercom conversations and chats with filtering options",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "INTERCOM_API_KEY"
    ],
    "optionalParams": [
      "createdAt",
      "updatedAt",
      "sourceType",
      "state",
      "open",
      "read"
    ],
    "usageInstructions": "Start the server with 'npm start' and configure in Claude for Desktop",
    "category": "API Integration"
  },
  "fetchserp-node": {
    "name": "FetchSERP MCP Server",
    "githubLink": "https://github.com/fetchSERP/fetchserp-mcp-server-node",
    "package": "fetchserp-mcp-server",
    "description": "MCP server exposing FetchSERP API for SEO, SERP analysis, web scraping, and keyword research",
    "installCommand": "npx fetchserp-mcp-server",
    "requiredEnvVars": [
      "FETCHSERP_API_TOKEN"
    ],
    "optionalParams": [
      "search_engine",
      "country",
      "pages_number",
      "url",
      "keywords",
      "keyword",
      "domain",
      "prompt"
    ],
    "usageInstructions": "Run using npx or Docker with FETCHSERP_API_TOKEN environment variable",
    "category": "Web Scraping"
  },
  "placid": {
    "name": "Placid.app MCP Server",
    "githubLink": "https://github.com/felores/placid-mcp-server",
    "package": "@felores/placid-mcp-server",
    "description": "MCP server for integrating with Placid.app's API to generate images and videos",
    "installCommand": "npx -y @smithery/cli install @felores/placid-mcp-server --client claude",
    "requiredEnvVars": [
      "PLACID_API_TOKEN"
    ],
    "optionalParams": [
      "collection_id",
      "custom_data",
      "tags",
      "audio",
      "audio_duration",
      "audio_trim_start",
      "audio_trim_end"
    ],
    "usageInstructions": "Use tools like placid_list_templates, placid_generate_video, and placid_generate_image with required parameters",
    "category": "API Integration"
  },
  "search1api": {
    "name": "Search1API MCP Server",
    "githubLink": "https://github.com/fatwang2/search1api-mcp",
    "package": "search1api-mcp",
    "description": "An MCP server providing search and crawl functionality using Search1API",
    "installCommand": "npx -y search1api-mcp",
    "requiredEnvVars": [
      "SEARCH1API_KEY"
    ],
    "optionalParams": [
      "query",
      "max_results",
      "search_service",
      "crawl_results",
      "include_sites",
      "exclude_sites",
      "time_range"
    ],
    "usageInstructions": "Configure SEARCH1API_KEY using .env file or environment variable, then start server with npm start",
    "category": "Web Scraping"
  },
  "f2c": {
    "name": "F2C MCP Server",
    "githubLink": "https://github.com/f2c-ai/f2c-mcp",
    "package": "@f2c/mcp",
    "description": "MCP server for Figma Design to Code conversion using F2C",
    "installCommand": "npx -y @f2c/mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure the server in an MCP-supported IDE, open chat in IDE, paste Figma Node link, and enter requirements",
    "category": "Development"
  },
  "mistral-ocr": {
    "name": "MCP Mistral OCR",
    "githubLink": "https://github.com/everaldo/mcp-mistral-ocr",
    "package": "@everaldo/mcp-mistral-ocr",
    "description": "An MCP server providing OCR capabilities using Mistral AI's OCR API for processing images and PDFs.",
    "installCommand": "npx -y @smithery/cli install @everaldo/mcp/mistral-crosswalk --client claude",
    "requiredEnvVars": [
      "MISTRAL_API_KEY",
      "OCR_DIR"
    ],
    "optionalParams": [
      "filename",
      "url",
      "file_type"
    ],
    "usageInstructions": "Use tools like process_local_file or process_url_file to perform OCR on files or URLs.",
    "category": "Media"
  },
  "explorium": {
    "name": "Explorium API MCP Server",
    "githubLink": "https://github.com/explorium-ai/mcp-explorium",
    "package": "explorium-mcp-server",
    "description": "MCP server for interacting with Explorium API, enabling AI assistants to access business and prospect data.",
    "installCommand": "pip install explorium-mcp-server",
    "requiredEnvVars": [
      "EXPLORIUM_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'mcp dev local_dev_server.py' to start the server locally. Configure AI assistants like Claude Desktop or Cursor to use the server.",
    "category": "API Integration"
  },
  "python-memory": {
    "name": "Memory MCP Server",
    "githubLink": "https://github.com/evangstav/python-memory-mcp-server",
    "package": "main.py",
    "description": "An MCP server providing in-memory knowledge graph functionality with strict validation rules for managing entities, relations, and observations.",
    "installCommand": "mcp install main.py -v MEMORY_FILE_PATH=/path/to/memory.jsonl",
    "requiredEnvVars": [
      "MEMORY_FILE_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "The server provides tools for managing a knowledge graph, including creating entities, adding observations, creating relations, searching memory, and deleting entities and relations.",
    "category": "Data Storage"
  },
  "personal": {
    "name": "Personal Health Tracker MCP Server",
    "githubLink": "https://github.com/evangstav/personal-mcp",
    "package": "personal-mcp",
    "description": "An MCP server for tracking personal health and well-being, including workouts, nutrition, and journal entries with AI-assisted analysis.",
    "installCommand": "npx -y @smithery/cli install personal-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "--name",
      "--db-path",
      "--dev",
      "--inspect",
      "-v",
      "--verbose"
    ],
    "usageInstructions": "Run the server with 'personal-mcp run' or 'personal-mcp dev' for development mode.",
    "category": "Productivity"
  },
  "miro": {
    "name": "MCP-MIRO Server",
    "githubLink": "https://github.com/evalstate/mcp-miro",
    "package": "@llmindset/mcp-miro",
    "description": "A Model Context Protocol server to connect to the MIRO Whiteboard Application, enabling board manipulation and sticky creation.",
    "installCommand": "npx -y @smithery/cli install @llmindset/mcp-miro --client claude",
    "requiredEnvVars": [
      "MIRO-OAUTH-KEY"
    ],
    "optionalParams": [
      "--token"
    ],
    "usageInstructions": "Add server config to Claude Desktop configuration file with MIRO OAuth key",
    "category": "Productivity"
  },
  "rs": {
    "name": "MCP Server Rust Implementation",
    "githubLink": "https://github.com/ethereumdegen/mcp-rs",
    "package": "mcp-rs",
    "description": "A Rust implementation of the Model Context Protocol (MCP) server",
    "installCommand": "cargo add mcp-rs",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Create a new Emcp server instance, add tools, and start the server using the provided Rust API",
    "category": "Development"
  },
  "things-fastmcp": {
    "name": "Things MCP Server",
    "githubLink": "https://github.com/hald/things-mcp",
    "package": "things-mcp",
    "description": "MCP server for interacting with Things task management app",
    "installCommand": "pip install things-mcp",
    "requiredEnvVars": [
      "THINGS_AUTH_TOKEN"
    ],
    "optionalParams": [
      "project_uuid",
      "include_items",
      "status",
      "start_date",
      "deadline",
      "tag",
      "area",
      "type",
      "period",
      "title",
      "notes",
      "when",
      "tags",
      "list_title",
      "list_id",
      "heading",
      "checklist_items",
      "id",
      "completed",
      "canceled"
    ],
    "usageInstructions": "Run 'things-mcp' after installation, configure Things authentication token, and restart Claude Desktop",
    "category": "Productivity"
  },
  "okx": {
    "name": "OKX MCP Server",
    "githubLink": "https://github.com/esshka/okx-mcp",
    "package": "okx-mcp-server",
    "description": "Provides real-time cryptocurrency price data from OKX exchange through MCP interface.",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "instrument",
      "bar",
      "limit"
    ],
    "usageInstructions": "Configure server path in MCP settings JSON file, then use tools like get_candlesticks and get_price",
    "category": "API Integration"
  },
  "linkedin-runner": {
    "name": "LiGo + LinkedIn MCP Runner",
    "githubLink": "https://github.com/ertiqah/linkedin-mcp-runner",
    "package": "@ertiqah/linkedin-mcp-runner",
    "description": "GPT-powered creative co-pilot trained on your LinkedIn content, enabling assistants to pull context and respond like a strategist.",
    "installCommand": "npx -y @ertiqah/linkedin-mcp-runner",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Visit ligo.ertiqah.com/integrations/claude or ligo.ertiqah.com/integrations/chatgpt to authenticate and start using the MCP server with Claude or ChatGPT.",
    "category": "Productivity"
  },
  "hn": {
    "name": "Hacker News MCP Server",
    "githubLink": "https://github.com/erithwik/mcp-hn",
    "package": "mcp-hn",
    "description": "An MCP server providing tools for fetching information from Hacker News, including stories and user info.",
    "installCommand": "uvx mcp-hn",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use prompts like 'Get the top stories of today' or 'What has the user `pg` been up to?' to fetch information from Hacker News.",
    "category": "API Integration"
  },
  "epsilla": {
    "name": "Epsilla MCP Server",
    "githubLink": "https://github.com/epsilla-cloud/mcp-epsilla",
    "package": "mcp-epsilla",
    "description": "MCP server integrating with Epsilla for data storage and management",
    "installCommand": "npm install mcp-epsilla",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use Epsilla tools to create, delete, list tables and insert, query, get, delete data",
    "category": "Data Storage"
  },
  "google-workspace": {
    "name": "Google Workspace MCP Server",
    "githubLink": "https://github.com/epaproditus/google-workspace-mcp-server",
    "package": "google-workspace-mcp-server",
    "description": "MCP server for interacting with Gmail and Google Calendar APIs",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "GOOGLE_CLIENT_ID",
      "GOOGLE_CLIENT_SECRET",
      "GOOGLE_REFRESH_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure MCP settings file with server details and environment variables",
    "category": "API Integration"
  },
  "gcp": {
    "name": "GCP MCP Server",
    "githubLink": "https://github.com/eniayomi/gcp-mcp",
    "package": "gcp-mcp",
    "description": "An MCP server enabling AI assistants to interact with Google Cloud Platform resources using natural language.",
    "installCommand": "npx -y gcp-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start by selecting a project or asking questions like 'List all GCP projects I have access to' or 'Show me all Cloud SQL instances in project X'",
    "category": "Cloud Management"
  },
  "pagespeed": {
    "name": "@enemyrr/mcp-server-pagespeed",
    "githubLink": "https://github.com/enemyrr/mcp-server-pagespeed",
    "package": "@enemyrr/mcp-server-pagespeed",
    "description": "MCP server providing Google PageSpeed Insights analysis for webpage performance",
    "installCommand": "npx @enemyrr/mcp-server-pagespeed",
    "requiredEnvVars": [],
    "optionalParams": [
      "url"
    ],
    "usageInstructions": "Run 'npx @enemyrr/mcp-server-pagespeed' and use the 'analyze_pagespeed' tool with a URL argument",
    "category": "Analytics"
  },
  "relay": {
    "name": "MCP Relay",
    "githubLink": "https://github.com/emiliobool/MCP-Relay",
    "package": "MCP-Relay",
    "description": "MCP server that relays messages and prompts to Discord channel and receives responses",
    "installCommand": "npm install MCP-Relay",
    "requiredEnvVars": [
      "DISCORD_TOKEN",
      "DISCORD_CHANNEL_ID"
    ],
    "optionalParams": [
      "actions",
      "timeout"
    ],
    "usageInstructions": "Use the 'send-message' tool with required parameters: type, title, content; optional parameters: actions, timeout",
    "category": "Communication"
  },
  "acalytica-client": {
    "name": "Acalytica MCP Client",
    "githubLink": "https://github.com/edzai/Acalytica-MCP-Client",
    "package": "Acalytica-MCP-Client",
    "description": "Acalytica is a digital infrastructure platform for creators and businesses, providing tools for website building, analytics, and monetization.",
    "installCommand": "npm install Acalytica-MCP-Client",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Review the MCP manifest at https://acalytica.com/mcp.json for API endpoints and configuration",
    "category": "Productivity"
  },
  "dynatrace": {
    "name": "Dynatrace MCP Server",
    "githubLink": "https://github.com/dynatrace-oss/dynatrace-mcp",
    "package": "@dynatrace-oss/dynatrace-mcp-server",
    "description": "Remote MCP server for interacting with Dynatrace observability platform, bringing real-time data into development workflow",
    "installCommand": "npx -y @dynatrace-oss/dynatrace-mcp-server@latest",
    "requiredEnvVars": [
      "DT_ENVIRONMENT",
      "OAUTH_CLIENT_ID",
      "OAUTH_CLIENT_SECRET"
    ],
    "optionalParams": [
      "SLACK_CONNECTION_ID",
      "USE_APP_SETTINGS",
      "USE_WORKFLOWS"
    ],
    "usageInstructions": "Configure environment variables, set up Dynatrace OAuth Client, and integrate with MCP clients like VS Code or Claude Desktop",
    "category": "Analytics"
  },
  "mcpterm": {
    "name": "mcpterm",
    "githubLink": "https://github.com/dwrtz/mcpterm",
    "package": "mcpterm",
    "description": "An MCP tool server providing stateful, TUI-compatible terminal sessions",
    "installCommand": "git clone https://github.com/dwrtz/mcpterm.git && cd mcpterm && make && sudo mv bin/mcpterm /usr/local/bin/mcpterm",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add mcpterm to Claude Desktop config and restart",
    "category": "Development"
  },
  "endaoment-postgres": {
    "name": "PostgreSQL MCP Server",
    "githubLink": "https://github.com/endaoment/endaoment-postgres-mcp",
    "package": "endaoment-postgres-mcp",
    "description": "MCP server that connects to PostgreSQL database, allowing AI models to interact through standardized protocol.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "DB_CREDENTIALS"
    ],
    "optionalParams": [
      "--credentials-var",
      "--verbose"
    ],
    "usageInstructions": "Start server with 'node server.js' or 'npm start'. Use --verbose for detailed logging.",
    "category": "Database"
  },
  "instagram-next": {
    "name": "Instagram MCP Server",
    "githubLink": "https://github.com/duhlink/instagram-server-next-mcp",
    "package": "instagram-server-next-mcp",
    "description": "An MCP server for fetching Instagram posts using Chrome's existing login session",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "CHROME_USER_DATA_DIR"
    ],
    "optionalParams": [
      "username",
      "limit",
      "saveDir",
      "delayBetweenPosts"
    ],
    "usageInstructions": "Set CHROME_USER_DATA_DIR environment variable and run 'npm start'",
    "category": "Web Scraping"
  },
  "freshservice": {
    "name": "Freshservice MCP Server",
    "githubLink": "https://github.com/effytech/freshservice",
    "package": "@effytech/freshservice_mcp",
    "description": "MCP server integrating with Freshservice for IT service management operations",
    "installCommand": "npx -y @smithery/cli install @effytech/freshservice_mcp --client claude",
    "requiredEnvVars": [
      "FRESHSERVICE_APIKEY",
      "FRESHSERVICE_DOMAIN"
    ],
    "optionalParams": [
      "page",
      "per_page",
      "query",
      "ticket_id",
      "subject",
      "description",
      "source",
      "priority",
      "status",
      "email",
      "updates"
    ],
    "usageInstructions": "Configure Claude Desktop with freshservice-mcp server details and use natural language to perform Freshservice operations",
    "category": "API Integration"
  },
  "inbox-zero": {
    "name": "Inbox Zero - AI Email Assistant",
    "githubLink": "https://github.com/elie222/inbox-zero",
    "package": "inbox-zero",
    "description": "Open source AI email client and assistant to help manage emails",
    "installCommand": "pnpm install",
    "requiredEnvVars": [
      "NEXTAUTH_SECRET",
      "GOOGLE_CLIENT_ID",
      "GOOGLE_CLIENT_SECRET",
      "GOOGLE_ENCRYPT_SECRET",
      "GOOGLE_ENCRYPT_SALT",
      "UPSTASH_REDIS_URL",
      "UPSTASH_REDIS_TOKEN",
      "GOOGLE_PUBSUB_TOPIC_NAME",
      "DATABASE_URL"
    ],
    "optionalParams": [
      "OLLAMA_BASE_URL",
      "NEXT_PUBLIC_OLLAMA_MODEL"
    ],
    "usageInstructions": "Create .env file from .env.example, install dependencies with pnpm install, and configure Google OAuth and PubSub",
    "category": "Productivity"
  },
  "endoflife": {
    "name": "EOL MCP Server",
    "githubLink": "https://github.com/ducthinh993/mcp-server-endoflife",
    "package": "mcp-server-endoflife",
    "description": "MCP server that checks software end-of-life dates and support status using endoflife.date API",
    "installCommand": "npm install && npm run build && npm link",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop to use the server by adding it to claude_desktop_config.json",
    "category": "API Integration"
  },
  "freshdesk": {
    "name": "Freshdesk MCP Server",
    "githubLink": "https://github.com/effytech/freshdesk",
    "package": "@effytech/freshdesk_mcp",
    "description": "An MCP server implementation that integrates with Freshdesk, enabling AI models to interact with Freshdesk modules and perform various support operations.",
    "installCommand": "npx -y @smithery/cli install @effytech/freshdesk_mcp --client claude",
    "requiredEnvVars": [
      "FRESHDESK_API_KEY",
      "FRESHDESK_DOMAIN"
    ],
    "optionalParams": [
      "page",
      "per_page",
      "email",
      "requester_id",
      "custom_fields",
      "additional_fields"
    ],
    "usageInstructions": "Configure claude_desktop_config.json with FRESHDESK_API_KEY and FRESHDESK_DOMAIN, then use Claude Desktop to perform Freshdesk operations.",
    "category": "API Integration"
  },
  "garmin": {
    "name": "Garmin Connect MCP Server",
    "githubLink": "https://github.com/dshvadskiy/garmin",
    "package": "garmin_mcp_server.py",
    "description": "Server for interacting with Garmin Connect API to manage workouts and health metrics",
    "installCommand": "mcp install garmin_mcp_server.py",
    "requiredEnvVars": [
      "GARMIN_EMAIL",
      "GARMIN_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Create .env file from .env_template, run 'python example.py' to generate token, then 'mcp dev garmin_mcp_server.py' to start",
    "category": "API Integration"
  },
  "mixpanel": {
    "name": "Mixpanel MCP",
    "githubLink": "https://github.com/dragonkhoi/mixpanel-mcp",
    "package": "@dragonkhoi/mixpanel-mcp",
    "description": "MCP server interfacing with Mixpanel API for events data, retention, and funnels",
    "installCommand": "npx -y @smithery/cli install @dragonkhoi/mixpanel-mcp --client claude",
    "requiredEnvVars": [
      "MIXPANEL_SERVICE_ACCOUNT_USERNAME",
      "MIXPANEL_SERVICE_ACCOUNT_PASSWORD",
      "MIXPANEL_PROJECT_ID"
    ],
    "optionalParams": [],
    "usageInstructions": "Use with MCP clients like Cursor or Claude Desktop to query Mixpanel data",
    "category": "Analytics"
  },
  "compresto": {
    "name": "Compresto MCP Server",
    "githubLink": "https://github.com/dqhieu/compresto-mcp",
    "package": "@dqhieu/compresto-mcp",
    "description": "MCP server providing AI assistants with real-time Compresto usage statistics",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Clone repository, run npm install and npm run build, then configure MCP settings file with server command and args",
    "category": "Analytics"
  },
  "kospi-kosdaq-stock": {
    "name": "KOSPI/KOSDAQ Stock Data Server",
    "githubLink": "https://github.com/dragon1086/kospi-kosdaq-stock-server",
    "package": "kospi-kosdaq-stock-server",
    "description": "MCP server providing KOSPI/KOSDAQ stock data including ticker symbols, OHLCV, market capitalization, and fundamental data",
    "installCommand": "uv pip install kospi-kosdaq-stock-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "adjusted"
    ],
    "usageInstructions": "Load stock tickers using 'load_all_tickers', then retrieve specific stock data using tools like 'get_stock_ohlcv'",
    "category": "Data Storage"
  },
  "arcknowledge": {
    "name": "MCP ArcKnowledge",
    "githubLink": "https://github.com/dragonjump/mcp-arcknowledge",
    "package": "@dragonjump/mcp-ARCknowledge",
    "description": "An MCP server for managing custom webhook endpoints and querying knowledge bases",
    "installCommand": "npx -y @smithery/cli install @dragonjump/mcp-ARCknowledge --client claude",
    "requiredEnvVars": [
      "DOCUMENT_SOURCES_PATH"
    ],
    "optionalParams": [
      "url",
      "description",
      "apikey"
    ],
    "usageInstructions": "Configure knowledge_document_sources.json, then run 'fastmcp dev main.py' for development or 'fastmcp install main.py' for Claude",
    "category": "API Integration"
  },
  "dotenvx": {
    "name": "dotenvx",
    "githubLink": "https://github.com/dotenvx/dotenvx",
    "package": "@dotenvx/dotenvx",
    "description": "A better dotenv for managing environment variables across multiple environments",
    "installCommand": "npm install @dotenvx/dotenvx --save",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use dotenvx run -- [command] to execute commands with environment variables loaded from .env files",
    "category": "Development"
  },
  "memory-service": {
    "name": "MCP Memory Service",
    "githubLink": "https://github.com/doobidoo/mcp-memory-service",
    "package": "@doobidoo/mcp-memory-service",
    "description": "An MCP server providing semantic memory and persistent storage capabilities for Claude Desktop using ChromaDB and sentence transformers.",
    "installCommand": "npx -y @smithery/cli install @doobidoo/mcp-memory-service --client claude",
    "requiredEnvVars": [
      "MCP_MEMORY_CHROMA_PATH",
      "MCP_MEMORY_BACKUPS_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "The memory service is invoked through natural language commands in conversations with Claude, such as 'Please remember that my project deadline is May15th.' or 'Do you remember what I told you about my project deadline?'.",
    "category": "Data Storage"
  },
  "dbutils": {
    "name": "MCP Database Utilities",
    "githubLink": "https://github.com/donghao1393/mcp-dbutils",
    "package": "mcp-dbutils",
    "description": "A versatile MCP service providing secure access to various databases for AI data analysis.",
    "installCommand": "pip install mcp-dbutils",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Create a YAML configuration file with database connection details, then use the provided tools to interact with your database.",
    "category": "Database"
  },
  "memory-dashboard": {
    "name": "MCP Memory Dashboard",
    "githubLink": "https://github.com/doobidoo/mcp-memory-dashboard",
    "package": "mcp-memory-dashboard",
    "description": "A professional desktop application for managing MCP Memory Service, a semantic memory system built on Model Context Protocol (MCP)",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "VITE_MEMORY_SERVICE_PATH",
      "VITE_MEMORY_CHROMA_PATH",
      "VITE_MEMORY_BACKUPS_PATH",
      "VITE_CLAUDE_CONFIG_PATH"
    ],
    "optionalParams": [
      "VITE_USE_DIRECT_CHROMA_ACCESS"
    ],
    "usageInstructions": "Clone repository, install dependencies with 'npm install', configure .env file, then start with 'npm start'",
    "category": "Data Storage"
  },
  "minima": {
    "name": "Minima",
    "githubLink": "https://github.com/dmayboroda/minima",
    "package": "@smithery/cli",
    "description": "An open source RAG on-premises container with ChatGPT and MCP integration",
    "installCommand": "npx -y @smithery/cli install minima --client claude",
    "requiredEnvVars": [
      "LOCAL_FILES_PATH",
      "EMBEDDING_MODEL_ID",
      "EMBEDDING_SIZE",
      "OLLAMA_MODEL",
      "RERANKER_MODEL",
      "USER_ID",
      "PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Create .env file with required variables and run using docker compose or Smithery",
    "category": "Data Storage"
  },
  "airtable": {
    "name": "Airtable MCP Server",
    "githubLink": "https://github.com/domdomegg/airtable-mcp-server",
    "package": "airtable-mcp-server",
    "description": "An MCP server providing read and write access to Airtable databases, enabling LLMs to inspect database schemas and records.",
    "installCommand": "npx -y airtable-mcp-server",
    "requiredEnvVars": [
      "AIRTABLE_API_KEY"
    ],
    "optionalParams": [
      "maxRecords",
      "filterByFormula",
      "searchTerm",
      "fieldIds",
      "detailLevel",
      "recordId",
      "fields",
      "records",
      "recordIds",
      "name",
      "description",
      "type",
      "options"
    ],
    "usageInstructions": "Add configuration to 'mcpServers' section of claude_desktop_config.json with 'npx -y airtable-mcp-server' command and AIRTABLE_API_KEY environment variable.",
    "category": "Database"
  },
  "test": {
    "name": "Log Analysis with SQLite MCP Server",
    "githubLink": "https://github.com/direkt/mcp-test",
    "package": "@smithery/cli",
    "description": "Creates an SQLite database from compressed log files and interacts with it using the Model Context Protocol (MCP) SQLite server",
    "installCommand": "npx -y @smithery/cli@latest run mcp-server-sqlite-npx",
    "requiredEnvVars": [],
    "optionalParams": [
      "databasePath"
    ],
    "usageInstructions": "Run 'npx -y @smithery/cli@latest run mcp-server-sqlite-npx --config \"{\\\"databasePath\\\":\\\"/path/to/thedatbase/logs.db\\\"}\" in Cursor MCP Server configuration",
    "category": "Log Analysis"
  },
  "rest-api": {
    "name": "MCP REST API Tester",
    "githubLink": "https://github.com/dkmaker/mcp-rest-api",
    "package": "dkmaker-mcp-rest-api",
    "description": "A TypeScript-based MCP server for testing REST APIs through Cline, supporting various HTTP methods and authentication types.",
    "installCommand": "npx -y @smithery/cli install dkmaker-mcp-rest-api --client claude",
    "requiredEnvVars": [
      "REST_BASE_URL"
    ],
    "optionalParams": [
      "AUTH_BASIC_USERNAME",
      "AUTH_BASIC_PASSWORD",
      "AUTH_BEARER",
      "AUTH_APIKEY_HEADER_NAME",
      "AUTH_APIKEY_VALUE",
      "REST_ENABLE_SSL_VERIFY",
      "REST_RESPONSE_SIZE_LIMIT",
      "HEADER_*"
    ],
    "usageInstructions": "Configure environment variables, add server to MCP configuration, and use through Cline with TypeScript functions like use_mcp_tool('rest-api', 'test_request', { method: 'GET', endpoint: '/users' })",
    "category": "API Integration"
  },
  "digma": {
    "name": "Digma Code Observability MCP Server",
    "githubLink": "https://github.com/digma-ai/digma-mcp-server",
    "package": "supergateway",
    "description": "MCP server for accessing observability insights using Digma for code observability and dynamic code analysis",
    "installCommand": "npx -y supergateway --sse https://<DIGMA_API_URL>/mcp/<DIGMA_API_TOKEN>/sse",
    "requiredEnvVars": [
      "DIGMA_API_URL",
      "DIGMA_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure MCP Client to include Digma MCP using the provided URL or SuperGateway tool",
    "category": "Development"
  },
  "devhub-cms": {
    "name": "DevHub CMS MCP",
    "githubLink": "https://github.com/devhub/devhub-cms-mcp",
    "package": "devhub-cms-mcp",
    "description": "MCP integration for managing content in DevHub CMS system",
    "installCommand": "npx -y @smithery/cli install @devhub/devhub-cms-mcp --client claude",
    "requiredEnvVars": [
      "DEVHUB_API_KEY",
      "DEVHUB_API_SECRET",
      "DEVHUB_BASE_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure environment variables and run with 'uv run main.py' or install via Smithery",
    "category": "API Integration"
  },
  "mysql-query": {
    "name": "MySQL Query MCP Server",
    "githubLink": "https://github.com/devakone/mysql-query-mcp-server",
    "package": "mysql-query-mcp-server",
    "description": "MCP server providing read-only MySQL database queries for AI assistants",
    "installCommand": "npm install -g mysql-query-mcp-server",
    "requiredEnvVars": [
      "LOCAL_DB_HOST",
      "LOCAL_DB_USER",
      "LOCAL_DB_PASS",
      "LOCAL_DB_NAME"
    ],
    "optionalParams": [
      "DEBUG",
      "MCP_MYSQL_SSL",
      "MCP_MYSQL_REJECT_UNAUTHORIZED"
    ],
    "usageInstructions": "Configure AI tool with MCP server details and database credentials",
    "category": "Database"
  },
  "qdrant-memory": {
    "name": "MCP Memory Server with Qdrant Persistence",
    "githubLink": "https://github.com/delorenj/mcp-qdrant-memory",
    "package": "@delorenj/mcp-qdrant-memory",
    "description": "MCP server providing knowledge graph implementation with semantic search using Qdrant vector database",
    "installCommand": "npx -y @delorenj/mcp-qdrant-memory",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "QDRANT_URL",
      "QDRANT_COLLECTION_NAME",
      "QDRANT_API_KEY"
    ],
    "optionalParams": [
      "limit"
    ],
    "usageInstructions": "Configure required environment variables and run using Docker or local setup, then use provided entity management and semantic search tools",
    "category": "Data Storage"
  },
  "mcprfkgw": {
    "name": "MCP Gateway for Voitta",
    "githubLink": "https://github.com/debedb/mcprfkgw",
    "package": "voitta",
    "description": "MCP server providing a gateway to Voitta library capabilities",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "CONFIG_PATH"
    ],
    "optionalParams": [
      "FASTMCP_HTTP",
      "PORT"
    ],
    "usageInstructions": "Run using 'python server.py' or 'FASTMCP_HTTP=1 PORT=10000 python server.py' for HTTP mode",
    "category": "API Integration"
  },
  "jupiter": {
    "name": "MCP Jupiter Server",
    "githubLink": "https://github.com/dcSpark/mcp-server-jupiter",
    "package": "@mcp-dockmaster/mcp-server-jupiter",
    "description": "An MCP server providing access to Jupiter's swap API on Solana blockchain",
    "installCommand": "npx @mcp-dockmaster/mcp-server-jupiter",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop to use this MCP server, then ask Claude to perform swap operations like getting quotes or sending transactions",
    "category": "API Integration"
  },
  "clever-demo": {
    "name": "MCP Clever Demo",
    "githubLink": "https://github.com/davlgd/mcp-clever-demo",
    "package": "mcp-clever-demo",
    "description": "MCP Server exposing Clever Cloud's Tools",
    "installCommand": "npx -y mcp-clever-demo",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use in an MCP client like Claude Desktop by configuring 'mcp-clever-demo' with command 'npx' and args ['-y', 'mcp-clever-demo']",
    "category": "API Integration"
  },
  "on-aws-bedrock": {
    "name": "MCP on AWS Bedrock",
    "githubLink": "https://github.com/davidshtian/MCP-on-AWS-Bedrock",
    "package": "modelcontextprotocol",
    "description": "Implementation of Anthropic's Model Context Protocol with AWS Bedrock integration",
    "installCommand": "uv run fetch_url_mcp_server.py",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY"
    ],
    "optionalParams": [
      "--transport",
      "--port"
    ],
    "usageInstructions": "Run server with 'uv run fetch_url_mcp_server.py', then run client with 'uv run client_stdio.py' or 'uv run client_streamablehttp.py'",
    "category": "API Integration"
  },
  "git-forensics": {
    "name": "Git Forensics MCP",
    "githubLink": "https://github.com/davidorex/git-forensics-mcp",
    "package": "@modelcontextprotocol/git-forensics-mcp",
    "description": "Specialized MCP server for deep git repository investigation and analysis, providing insights into repository history and development patterns.",
    "installCommand": "npx -y @modelcontextprotocol/git-forensics-mcp",
    "requiredEnvVars": [
      "repoPath"
    ],
    "optionalParams": [
      "branches",
      "outputPath",
      "timeRange",
      "files"
    ],
    "usageInstructions": "Run as an MCP service and integrate with any MCP-compatible client. Specify repository path and analysis parameters.",
    "category": "Version Control"
  },
  "git-file-forensics": {
    "name": "Git File Forensics MCP",
    "githubLink": "https://github.com/davidorex/git-file-forensics",
    "package": "git-file-forensics",
    "description": "An MCP tool for deep git file-level forensics that analyzes file histories, changes, and patterns.",
    "installCommand": "npm install git-file-forensics",
    "requiredEnvVars": [],
    "optionalParams": [
      "repoPath",
      "file",
      "outputPath",
      "versions",
      "commit"
    ],
    "usageInstructions": "Use tools like track_file_versions, analyze_file_diff, analyze_file_context, and analyze_file_semantics by calling them via MCP with required arguments.",
    "category": "Version Control"
  },
  "scast": {
    "name": "SCAST",
    "githubLink": "https://github.com/davidkingzyb/SCAST",
    "package": "scast",
    "description": "A programmatic tool that converts code into UML diagrams and flowcharts through static analysis and visualization.",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "/YOUR_WORKSPACE/",
      "C:\\Users\\DKZ\\OTHER_ALLOWED_DIR\\"
    ],
    "usageInstructions": "Clone the repository, run 'npm install', then configure and run as an MCP server.",
    "category": "Development"
  },
  "kpu": {
    "name": "KeywordsPeopleUse MCP Server",
    "githubLink": "https://github.com/data-skunks/kpu-mcp",
    "package": "mcp-remote",
    "description": "MCP server for keyword research features through KeywordsPeopleUse integration",
    "installCommand": "npx mcp-remote https://mcp-keywordspeopleuse.com/sse",
    "requiredEnvVars": [
      "KPU_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Connect to MCP server using mcp-remote proxy or run locally with Node.js",
    "category": "API Integration"
  },
  "toy": {
    "name": "HackerNews MCP Server",
    "githubLink": "https://github.com/dannylee1020/toy-mcp",
    "package": "toy-mcp",
    "description": "MCP server that fetches data from HackerNews API",
    "installCommand": "npx -y toy-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run the server using the installation command",
    "category": "API Integration"
  },
  "multi-agent-with": {
    "name": "LangGraph Coding Agent Team with MCP",
    "githubLink": "https://github.com/danmas0n/multi-agent-with-mcp",
    "package": "@modelcontextprotocol/server-filesystem",
    "description": "A team of coding agents using LangGraph and MCP to create multiple implementations of proposed features",
    "installCommand": "pip install -e . && cd gateway && pip install -e .",
    "requiredEnvVars": [
      "LLM_MODEL",
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "OPENROUTER_API_KEY",
      "GOOGLE_API_KEY"
    ],
    "optionalParams": [
      "OPENROUTER_BASE_URL"
    ],
    "usageInstructions": "Start the gateway server with 'python -m mcp_gateway.server', then open the folder in LangGraph Studio",
    "category": "Development"
  },
  "fillout": {
    "name": "Fillout.io MCP Server",
    "githubLink": "https://github.com/danielma-tic/fillout-mcp-server",
    "package": "@modelcontextprotocol/server-fillout",
    "description": "MCP Server for Fillout.io API, enabling form management, response handling, and analytics.",
    "installCommand": "npx -y @modelcontextprotocol/server-fillout",
    "requiredEnvVars": [
      "FILLOUT_API_KEY"
    ],
    "optionalParams": [
      "limit",
      "offset",
      "formId",
      "name",
      "description",
      "questions",
      "filters",
      "pageSize",
      "afterDate",
      "beforeDate",
      "status",
      "responses",
      "questionId",
      "value",
      "calculations"
    ],
    "usageInstructions": "Set FILLOUT_API_KEY environment variable with your Fillout.io API key, then run the server using 'npx -y @modelcontextprotocol/server-fillout'",
    "category": "API Integration"
  },
  "nostrdb": {
    "name": "nostrdb-mcp",
    "githubLink": "https://github.com/damus-io/nostrdb-mcp",
    "package": "nostrdb-mcp",
    "description": "MCP server enabling LLMs to query local nostr database using ndb command line tool",
    "installCommand": "npx -y nostrdb-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure goose using 'goose configure' and add provider with 'npx -y nostrdb-mcp'",
    "category": "API Integration"
  },
  "decent-sampler-drums": {
    "name": "Decent Sampler Drums MCP Server",
    "githubLink": "https://github.com/dandeliongold/mcp-decent-sampler-drums",
    "package": "@dandeliongold/mcp-decent-sampler-drums",
    "description": "MCP server for generating Decent Sampler drum kit configurations with WAV analysis and XML generation.",
    "installCommand": "npx -y @dandeliongold/mcp-decent-sampler-drums",
    "requiredEnvVars": [],
    "optionalParams": [
      "samplesDirectory"
    ],
    "usageInstructions": "Reference simple_preset_guidelines or advanced_preset_guidelines prompts with samplesDirectory argument.",
    "category": "Media"
  },
  "snowflake-service": {
    "name": "Snowflake Database Service for Claude",
    "githubLink": "https://github.com/datawiz168/mcp-snowflake-service",
    "package": "@datawiz168/mcp-service-snowflake",
    "description": "MCP server providing Claude access to Snowflake databases with SQL query execution and automatic connection management",
    "installCommand": "npx -y @smithery/cli install @datawiz168/mcp-service-snowflake --client claude",
    "requiredEnvVars": [
      "SNOWFLAKE_USER",
      "SNOWFLAKE_PASSWORD",
      "SNOWFLAKE_ACCOUNT",
      "SNOWFLAKE_DATABASE",
      "SNOWFLAKE_WAREHOUSE"
    ],
    "optionalParams": [
      "command",
      "args"
    ],
    "usageInstructions": "The server starts automatically with Claude Desktop client. For manual testing, run 'python server.py'",
    "category": "Database"
  },
  "devdb-vscode": {
    "name": "DevDb",
    "githubLink": "https://github.com/damms005/devdb-vscode",
    "package": "damms005.devdb",
    "description": "A VS Code extension that auto-loads database and provides affordances to aid development and debugging",
    "installCommand": "code --install-extension damms005.devdb",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Open VS Code, navigate to DevDb view, and use shortcuts like Cmd + K + D to toggle the view panel",
    "category": "Development"
  },
  "logseq": {
    "name": "Logseq MCP Server",
    "githubLink": "https://github.com/dailydaniel/logseq-mcp",
    "package": "mcp-server-logseq",
    "description": "MCP server for Logseq knowledge base integration, enabling LLMs to interact with Logseq graphs programmatically.",
    "installCommand": "pip install mcp-server-logseq",
    "requiredEnvVars": [
      "LOGSEQ_API_TOKEN",
      "LOGSEQ_API_URL"
    ],
    "optionalParams": [
      "parent_block",
      "content",
      "is_page_block",
      "before",
      "custom_uuid",
      "src_block",
      "pos",
      "select_block",
      "page_name",
      "properties",
      "journal",
      "format",
      "src_page",
      "include_children",
      "repo"
    ],
    "usageInstructions": "Run the server using 'python -m mcp_server_logseq' after installation. Configure API token and URL via environment variables or command line arguments.",
    "category": "Productivity"
  },
  "daisys": {
    "name": "Daisys MCP Server",
    "githubLink": "https://github.com/daisys-ai/daisys-mcp",
    "package": "daisys-mcp",
    "description": "MCP server for Daisys AI platform integration",
    "installCommand": "uvx daisys-mcp",
    "requiredEnvVars": [
      "DAISYS_EMAIL",
      "DAISYS_PASSWORD",
      "DAISYS_BASE_STORAGE_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure in MCP client config file with required env variables",
    "category": "API Integration"
  },
  "elasticsearch": {
    "name": "Elasticsearch MCP Server",
    "githubLink": "https://github.com/da1y/mcp-server-elasticsearch",
    "package": "@modelcontextprotocol/server-elasticsearch",
    "description": "MCP server for managing Elasticsearch clusters, indices, and executing queries",
    "installCommand": "npx -y @modelcontextprotocol/server-elasticsearch",
    "requiredEnvVars": [],
    "optionalParams": [
      "Elasticsearch endpoint URL"
    ],
    "usageInstructions": "Add to claude_desktop_config.json with appropriate command and args, or run using npx with Elasticsearch endpoint URL",
    "category": "Database"
  },
  "lattice-hq": {
    "name": "Lattice HQ MCP Server",
    "githubLink": "https://github.com/cyrilnoah1/lattice-hq-mcp",
    "package": "lattice-hq-mcp-server",
    "description": "MCP server for Lattice HQ performance management platform integration",
    "installCommand": "npx lattice-hq-mcp-server --api-key=YOUR-TOKEN --stdio",
    "requiredEnvVars": [
      "LATTICE_API_URL",
      "LATTICE_API_TOKEN"
    ],
    "optionalParams": [
      "--api-key"
    ],
    "usageInstructions": "Run with 'npx lattice-hq-mcp-server --api-key=YOUR-TOKEN --stdio' or install globally with 'npm install -g lattice-hq-mcp-server'",
    "category": "API Integration"
  },
  "llm-context.py": {
    "name": "LLM Context",
    "githubLink": "https://github.com/cyberchitta/llm-context.py",
    "package": "llm-context",
    "description": "A tool for injecting relevant content from code/text projects into Large Language Model chat interfaces",
    "installCommand": "uv tool install \"llm-context>=0.3.0\"",
    "requiredEnvVars": [],
    "optionalParams": [
      "-p",
      "-u",
      "-f"
    ],
    "usageInstructions": "Navigate to project root, run 'lc-init', 'lc-sel-files', and 'lc-context' to generate context",
    "category": "Development"
  },
  "abp-io": {
    "name": "ABP.IO MCP Server",
    "githubLink": "https://github.com/cyrilnoah1/abp-io-mcp",
    "package": "abp-io-mcp-server",
    "description": "A comprehensive Model Context Protocol (MCP) server for ABP.IO that enables AI models to interact with ABP applications, providing 48+ tools for managing modules, entities, users, tenants, UI development, and more.",
    "installCommand": "npx -y abp-io-mcp-server --api-key=YOUR_API_KEY --base-url=https://your-abp-app.com --stdio",
    "requiredEnvVars": [
      "ABP_API_KEY",
      "ABP_BASE_URL"
    ],
    "optionalParams": [
      "--info-only-mode"
    ],
    "usageInstructions": "Use with Claude Desktop by configuring mcpServers in claude_desktop_config.json or run directly using npx",
    "category": "Development"
  },
  "cycode-cli": {
    "name": "Cycode CLI",
    "githubLink": "https://github.com/cycodehq/cycode-cli",
    "package": "cycode",
    "description": "Cycode Command Line Interface for scanning repositories for secrets, infrastructure misconfigurations, and vulnerabilities",
    "installCommand": "pip3 install cycode",
    "requiredEnvVars": [
      "CYCODE_CLIENT_ID",
      "CYCODE_CLIENT_SECRET"
    ],
    "optionalParams": [
      "Cycode API URL",
      "Cycode APP URL"
    ],
    "usageInstructions": "Use 'cycode auth' to authenticate, then 'cycode scan' to scan repositories",
    "category": "Security"
  },
  "toolkit": {
    "name": "Toolkit MCP Server",
    "githubLink": "https://github.com/cyanheads/toolkit-mcp-server",
    "package": "@cyanheads/toolkit-mcp-server",
    "description": "MCP server providing system utilities and tools for LLM Agents, including network diagnostics, system monitoring, and cryptographic operations.",
    "installCommand": "npm install @cyanheads/toolkit-mcp-server",
    "requiredEnvVars": [
      "NODE_ENV"
    ],
    "optionalParams": [],
    "usageInstructions": "Add the server to your MCP client settings and use the provided tools through the MCP client.",
    "category": "Development"
  },
  "cyclops": {
    "name": "Cyclops MCP Server",
    "githubLink": "https://github.com/cyclops-ui/mcp-cyclops",
    "package": "github.com/cyclops-ui/mcp-cyclops/cmd/mcp-cyclops",
    "description": "Cyclops MCP allows AI agents to manage Kubernetes applications safely by creating and updating existing applications.",
    "installCommand": "go install github.com/cyclops-ui/mcp-cyclops/cmd/mcp-cyclops@latest",
    "requiredEnvVars": [
      "CYCLOPS_MODULE_NAMESPACE",
      "CYCLOPS_HELM_RELEASE_NAMESPACE",
      "CYCLOPS_MODULE_TARGET_NAMESPACE"
    ],
    "optionalParams": [
      "KUBECONFIG",
      "CYCLOPS_KUBE_CONTEXT"
    ],
    "usageInstructions": "Expose the MCP server using 'kubectl port-forward -n cyclops svc/cyclops-mcp 8000:8000' and connect to 'http://localhost:8000/sse'",
    "category": "Development"
  },
  "scryfall": {
    "name": "Scryfall MCP Server",
    "githubLink": "https://github.com/cryppadotta/scryfall-mcp",
    "package": "scryfall-mcp-server",
    "description": "An MCP server for interacting with the Scryfall API to lookup Magic: The Gathering card details and pricing.",
    "installCommand": "npx scryfall-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "--sse"
    ],
    "usageInstructions": "Run using 'npx scryfall-mcp-server' for stdio mode or 'npx scryfall-mcp-server --sse' for SSE mode",
    "category": "API Integration"
  },
  "crawlab": {
    "name": "Crawlab MCP Server",
    "githubLink": "https://github.com/crawlab-team/crawlab-mcp",
    "package": "crawlab-mcp-server",
    "description": "MCP server for Crawlab, enabling AI applications to interact with Crawlab's functionality",
    "installCommand": "pip install git+https://github.com/crawlab-team/crawlab-mcp-server.git",
    "requiredEnvVars": [
      "CRAWLAB_API_BASE_URL",
      "CRAWLAB_API_TOKEN"
    ],
    "optionalParams": [
      "--spec",
      "--host",
      "--port"
    ],
    "usageInstructions": "Start the MCP server using 'crawlab_mcp-mcp server' command, then configure AI client to connect to the server",
    "category": "Web Scraping"
  },
  "higress-ai-search": {
    "name": "Higress AI-Search MCP Server",
    "githubLink": "https://github.com/cr7258/higress-ai-search-mcp-server",
    "package": "higress-ai-search-mcp-server",
    "description": "An MCP server providing AI search tool with real-time search results from various search engines through Higress ai-search feature.",
    "installCommand": "uvx higress-ai-search-mcp-server",
    "requiredEnvVars": [
      "MODEL"
    ],
    "optionalParams": [
      "HIGRESS_URL",
      "INTERNAL_KNOWLEDGE_BASES"
    ],
    "usageInstructions": "Configure environment variables and run using uvx or uv with local development",
    "category": "API Integration"
  },
  "numpy": {
    "name": "NumPy MCP Server",
    "githubLink": "https://github.com/colesmcintosh/numpy-mcp",
    "package": "numpy-mcp",
    "description": "An MCP server providing numerical computations using NumPy, exposing various mathematical tools through a standardized interface.",
    "installCommand": "mcp install server.py --name \"NumPy Calculator\"",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Test locally with 'mcp dev server.py' or install in Claude Desktop using 'mcp install server.py --name \"NumPy Calculator\"'",
    "category": "Development"
  },
  "dexpaprika": {
    "name": "DexPaprika MCP Server",
    "githubLink": "https://github.com/coinpaprika/dexpaprika-mcp",
    "package": "dexpaprika-mcp",
    "description": "MCP server providing on-demand access to DexPaprika's cryptocurrency and DEX data API",
    "installCommand": "npx dexpaprika-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run 'dexpaprika-mcp' to start the server, which runs on port 8010 by default",
    "category": "API Integration"
  },
  "firecrawl-tool": {
    "name": "MCP Firecrawl Server",
    "githubLink": "https://github.com/codyde/mcp-firecrawl-tool",
    "package": "mcp-firecrawl-tool",
    "description": "An MCP server providing website scraping and structured data extraction using Firecrawl's APIs.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "FIRECRAWL_API_TOKEN"
    ],
    "optionalParams": [
      "formats",
      "schema"
    ],
    "usageInstructions": "Start the server with 'npm start', then use mcp-inspector to call tools like scrape-website and extract-data.",
    "category": "Web Scraping"
  },
  "backlinks": {
    "name": "SEO MCP",
    "githubLink": "https://github.com/cnych/seo-mcp",
    "package": "seo-mcp",
    "description": "An MCP service providing SEO data from Ahrefs, including backlink analysis, keyword research, and traffic estimation.",
    "installCommand": "pip install seo-mcp",
    "requiredEnvVars": [
      "CAPSOLVER_API_KEY"
    ],
    "optionalParams": [
      "country",
      "search_engine",
      "mode"
    ],
    "usageInstructions": "Run using 'uvx seo-mcp' or install via pip. Configure CAPSOLVER_API_KEY environment variable.",
    "category": "API Integration"
  },
  "cloudbrowser": {
    "name": "Cloud Browser MCP Server",
    "githubLink": "https://github.com/clpublic/mcp-server-cloudbrowser",
    "package": "@browsercloud/mcp-server-cloudbrowser",
    "description": "MCP server providing browser automation capabilities through Browserbase API",
    "installCommand": "npx -y @browsercloud/mcp-server-cloudbrowser",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "url",
      "script",
      "name",
      "selector",
      "width",
      "height",
      "value"
    ],
    "usageInstructions": "Set up Claude Desktop configuration to use the server, then restart the app to access browser automation tools",
    "category": "Browser Automation"
  },
  "cloudflare": {
    "name": "Cloudflare MCP Server",
    "githubLink": "https://github.com/cloudflare/mcp-server-cloudflare",
    "package": "mcp-remote",
    "description": "MCP server for Cloudflare services integration with LLMs",
    "installCommand": "npx mcp-remote https://observability.mcp.cloudflare.com/sse",
    "requiredEnvVars": [
      "CLOUDFLARE_API_TOKEN"
    ],
    "optionalParams": [
      "server URL"
    ],
    "usageInstructions": "Use with MCP clients like Cursor or Claude, configure with mcp-remote",
    "category": "API Integration"
  },
  "clay": {
    "name": "Clay MCP Server",
    "githubLink": "https://github.com/clay-inc/clay-mcp",
    "package": "@clayhq/clay-mcp",
    "description": "A Model Context Protocol (MCP) server for Clay, providing contact search, interaction retrieval, and contact management features.",
    "installCommand": "npx @clayhq/clay-mcp@latest",
    "requiredEnvVars": [
      "CLAY_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Edit claude_desktop_config.json to include the Clay MCP server configuration with your Clay API key, or use Smithery for installation.",
    "category": "Productivity"
  },
  "flux-img": {
    "name": "Flux Image MCP Server",
    "githubLink": "https://github.com/ckz/flux-img-mcp",
    "package": "@modelcontextprotocol/sdk",
    "description": "MCP server for image generation using Flux Schnell model on Replicate",
    "installCommand": "npm install -g @modelcontextprotocol/sdk@latest",
    "requiredEnvVars": [
      "REPLICATE_API_TOKEN"
    ],
    "optionalParams": [
      "prompt"
    ],
    "usageInstructions": "Use the generate_image tool with a text prompt",
    "category": "Media"
  },
  "chromia": {
    "name": "Chromia MCP Server",
    "githubLink": "https://github.com/chromindscan/chromia-mcp",
    "package": "chromia-mcp",
    "description": "Enables Claude AI to interact with Chromia Wallet for sending $CHR transactions",
    "installCommand": "npm i",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Clone the repo, setup .env, install dependencies, build, and configure Claude's Desktop App",
    "category": "API Integration"
  },
  "custom-gitlab": {
    "name": "Custom GitLab MCP Server",
    "githubLink": "https://github.com/chris-miaskowski/custom-gitlab-mcp-server",
    "package": "custom-gitlab-mcp-server",
    "description": "A custom GitLab MCP server implementation for integration with AI assistants, providing repository search, file operations, and issue management.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "GITLAB_PERSONAL_ACCESS_TOKEN",
      "GITLAB_API_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure in Claude settings file or Claude Desktop config file with command and args pointing to the server's index.js",
    "category": "Version Control"
  },
  "chatsum": {
    "name": "Chat Summarization MCP Server",
    "githubLink": "https://github.com/chatmcp/mcp-server-chatsum",
    "package": "mcp-server-chatsum",
    "description": "An MCP server used to summarize chat messages",
    "installCommand": "pnpm install",
    "requiredEnvVars": [
      "CHAT_DB_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Set CHAT_DB_PATH in .env, then run 'pnpm build' or 'pnpm watch' for development",
    "category": "Communication"
  },
  "agentkit": {
    "name": "Chargebee MCP Server",
    "githubLink": "https://github.com/chargebee/agentkit",
    "package": "@chargebee/mcp-server",
    "description": "Enhances AI applications with Chargebee capabilities for billing and subscription management",
    "installCommand": "npm install @chargebee/mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Refer to modelcontextprotocol/README.md for usage instructions",
    "category": "API Integration"
  },
  "dev-portal": {
    "name": "Chainstack Developer Portal",
    "githubLink": "https://github.com/chainstack/dev-portal",
    "package": "@mintlify/mcp",
    "description": "Chainstack Developer Portal MCP server for documentation access",
    "installCommand": "npx @mintlify/mcp@latest add chainstack",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run `npx @mintlify/mcp@latest add chainstack` to add as a local MCP server",
    "category": "Development"
  },
  "finnhub": {
    "name": "Finnhub MCP Server",
    "githubLink": "https://github.com/catherinedparnell/mcp-finnhub",
    "package": "mcp-finnhub",
    "description": "An MCP server to interface with Finnhub API for financial data and market news",
    "installCommand": "fastmcp install server.py",
    "requiredEnvVars": [
      "FINNUB_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Setup .env file with Finnhub API Key, configure Claude Desktop, then run fastmcp dev server.py",
    "category": "API Integration"
  },
  "nrepl": {
    "name": "Basilisp nREPL MCP Bridge",
    "githubLink": "https://github.com/cat-state/nrepl-mcp",
    "package": "nrepl-mcp",
    "description": "Bridge between Model Control Protocol (MCP) and Basilisp's nREPL server",
    "installCommand": "claude mcp add /path/to/basilisp_mcp_bridge.py",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start Basilisp nREPL server, then add MCP bridge to Claude Code",
    "category": "Development"
  },
  "catapulta": {
    "name": "Catapulta MCP Server",
    "githubLink": "https://github.com/catapulta-sh/catapulta-mcp",
    "package": "@catapulta/mcp-server",
    "description": "AI-powered deployment and management tool interactions through Model Context Protocol",
    "installCommand": "npx -y @catapulta/mcp-server@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "network",
      "sponsor",
      "gas_hawk"
    ],
    "usageInstructions": "Use with Cursor or VS Code by configuring MCP settings with the provided command",
    "category": "Development"
  },
  "mac": {
    "name": "Mac Messages MCP",
    "githubLink": "https://github.com/carterlasalle/mac",
    "package": "mac-messages-mcp",
    "description": "A Python bridge for interacting with the macOS Messages app using MCP",
    "installCommand": "uv pip install mac-messages-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run the MCP server directly using 'mac-messages-mcp' or integrate with Claude Desktop or Cursor",
    "category": "Communication"
  },
  "nhl-go": {
    "name": "NHL MCP Server",
    "githubLink": "https://github.com/carsonjones/nhl-go",
    "package": "@modelcontextprotocol/inspector",
    "description": "Exposes NHL API data via Model Context Protocol for LLM integration",
    "installCommand": "npx @modelcontextprotocol/inspector ./nhl-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Build nhl-mcp binary and add to claude_desktop_config.json, then use with MCP inspector",
    "category": "API Integration"
  },
  "winterm": {
    "name": "WinTerm MCP",
    "githubLink": "https://github.com/capecoma/winterm-mcp",
    "package": "winterm-mcp",
    "description": "A Model Context Protocol server for programmatic access to the Windows terminal, enabling AI models to interact with the Windows command line interface.",
    "installCommand": "git clone https://github.com/capecoma/winterm-mcp.git && cd winterm-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "path/to/build/index.js"
    ],
    "usageInstructions": "Configure Claude Desktop by adding server config to %APPDATA%/Claude/claude_desktop_config.json, then use tools like write_to_terminal, read_terminal_output, and send_control_character.",
    "category": "Development"
  },
  "xcodebuildmcp": {
    "name": "XcodeBuild MCP",
    "githubLink": "https://github.com/cameroncooke/XcodeBuildMCP",
    "package": "xcodebuildmcp",
    "description": "An MCP server providing Xcode-related tools for AI assistants and MCP clients",
    "installCommand": "npx -y xcodebuildmcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure your MCP client to use XcodeBuildMCP server",
    "category": "Development"
  },
  "alphavantage": {
    "name": "Alpha Vantage MCP Server",
    "githubLink": "https://github.com/calvernaz/alphavantage",
    "package": "@calvernaz/alphavantage",
    "description": "MCP server for Alphavantage stock market data API",
    "installCommand": "npx -y @calvernaz/alphavantage",
    "requiredEnvVars": [
      "ALPHAVANTAGE_API_KEY"
    ],
    "optionalParams": [
      "--server",
      "--port"
    ],
    "usageInstructions": "Run 'alphavantage' for stdio mode or 'alphavantage --server http --port 8080' for HTTP mode",
    "category": "API Integration"
  },
  "caiyun-weather": {
    "name": "Caiyun Weather MCP Server",
    "githubLink": "https://github.com/caiyunapp/mcp-caiyun-weather",
    "package": "mcp-caiyun-weather",
    "description": "Weather information server using Caiyun Weather API",
    "installCommand": "uvx mcp-caiyun-weather",
    "requiredEnvVars": [
      "CAIYUN_WEATHER_API_TOKEN"
    ],
    "optionalParams": [
      "lng",
      "lat"
    ],
    "usageInstructions": "Set CAIYUN_WEATHER_API_TOKEN environment variable and use uvx mcp-caiyun-weather",
    "category": "API Integration"
  },
  "ui-tars-desktop": {
    "name": "Agent TARS",
    "githubLink": "https://github.com/bytedance/UI-TARS-desktop",
    "package": "@agent-tars/cli",
    "description": "Multimodal AI Agent stack for GUI Agent and Vision integration",
    "installCommand": "npm install -g @agent-tars/cli",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use CLI or Web UI for task completion through MCP tools",
    "category": "Development"
  },
  "dbhub": {
    "name": "DBHub",
    "githubLink": "https://github.com/bytebase/dbhub",
    "package": "@bytebase/dbhub",
    "description": "Universal database gateway implementing the Model Context Protocol (MCP) server interface",
    "installCommand": "npx @bytebase/dbhub --transport http --port8080 --dsn \"postgres://user:password@localhost:5432/dbname?sslmode=disable\"",
    "requiredEnvVars": [],
    "optionalParams": [
      "--dsn",
      "--demo",
      "--transport",
      "--port"
    ],
    "usageInstructions": "Run using 'npx @bytebase/dbhub' with required parameters like --dsn or --demo",
    "category": "Database"
  },
  "system": {
    "name": "DevEnvInfoServer",
    "githubLink": "https://github.com/carterlasalle/system_information_mcp",
    "package": "@carterlasalle/system_information_mcp",
    "description": "MCP server providing detailed development environment information to Cursor code editor",
    "installCommand": "npx -y @carterlasalle/system_information_mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure in Cursor Settings > Features > MCP, then add server with 'stdio' type and command to run the server",
    "category": "Development"
  },
  "geoapify": {
    "name": "Geoapify MCP Server",
    "githubLink": "https://github.com/burningion/geoapify-mcp",
    "package": "fastmcp",
    "description": "Convert addresses to GPS coordinates and create map images using Geoapify API",
    "installCommand": "uv run --with fastmcp --with requests --with folio --with selenium --with pillow fastmcp run /PATH/TO/THIS/REPO/server.py",
    "requiredEnvVars": [
      "GEO_APIKEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Use tools like get_gps_coordinates and create_map_from_geojson to convert addresses and create map images",
    "category": "API Integration"
  },
  "bucket-javascript-sdk": {
    "name": "Bucket JavaScript SDK",
    "githubLink": "https://github.com/bucketco/bucket-javascript-sdk",
    "package": "@bucketco/javascript-sdk",
    "description": "Feature flags for SaaS that run on TypeScript",
    "installCommand": "npm install @bucketco/javascript-sdk",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Check the README of specific SDKs (React, Vue, Browser, Node.js) for usage instructions",
    "category": "Development"
  },
  "webscan": {
    "name": "MCP Webscan Server",
    "githubLink": "https://github.com/bsmi021/mcp-server-webscan",
    "package": "@smithery/cli",
    "description": "An MCP server for web content scanning and analysis, providing tools for fetching, analyzing, and extracting information from web pages.",
    "installCommand": "npx -y @smithery/cli install mcp-server-webscan --client claude",
    "requiredEnvVars": [
      "NODE_ENV"
    ],
    "optionalParams": [
      "selector",
      "baseUrl",
      "limit",
      "maxDepth",
      "pattern"
    ],
    "usageInstructions": "Start the server using 'npm start'. Configure it in Claude Desktop settings and use tools like 'fetch-page' and 'extract-links' in conversations.",
    "category": "Web Scraping"
  },
  "node-omnibus": {
    "name": "Node Omnibus MCP Server",
    "githubLink": "https://github.com/bsmi021/mcp-node-omnibus-server",
    "package": "@bsmi021/mcp-node-omnibus-server",
    "description": "A comprehensive MCP server providing Node.js development tooling and automation capabilities.",
    "installCommand": "npx -y @smithery/cli install @bsmi021/mcp-node-omnibus-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server using 'npm start'. It operates using the Model Context Protocol over stdio.",
    "category": "Development"
  },
  "mistral-codestral": {
    "name": "Mistral Codestral MCP Server",
    "githubLink": "https://github.com/bsmi021/mcp-mistral-codestral",
    "package": "mcp-mistral-codestral",
    "description": "MCP server implementation for Mistral Codestral API, providing code completion, bug fixing, and test generation",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "MISTRAL_API_KEY"
    ],
    "optionalParams": [
      "language"
    ],
    "usageInstructions": "Start the server with 'npm start' after configuring MISTRAL_API_KEY in .env file",
    "category": "Development"
  },
  "deltatask": {
    "name": "DeltaTask",
    "githubLink": "https://github.com/brysontang/DeltaTask",
    "package": "deltatask",
    "description": "Advanced task management system with Obsidian integration and MCP server",
    "installCommand": "uv pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure Claude for Desktop with claude_desktop_config.json, then use DeltaTask tools",
    "category": "Productivity"
  },
  "mailchimpmcp": {
    "name": "Mailchimp MCP Server",
    "githubLink": "https://github.com/bryangsmith/MailchimpMCP",
    "package": "mailchimp-mcp",
    "description": "Utilities for developing an MCP server for the Mailchimp API",
    "installCommand": "npm install mailchimp-mcp",
    "requiredEnvVars": [
      "MAILCHIMP_API_KEY"
    ],
    "optionalParams": [
      "MAILCHIMP_API_ENDPOINT"
    ],
    "usageInstructions": "Use the provided utilities to develop an MCP server for Mailchimp API integration",
    "category": "API Integration"
  },
  "video-editing": {
    "name": "Video Editor MCP Server",
    "githubLink": "https://github.com/burningion/video-editing-mcp",
    "package": "video-editor-mcp",
    "description": "MCP server for video editing, uploading, and generating videos using Video Jungle API",
    "installCommand": "npx -y @smithery/cli install video-editor-mcp --client claude",
    "requiredEnvVars": [
      "VIDEO_JUNGLE_API_KEY"
    ],
    "optionalParams": [
      "LOAD_PHOTOS_DB"
    ],
    "usageInstructions": "Sign up for Video Jungle API, get API key, then run using 'uv run video-editor-mcp YOURAPIKEY'",
    "category": "Media"
  },
  "hypernym": {
    "name": "Hypernym MCP Server",
    "githubLink": "https://github.com/bmorphism/hypernym-mcp-server",
    "package": "hypernym-mcp-server",
    "description": "MCP server providing semantic text analysis and compression via Hypernym AI's API",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "HYPERNYM_API_URL",
      "HYPERNYM_API_KEY"
    ],
    "optionalParams": [
      "min_compression_ratio",
      "min_semantic_similarity",
      "PORT",
      "SSL_KEY_PATH",
      "SSL_CERT_PATH",
      "MCP_USE_STDIO"
    ],
    "usageInstructions": "npm start or npm run start:stdio for MCP integration",
    "category": "API Integration"
  },
  "browserbase": {
    "name": "Browserbase MCP Server",
    "githubLink": "https://github.com/browserbase/mcp-server-browserbase",
    "package": "@browserbasehq/mcp-browserbase",
    "description": "Provides cloud browser automation capabilities using Browserbase and Stagehand, enabling LLMs to interact with web pages and execute JavaScript.",
    "installCommand": "npx -y @browserbasehq/mcp-browserbase",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Check out Browserbase MCP or Stagehand MCP documentation for getting started",
    "category": "Browser Automation"
  },
  "cline-personas": {
    "name": "Cline Personas MCP Server",
    "githubLink": "https://github.com/bradfair/mcp-cline-personas",
    "package": "mcp-cline-personas",
    "description": "An MCP server for managing .clinerules files using shared components and persona templates",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Import ComponentPersonaService and use its methods to manage components and personas",
    "category": "Productivity"
  },
  "slowtime": {
    "name": "Slowtime MCP Server",
    "githubLink": "https://github.com/bmorphism/slowtime-mcp-server",
    "package": "slowtime-mcp-server",
    "description": "MCP server for secure time-based operations with timing attack protection and timelock encryption",
    "installCommand": "npm install slowtime-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add to Claude Desktop config at ~/Library/Application Support/Claude/claude_desktop_config.json",
    "category": "Productivity"
  },
  "esxi": {
    "name": "ESXi MCP Server",
    "githubLink": "https://github.com/bright8192/esxi-mcp-server",
    "package": "mcp-core",
    "description": "VMware ESXi/vCenter management server providing REST API for virtual machine management",
    "installCommand": "pip install pyvmomi pyyaml uvicorn mcp-core",
    "requiredEnvVars": [
      "VCENTER_HOST",
      "VCENTER_USER",
      "VCENTER_PASSWORD"
    ],
    "optionalParams": [
      "datacenter",
      "cluster",
      "datastore",
      "network",
      "insecure",
      "api_key",
      "log_file",
      "log_level"
    ],
    "usageInstructions": "Create config.yaml, then run 'python server.py -c config.yaml'",
    "category": "API Integration"
  },
  "marginalia": {
    "name": "Marginalia MCP Server",
    "githubLink": "https://github.com/bmorphism/marginalia-mcp-server",
    "package": "marginalia-mcp-server",
    "description": "An MCP server providing access to Marginalia Search API for non-commercial content discovery",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "index",
      "count"
    ],
    "usageInstructions": "Use the 'search' tool with query, index, and count parameters",
    "category": "Web Scraping"
  },
  "babashka": {
    "name": "Babashka MCP Server",
    "githubLink": "https://github.com/bmorphism/babashka-mcp-server",
    "package": "babashka-mcp-server",
    "description": "An MCP server for executing Babashka code and managing command history",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "BABASHKA_PATH"
    ],
    "optionalParams": [
      "timeout"
    ],
    "usageInstructions": "Configure BABASHKA_PATH environment variable, then run 'npm run build' to start the server",
    "category": "Development"
  },
  "anti-bullshit": {
    "name": "Anti-Bullshit MCP Server",
    "githubLink": "https://github.com/bmorphism/anti-bullshit-mcp-server",
    "package": "anti-bullshit-mcp-server",
    "description": "A Model Context Protocol server for analyzing claims, validating sources, and detecting manipulation using multiple epistemological frameworks.",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "framework"
    ],
    "usageInstructions": "Use analyze_claim, validate_sources, or check_manipulation endpoints with appropriate parameters",
    "category": "Analytics"
  },
  "square": {
    "name": "Square MCP Server",
    "githubLink": "https://github.com/block/square-mcp",
    "package": "square-mcp",
    "description": "An MCP server providing access to Square API functionality",
    "installCommand": "uv sync && uv pip install .",
    "requiredEnvVars": [
      "SQUARE_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "SQUARE_ENVIRONMENT"
    ],
    "usageInstructions": "Set required environment variables and run 'square-mcp'",
    "category": "API Integration"
  },
  "web-browser": {
    "name": "Web Browser MCP Server",
    "githubLink": "https://github.com/blazickjp/web-browser-mcp-server",
    "package": "web-browser-mcp-server",
    "description": "Enables AI assistants to browse and extract content from the web through a simple MCP interface",
    "installCommand": "npx -y @smithery/cli install web-browser-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "REQUEST_TIMEOUT"
    ],
    "usageInstructions": "Configure through environment variables and use the 'browse_webpage' tool to extract content",
    "category": "Web Scraping"
  },
  "usgs-quakes": {
    "name": "USGS Quakes MCP Server",
    "githubLink": "https://github.com/blake365/usgs-quakes-mcp",
    "package": "@blake365/usgs-quakes-mcp",
    "description": "MCP server providing access to USGS earthquake data within Claude Desktop",
    "installCommand": "npx -y @smithery/cli install @blake365/usgs-quakes-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Install via Smithery using the provided command, then configure Claude Desktop to connect to the server",
    "category": "API Integration"
  },
  "macrostrat": {
    "name": "Macrostrat MCP Server",
    "githubLink": "https://github.com/blake365/macrostrat-mcp",
    "package": "@blake365/macrostrat-mcp",
    "description": "MCP server for accessing Macrostrat API geologic data within Claude Desktop",
    "installCommand": "npx -y @smithery/cli install @blake365/macrostrat-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop by adding server configuration to claude_desktop_config.json, then restart Claude Desktop",
    "category": "API Integration"
  },
  "playwright-plus-python": {
    "name": "Playwright Server MCP",
    "githubLink": "https://github.com/blackwhite084/playwright-plus-python-mcp",
    "package": "playwright-server",
    "description": "An MCP server providing browser automation tools using Playwright",
    "installCommand": "uvx playwright-server",
    "requiredEnvVars": [
      "UV_PUBLISH_TOKEN",
      "UV_PUBLISH_USERNAME",
      "UV_PUBLISH_PASSWORD"
    ],
    "optionalParams": [
      "style",
      "selector",
      "value",
      "script",
      "text"
    ],
    "usageInstructions": "Configure the server in claude_desktop_config.json and use the provided tools and prompts",
    "category": "Browser Automation"
  },
  "adjust": {
    "name": "Adjust MCP Server",
    "githubLink": "https://github.com/bitscorp-mcp/mcp-adjust",
    "package": "@bitscorp/mcp-adjust",
    "description": "MCP server interfacing with Adjust API for querying reports and metrics",
    "installCommand": "npx -y @smithery/cli install @bitscorp/mcp-adjust --client claude",
    "requiredEnvVars": [
      "Adjust API key"
    ],
    "optionalParams": [
      "config parameters like apiKey"
    ],
    "usageInstructions": "Use commands like 'adjust report revenue for the last 7 days' in your MCP client",
    "category": "API Integration"
  },
  "run-command": {
    "name": "Run Shell Command",
    "githubLink": "https://github.com/benyue1978/run-command-mcp",
    "package": "github:benyue1978/run-command-mcp",
    "description": "An MCP server that allows running shell commands",
    "installCommand": "npx github:benyue1978/run-command-mcp start",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add an MCP in Cursor with name 'Run Command', type 'Command', and command 'npx github:benyue1978/run-command-mcp start'. Use prompt in Cursor chat to run shell commands.",
    "category": "Development"
  },
  "serverman": {
    "name": "MCP Server Configuration Manager",
    "githubLink": "https://github.com/benhaotang/mcp-serverman",
    "package": "mcp-serverman",
    "description": "A command-line tool to manage Claude MCP servers configuration with version control and profiling",
    "installCommand": "pip install mcp-serverman",
    "requiredEnvVars": [],
    "optionalParams": [
      "--client"
    ],
    "usageInstructions": "Use 'mcp-serverman' command in terminal for various operations like listing servers, enabling/disabling servers, version control, and preset management",
    "category": "Development"
  },
  "mma-docs": {
    "name": "Mathematica Documentation MCP server",
    "githubLink": "https://github.com/benhaotang/mcp-mma-docs",
    "package": "mcp-python-sdk",
    "description": "MCP server providing Mathematica documentation",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "WOLFRAMSCRIPT_PATH"
    ],
    "optionalParams": [
      "packages",
      "load_addons"
    ],
    "usageInstructions": "Run 'mcp dev path/to/mcp-mma-doc.py' to initialize the server",
    "category": "Development"
  },
  "speckle": {
    "name": "Speckle MCP Server",
    "githubLink": "https://github.com/bimgeek/speckle-mcp",
    "package": "speckle-mcp",
    "description": "MCP server for interacting with Speckle, a collaborative data hub for AEC tools.",
    "installCommand": "uv pip install -r requirements.txt",
    "requiredEnvVars": [
      "SPECKLE_TOKEN"
    ],
    "optionalParams": [
      "limit",
      "project_id",
      "model_id",
      "version_id",
      "property_path",
      "include_children",
      "query"
    ],
    "usageInstructions": "Clone the repository, install dependencies using uv, and configure environment variables.",
    "category": "API Integration"
  },
  "unipile": {
    "name": "Unipile MCP Server",
    "githubLink": "https://github.com/baryhuang/mcp-unipile",
    "package": "buryhuang/mcp-unipile",
    "description": "MCP server for accessing messages across multiple messaging platforms through Unipile",
    "installCommand": "docker pull buryhuang/mcp-unipile:latest",
    "requiredEnvVars": [
      "UNIPILE_DSN",
      "UNIPILE_API_KEY"
    ],
    "optionalParams": [
      "batch_size"
    ],
    "usageInstructions": "Run using Docker with required environment variables: docker run -e UNIPILE_DSN=your_dsn_here -e UNIPILE_API_KEY=your_api_key_here buryhuang/mcp-unipile:latest",
    "category": "Communication"
  },
  "binary-reader": {
    "name": "Binary Reader MCP",
    "githubLink": "https://github.com/berlinbra/binary-reader-mcp",
    "package": "binary-reader-mcp",
    "description": "A Model Context Protocol server for reading and analyzing binary files, with initial support for Unreal Engine asset files.",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "file_path",
      "format"
    ],
    "usageInstructions": "Use MCP tools like 'read-unreal-asset' and 'read-binary-metadata' with appropriate arguments",
    "category": "File Management"
  },
  "hubspot": {
    "name": "HubSpot MCP Server",
    "githubLink": "https://github.com/baryhuang/mcp-hubspot",
    "package": "mcp-hubspot",
    "description": "MCP server enabling AI assistants to interact with HubSpot CRM data, providing access to contacts, companies, and engagement data",
    "installCommand": "npx -y @smithery/cli@latest install mcp-hubspot --client claude",
    "requiredEnvVars": [
      "HUBSPOT_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "/path/to/storage:/storage"
    ],
    "usageInstructions": "Run using 'npx -y @smithery/cli@latest install mcp-hubspot --client claude' or 'docker run -e HUBSPOT_ACCESS_TOKEN=your_token buryhuang/mcp-hubspot:latest'",
    "category": "API Integration"
  },
  "bifrostmcp": {
    "name": "Bifrost - VSCode Dev Tools MCP Server",
    "githubLink": "https://github.com/biegehydra/BifrostMCP",
    "package": "ConnorHallman.bifrost-mcp",
    "description": "VS Code extension providing MCP server for VSCode's development tools and language features to AI tools",
    "installCommand": "npx -y supergateway --sse http://localhost:8008/sse",
    "requiredEnvVars": [],
    "optionalParams": [
      "port"
    ],
    "usageInstructions": "Install VS Code extension, configure AI assistant to connect to http://localhost:8008/sse",
    "category": "Development"
  },
  "neovim": {
    "name": "Neovim MCP Server",
    "githubLink": "https://github.com/bigcodegen/mcp-neovim-server",
    "package": "mcp-neovim-server",
    "description": "Connects Claude Desktop to Neovim using MCP, enabling AI-assisted text editing and development workflows",
    "installCommand": "npx -y mcp-neovim-server",
    "requiredEnvVars": [
      "NVIM_SOCKET_PATH"
    ],
    "optionalParams": [
      "ALLOW_SHELL_COMMANDS"
    ],
    "usageInstructions": "Configure NVIM_SOCKET_PATH to your Neovim socket path, start Neovim with --listen /tmp/nvim, and connect via Claude Desktop",
    "category": "Development"
  },
  "mcprules": {
    "name": "MCPRules - Programming Guidelines Management Server",
    "githubLink": "https://github.com/bartwisch/MCPRules",
    "package": "MCPRules",
    "description": "A powerful MCP server managing programming guidelines and rules",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "RULES_FILE_PATH"
    ],
    "optionalParams": [
      "GITHUB_TOKEN"
    ],
    "usageInstructions": "Configure environment variables and run the server",
    "category": "Development"
  },
  "tung-shing": {
    "name": "Tung-Shing MCP Service",
    "githubLink": "https://github.com/baranwang/mcp-tung-shing",
    "package": "mcp-tung-shing",
    "description": "Traditional Chinese calendar calculation service based on Model Context Protocol (MCP)",
    "installCommand": "npx -y mcp-tung-shing@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "startDate",
      "days",
      "includeHours",
      "tabooFilters"
    ],
    "usageInstructions": "Add tung-shing configuration to your MCP config file",
    "category": "Productivity"
  },
  "zed-axiom-context": {
    "name": "Axiom Context Server",
    "githubLink": "https://github.com/axiomhq/zed-axiom-context-server",
    "package": "axiom-mcp",
    "description": "Model Context Server for Axiom, used with the Zed AI assistant",
    "installCommand": "npx -y axiom-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "--config"
    ],
    "usageInstructions": "Configure the extension in Zed settings.json or run axiom-mcp executable",
    "category": "API Integration"
  },
  "devcontext": {
    "name": "DevContext: Autonomous Context Awareness MCP Server",
    "githubLink": "https://github.com/aurda012/devcontext",
    "package": "devcontext",
    "description": "Provides continuous, project-centric context awareness for developers through sophisticated retrieval methods and context management",
    "installCommand": "npx -y devcontext@latest",
    "requiredEnvVars": [
      "TURSO_DATABASE_URL",
      "TURSO_AUTH_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure .cursor/mcp.json with required environment variables and run using npx",
    "category": "Development"
  },
  "axiom": {
    "name": "Axiom MCP Server",
    "githubLink": "https://github.com/axiomhq/mcp-server-axiom",
    "package": "github.com/axiomhq/axiom-mcp",
    "description": "MCP server implementation for Axiom that enables AI agents to query data using Axiom Processing Language (APL)",
    "installCommand": "go install github.com/axiomhq/axiom-mcp@latest",
    "requiredEnvVars": [
      "AXIOM_TOKEN",
      "AXIOM_URL"
    ],
    "optionalParams": [
      "AXIOM_ORG_ID",
      "AXIOM_QUERY_RATE",
      "AXIOM_QUERY_BURST",
      "AXIOM_DATASETS_RATE",
      "AXIOM_DATASETS_BURST"
    ],
    "usageInstructions": "Create a config file with token and URL, then configure Claude app to use the MCP server",
    "category": "API Integration"
  },
  "atla": {
    "name": "Atla MCP Server",
    "githubLink": "https://github.com/atla-ai/atla-mcp-server",
    "package": "atla-mcp-server",
    "description": "An MCP server implementation providing a standardized interface for LLMs to interact with the Atla API for state-of-the-art LLMJ evaluation.",
    "installCommand": "uvx atla-mcp-server",
    "requiredEnvVars": [
      "ATLA_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server using 'ATLA_API_KEY=<your-api-key> uvx atla-mcp-server' and connect using OpenAI Agents SDK or configure in Claude Desktop or Cursor.",
    "category": "API Integration"
  },
  "argus": {
    "name": "Argus - Repository Analysis and Security Assessment Tool",
    "githubLink": "https://github.com/athapong/argus",
    "package": "argus",
    "description": "A powerful MCP tool for analyzing code repositories, performing security scans, and assessing code quality across multiple programming languages.",
    "installCommand": "uvx argus",
    "requiredEnvVars": [
      "PATH"
    ],
    "optionalParams": [
      "SKIP_SYSTEM_CHECK",
      "gitlab_credentials",
      "branch",
      "language",
      "scan_type",
      "source",
      "target"
    ],
    "usageInstructions": "Use commands like analyze_repository_structure, analyze_code_quality, security_scan_repository, and compare_git_changes with appropriate parameters.",
    "category": "Development"
  },
  "doc-scraper": {
    "name": "Doc Scraper MCP Server",
    "githubLink": "https://github.com/askjohngeorge/mcp-doc-scraper",
    "package": "@askjohngeorge/mcp-doc-scraper",
    "description": "An MCP server that scrapes web documentation and converts it to markdown format",
    "installCommand": "npx -y @smithery/cli install @askjohngeorge/mcp-doc-scraper --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "url",
      "output_path"
    ],
    "usageInstructions": "Run using 'python -m mcp_doc_scraper', then use the 'scrape_docs' tool with 'url' and 'output_path' parameters",
    "category": "Web Scraping"
  },
  "mtg-servers": {
    "name": "MTG Deck Manager MCP Server",
    "githubLink": "https://github.com/artillect/mtg-mcp-servers",
    "package": "fastmcp",
    "description": "MCP server for managing Magic: The Gathering decks and card information",
    "installCommand": "pip install fastmcp httpx",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure in Claude Desktop Client, then interact via Claude to manage MTG decks and search cards",
    "category": "Other"
  },
  "scdl": {
    "name": "Soundcloud Downloader MCP",
    "githubLink": "https://github.com/arnavsurve/scdl-mcp",
    "package": "scdl-mcp",
    "description": "Download songs and playlists from Soundcloud using MCP server",
    "installCommand": "git clone https://github.com/arnavsurve/scdl-mcp && cd scdl-mcp && uv run mcp install server.py",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run installation command, then restart Claude desktop client to use the server",
    "category": "Media"
  },
  "sg-lta": {
    "name": "Singapore LTA MCP Server",
    "githubLink": "https://github.com/arjunkmrm/mcp-sg-lta",
    "package": "@arjunkmrm/mcp-sg-lta",
    "description": "MCP server for Singapore's Land Transport Authority (LTA) DataMall API, providing real-time transportation information",
    "installCommand": "npx -y @smithery/cli install @arjunkmrm/mcp-sg-lta --client claude",
    "requiredEnvVars": [
      "LTA_API_KEY"
    ],
    "optionalParams": [
      "busStopCode",
      "serviceNo",
      "trainLine"
    ],
    "usageInstructions": "Add configuration to claude_desktop_config.json with LTA_API_KEY",
    "category": "API Integration"
  },
  "localutils": {
    "name": "Local Utilities MCP Server",
    "githubLink": "https://github.com/arjshiv/localutils-mcp-server",
    "package": "localutils-mcp-server",
    "description": "An MCP server providing access to local system utilities like time, hostname, and directory listing.",
    "installCommand": "pnpm add -g localutils-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the server using 'localutils-mcp' after global installation, or 'npx localutils-mcp-server' without installation.",
    "category": "Development"
  },
  "minecraft": {
    "name": "Minecraft MCP Integration",
    "githubLink": "https://github.com/arjunkmrm/mcp-minecraft",
    "package": "@smithery/cli",
    "description": "MCP integration for Minecraft that enables AI assistants to interact with a Minecraft server",
    "installCommand": "npx -y @smithery/cli install mcp-minecraft --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "--server-jar"
    ],
    "usageInstructions": "Run installation command, configure Claude Desktop, and connect to Minecraft server",
    "category": "API Integration"
  },
  "kagi-search": {
    "name": "Kagi MCP server",
    "githubLink": "https://github.com/apridachin/kagi-search-mcp",
    "package": "kagi-mcp",
    "description": "MCP server for searching web using Kagi API",
    "installCommand": "npx -y @smithery/cli install kagi-mcp --client claude",
    "requiredEnvVars": [
      "KAGI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop by adding server details to claude_desktop_config.json",
    "category": "API Integration"
  },
  "apisix": {
    "name": "APISIX Model Context Protocol (MCP) Server",
    "githubLink": "https://github.com/api7/apisix-mcp",
    "package": "@api7/apisix-mcp",
    "description": "Bridges large language models with APISIX Admin API for natural language-based interaction",
    "installCommand": "npx -y @smithery/cli install @api7/apisix-mcp --client claude",
    "requiredEnvVars": [
      "APISIX_SERVER_HOST",
      "APISIX_SERVER_PORT",
      "APISIX_ADMIN_API_PORT",
      "APISIX_ADMIN_API_PREFIX",
      "APISIX_ADMIN_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure AI client with APISIX MCP server settings using environment variables",
    "category": "API Integration"
  },
  "superset": {
    "name": "Superset MCP Integration",
    "githubLink": "https://github.com/aptro/superset-mcp",
    "package": "@aptro/superset-mcp",
    "description": "MCP server for interacting with Apache Superset, enabling AI agents to connect to and control a Superset instance programmatically.",
    "installCommand": "npx -y @smithery/cli install @aptro/superset-mcp --client claude",
    "requiredEnvVars": [
      "SUPERSET_BASE_URL",
      "SUPERSET_USERNAME",
      "SUPERSET_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "After setup, interact with your Superset instance via Claude using natural language requests.",
    "category": "API Integration"
  },
  "xmind": {
    "name": "MCP XMind Server",
    "githubLink": "https://github.com/apeyroux/mcp-xmind",
    "package": "@41px/mcp-xmind",
    "description": "A Model Context Protocol server for analyzing and querying XMind mind maps, providing search, extraction, and analysis capabilities.",
    "installCommand": "npx -y @smithery/cli install @41px/mcp-xmind --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "allowed-directory",
      "additional-directories"
    ],
    "usageInstructions": "Start the server using 'node dist/index.js <allowed-directory> [additional-directories...]'",
    "category": "Productivity"
  },
  "gibber": {
    "name": "Tiny Cryptography MCP Server",
    "githubLink": "https://github.com/anton10xr/gibber-mcp",
    "package": "sjcl",
    "description": "An MCP server providing cryptographic tools including key pair generation and message encryption/decryption",
    "installCommand": "git clone https://github.com/anton10xr/gibber-mcp && cd gibber-mcp && npm install",
    "requiredEnvVars": [
      "PORT"
    ],
    "optionalParams": [],
    "usageInstructions": "Start the server using 'npm start' after installation and configuration",
    "category": "Security"
  },
  "coinmarket": {
    "name": "Coinmarket MCP Server",
    "githubLink": "https://github.com/anjor/coinmarket-mcp-server",
    "package": "coinmarket-mcp-server",
    "description": "MCP server implementing Coinmarket API endpoints for currency listings and quotes",
    "installCommand": "uv run coinmarket_service",
    "requiredEnvVars": [
      "COINMARKET_API_KEY"
    ],
    "optionalParams": [
      "slug",
      "symbol"
    ],
    "usageInstructions": "Configure COINMARKET_API_KEY environment variable and run using uv or Docker",
    "category": "API Integration"
  },
  "rocq": {
    "name": "MCP-RoCQ Coq Reasoning Server",
    "githubLink": "https://github.com/angrysky56/mcp-rocq",
    "package": "mcp-rocq",
    "description": "MCP server providing advanced logical reasoning through Coq proof assistant integration",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "coq-path",
      "lib-path"
    ],
    "usageInstructions": "Use JSON requests for type checking, inductive type definition, and property proving",
    "category": "Development"
  },
  "obsidian-omnisearch": {
    "name": "MCP Server Obsidian Omnisearch",
    "githubLink": "https://github.com/anpigon/mcp-server-obsidian-omnisearch",
    "package": "@anpigon/mcp-server-obsidian-omnisearch",
    "description": "A FastMCP-based server providing Obsidian vault search functionality through REST API",
    "installCommand": "npx -y @smithery/cli install @anpigon/mcp-server-obsidian-omnisearch --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "/path/to/your/obsidian/vault"
    ],
    "usageInstructions": "Run server with Obsidian vault path: python server.py /path/to/your/obsidian/vault",
    "category": "Productivity"
  },
  "chart": {
    "name": "MCP Server Chart",
    "githubLink": "https://github.com/antvis/mcp-server-chart",
    "package": "@antv/mcp-server-chart",
    "description": "An MCP server for generating various types of charts using AntV.",
    "installCommand": "npm install -g @antv/mcp-server-chart",
    "requiredEnvVars": [
      "VIS_REQUEST_SERVER"
    ],
    "optionalParams": [
      "--transport",
      "--port",
      "--endpoint"
    ],
    "usageInstructions": "Run 'mcp-server-chart' with optional CLI parameters, access at http://localhost:1122/sse or http://localhost:1122/mcp",
    "category": "Media"
  },
  "logic": {
    "name": "MCP-Logic Server",
    "githubLink": "https://github.com/angrysky56/mcp-logic",
    "package": "mcp-logic",
    "description": "An MCP server providing automated reasoning capabilities using Prover9/Mace4 for AI systems.",
    "installCommand": "git clone https://github.com/angrysky56/mcp-logic && cd mcp-logic && ./linux-setup-script.sh",
    "requiredEnvVars": [],
    "optionalParams": [
      "--prover-path"
    ],
    "usageInstructions": "Run using ./run-mcp-logic.sh or run-mcp-logic.bat after setup",
    "category": "AI Integration"
  },
  "selenium": {
    "name": "MCP Selenium Server",
    "githubLink": "https://github.com/angiejones/mcp-selenium",
    "package": "@angiejones/mcp-selenium",
    "description": "An MCP server implementation for Selenium WebDriver, enabling browser automation through standardized MCP clients.",
    "installCommand": "npx -y @angiejones/mcp-selenium",
    "requiredEnvVars": [],
    "optionalParams": [
      "browser",
      "options",
      "url",
      "by",
      "value",
      "timeout",
      "text",
      "key",
      "filePath"
    ],
    "usageInstructions": "Start the server by running: mcp-selenium",
    "category": "Browser Automation"
  },
  "simple-timeserver": {
    "name": "MCP Simple Timeserver",
    "githubLink": "https://github.com/andybrandt/mcp-simple-timeserver",
    "package": "mcp-simple-timeserver",
    "description": "Provides current local time and UTC time to Claude AI through MCP protocol",
    "installCommand": "pip install mcp-simple-timeserver",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure in MCP client (Claude desktop app) after installation",
    "category": "Productivity"
  },
  "simple-pubmed": {
    "name": "MCP Simple PubMed",
    "githubLink": "https://github.com/andybrandt/mcp-simple-pubmed",
    "package": "mcp-simple-pubmed",
    "description": "An MCP server providing access to PubMed articles through the Entrez API.",
    "installCommand": "pip install mcp-simple-pubmed",
    "requiredEnvVars": [
      "PUBMED_EMAIL"
    ],
    "optionalParams": [
      "PUBMED_API_KEY"
    ],
    "usageInstructions": "Add server configuration to claude_desktop_config.json with required environment variables.",
    "category": "API Integration"
  },
  "ts-trello": {
    "name": "Trello MCP Server",
    "githubLink": "https://github.com/andypost/mcp-server-ts-trello",
    "package": "mcp-server-ts-trello",
    "description": "A TypeScript implementation of a Model Context Protocol (MCP) server for Trello integration",
    "installCommand": "make install",
    "requiredEnvVars": [
      "TRELLO_API_KEY",
      "TRELLO_TOKEN"
    ],
    "optionalParams": [
      "board_id",
      "list_id",
      "card_id"
    ],
    "usageInstructions": "Create a .env file with Trello credentials, then run 'make start' to begin the server",
    "category": "API Integration"
  },
  "simple-arxiv": {
    "name": "Simple ArXiv MCP Server",
    "githubLink": "https://github.com/andybrandt/mcp-simple-arxiv",
    "package": "mcp-simple-arxiv",
    "description": "An MCP server providing access to arXiv papers through their API, allowing search and retrieval of paper metadata and abstracts.",
    "installCommand": "pip install mcp-simple-arxiv",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add configuration to claude_desktop_config.json and restart Claude Desktop to enable searching and retrieving arXiv papers.",
    "category": "API Integration"
  },
  "simple-openai-assistant": {
    "name": "MCP Simple OpenAI Assistant",
    "githubLink": "https://github.com/andybrandt/mcp-simple-openai-assistant",
    "package": "mcp-simple-openai-assistant",
    "description": "A simple MCP server for interacting with OpenAI assistants through the Model Context Protocol.",
    "installCommand": "npx -y @smithery/cli install mcp-simple-openai-assistant --client claude",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure the server with your OpenAI API key, then use it to create and interact with OpenAI assistants.",
    "category": "API Integration"
  },
  "installer": {
    "name": "MCP Installer Server",
    "githubLink": "https://github.com/anaisbetts/mcp-installer",
    "package": "@anaisbetts/mcp-installer",
    "description": "A MCP server that installs other MCP servers from npm or PyPi",
    "installCommand": "npx @anaisbetts/mcp-installer",
    "requiredEnvVars": [],
    "optionalParams": [
      "arguments for the MCP server being installed"
    ],
    "usageInstructions": "Ask Claude to install MCP servers by name, package, or local path, and optionally set environment variables",
    "category": "Development"
  },
  "raindrop-io": {
    "name": "Raindrop.io MCP Server",
    "githubLink": "https://github.com/anarcher/raindrop-io-mcp-server",
    "package": "raindrop-io-mcp-server",
    "description": "An MCP server for interacting with Raindrop.io bookmarks",
    "installCommand": "git clone https://github.com/anarcher/raindrop-io-mcp-server && cd raindrop-io-mcp-server && go mod tidy && go build -o raindrop-mcp-server",
    "requiredEnvVars": [
      "RAINDROP_TOKEN"
    ],
    "optionalParams": [
      "title",
      "tags",
      "collection",
      "query"
    ],
    "usageInstructions": "Build the server using 'go build -o raindrop-mcp-server', then run './raindrop-mcp-server'. Configure Claude for Desktop to use this server",
    "category": "Productivity"
  },
  "cloudflare-browser-rendering": {
    "name": "Cloudflare Browser Rendering MCP Server",
    "githubLink": "https://github.com/amotivv/cloudflare-browser-rendering",
    "package": "@cloudflare/puppeteer",
    "description": "MCP server providing web content extraction using Cloudflare Browser Rendering for LLM context",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "BROWSER_RENDERING_API"
    ],
    "optionalParams": [],
    "usageInstructions": "npm start or npm run dev for development",
    "category": "Web Scraping"
  },
  "nps": {
    "name": "National Park Services MCP Server",
    "githubLink": "https://github.com/amysatterlee/nps",
    "package": "nps-mcp-server",
    "description": "MCP Server providing access to National Park Services data through NPS API",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "stateCode",
      "parkCode",
      "park"
    ],
    "usageInstructions": "Start server using 'npm run build && node ./build/server.js', then use Claude's interface to query NPS data",
    "category": "API Integration"
  },
  "unichat": {
    "name": "Unichat MCP Server",
    "githubLink": "https://github.com/amidabuddha/unichat-mcp-server",
    "package": "unichat-mcp-server",
    "description": "MCP server for sending requests to various AI models via tool or predefined prompts",
    "installCommand": "npx -y @smithery/cli install unichat-mcp-server --client claude",
    "requiredEnvVars": [
      "UNICHAT_MODEL",
      "UNICHAT_API_KEY"
    ],
    "optionalParams": [
      "changes"
    ],
    "usageInstructions": "Configure env variables UNICHAT_MODEL and UNICHAT_API_KEY, then install via Smithery or run using uv",
    "category": "API Integration"
  },
  "adspirer": {
    "name": "Adspirer MCP Server for Claude",
    "githubLink": "https://github.com/amekala/adspirer-mcp-server",
    "package": "adspirer-mcp-server",
    "description": "AI-powered advertising campaign management through Claude",
    "installCommand": "npm install -g adspirer-mcp-server",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'adspirer-mcp config' to configure, then use in Claude to manage ad campaigns",
    "category": "Productivity"
  },
  "name-origin": {
    "name": "Name Origin Predictor",
    "githubLink": "https://github.com/allglenn/mcp-name-origin-server",
    "package": "mcp-name-origin-server",
    "description": "An MCP server that predicts name origins using Nationalize.io API",
    "installCommand": "pip install httpx mcp-server",
    "requiredEnvVars": [
      "PYTHONPATH",
      "PYTHONUNBUFFERED"
    ],
    "optionalParams": [],
    "usageInstructions": "python mcp-server.py",
    "category": "API Integration"
  },
  "dbx": {
    "name": "Dropbox MCP Server",
    "githubLink": "https://github.com/amgadabdelhafez/dbx-mcp-server",
    "package": "dbx-mcp-server",
    "description": "MCP server providing Dropbox integration with file operations, metadata, and account management",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "DROPBOX_APP_KEY",
      "DROPBOX_APP_SECRET",
      "DROPBOX_REDIRECT_URI",
      "TOKEN_ENCRYPTION_KEY"
    ],
    "optionalParams": [
      "TOKEN_REFRESH_THRESHOLD_MINUTES",
      "MAX_TOKEN_REFRESH_RETRIES",
      "TOKEN_REFRESH_RETRY_DELAY_MS"
    ],
    "usageInstructions": "Configure environment variables, run 'npm run setup', then use with MCP client",
    "category": "File Management"
  },
  "ftp": {
    "name": "MCP Server for FTP Access",
    "githubLink": "https://github.com/alxspiker/mcp-server-ftp",
    "package": "@alxspiker/mcp-server-ftp",
    "description": "An MCP server for interacting with FTP servers, allowing directory listing, file upload/download, and directory management.",
    "installCommand": "npx -y @smithery/cli install @alxspiker/mcp-server-ftp --client claude",
    "requiredEnvVars": [
      "FTP_HOST",
      "FTP_PORT",
      "FTP_USER",
      "FTP_PASSWORD"
    ],
    "optionalParams": [
      "FTP_SECURE"
    ],
    "usageInstructions": "Configure FTP credentials in Claude's configuration file, then use natural language commands to perform FTP operations.",
    "category": "File Management"
  },
  "unlock-pdf": {
    "name": "MCP PDF Unlock Server",
    "githubLink": "https://github.com/algonacci/mcp-unlock-pdf",
    "package": "mcp-unlock-pdf",
    "description": "MCP server to enable clients to read protected or unprotected PDF files",
    "installCommand": "npx -y mcp-unlock-pdf",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add configuration to MCP config file specifying command and args to run the server",
    "category": "File Management"
  },
  "tavily-extract": {
    "name": "Tavily Extract MCP Server",
    "githubLink": "https://github.com/algonacci/mcp-tavily-extract",
    "package": "mcp-tavily-extract",
    "description": "MCP server for extracting web page content using Tavily API",
    "installCommand": "uv run python main.py",
    "requiredEnvVars": [
      "TAVILY_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Add tavily_extract configuration to MCP config file and provide TAVILY_API_KEY in .env",
    "category": "Web Scraping"
  },
  "hh-jira": {
    "name": "hh-jira-mcp-server",
    "githubLink": "https://github.com/alexeydubinin/hh-jira-mcp-server",
    "package": "hh-jira-mcp-server",
    "description": "MCP server for Jira integration",
    "installCommand": "uvx hh-jira-mcp-server",
    "requiredEnvVars": [
      "HH_JIRA_MCP_USER",
      "HH_JIRA_MCP_TEAM",
      "HH_JIRA_MCP_SEARCH_FILTER"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop with the mcpServers configuration and run the server",
    "category": "API Integration"
  },
  "agenda": {
    "name": "Agenda MCP Server",
    "githubLink": "https://github.com/alexgoller/mcp-server-agenda",
    "package": "mcp-server-agenda",
    "description": "A server implementation for interacting with Agenda app on macOS through Claude AI",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "title",
      "text",
      "dates",
      "templates"
    ],
    "usageInstructions": "Configure Claude desktop config file and run the server using 'uv run mcp-server-agenda'",
    "category": "Productivity"
  },
  "chess": {
    "name": "MCP Chess Server",
    "githubLink": "https://github.com/alexandreroman/mcp-chess",
    "package": "mcp-chess",
    "description": "An MCP server providing chess functionality for Claude AI Assistant",
    "installCommand": "Download the latest binary from https://github.com/alexandreroman/mcp-chess/releases",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure Claude Desktop to use the MCP server by adding its path in the Developer settings",
    "category": "Other"
  },
  "ipfs": {
    "name": "MCP IPFS Server",
    "githubLink": "https://github.com/alexbakers/mcp-ipfs",
    "package": "mcp-ipfs",
    "description": "A Node.js server implementing the Model Context Protocol for interacting with storacha.network via the w3 CLI",
    "installCommand": "npx -y mcp-ipfs",
    "requiredEnvVars": [
      "W3_LOGIN_EMAIL"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure your MCP client to connect to this server, ensuring W3_LOGIN_EMAIL is set",
    "category": "API Integration"
  },
  "archai-static-analyzer": {
    "name": "Archai Static Analyzer MCP Server",
    "githubLink": "https://github.com/alefcastelo/archai-static-analyzer-mcp",
    "package": "archai",
    "description": "A static analyzer server using the Model Context Protocol",
    "installCommand": "bun install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run using 'bun run index.ts'",
    "category": "Development"
  },
  "metaplex": {
    "name": "Metaplex MCP Server",
    "githubLink": "https://github.com/aldrin-labs/metaplex-mcp-server",
    "package": "metaplex-mcp-server",
    "description": "An MCP server for accessing Metaplex documentation and repository information.",
    "installCommand": "npx metaplex-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run the server using 'node build/index.js' after installation and building.",
    "category": "API Integration"
  },
  "solana-docs": {
    "name": "Solana Docs MCP Server",
    "githubLink": "https://github.com/aldrin-labs/solana-docs-mcp-server",
    "package": "@aldrin-labs/solana-docs-mcp-server",
    "description": "An MCP server implementing a simple notes system with resources, tools, and prompts.",
    "installCommand": "npx -y @smithery/cli install @aldrin-labs/solana-docs-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "title",
      "content"
    ],
    "usageInstructions": "Install via Smithery CLI, configure Claude Desktop, and run using the command specified in claude_desktop_config.json",
    "category": "Productivity"
  },
  "metal": {
    "name": "Metal MCP Server",
    "githubLink": "https://github.com/aldrin-labs/metal-mcp-server",
    "package": "@modelcontextprotocol/create-server",
    "description": "MCP server for Metal Framework documentation search and code generation",
    "installCommand": "npx @modelcontextprotocol/create-server metal-mcp && cd metal-mcp && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "query",
      "limit",
      "task",
      "language"
    ],
    "usageInstructions": "Add server to MCP configuration with command: node /path/to/metal-mcp/build/index.js",
    "category": "Development"
  },
  "supernotes-to-obsidian": {
    "name": "Supernotes to Obsidian",
    "githubLink": "https://github.com/al-how/supernotes-to-obsidian",
    "package": "mcp",
    "description": "Imports Supernotes exports into Obsidian daily notes using MCP",
    "installCommand": "uv add mcp",
    "requiredEnvVars": [
      "TEMPLATE_PATH",
      "EXPORT_FOLDER",
      "DAILY_NOTES_FOLDER"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure settings in config.py and run python src/main.py",
    "category": "Productivity"
  },
  "google-sheets": {
    "name": "Google Sheets MCP",
    "githubLink": "https://github.com/akchro/google-sheets-mcp",
    "package": "google-sheets-mcp",
    "description": "MCP integration with Google Sheets for spreadsheet operations",
    "installCommand": "npx google-sheets-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure OAuth credentials and run the server",
    "category": "Productivity"
  },
  "neurolora": {
    "name": "MCP Neurolora",
    "githubLink": "https://github.com/aindreyway/mcp-neurolora",
    "package": "@aindreyway/mcp-neurolora",
    "description": "An intelligent MCP server providing code analysis, collection, and documentation generation using OpenAI API.",
    "installCommand": "npx -y @aindreyway/mcp-neurolora@latest",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "codePath",
      "directory",
      "outputPath",
      "ignorePatterns",
      "configPath"
    ],
    "usageInstructions": "Configure OPENAI_API_KEY in environment variables, then use tools like analyze_code, collect_code, or install_base_servers through your assistant.",
    "category": "Development"
  },
  "codex-keeper": {
    "name": "Aindreyway MCP Codex Keeper",
    "githubLink": "https://github.com/aindreyway/mcp-codex-keeper",
    "package": "@aindreyway/mcp-codex-keeper",
    "description": "An intelligent MCP server providing AI assistants with curated access to latest documentation and best practices.",
    "installCommand": "npx -y @aindreyway/mcp-codex-keeper@latest",
    "requiredEnvVars": [
      "npm_config_cache_max",
      "NODE_OPTIONS"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure in Cline/Sonnet config, then ask assistant to show documentation or search for development information",
    "category": "Development"
  },
  "argocd": {
    "name": "Argo CD MCP Server",
    "githubLink": "https://github.com/akuity/argocd-mcp",
    "package": "argocd-mcp",
    "description": "An MCP server implementation for Argo CD, enabling AI assistants to interact with Argo CD applications through natural language.",
    "installCommand": "npx argocd-mcp@latest stdio",
    "requiredEnvVars": [
      "ARGOCD_BASE_URL",
      "ARGOCD_API_TOKEN"
    ],
    "optionalParams": [
      "NODE_TLS_REJECT_UNAUTHORIZED"
    ],
    "usageInstructions": "Create a configuration file (e.g., .vscode/mcp.json) with the server details and start a conversation with an AI assistant in VS Code or other MCP clients.",
    "category": "API Integration"
  },
  "configurable-puppeteer": {
    "name": "Configurable Puppeteer MCP Server",
    "githubLink": "https://github.com/afshawnlotfi/mcp-configurable-puppeteer",
    "package": "github:afshawnlotfi/mcp-configurable-puppeteer",
    "description": "Browser automation server using Puppeteer with configurable options for LLMs to interact with web pages",
    "installCommand": "npx -y github:afshawnlotfi/mcp-configurable-puppeteer",
    "requiredEnvVars": [
      "PUPPETEER_ARGS"
    ],
    "optionalParams": [
      "url",
      "name",
      "selector",
      "width",
      "height",
      "value",
      "script"
    ],
    "usageInstructions": "Configure Puppeteer options using PUPPETEER_ARGS environment variable with JSON string",
    "category": "Browser Automation"
  },
  "harvest": {
    "name": "Harvest Natural Language Time Entry MCP Server",
    "githubLink": "https://github.com/adrian-dotco/harvest-mcp-server",
    "package": "harvest-mcp-server",
    "description": "An MCP server for logging Harvest time entries using natural language with special handling for leave requests.",
    "installCommand": "npx -y harvest-mcp-server",
    "requiredEnvVars": [
      "HARVEST_ACCESS_TOKEN",
      "HARVEST_ACCOUNT_ID"
    ],
    "optionalParams": [
      "STANDARD_WORK_DAY_HOURS",
      "TIMEZONE"
    ],
    "usageInstructions": "Use natural language to log time entries, get time reports, list projects, list tasks, and view recent time entries.",
    "category": "Productivity"
  },
  "lance": {
    "name": "LanceDB MCP Server for LLMS",
    "githubLink": "https://github.com/adiom-data/lance-mcp",
    "package": "lance-mcp",
    "description": "An MCP server enabling LLMs to interact with documents on-disk through RAG and hybrid search in LanceDB",
    "installCommand": "npx lance-mcp PATH_TO_LOCAL_INDEX_DIR",
    "requiredEnvVars": [],
    "optionalParams": [
      "PATH_TO_LOCAL_INDEX_DIR"
    ],
    "usageInstructions": "Create a local directory for the index, configure Claude Desktop config file with the server details, and run using 'npx lance-mcp PATH_TO_LOCAL_INDEX_DIR'",
    "category": "Data Storage"
  },
  "git-ingest": {
    "name": "MCP Git Ingest",
    "githubLink": "https://github.com/adhikasp/mcp-git-ingest",
    "package": "mcp-git-ingest",
    "description": "An MCP server that reads GitHub repository structure and important files.",
    "installCommand": "uvx --from git+https://github.com/adhikasp/mcp-git-ingest mcp-git-ingest",
    "requiredEnvVars": [],
    "optionalParams": [
      "repo_url",
      "file_paths"
    ],
    "usageInstructions": "Use with mcp-client-cli to read GitHub repository structure and files.",
    "category": "Version Control"
  },
  "email": {
    "name": "MCP Email Server",
    "githubLink": "https://github.com/ai-zerolab/mcp-email-server",
    "package": "mcp-email-server",
    "description": "IMAP and SMTP server via MCP protocol",
    "installCommand": "pip install mcp-email-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure email server using 'mcp-email-server ui' and integrate with MCP clients",
    "category": "Communication"
  },
  "gsc": {
    "name": "Google Search Console MCP Server",
    "githubLink": "https://github.com/ahonn/mcp-server-gsc",
    "package": "mcp-server-gsc",
    "description": "MCP server providing access to Google Search Console data with search analytics retrieval and customizable reporting",
    "installCommand": "npx -y @smithery/cli install mcp-server-gsc --client claude",
    "requiredEnvVars": [
      "GOOGLE_APPLICATION_CREDENTIALS"
    ],
    "optionalParams": [
      "dimensions",
      "type",
      "aggregationType",
      "rowLimit"
    ],
    "usageInstructions": "Configure Claude Desktop with GSC credentials and use search_analytics tool with required siteUrl, startDate, and endDate parameters",
    "category": "API Integration"
  },
  "agentrpc": {
    "name": "AgentRPC MCP Server",
    "githubLink": "https://github.com/agentrpc/agentrpc",
    "package": "agentrpc",
    "description": "Universal RPC layer for AI agents across network boundaries and languages",
    "installCommand": "npx -y agentrpc mcp",
    "requiredEnvVars": [
      "AGENTRPC_API_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'ANGENTRPC_API_SECRET=YOUR_API_SECRET npx agentrpc mcp' to launch MCP server",
    "category": "API Integration"
  },
  "mac-shell": {
    "name": "Mac Shell MCP Server",
    "githubLink": "https://github.com/cfdude/mac-shell-mcp",
    "package": "mac-shell-mcp",
    "description": "An MCP server for executing macOS terminal commands with ZSH shell and built-in whitelisting",
    "installCommand": "npx -y mac-shell-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "alwaysAllow"
    ],
    "usageInstructions": "Configure in Roo Code or Claude Desktop using npx or local installation",
    "category": "Development"
  },
  "astra-db": {
    "name": "Astra DB MCP Server",
    "githubLink": "https://github.com/datastax/astra-db-mcp",
    "package": "@datastax/astra-db-mcp",
    "description": "An MCP server for interacting with Astra DB, allowing LLMs to interact with external databases",
    "installCommand": "npx -y @datastax/astra-db-mcp",
    "requiredEnvVars": [
      "ASTRA_DB_APPLICATION_TOKEN",
      "ASTRA_DB_API_ENDPOINT"
    ],
    "optionalParams": [
      "ASTRA_DB_KEYSPACE"
    ],
    "usageInstructions": "Add the server to Claude Desktop or Cursor by configuring the mcp.json file with the required environment variables",
    "category": "Database"
  },
  "coingecko-typescript": {
    "name": "Coingecko TypeScript API Library",
    "githubLink": "https://github.com/coingecko/coingecko-typescript",
    "package": "@coingecko/coingecko-typescript",
    "description": "TypeScript library providing convenient access to the Coingecko REST API",
    "installCommand": "npm install @coingecko/coingecko-typescript",
    "requiredEnvVars": [
      "COINGECKO_PRO_API_KEY"
    ],
    "optionalParams": [
      "demoAPIKey",
      "environment",
      "maxRetries",
      "timeout",
      "logLevel",
      "logger"
    ],
    "usageInstructions": "Import Coingecko and create a client instance with your API key, then use the client to make API requests",
    "category": "API Integration"
  },
  "debugg-ai": {
    "name": "Debugg AI MCP Server",
    "githubLink": "https://github.com/debugg-ai/debugg-ai-mcp",
    "package": "@debugg-ai/debugg-ai-mcp",
    "description": "AI-driven browser automation and E2E test server implementing the Model Context Protocol",
    "installCommand": "npx -y @debugg-ai/debugg-ai-mcp",
    "requiredEnvVars": [
      "DEBUGGAI_API_KEY",
      "DEBUGGAI_LOCAL_PORT"
    ],
    "optionalParams": [
      "localPort",
      "repoName",
      "branchName",
      "repoPath",
      "filePath"
    ],
    "usageInstructions": "Run 'npx -y @debugg-ai/debugg-ai-mcp' for local development or use Docker with required environment variables",
    "category": "Browser Automation"
  },
  "postgres": {
    "name": "Postgres MCP Pro",
    "githubLink": "https://github.com/crystaldba/postgres-mcp",
    "package": "postgres-mcp",
    "description": "An MCP server providing database health analysis, index tuning, query plans, schema intelligence, and safe SQL execution for Postgres databases.",
    "installCommand": "pipx install postgres-mcp",
    "requiredEnvVars": [
      "DATABASE_URI"
    ],
    "optionalParams": [
      "--access-mode=unrestricted",
      "--access-mode=restricted"
    ],
    "usageInstructions": "Configure the MCP server in your AI assistant's configuration file, specifying the command, arguments, and environment variables as per the installation method (Docker, pipx, or uv).",
    "category": "Database"
  },
  "twitter": {
    "name": "X (Twitter) MCP Server",
    "githubLink": "https://github.com/crazyrabbitLTC/mcp-twitter-server",
    "package": "mcp-twitter-server",
    "description": "A comprehensive Model Context Protocol server for X (Twitter) API integration with workflow automation and enhanced research capabilities",
    "installCommand": "git clone https://github.com/crazyrabbitLTC/mcp-twitter-server.git && cd twitter-server && npm install",
    "requiredEnvVars": [
      "X_API_KEY",
      "X_API_SECRET",
      "X_ACCESS_TOKEN",
      "X_ACCESS_TOKEN_SECRET"
    ],
    "optionalParams": [
      "SOCIALDATA_API_KEY",
      "SOCIALDATA_BASE_URL"
    ],
    "usageInstructions": "1. Clone repository and install dependencies. 2. Configure environment variables. 3. Build and run the server. 4. Test with JSON-RPC calls",
    "category": "API Integration"
  },
  "intlayer": {
    "name": "Intlayer",
    "githubLink": "https://github.com/aymericzip/intlayer",
    "package": "intlayer",
    "description": "A modern internationalization (i18n) solution for various frameworks including Next.js, React, and Express.",
    "installCommand": "npm install intlayer",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Integrate Intlayer into your project by following the framework-specific guides available in the documentation.",
    "category": "Development"
  },
  "memory-box": {
    "name": "Memory Box MCP Server",
    "githubLink": "https://github.com/amotivv/memory-box-mcp",
    "package": "@amotivv/memory-box-mcp",
    "description": "MCP server for Memory Box, providing semantic memory storage and retrieval",
    "installCommand": "npx -y @smithery/cli install @amotivv/memory-box-mcp --client claude",
    "requiredEnvVars": [
      "MEMORY_BOX_API_URL",
      "MEMORY_BOX_TOKEN"
    ],
    "optionalParams": [
      "DEFAULT_BUCKET"
    ],
    "usageInstructions": "Use tools like save_memory, search_memories, get_all_memories in Cline",
    "category": "Data Storage"
  },
  "cf-kaizen": {
    "name": "cf-kaizen MCP Server",
    "githubLink": "https://github.com/cf-toolsuite/cf-kaizen",
    "package": "cf-kaizen",
    "description": "A Spring Boot project providing natural language interface for Cloud Foundry foundations using Spring AI",
    "installCommand": "git clone https://github.com/cf-toolsuite/cf-kaizen && cd cf-kaizen && mvn clean install",
    "requiredEnvVars": [
      "CF_APP_DOMAIN",
      "CF_BUTLER_API_ENDPOINT"
    ],
    "optionalParams": [
      "MCP_CLIENT_NAME"
    ],
    "usageInstructions": "Start Butler and Hoover servers using 'mvn spring-boot:run' with appropriate profiles, then access frontends at http://localhost:8081 and http://localhost:8083",
    "category": "Development"
  },
  "docs-service": {
    "name": "MCP Documentation Service",
    "githubLink": "https://github.com/alekspetrov/mcp-docs-service",
    "package": "mcp-docs-service",
    "description": "An MCP implementation for documentation management, providing tools for reading, writing, and managing markdown documentation.",
    "installCommand": "npm install -g mcp-docs-service",
    "requiredEnvVars": [],
    "optionalParams": [
      "/path/to/docs"
    ],
    "usageInstructions": "Run 'npx mcp-docs-service /path/to/docs' to start the service. Configure Claude Desktop or Cursor to use the service.",
    "category": "Documentation"
  },
  "illumio": {
    "name": "Illumio MCP Server",
    "githubLink": "https://github.com/alexgoller/illumio-mcp-server",
    "package": "illumio-mcp",
    "description": "An MCP server providing programmatic access to Illumio PCE for workload management and traffic analysis",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "PCE_HOST",
      "PCE_PORT",
      "PCE_ORG_ID",
      "API_KEY",
      "API_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "Run using 'uv' command, configure environment variables in claude_desktop_config.json",
    "category": "Security"
  },
  "toolbox": {
    "name": "MCP Toolbox",
    "githubLink": "https://github.com/ai-zerolab/mcp-toolbox",
    "package": "mcp-toolbox",
    "description": "A comprehensive toolkit for enhancing LLM capabilities through the Model Context Protocol (MCP)",
    "installCommand": "uvx \"mcp-toolbox[all]@latest\" stdio",
    "requiredEnvVars": [
      "FIGMA_API_KEY",
      "TAVILY_API_KEY",
      "DUCKDUCKGO_API_KEY",
      "BFL_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Use 'uvx \"mcp-toolbox[all]@latest\" stdio' to run the MCP server",
    "category": "API Integration"
  },
  "solr": {
    "name": "Solr MCP",
    "githubLink": "https://github.com/allenday/solr-mcp",
    "package": "solr-mcp",
    "description": "A Python package for accessing Apache Solr indexes via Model Context Protocol, enabling AI assistants to perform hybrid search queries.",
    "installCommand": "pip install solr-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Clone the repository, start SolrCloud with Docker, install dependencies, process and index sample documents, then run the MCP server using 'poetry run python -m solr_mcp.server'",
    "category": "Database"
  },
  "resource-hub": {
    "name": "Resource Hub Server",
    "githubLink": "https://github.com/adamwattis/resource-hub-server",
    "package": "@adamwattis/resource-hub-server",
    "description": "An MCP server connecting to Resource Hub for centralized configuration and management",
    "installCommand": "npx @adamwattis/resource-hub-server",
    "requiredEnvVars": [
      "RESOURCE_HUB_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Run with npx using RESOURCE_HUB_TOKEN=your_token npx @adamwattis/resource-hub-server",
    "category": "Productivity"
  },
  "datahub": {
    "name": "DataHub MCP Server",
    "githubLink": "https://github.com/acryldata/mcp-server-datahub",
    "package": "mcp-server-datahub",
    "description": "A Model Context Protocol server implementation for DataHub, enabling metadata management and lineage tracking",
    "installCommand": "npm install mcp-server-datahub",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "See instructions in the DataHub MCP server docs: https://docs.datahub.com/docs/features/feature-guides/mcp",
    "category": "Data Storage"
  },
  "servers-kagi": {
    "name": "Kagi MCP Server",
    "githubLink": "https://github.com/ac3xx/mcp-servers-kagi",
    "package": "kagi-server",
    "description": "MCP server integrating Kagi Search API for web searches and other operations",
    "installCommand": "npx @smithery/cli install kagi-server --client claude",
    "requiredEnvVars": [
      "KAGI_API_KEY"
    ],
    "optionalParams": [
      "limit"
    ],
    "usageInstructions": "Run the server and connect it to Claude Desktop. Use Claude to perform web searches by asking questions or requesting information on specific topics.",
    "category": "API Integration"
  },
  "kusto": {
    "name": "Kusto MCP Server",
    "githubLink": "https://github.com/ZZZHDW/mcp-server-kusto",
    "package": "mcp-server-kusto",
    "description": "MCP server providing access to Azure Data Explorer clusters",
    "installCommand": "npx -y mcp-server-kusto",
    "requiredEnvVars": [
      "ADX_CLUSTER_URL"
    ],
    "optionalParams": [
      "authority_id",
      "client_id",
      "client_secret"
    ],
    "usageInstructions": "Configure claude_desktop_config.json with server details and run using 'uv' command",
    "category": "Database"
  },
  "alfresco-poc": {
    "name": "Alfresco MCP Proof of Concept",
    "githubLink": "https://github.com/aborroy/alfresco-mcp-poc",
    "package": "@modelcontextprotocol/alfresco-mcp-server",
    "description": "An MCP server integrating Alfresco with AI capabilities",
    "installCommand": "npm install @modelcontextprotocol/alfresco-mcp-server",
    "requiredEnvVars": [
      "DOCKER_HOST",
      "JAVA_HOME"
    ],
    "optionalParams": [
      "alfresco_url",
      "ollama_server_url"
    ],
    "usageInstructions": "Run Alfresco Docker Compose, then start the MCP client and server",
    "category": "API Integration"
  },
  "scrapbox": {
    "name": "Scrapbox MCP Server",
    "githubLink": "https://github.com/YuheiNakasaka/scrapbox-mcp",
    "package": "scrapbox-mcp",
    "description": "An MCP server implementing a simple notes system with resources, tools, and prompts.",
    "installCommand": "npm install scrapbox-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "title",
      "content"
    ],
    "usageInstructions": "Configure in Claude Desktop settings by adding server config to claude_desktop_config.json",
    "category": "Productivity"
  },
  "arithmetic": {
    "name": "Arithmetic MCP Server",
    "githubLink": "https://github.com/YuheiNakasaka/arithmetic-mcp-server",
    "package": "arithmetic-mcp-server",
    "description": "MCP server providing basic arithmetic operations like addition, subtraction, multiplication, and division",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use prompts like 'add 5 and 3' or 'divide 20 by 4' in Cline to perform arithmetic operations",
    "category": "Productivity"
  },
  "apptio-target-process": {
    "name": "Targetprocess MCP Server",
    "githubLink": "https://github.com/aaronsb/apptio-target-process-mcp",
    "package": "https://github.com/aaronsb/apptio-target-process-mcp.git",
    "description": "Enables AI assistants to interact with Targetprocess data through intelligent semantic operations and workflow-aware tools",
    "installCommand": "npx -y https://github.com/aaronsb/apptio-target-process-mcp.git",
    "requiredEnvVars": [
      "TP_DOMAIN",
      "TP_USERNAME",
      "TP_PASSWORD"
    ],
    "optionalParams": [
      "TP_USER_ROLE",
      "TP_USER_ID",
      "TP_USER_EMAIL",
      "MCP_STRICT_MODE"
    ],
    "usageInstructions": "Run with 'npx -y https://github.com/aaronsb/apptio-target-process-mcp.git' and required environment variables",
    "category": "API Integration"
  },
  "metasearch": {
    "name": "Metasearch MCP Server",
    "githubLink": "https://github.com/YeonwooSung/metasearch-mcp",
    "package": "tavily-search",
    "description": "MCP server for metasearch using Tavily API",
    "installCommand": "git clone https://github.com/YeonwooSung/metasearch-mcp.git && cd metasearch-mcp && docker compose up -d",
    "requiredEnvVars": [
      "TAVILY_API_KEY",
      "PYTHONIOENCODING"
    ],
    "optionalParams": [
      "search_depth"
    ],
    "usageInstructions": "Ask 'Please search for something' in Claude Desktop or use the client.py script",
    "category": "Web Scraping"
  },
  "memory-manager": {
    "name": "Memory MCP Manager",
    "githubLink": "https://github.com/YUZongmin/memory-mcp-manager",
    "package": "memory-mcp-manager",
    "description": "A tool to manage and switch between different memory paths for Claude clients using the mcp-knowledge-graph server",
    "installCommand": "git clone https://github.com/YUZongmin/memory-mcp-manager.git && cd memory-mcp-manager && chmod +x memory.sh",
    "requiredEnvVars": [],
    "optionalParams": [
      "name",
      "config_path",
      "path"
    ],
    "usageInstructions": "Run ./memory.sh init, then add clients and memory paths using ./memory.sh add-client and ./memory.sh add",
    "category": "Development"
  },
  "literature-memory-fastmcp": {
    "name": "Literature Memory Server",
    "githubLink": "https://github.com/YUZongmin/literature-memory-server-fastmcp-mcp",
    "package": "source-manager-server.py",
    "description": "A flexible system for managing various types of sources and integrating them with knowledge graphs.",
    "installCommand": "fastmcp install source-manager-server.py --name \"Source Manager\" -e SQLITE_DB_PATH=/path/to/sources.db",
    "requiredEnvVars": [
      "SQLITE_DB_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Create a SQLite database using the provided schema, then install and run the server with the database path configured.",
    "category": "Data Storage"
  },
  "twikit": {
    "name": "MCP-Twikit Twitter Server",
    "githubLink": "https://github.com/adhikasp/mcp-twikit",
    "package": "mcp-twikit",
    "description": "An MCP server for interacting with Twitter, enabling Twitter searches and timeline retrieval",
    "installCommand": "npx -y @smithery/cli install mcp-twikit --client claude",
    "requiredEnvVars": [
      "TWITTER_USERNAME",
      "TWITTER_EMAIL",
      "TWITTER_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Use mcp-client-cli to interact with the Twitter server, e.g., search tweets or retrieve timeline",
    "category": "API Integration"
  },
  "weatherxm-pro": {
    "name": "WeatherXM PRO MCP Server",
    "githubLink": "https://github.com/WeatherXM/weatherxm-pro-mcp",
    "package": "weatherxm-pro-mcp",
    "description": "MCP server exposing WeatherXM PRO APIs for weather station data and forecasts",
    "installCommand": "npx -y weatherxm-pro-mcp",
    "requiredEnvVars": [
      "WEATHERXMPRO_API_KEY"
    ],
    "optionalParams": [
      "PORT"
    ],
    "usageInstructions": "Configure MCP client with server details and API key, then use to query weather data",
    "category": "API Integration"
  },
  "opendal": {
    "name": "Apache OpenDAL MCP Server",
    "githubLink": "https://github.com/Xuanwo/mcp-server-opendal",
    "package": "mcp-server-opendal",
    "description": "MCP server providing access to various storage services via Apache OpenDAL",
    "installCommand": "pip install mcp-server-opendal",
    "requiredEnvVars": [
      "OPENDAL_*_TYPE",
      "OPENDAL_*_BUCKET",
      "OPENDAL_*_ACCESS_KEY_ID",
      "OPENDAL_*_SECRET_ACCESS_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure storage services using environment variables, then use with Claude Desktop by adding to claude_desktop_config.json",
    "category": "File Management"
  },
  "api-tester": {
    "name": "API Tester MCP Server",
    "githubLink": "https://github.com/Vikrant-Khedkar/api-tester-mcp",
    "package": "mcp[cli]",
    "description": "An MCP server for testing APIs, including OpenAI's GPT models and DALL-E image generation.",
    "installCommand": "pip install \"mcp[cli]\" httpx python-dotenv",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server using 'python main.py' and connect it to Claude for Desktop.",
    "category": "API Integration"
  },
  "dbmcp": {
    "name": "DBMCP (Database MCP Server)",
    "githubLink": "https://github.com/Verssae/dbmcp",
    "package": "dbmcp",
    "description": "MCP server for executing database queries through SSE",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "MSSQL_HOST",
      "MSSQL_USER",
      "MSSQL_PASSWORD",
      "MSSQL_PORT"
    ],
    "optionalParams": [],
    "usageInstructions": "Add dbmcp configuration to MCP client with url http://localhost:8080/sse",
    "category": "Database"
  },
  "memgpt": {
    "name": "MemGPT MCP Server",
    "githubLink": "https://github.com/Vic563/Memgpt-MCP-Server",
    "package": "memgpt-mcp-server",
    "description": "An MCP server implementing a memory system for LLMs with multiple provider support",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "OPENROUTER_API_KEY"
    ],
    "optionalParams": [
      "limit"
    ],
    "usageInstructions": "Configure server in claude_desktop_config.json with command and env variables, then run with node",
    "category": "API Integration"
  },
  "google-ads-js": {
    "name": "Google Ads MCP (Node.js)",
    "githubLink": "https://github.com/TrueClicks/google-ads-mcp-js",
    "package": "@trueclicks/google-ads-mcp-js",
    "description": "Unofficial Google Ads MCP integration enabling AI access to Google Ads account data",
    "installCommand": "npx -y @trueclicks/google-ads-mcp-js",
    "requiredEnvVars": [
      "GPT_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude AI using claude_desktop_config.json with the npx command and your GPT token",
    "category": "API Integration"
  },
  "verodat": {
    "name": "Verodat MCP Server",
    "githubLink": "https://github.com/Verodat/verodat-mcp-server",
    "package": "@Verodat/verodat-mcp-server",
    "description": "MCP server implementation for Verodat, enabling AI integration with data management capabilities",
    "installCommand": "npx -y @smithery/cli install @Verodat/verodat-mcp-server --client claude",
    "requiredEnvVars": [
      "VERODAT_AI_API_KEY"
    ],
    "optionalParams": [
      "VERODAT_API_BASE_URL"
    ],
    "usageInstructions": "Configure Claude Desktop with the server path and API key, then use available MCP commands like get-accounts, get-datasets, execute-ai-query",
    "category": "API Integration"
  },
  "uns": {
    "name": "Unstructured API MCP Server",
    "githubLink": "https://github.com/Unstructured-IO/UNS-MCP",
    "package": "uns-mcp",
    "description": "An MCP server implementation for interacting with the Unstructured API, providing tools to list sources and workflows.",
    "installCommand": "npx -y uns-mcp",
    "requiredEnvVars": [
      "ANTHROPIC_API_KEY",
      "AWS_KEY",
      "AWS_SECRET",
      "WEAVIATE_CLOUD_API_KEY",
      "ASTRA_DB_APPLICATION_TOKEN",
      "ASTRA_DB_API_ENDPOINT",
      "AZURE_CONNECTION_STRING"
    ],
    "optionalParams": [
      "AZURE_ACCOUNT_NAME",
      "AZURE_ACCOUNT_KEY",
      "AZURE_SAS_TOKEN",
      "FIRECRAWL_API_KEY"
    ],
    "usageInstructions": "Define required credentials in .env file and use available tools to interact with Unstructured API",
    "category": "API Integration"
  },
  "twitch": {
    "name": "Twitch MCP Server",
    "githubLink": "https://github.com/TomCools/twitch-mcp",
    "package": "be.tomcools:twitch-mcp",
    "description": "MCP server for integrating Twitch chat functionality",
    "installCommand": "mvn install",
    "requiredEnvVars": [
      "twitch.channel",
      "twitch.auth"
    ],
    "optionalParams": [],
    "usageInstructions": "Run with MCP Inspector or Claude Desktop after building locally",
    "category": "Communication"
  },
  "triplewhale": {
    "name": "Triplewhale MCP Server",
    "githubLink": "https://github.com/Triple-Whale/mcp-server-triplewhale",
    "package": "@triplewhale/mcp-server-triplewhale",
    "description": "MCP Server for Triplewhale, enabling natural language queries for business data",
    "installCommand": "npx -y @triplewhale/mcp-server-triplewhale init $TRIPLEWHALE_API_KEY",
    "requiredEnvVars": [
      "TRIPLEWHALE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'npx -y @triplewhale/mcp-server-triplewhale init $TRIPLEWHALE_API_KEY', then restart Claude Desktop",
    "category": "API Integration"
  },
  "chatgpt": {
    "name": "ChatGPT MCP Server",
    "githubLink": "https://github.com/Toowiredd/chatgpt-mcp-server",
    "package": "@Toowiredd/chatgpt-mcp-server",
    "description": "An MCP server providing Docker management through natural language interface",
    "installCommand": "npx -y @smithery/cli install @Toowiredd/chatgpt-mcp-server --client claude",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "HTTP_PORT",
      "RATE_LIMIT_REQUESTS",
      "RATE_LIMIT_WINDOW"
    ],
    "usageInstructions": "Install via Smithery CLI or manually clone and build the project, then run with Docker or Node",
    "category": "Development"
  },
  "clickhouse": {
    "name": "ClickHouse MCP Server",
    "githubLink": "https://github.com/ThomAub/clickhouse",
    "package": "clickhouse_mcp_server",
    "description": "MCP server for ClickHouse database integration with LLMs and AI applications",
    "installCommand": "git clone https://github.com/ThomAub/clickhouse_mcp_server.git && cd clickhouse_mcp_server && uv sync --all-extras",
    "requiredEnvVars": [
      "ClickHouse connection details"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server using 'python clickhouse_mcp_server/server.py'",
    "category": "Database"
  },
  "perplexity-insight": {
    "name": "Perplexity Insight MCP Server",
    "githubLink": "https://github.com/TheoLawrence86/perplexity-insight-MCP",
    "package": "perplexity-insight-mcp",
    "description": "An MCP server implementation for interfacing with the Perplexity AI API, providing advanced question answering capabilities",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "PERPLEXITY_API_KEY"
    ],
    "optionalParams": [
      "model"
    ],
    "usageInstructions": "Run the server using 'npm start'. Use tools like 'perplexity_ask' and 'perplexity_search' with optional parameters like 'model' and 'system prompt'",
    "category": "API Integration"
  },
  "fetch-browser": {
    "name": "Fetch Browser",
    "githubLink": "https://github.com/TheSethRose/Fetch-Browser",
    "package": "@TheSethRose/fetch-browser",
    "description": "A powerful headless browser MCP server for fetching web content and performing Google searches without API keys.",
    "installCommand": "npx -y @smithery/cli install @TheSethRose/fetch-browser --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "query",
      "responseType",
      "maxResults",
      "topic",
      "url",
      "timeout"
    ],
    "usageInstructions": "Use the google_search or fetch_url tools with required parameters like query, url, and responseType.",
    "category": "Web Scraping"
  },
  "uniprot": {
    "name": "UniProt MCP Server",
    "githubLink": "https://github.com/TakumiY235/uniprot-mcp-server",
    "package": "uniprot-mcp-server",
    "description": "An MCP server providing access to UniProt protein information for AI assistants.",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "accession",
      "accessions"
    ],
    "usageInstructions": "Configure the server in Claude Desktop config file and ask questions like 'Can you get the protein information for UniProt accession number P98160?'",
    "category": "API Integration"
  },
  "k8s-interactive": {
    "name": "Kubernetes Interactive MCP Server",
    "githubLink": "https://github.com/TaichiHo/k8s-interactive-mcp",
    "package": "k8s-interactive-mcp",
    "description": "An MCP server for running Kubernetes commands and interpreting results",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "kubeconfig path"
    ],
    "usageInstructions": "Add server config to Claude Desktop configuration file with command path to build/index.js",
    "category": "Development"
  },
  "edgeone-pages": {
    "name": "EdgeOne Pages MCP",
    "githubLink": "https://github.com/TencentEdgeOne/edgeone-pages-mcp",
    "package": "edgeone-pages-mcp",
    "description": "An MCP service for deploying HTML content to EdgeOne Pages and obtaining a publicly accessible URL.",
    "installCommand": "npx edgeone-pages-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "EDGEONE_PAGES_API_TOKEN",
      "EDGEONE_PAGES_PROJECT_NAME"
    ],
    "usageInstructions": "Provide HTML content to the MCP service to receive a public URL.",
    "category": "Web Scraping"
  },
  "grants": {
    "name": "Grants Search MCP Server",
    "githubLink": "https://github.com/Tar-ive/grants-mcp",
    "package": "@modelcontextprotocol/sdk",
    "description": "An MCP server that searches for government grants based on keywords using the Simpler Grants API.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "query",
      "page",
      "grantsPerPage"
    ],
    "usageInstructions": "Start the server with 'npm start', then connect using an MCP client and send a request with 'query', 'page', and 'grantsPerPage' parameters.",
    "category": "API Integration"
  },
  "devops-bridge": {
    "name": "MCP Server Multi Tools",
    "githubLink": "https://github.com/TheApeMachine/mcp-server-devops-bridge",
    "package": "mcp-server-multi-tools",
    "description": "A service that connects AI agents with DevOps and communication tools through a standardized interface.",
    "installCommand": "git clone https://github.com/theapemachine/mcp-server-multi-tools.git && cd mcp-server-devops-bridge && go build -o mcp-server-multi-tools .",
    "requiredEnvVars": [
      "Azure DevOps credentials",
      "Slack tokens"
    ],
    "optionalParams": [
      "Docker Desktop for agents-in-agents feature"
    ],
    "usageInstructions": "Configure environment variables in start.sh, then run the server using the configured start.sh script",
    "category": "Development"
  },
  "memories-with-lessons": {
    "name": "Knowledge Graph Memory Server",
    "githubLink": "https://github.com/T1nker-1220/memories-with-lessons-mcp-server",
    "package": "@T1nker-1220/memories-with-lessons-mcp-server",
    "description": "A basic implementation of persistent memory using a local knowledge graph.",
    "installCommand": "pnpm install",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Clone the repository, install dependencies with pnpm install, build with pnpm build, and start the server using Node.js",
    "category": "Data Storage"
  },
  "release-notes-generator-iris": {
    "name": "Iris MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/release-notes-generator-iris-mcp-server",
    "package": "iris-mcp-server",
    "description": "Automatically generates tag-based release notes for Git repositories",
    "installCommand": "npm install iris-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "startTag",
      "endTag",
      "title",
      "features",
      "improvements",
      "bugfixes",
      "breaking"
    ],
    "usageInstructions": "Use the 'generate_release_note' tool with required parameters to generate release notes",
    "category": "Development"
  },
  "uml": {
    "name": "UML-MCP-Server",
    "githubLink": "https://github.com/Swayingleaves/uml-mcp-server",
    "package": "@Swayingleaves/uml-mcp-server",
    "description": "A UML diagram generation tool based on MCP, generating UML diagrams through natural language or PlantUML code.",
    "installCommand": "npx -y @smithery/cli install @Swayingleaves/uml-mcp-server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "output_dir"
    ],
    "usageInstructions": "Use in Cursor IDE by configuring mcpServers or as a Python library by calling generate_uml function.",
    "category": "Development"
  },
  "gitlab-kanban": {
    "name": "GitLab Kanban MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/gitlab-kanban-mcp-server",
    "package": "gitlab-kanban-mcp-server",
    "description": "A Model Context Protocol server for managing GitLab Kanban board operations.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "GITLAB_TOKEN",
      "GITLAB_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure cline_mcp_settings.json with server settings and run using 'node build/index.js'",
    "category": "Version Control"
  },
  "luma": {
    "name": "Luma MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/luma-mcp-server",
    "package": "@sunwood-ai-labs/luma-mcp-server",
    "description": "Luma AI video generation API as Model Context Protocol (MCP) server",
    "installCommand": "npm install @sunwood-ai-labs/luma-mcp-server",
    "requiredEnvVars": [
      "LUMA_API_KEY"
    ],
    "optionalParams": [
      "loop",
      "callback_url"
    ],
    "usageInstructions": "Set LUMA_API_KEY environment variable, then use tools like generate_video, generate_video_from_image, extend_video, interpolate_videos",
    "category": "Media"
  },
  "aira": {
    "name": "Aira MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/aira-mcp-server",
    "package": "aira-mcp-server",
    "description": "MCP server for creating commit messages from git staged files",
    "installCommand": "npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure the MCP server in your settings with command: node and args: [path/to/aira-mcp-server/build/index.js]",
    "category": "Version Control"
  },
  "github-kanban": {
    "name": "GitHub Kanban MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/github-kanban-mcp-server",
    "package": "@sunwood-ai-labs/github-kanban-mcp-server",
    "description": "MCP server for managing GitHub issues in Kanban board format",
    "installCommand": "npm install @sunwood-ai-labs/github-kanban-mcp-server",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "repo",
      "state",
      "labels",
      "title",
      "emoji",
      "body",
      "assignees",
      "issue_number"
    ],
    "usageInstructions": "Configure MCP server with 'github-kanban-mcp-server' command and use tools like list_issues, create_issue, update_issue, add_comment",
    "category": "Productivity"
  },
  "command-executor": {
    "name": "Command Executor MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/command-executor-mcp-server",
    "package": "command-executor-mcp-server",
    "description": "A Model Context Protocol server for executing pre-approved commands securely",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "ALLOWED_COMMANDS"
    ],
    "optionalParams": [
      "command"
    ],
    "usageInstructions": "Configure allowed commands via ALLOWED_COMMANDS environment variable, then integrate with Claude Desktop",
    "category": "Development"
  },
  "documind": {
    "name": "DocuMind MCP Server",
    "githubLink": "https://github.com/Sunwood-ai-labs/documind-mcp-server",
    "package": "documind-mcp-server",
    "description": "A next-generation Model Context Protocol (MCP) server for advanced README analysis and documentation quality evaluation",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "projectPath"
    ],
    "usageInstructions": "Configure in Claude Desktop config, then use 'evaluate_readme' command with projectPath parameter",
    "category": "Development"
  },
  "azure": {
    "name": "Azure MCP Server",
    "githubLink": "https://github.com/Streen9/azure-mcp",
    "package": "@Streen9/azure-mcp",
    "description": "MCP server enabling Claude Desktop to interact with Azure services through natural language conversations.",
    "installCommand": "npx -y @modelcontextprotocol/server-sequential-thinking",
    "requiredEnvVars": [
      "AZURE_TENANT_ID",
      "AZURE_CLIENT_ID",
      "AZURE_CLIENT_SECRET"
    ],
    "optionalParams": [
      "Azure CLI configuration",
      "Managed Identity settings"
    ],
    "usageInstructions": "Configure Claude Desktop with the MCP server, then ask Azure-related questions in the chat.",
    "category": "API Integration"
  },
  "memory-journal": {
    "name": "Smart Photo Journal MCP Server",
    "githubLink": "https://github.com/Siddhant-K-code/memory-journal-mcp-server",
    "package": "uv",
    "description": "An MCP server for searching and analyzing photo libraries with features like location, label, and people search",
    "installCommand": "uv sync",
    "requiredEnvVars": [],
    "optionalParams": [
      "location",
      "label",
      "person"
    ],
    "usageInstructions": "Use commands like {\"location\": \"Udaipur\"} or {\"label\": \"Birthday\"} to search photos",
    "category": "Media"
  },
  "win-cli": {
    "name": "Windows CLI MCP Server",
    "githubLink": "https://github.com/SimonB97/win-cli-mcp-server",
    "package": "@simonb97/server-win-cli",
    "description": "MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, Git Bash shells, and remote systems via SSH.",
    "installCommand": "npx -y @simonb97/server-win-cli",
    "requiredEnvVars": [],
    "optionalParams": [
      "--config"
    ],
    "usageInstructions": "Add configuration to claude_desktop_config.json with 'npx -y @simonb97/server-win-cli' command, optionally specifying a config file with --config flag.",
    "category": "Development"
  },
  "jina-ai-multimodal-search": {
    "name": "Jina AI MCP Server",
    "githubLink": "https://github.com/Sheshiyer/jina-ai-mcp-multimodal-search",
    "package": "jina-ai-mcp",
    "description": "MCP server providing semantic search, image search, and cross-modal search using Jina AI's neural search capabilities",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "JINA_API_KEY"
    ],
    "optionalParams": [
      "limit"
    ],
    "usageInstructions": "Configure MCP settings with Jina AI API key, then use semantic_search, image_search, or cross_modal_search tools",
    "category": "API Integration"
  },
  "autumn": {
    "name": "Autumn MCP Server",
    "githubLink": "https://github.com/SirTenzin/autumn-mcp-server",
    "package": "@SirTenzin/autumn-mcp-server",
    "description": "Unofficial MCP server for Autumn, providing access to the Autumn pricing API to manage customers",
    "installCommand": "npx -y @smithery/cli install @SirTenzin/autumn-mcp-server --client claude",
    "requiredEnvVars": [
      "apiKey"
    ],
    "optionalParams": [],
    "usageInstructions": "Use with Claude Desktop or other compatible AI apps, requires API key for full functionality",
    "category": "API Integration"
  },
  "stockmcp": {
    "name": "Yahoo Finance MCP for LLaMA3.23B",
    "githubLink": "https://github.com/Shak2000/StockMCP",
    "package": "yfinance",
    "description": "MCP server that integrates Yahoo Finance API with LLaMA3.23B for real-time financial data and market news",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [
      "model"
    ],
    "usageInstructions": "Run 'python mcp_ollama_integration.py' to start an interactive session",
    "category": "API Integration"
  },
  "timeserver": {
    "name": "MCP-timeserver",
    "githubLink": "https://github.com/SecretiveShell/MCP-timeserver",
    "package": "MCP-timeserver",
    "description": "An MCP server providing datetime information to agentic systems and chat REPLs",
    "installCommand": "uvx MCP-timeserver",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use datetime:// URI scheme to access current date/time in various timezones",
    "category": "Productivity"
  },
  "vcd": {
    "name": "MCP VCD Server",
    "githubLink": "https://github.com/SeanMcLoughlin/mcp-vcd",
    "package": "mcp-vcd",
    "description": "An MCP server for Value Change Dump (VCD) waveforms, providing signal changes to models.",
    "installCommand": "uv pip install --system mcp-vcd",
    "requiredEnvVars": [],
    "optionalParams": [
      "signal name",
      "start timestamp",
      "end timestamp"
    ],
    "usageInstructions": "Use the 'get-signal' tool to provide signal changes to the model's context, optionally specifying a timestamp range.",
    "category": "Development"
  },
  "xano": {
    "name": "Xano MCP Server",
    "githubLink": "https://github.com/SarimSiddd/xano",
    "package": "xano_mcp",
    "description": "An MCP server implementation for interacting with the Xano API, providing tools for managing Xano database operations.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "XANO_API_KEY",
      "XANO_API_URL"
    ],
    "optionalParams": [
      "NODE_ENV",
      "API_TIMEOUT"
    ],
    "usageInstructions": "Configure environment variables in .env file, then run 'npm start' to start the server. Use MCP tools like 'get_workspaces' and 'create_table' to interact with Xano API.",
    "category": "API Integration"
  },
  "llms-txt": {
    "name": "MCP-llms-txt Server",
    "githubLink": "https://github.com/SecretiveShell/MCP-llms-txt",
    "package": "@SecretiveShell/MCP-llms-txt",
    "description": "MCP server for Awesome-llms-txt, adding documentation directly into conversations via MCP resources",
    "installCommand": "npx -y @smithery/cli install @SecretiveShell/MCP-llms-txt --client claude",
    "requiredEnvVars": [
      "PYTHONUTF8"
    ],
    "optionalParams": [],
    "usageInstructions": "Use mcp-cli to test the server with a config.json file",
    "category": "Productivity"
  },
  "weather-claudedesktop": {
    "name": "Weather MCP Tool for Claude Desktop",
    "githubLink": "https://github.com/SaintDoresh/Weather-MCP-ClaudeDesktop",
    "package": "Weather-MCP-ClaudeDesktop",
    "description": "An MCP tool providing real-time weather data, forecasts, and historical weather information using OpenWeatherMap API",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "OPENWEATHER_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server using 'py -3.13 main.py' and configure MCP settings in Claude Desktop",
    "category": "API Integration"
  },
  "memos-py": {
    "name": "MCP Server Memos",
    "githubLink": "https://github.com/RyoJerryYu/mcp-server-memos-py",
    "package": "mcp-server-memos",
    "description": "A Python package that enables LLM models to interact with Memos server through MCP interface",
    "installCommand": "pip install mcp-server-memos",
    "requiredEnvVars": [],
    "optionalParams": [
      "host",
      "port",
      "token"
    ],
    "usageInstructions": "Run 'mcp-server-memos --host localhost --port 8080 --token YOUR_ACCESS_TOKEN' to start the server",
    "category": "Productivity"
  },
  "rootly": {
    "name": "Rootly MCP Server",
    "githubLink": "https://github.com/Rootly-AI-Labs/Rootly-MCP-server",
    "package": "rootly-mcp-server",
    "description": "An MCP server for Rootly API that integrates with MCP-compatible editors to resolve production incidents.",
    "installCommand": "npx -y mcp-remote https://mcp.rootly.com/sse --header Authorization:${ROOTLY_AUTH_HEADER}",
    "requiredEnvVars": [
      "ROOTLY_AUTH_HEADER"
    ],
    "optionalParams": [
      "allowed_paths"
    ],
    "usageInstructions": "Configure your MCP-compatible editor with the provided command and environment variables.",
    "category": "API Integration"
  },
  "mcpchartplotter": {
    "name": "MCP Chart Plotter",
    "githubLink": "https://github.com/ReallyFloppyPenguin/MCPChartPlotter",
    "package": "MCPChartPlotter",
    "description": "An MCP server for plotting charts",
    "installCommand": "git clone https://github.com/ReallyFloppyPenguin/MCPChartPlotter.git",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Clone the repository and configure the server path in the IDE",
    "category": "Data Storage"
  },
  "coincap": {
    "name": "Coincap MCP",
    "githubLink": "https://github.com/QuantGeekDev/coincap-mcp",
    "package": "coincap-mcp",
    "description": "Allows querying crypto information from Coincap's public API without API keys or registration",
    "installCommand": "npx -y @smithery/cli install coincap-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "crypto asset names"
    ],
    "usageInstructions": "Add configuration to Claude Desktop config file and launch Claude Desktop",
    "category": "API Integration"
  },
  "azuredevops": {
    "name": "Azure DevOps MCP Integration",
    "githubLink": "https://github.com/RyanCardin15/AzureDevOps-MCP",
    "package": "@ryancardin/azuredevops-mcp-server",
    "description": "A powerful integration for Azure DevOps that provides seamless access to work items, repositories, projects, boards, and sprints through the Model Context Protocol (MCP) server.",
    "installCommand": "npx @ryancardin/azuredevops-mcp-server@latest",
    "requiredEnvVars": [
      "AZURE_DEVOPS_ORG_URL",
      "AZURE_DEVOPS_PROJECT",
      "AZURE_DEVOPS_IS_ON_PREMISES",
      "AZURE_DEVOPS_AUTH_TYPE",
      "AZURE_DEVOPS_PERSONAL_ACCESS_TOKEN"
    ],
    "optionalParams": [
      "AZURE_DEVOPS_COLLECTION",
      "AZURE_DEVOPS_API_VERSION",
      "AZURE_DEVOPS_USERNAME",
      "AZURE_DEVOPS_PASSWORD",
      "AZURE_DEVOPS_DOMAIN"
    ],
    "usageInstructions": "Set required environment variables and run the installation command. Configure additional settings as needed for on-premises or alternative authentication methods.",
    "category": "API Integration"
  },
  "google-cse": {
    "name": "Google Custom Search Engine MCP Server",
    "githubLink": "https://github.com/Richard-Weiss/mcp-google-cse",
    "package": "mcp-google-cse",
    "description": "An MCP server providing search capabilities using a Google Custom Search Engine, returning search results that can be combined with other servers for content extraction.",
    "installCommand": "pip install mcp-google-cse",
    "requiredEnvVars": [
      "API_KEY",
      "ENGINE_ID"
    ],
    "optionalParams": [
      "COUNTRY_REGION",
      "GEOLOCATION",
      "RESULT_LANGUAGE",
      "RESULT_NUM",
      "SERVICE_NAME"
    ],
    "usageInstructions": "Configure environment variables, then run using 'python -m mcp-google-cse' or 'uvx mcp-google-cse'",
    "category": "Web Scraping"
  },
  "obsidian-rest": {
    "name": "Obsidian MCP REST Server",
    "githubLink": "https://github.com/PublikPrinciple/obsidian-mcp-rest",
    "package": "PublikPrinciple/obsidian-mcp-rest",
    "description": "MCP server providing REST API access to Obsidian vaults for AI assistants",
    "installCommand": "npm install -g PublikPrinciple/obsidian-mcp-rest",
    "requiredEnvVars": [],
    "optionalParams": [
      "--config"
    ],
    "usageInstructions": "Start server with 'obsidian-mcp-rest --config path/to/config.json', then use with Claude Desktop or other AI assistants",
    "category": "Productivity"
  },
  "infura": {
    "name": "Infura MCP Server",
    "githubLink": "https://github.com/Qbandev/infura-mcp-server",
    "package": "infura-mcp-server",
    "description": "MCP server providing Ethereum blockchain access through Infura's infrastructure",
    "installCommand": "npx infura-mcp-server",
    "requiredEnvVars": [
      "INFURA_API_KEY"
    ],
    "optionalParams": [
      "INFURA_NETWORK"
    ],
    "usageInstructions": "Configure INFURA_API_KEY in environment, then use with Claude Desktop or VS Code",
    "category": "Blockchain"
  },
  "fireflies": {
    "name": "Fireflies MCP Server",
    "githubLink": "https://github.com/Props-Labs/fireflies-mcp",
    "package": "@props-labs/mcp/fireflies",
    "description": "MCP Server for Fireflies.ai API enabling transcript management and summary generation",
    "installCommand": "npx -y @props-labs/mcp/fireflies",
    "requiredEnvVars": [
      "FIREFLIES_API_KEY"
    ],
    "optionalParams": [
      "limit",
      "from_date",
      "to_date",
      "transcript_id",
      "query",
      "format"
    ],
    "usageInstructions": "Start server with FIREFLIES_API_KEY=your_api_key npm start",
    "category": "API Integration"
  },
  "minimax-tools": {
    "name": "Minimax MCP Tools",
    "githubLink": "https://github.com/PsychArch/minimax-mcp-tools",
    "package": "minimax-mcp-tools",
    "description": "MCP server with Minimax API integration for AI image generation and text-to-speech functionality",
    "installCommand": "npx minimax-mcp-tools",
    "requiredEnvVars": [
      "MINIMAX_API_KEY",
      "MINIMAX_GROUP_ID"
    ],
    "optionalParams": [
      "aspectRatio",
      "n",
      "subjectReference",
      "model",
      "voiceId",
      "speed",
      "volume",
      "pitch",
      "emotion",
      "format",
      "sampleRate",
      "bitrate",
      "channel",
      "latexRead",
      "pronunciationDict",
      "stream",
      "languageBoost",
      "subtitleEnable"
    ],
    "usageInstructions": "Configure MCP server with Minimax API key and Group ID, then use provided parameters for image generation and text-to-speech",
    "category": "API Integration"
  },
  "github-meta": {
    "name": "GitHub MCP Server",
    "githubLink": "https://github.com/PoliTwit1984/github-meta-mcp-server",
    "package": "github-meta-mcp-server",
    "description": "An MCP server for interacting with GitHub's API, supporting repository creation and management.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure GITHUB_TOKEN in MCP settings, then use tools like 'create_repo' with natural language commands.",
    "category": "API Integration"
  },
  "pipedream": {
    "name": "Pipedream",
    "githubLink": "https://github.com/PipedreamHQ/pipedream",
    "package": "pipedream",
    "description": "Pipedream is an integration platform for developers to connect apps and develop event-driven automations.",
    "installCommand": "npm install pipedream",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use pre-built components or run custom Node.js, Python, Golang, or Bash code to develop automations.",
    "category": "API Integration"
  },
  "github-plus": {
    "name": "GitHub MCP Server Plus",
    "githubLink": "https://github.com/PhialsBasement/mcp-github-server-plus",
    "package": "improved-github-mcp",
    "description": "MCP Server for GitHub API, enabling file operations, repository management, and search functionality",
    "installCommand": "npx -y improved-github-mcp",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use npx improved-github-mcp to start the server, then connect via MCP client",
    "category": "API Integration"
  },
  "pixverse": {
    "name": "PixVerse MCP",
    "githubLink": "https://github.com/PixVerseAI/PixVerse-MCP",
    "package": "pixverse-mcp",
    "description": "A tool to access PixVerse's video generation models via MCP-supported applications like Claude or Cursor",
    "installCommand": "uvx pixverse-mcp",
    "requiredEnvVars": [
      "PIXVERSE_API_KEY"
    ],
    "optionalParams": [
      "aspectRatio",
      "duration",
      "quality",
      "motionMode",
      "negativePrompts"
    ],
    "usageInstructions": "Configure MCP client with PixVerse API key, then use natural language prompts to generate videos",
    "category": "Media"
  },
  "koboldcpp": {
    "name": "Kobold MCP Server",
    "githubLink": "https://github.com/PhialsBasement/KoboldCPP-MCP-Server",
    "package": "kobold-mcp-server",
    "description": "MCP server implementation for interfacing with KoboldAI, enabling text generation and chat completion",
    "installCommand": "npm install kobold-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "apiUrl"
    ],
    "usageInstructions": "Initialize the server using KoboldMCPServer class and start it",
    "category": "API Integration"
  },
  "puppeteer-linux": {
    "name": "MCP-Puppeteer-Linux",
    "githubLink": "https://github.com/PhialsBasement/MCP-Puppeteer-Linux",
    "package": "@PhialsBasement/mcp-puppeteer-linux",
    "description": "A Model Context Protocol server providing browser automation capabilities using Puppeteer with Linux display server support.",
    "installCommand": "npx -y @smithery/cli install @PhialsBasement/mcp-puppeteer-linux --client claude",
    "requiredEnvVars": [
      "DISPLAY",
      "WAYLAND_DISPLAY",
      "XAUTHORITY"
    ],
    "optionalParams": [
      "url",
      "name",
      "selector",
      "width",
      "height",
      "value",
      "script"
    ],
    "usageInstructions": "Start the server using 'ts-node index.ts' after manual installation, or install via Smithery using the provided command.",
    "category": "Browser Automation"
  },
  "cmd": {
    "name": "CMD MCP Server",
    "githubLink": "https://github.com/PhialsBasement/CMD-MCP-Server",
    "package": "server-cmd",
    "description": "An MCP server for executing CMD commands on Windows and Linux, and allowing SSH connections.",
    "installCommand": "npx -y @smithery/cli install server-cmd --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Initialize the server using 'const server = new MCPCmdServer();' and start it with 'server.start();'",
    "category": "Development"
  },
  "encoding-devops": {
    "name": "Encoding DevOps MCP Server",
    "githubLink": "https://github.com/PatrickKalkman/encoding-devops",
    "package": "encoding-devops",
    "description": "AI-powered video encoding assistant that connects Anthropic's Claude to encoding workflows",
    "installCommand": "uv pip install encoding-devops",
    "requiredEnvVars": [
      "encoding workflow API credentials"
    ],
    "optionalParams": [
      "OMDB API key"
    ],
    "usageInstructions": "Start the MCP server with 'uv run mcp dev ./src/encoding_devops/main.py' and interact with it through Claude Desktop",
    "category": "Development"
  },
  "peliqan": {
    "name": "Peliqan MCP Server",
    "githubLink": "https://github.com/Peliqan-io/mcp-server-peliqan",
    "package": "mcp-server-peliqan",
    "description": "MCP server for Peliqan.io, enabling integration with various data sources and business applications.",
    "installCommand": "pip install mcp-server-peliqan",
    "requiredEnvVars": [
      "account_id",
      "api_token"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure peliqan_config.json or set environment variables account_id and api_token, then use with Claude Desktop.",
    "category": "API Integration"
  },
  "paddle": {
    "name": "Paddle Billing MCP Server",
    "githubLink": "https://github.com/PaddleHQ/paddle-mcp-server",
    "package": "@paddle/paddle-mcp",
    "description": "MCP server for interacting with Paddle Billing API, providing tools for managing products, prices, customers, transactions, and subscriptions.",
    "installCommand": "npx -y @paddle/paddle-mcp --api-key=PADDLE_API_KEY --environment=(sandbox|production)",
    "requiredEnvVars": [
      "PADDLE_API_KEY",
      "PADDLE_ENVIRONMENT"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure the MCP server with your Paddle API key and environment (sandbox or production) in your MCP client config.",
    "category": "API Integration"
  },
  "deep-research": {
    "name": "Open Deep Research MCP Server",
    "githubLink": "https://github.com/Ozamatash/deep-research-mcp",
    "package": "deep-research",
    "description": "AI-powered research assistant performing deep, iterative research on any topic using search engines, web scraping, and AI to generate comprehensive reports.",
    "installCommand": "git clone https://github.com/Ozamatash/deep-research && cd deep-research && npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "breadth",
      "depth"
    ],
    "usageInstructions": "1. Clone and install. 2. Set up environment in `.env.local`. 3. Build with `npm run build`. 4. Run CLI version with `npm run start` or MCP server with `npm run start:http`.",
    "category": "Research"
  },
  "vegalite-troubleshooting": {
    "name": "Vega-Lite MCP Server Troubleshooting",
    "githubLink": "https://github.com/OneofGods/vegalite-mcp-troubleshooting",
    "package": "n/a",
    "description": "Troubleshooting guide for Vega-Lite MCP server integration",
    "installCommand": "n/a",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Refer to the troubleshooting guide for detailed information",
    "category": "Development"
  },
  "web-eval-agent": {
    "name": "Operative.sh Web Eval Agent MCP Server",
    "githubLink": "https://github.com/Operative-Sh/web-eval-agent",
    "package": "web-eval-agent",
    "description": "Automated UX evaluator that drives browser, captures logs and returns rich UX reports",
    "installCommand": "curl -LSf https://operative.sh/install.sh -o install.sh && bash install.sh && rm install.sh",
    "requiredEnvVars": [
      "OPERATIVE_API_KEY"
    ],
    "optionalParams": [
      "headless_browser",
      "url",
      "task"
    ],
    "usageInstructions": "Send a prompt in chat mode to call the web eval agent tool, e.g., 'Test my app on http://localhost:3000. Use web-eval-agent.'",
    "category": "Browser Automation"
  },
  "pgyer": {
    "name": "PGYER MCP Server",
    "githubLink": "https://github.com/PGYER/pgyer-mcp-server",
    "package": "pgyer/pgyer-mcp-server",
    "description": "MCP server for uploading apps to PGYER platform, supporting multiple integrations and custom upload parameters",
    "installCommand": "docker run -i --rm pgyer/pgyer-mcp-server",
    "requiredEnvVars": [
      "PGYER_API_KEY"
    ],
    "optionalParams": [
      "installType",
      "installPassword",
      "updateDescription",
      "expireDate"
    ],
    "usageInstructions": "Configure PGYER_API_KEY environment variable and use with Claude or VSCode",
    "category": "API Integration"
  },
  "odbc": {
    "name": "MCP ODBC Server",
    "githubLink": "https://github.com/OpenLinkSoftware/mcp-odbc-server",
    "package": "@modelcontextprotocol/sdk",
    "description": "An MCP server providing access to ODBC-accessible data sources",
    "installCommand": "npx @modelcontextprotocol/sdk",
    "requiredEnvVars": [
      "ODBC_DSN",
      "ODBC_USER",
      "ODBC_PASSWORD",
      "ODBCINI"
    ],
    "optionalParams": [
      "API_KEY"
    ],
    "usageInstructions": "Set environment variables in .env file, then run the server",
    "category": "Database"
  },
  "github-oauth": {
    "name": "MCP Github Oauth Server",
    "githubLink": "https://github.com/Nikhil-Patil-RI/MCP-Github-Oauth",
    "package": "@modelcontextprotocol/inspector",
    "description": "An MCP server for Github OAuth integration",
    "installCommand": "npx @modelcontextprotocol/inspector uv --directory path/to/Github-Oauth run github-oauth",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Update claude_desktop_config.json to register the tool and use MCP Inspector for debugging",
    "category": "API Integration"
  },
  "bloodhound-ai": {
    "name": "BloodHound-MCP",
    "githubLink": "https://github.com/MorDavid/BloodHound-MCP-AI",
    "package": "BloodHound-MCP",
    "description": "An MCP server integration for BloodHound Active Directory security analysis using natural language queries.",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "BLOODHOUND_URI",
      "BLOODHOUND_USERNAME",
      "BLOODHOUND_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Use natural language to query BloodHound data, such as 'Show me all paths from kerberoastable users to Domain Admins'",
    "category": "Security"
  },
  "nebulablock": {
    "name": "NebulaBlock API MCP Server",
    "githubLink": "https://github.com/Nebula-Block-Data/nebulablock-mcp-server",
    "package": "fastmcp",
    "description": "Server integrating NebulaBlock API with Model Context Protocol",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [
      "NEBULA_BLOCK_API_KEY"
    ],
    "optionalParams": [
      "--api-key"
    ],
    "usageInstructions": "Run using 'uv run -m src.main' and configure API key via .env or --api-key argument",
    "category": "API Integration"
  },
  "octagon": {
    "name": "Octagon MCP Server",
    "githubLink": "https://github.com/OctagonAI/octagon-mcp-server",
    "package": "octagon-mcp",
    "description": "AI-powered financial research and analysis server integrating with Octagon Market Intelligence API",
    "installCommand": "npx -y octagon-mcp",
    "requiredEnvVars": [
      "OCTAGON_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run using 'env OCTAGON_API_KEY=your_api_key npx -y octagon-mcp' or configure in Claude Desktop/Windsurf/Cursor",
    "category": "API Integration"
  },
  "npm-sentinel": {
    "name": "NPM Sentinel MCP",
    "githubLink": "https://github.com/Nekzus/npm-sentinel-mcp",
    "package": "@nekzus/mcp-server",
    "description": "A powerful MCP server for NPM package analysis through AI, providing real-time intelligence on package security, dependencies, and performance.",
    "installCommand": "npx -y @nekzus/mcp-server@latest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add the server configuration to your VS Code MCP config file or Claude Desktop config file using the provided installation command.",
    "category": "Development"
  },
  "noves": {
    "name": "Noves MCP Server",
    "githubLink": "https://github.com/Noves-Inc/noves-mcp",
    "package": "@noves/noves-mcp-server",
    "description": "An MCP server providing natural language blockchain data through Noves Intent service, enabling conversational access to blockchain transactions.",
    "installCommand": "npx @noves/noves-mcp-server@0.1.3",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add the server to Cursor configuration file (~/.cursor/mcp.json) and restart Cursor to use natural language queries about blockchain data.",
    "category": "Blockchain Data Analysis"
  },
  "klaudium": {
    "name": "MCP Klaudium",
    "githubLink": "https://github.com/MilosBastaja/mcp-klaudium",
    "package": "mcp-klaudium",
    "description": "Enhanced MCP memory server with dynamic compression and context management",
    "installCommand": "npm install mcp-klaudium",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Currently not available, check back later for installation and usage instructions",
    "category": "Data Storage"
  },
  "sar": {
    "name": "AWS Service Reference MCP Server",
    "githubLink": "https://github.com/MitchyBAwesome/sar-mcp",
    "package": "mcp[cli]",
    "description": "An MCP server providing tools to interact with AWS Programmatic Service Reference, allowing listing of AWS services and retrieval of API actions and their properties.",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Run the server using 'python aws_service_reference.py', then use with Claude Desktop by configuring the server path in claude_desktop_config.json.",
    "category": "API Integration"
  },
  "raygun": {
    "name": "Raygun MCP Server",
    "githubLink": "https://github.com/MindscapeHQ/mcp-server-raygun",
    "package": "@raygun.io/mcp-server-raygun",
    "description": "MCP Server for Raygun's API V3 endpoints for Crash Reporting and Real User Monitoring applications",
    "installCommand": "npx -y @raygun.io/mcp-server-raygun",
    "requiredEnvVars": [
      "RAYGUN_PAT_TOKEN"
    ],
    "optionalParams": [
      "SOURCEMAP_ALLOWED_DIRS"
    ],
    "usageInstructions": "Add server config to claude_desktop_config.json with RAYGUN_PAT_TOKEN environment variable",
    "category": "API Integration"
  },
  "mockuuups": {
    "name": "Mockuuups MCP Server",
    "githubLink": "https://github.com/Mockuuups/mockuuups-mcp",
    "package": "mockuuups-mcp",
    "description": "Generates stunning mockups instantly from AI chats or automation tools using the Model Context Protocol",
    "installCommand": "npx mockuuups-mcp",
    "requiredEnvVars": [
      "MOCKUUUPS_API_KEY"
    ],
    "optionalParams": [
      "mockup_id"
    ],
    "usageInstructions": "Connect to your AI tool using the MCP Endpoint URL: https://mcp.mockuuups.studio/mcp and provide your API key",
    "category": "Media"
  },
  "minimax": {
    "name": "MiniMax Model Context Protocol (MCP) Server",
    "githubLink": "https://github.com/MiniMax-AI/MiniMax-MCP",
    "package": "minimax-mcp",
    "description": "Official MiniMax MCP server enabling interaction with Text to Speech and video/image generation APIs for clients like Claude Desktop and Cursor",
    "installCommand": "uvx minimax-mcp -y",
    "requiredEnvVars": [
      "MINIMAX_API_KEY",
      "MINIMAX_API_HOST",
      "MINIMAX_MCP_BASE_PATH"
    ],
    "optionalParams": [
      "MINIMAX_API_RESOURCE_MODE"
    ],
    "usageInstructions": "Get API key from MiniMax, install uv Python package manager, configure MCP client with API key and host",
    "category": "API Integration"
  },
  "consulting-agents": {
    "name": "Consulting Agents MCP Server",
    "githubLink": "https://github.com/MatthewPDingle/consulting-agents-mcp",
    "package": "consulting-agents-mcp",
    "description": "MCP server providing multiple AI consulting agents for code analysis and problem solving",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "GOOGLE_API_KEY"
    ],
    "optionalParams": [
      "MCP_TRANSPORT",
      "HOST",
      "PORT"
    ],
    "usageInstructions": "Start server with ./start_mcp_server.sh, then register with Claude Code using 'claude mcp add ConsultingAgents /absolute/path/to/consulting-agents-mcp/start_mcp_server.sh'",
    "category": "Development"
  },
  "gsuite": {
    "name": "Google Workspace MCP Server",
    "githubLink": "https://github.com/MarkusPfundstein/mcp-gsuite",
    "package": "mcp-gsuite",
    "description": "MCP server for Google products including Gmail and Calendar integration",
    "installCommand": "npx -y @smithery/cli install mcp-gsuite --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "--gauth-file",
      "--accounts-file",
      "--credentials-dir"
    ],
    "usageInstructions": "Create .gauth.json and .accounts.json files in your working directory, then run 'uv run mcp-gsuite'",
    "category": "API Integration"
  },
  "mcpfoundrydev": {
    "name": "Foundry VTT MCP",
    "githubLink": "https://github.com/LesosAI/MCPFoundryDev",
    "package": "MCPFoundryDev",
    "description": "A structured developer prompt for creating Foundry VTT modules using best practices",
    "installCommand": "npx -y MCPFoundryDev",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use the provided .mcp file to create Foundry VTT modules",
    "category": "Development"
  },
  "bettermcpfileserver": {
    "name": "BetterMCPFileServer",
    "githubLink": "https://github.com/MartinSchlott/BetterMCPFileServer",
    "package": "better-mcp-file-server",
    "description": "A reimagined Model Context Protocol (MCP) server for filesystem access with privacy-preserving path aliases and an optimized LLM-friendly API.",
    "installCommand": "git clone https://github.com/MartinSchlott/BetterMCPFileServer.git && cd BetterMCPFileServer && npm install && npm run build",
    "requiredEnvVars": [],
    "optionalParams": [
      "code:~/projects",
      "docs:~/documents"
    ],
    "usageInstructions": "Run with aliases: BetterMCPFileServer code:~/projects docs:~/documents",
    "category": "File Management"
  },
  "sentry": {
    "name": "Sentry MCP Server",
    "githubLink": "https://github.com/MCP-100/mcp-sentry",
    "package": "@qianniuspace/mcp-sentry",
    "description": "A Model Context Protocol server for retrieving and analyzing issues from Sentry.io",
    "installCommand": "npx -y @smithery/cli install @qianniuspace/mcp-sentry --client claude",
    "requiredEnvVars": [
      "SENTRY_TOKEN",
      "PROJECT_SLUG",
      "ORGANIZATION_SLUG"
    ],
    "optionalParams": [],
    "usageInstructions": "Add configuration to claude_desktop_config.json or Zed settings.json with your Sentry credentials",
    "category": "API Integration"
  },
  "dbt-cli": {
    "name": "DBT CLI MCP Server",
    "githubLink": "https://github.com/MammothGrowth/dbt-cli-mcp",
    "package": "dbt-cli-mcp",
    "description": "An MCP server wrapping the dbt CLI tool for AI coding agents to interact with dbt projects.",
    "installCommand": "git clone --recurse-submodules https://github.com/MammothGrowth/dbt-cli-mcp.git && cd dbt-cli-mcp && uv venv && source .venv/bin/activate && uv pip install -e .",
    "requiredEnvVars": [
      "DBT_PATH",
      "project_dir"
    ],
    "optionalParams": [
      "--dbt-path",
      "--env-file",
      "--log-level",
      "--profiles-dir"
    ],
    "usageInstructions": "Use the command-line interface or MCP clients like Claude for Desktop. Specify absolute project path with 'project_dir'.",
    "category": "Development"
  },
  "ta-tool": {
    "name": "LumiFAI MCP Technical Analysis Server",
    "githubLink": "https://github.com/Lumif-ai/mcp-ta-tool",
    "package": "lumifai-mcp-ta-tool",
    "description": "A FastMCP server providing technical analysis tools for cryptocurrency trading data, focusing on EMA calculations for Binance pairs.",
    "installCommand": "git clone https://github.com/Lumif-ai/mcp-ta-tool.git && cd lumifai-mcp-ta && uv sync",
    "requiredEnvVars": [
      "MONGODB_URI"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server using 'uv run mcp-server.py' after setting up environment variables.",
    "category": "Analytics"
  },
  "deep-reasoning": {
    "name": "Deep Reasoning Server",
    "githubLink": "https://github.com/Lakphy/deep-reasoning-mcp",
    "package": "deep-reasoning-mcp",
    "description": "An MCP server providing deep reasoning capabilities based on the deepseek-r1 model",
    "installCommand": "npx -y deep-reasoning-mcp@latest --apiKey=<YOUR_OPENROUTER_API_KEY> --model=<YOUR_MODEL>",
    "requiredEnvVars": [],
    "optionalParams": [
      "apiKey",
      "model"
    ],
    "usageInstructions": "Run using 'npx -y deep-reasoning-mcp@latest' with required parameters --apiKey and --model",
    "category": "API Integration"
  },
  "markitdown": {
    "name": "MarkItDown MCP Server",
    "githubLink": "https://github.com/KorigamiK/markitdown",
    "package": "@KorigamiK/markitdown_mcp_server",
    "description": "An MCP server that converts various file formats to Markdown using MarkItDown utility",
    "installCommand": "npx -y @smithery/cli install @KorigamiK/markitdown_mcp_server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use /md <file> command to convert files to Markdown",
    "category": "File Management"
  },
  "mac-apps-launcher": {
    "name": "Mac Apps Launcher MCP Server",
    "githubLink": "https://github.com/JoshuaRileyDev/mac-apps-launcher",
    "package": "@joshuarileydev/mac-apps-launcher-mcp-server",
    "description": "An MCP server for launching and managing macOS applications.",
    "installCommand": "npx -y @joshuarileydev/mac-apps-launcher-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Add the server configuration to your Claude Config JSON file.",
    "category": "Productivity"
  },
  "speech": {
    "name": "Speech MCP",
    "githubLink": "https://github.com/Kvadratni/speech-mcp",
    "package": "speech-mcp",
    "description": "A voice interface for Goose, providing speech recognition and text-to-speech functionality",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [
      "LDFLAGS",
      "CPPFLAGS"
    ],
    "optionalParams": [
      "SPEECH_MCP_TTS_VOICE"
    ],
    "usageInstructions": "Use 'goose session --with-extension speech-mcp' to start the server, or configure manually through Goose settings",
    "category": "Communication"
  },
  "vikingdb": {
    "name": "VikingDB MCP Server",
    "githubLink": "https://github.com/KashiwaByte/vikingdb-mcp-server",
    "package": "@smithery/cli",
    "description": "MCP server for VikingDB store and search operations",
    "installCommand": "npx -y @smithery/cli install mcp-server-vikingdb --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "vikingdb-host",
      "vikingdb-region",
      "vikingdb-ak",
      "vikingdb-sk",
      "collection-name",
      "index-name"
    ],
    "usageInstructions": "Configure VikingDB connection parameters and collection/index names in claude_desktop_config.json",
    "category": "Database"
  },
  "jira-python": {
    "name": "MCP JIRA Python",
    "githubLink": "https://github.com/Kallows/mcp-jira-python",
    "package": "mcp-jira-python",
    "description": "A Python implementation of an MCP server for JIRA integration, providing various tools for issue management and project interaction.",
    "installCommand": "git clone https://github.com/Kallows/mcp-jira-python.git",
    "requiredEnvVars": [
      "JIRA_HOST",
      "JIRA_EMAIL",
      "JIRA_API_TOKEN"
    ],
    "optionalParams": [
      "JIRA_PROJECT_KEY"
    ],
    "usageInstructions": "Update claude_desktop_config.json with server configuration, then restart Claude Desktop to use the JIRA tools listed under 'jira-api' server.",
    "category": "API Integration"
  },
  "appinsightmcp": {
    "name": "App Market Intelligence MCP",
    "githubLink": "https://github.com/JiantaoFu/AppInsightMCP",
    "package": "@JiantaoFu/appinsightmcp",
    "description": "MCP server providing market intelligence by analyzing data from Apple App Store and Google Play Store",
    "installCommand": "npx -y @smithery/cli install @JiantaoFu/appinsightmcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Start the MCP server using 'node src/server.js' and use with any MCP client",
    "category": "Analytics"
  },
  "jetbrains": {
    "name": "JetBrains MCP Proxy Server",
    "githubLink": "https://github.com/JetBrains/mcp-jetbrains",
    "package": "@jetbrains/mcp-proxy",
    "description": "Proxies requests from client to JetBrains IDE",
    "installCommand": "npx -y @jetbrains/mcp-proxy",
    "requiredEnvVars": [],
    "optionalParams": [
      "IDE_PORT",
      "HOST",
      "LOG_ENABLED"
    ],
    "usageInstructions": "Install MCP Server Plugin, add configuration to VS Code or Claude Desktop, and restart",
    "category": "Development"
  },
  "ingeniux-cms": {
    "name": "Ingeniux CMS MCP Server",
    "githubLink": "https://github.com/IngeniuxCorp/ingeniux-cms-mcp-server",
    "package": "ingeniux-cms-mcp-server",
    "description": "MCP server for integrating Ingeniux CMS with Cline IDE",
    "installCommand": "npm install -g ingeniux-cms-mcp-server@latest",
    "requiredEnvVars": [
      "CMS_BASE_URL",
      "OAUTH_CLIENT_ID",
      "OAUTH_CLIENT_SECRET",
      "OAUTH_REDIRECT_URI"
    ],
    "optionalParams": [
      "API_TIMEOUT",
      "MAX_RETRIES",
      "LOG_LEVEL",
      "CACHE_TTL",
      "ENABLE_FILE_LOGGING"
    ],
    "usageInstructions": "Invoke CMS tools in Cline agent chat by mentioning 'Ingeniux CMS' and describing operations in natural language",
    "category": "API Integration"
  },
  "find-similar-github-issues": {
    "name": "GitHub Support Assistant",
    "githubLink": "https://github.com/Jake-Mok-Nelson/mcp-find-similar-github-issues",
    "package": "mcp-find-similar-github-issues",
    "description": "An MCP server that helps find similar GitHub issues to speed up troubleshooting.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "maxResults"
    ],
    "usageInstructions": "Use the 'find-similar-issues' tool with parameters: owner, repo, issueDescription, and optional maxResults.",
    "category": "Development"
  },
  "inspector-v0.6.0": {
    "name": "MCP-Inspector-v0.6.0",
    "githubLink": "https://github.com/Jehan26/MCP-Inspector-v0.6.0",
    "package": "github-mcp-server",
    "description": "An MCP server enabling AI assistants to interact with GitHub repositories, issues, and pull requests.",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "GITHUB_TOKEN"
    ],
    "optionalParams": [
      "query",
      "owner",
      "repo"
    ],
    "usageInstructions": "Run the server using 'python server.py' and interact with it using the /mcp/discover and /mcp/execute endpoints.",
    "category": "Version Control"
  },
  "markdownify-utf8": {
    "name": "Markdownify MCP Server - UTF-8 Enhanced",
    "githubLink": "https://github.com/JDJR2024/markdownify-mcp-utf8",
    "package": "markdownify-mcp-utf8",
    "description": "Enhanced version of Markdownify MCP project with improved UTF-8 encoding support and multilingual content handling",
    "installCommand": "pnpm install",
    "requiredEnvVars": [
      "PYTHONIOENCODING",
      "UV_PATH"
    ],
    "optionalParams": [
      "MARKDOWN_OUTPUT_DIR",
      "DEBUG"
    ],
    "usageInstructions": "Start server with 'pnpm start', convert files using 'python convert_utf8.py <file/url>'",
    "category": "File Management"
  },
  "linkedin": {
    "name": "LinkedIn MCP Server",
    "githubLink": "https://github.com/Hritik003/linkedin-mcp",
    "package": "@Hritik003/linkedin-mcp",
    "description": "An MCP server for LinkedIn to apply jobs and search through feed seamlessly using unofficial LinkedIn API",
    "installCommand": "npx -y @Hritik003/linkedin-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "keywords",
      "location",
      "experience level",
      "job type",
      "remote work options",
      "date posted",
      "required skills",
      "search limit"
    ],
    "usageInstructions": "Use MCP-client to test the server, configure local path and run linkedin.py",
    "category": "API Integration"
  },
  "command-proxy": {
    "name": "MCP Command Proxy",
    "githubLink": "https://github.com/Hormold/mcp-command-proxy",
    "package": "mcp-command-proxy",
    "description": "An MCP server that acts as a proxy for CLI commands, specifically designed for Expo development but adaptable for any command-line application.",
    "installCommand": "npx mcp-command-proxy --prefix \"MyServer\" --command \"expo start\"",
    "requiredEnvVars": [],
    "optionalParams": [
      "--prefix",
      "--command",
      "--buffer-size",
      "--port"
    ],
    "usageInstructions": "Run 'npx mcp-command-proxy --prefix \"MyServer\" --command \"expo start\"' to start the server, then configure Cursor to connect to it.",
    "category": "Development"
  },
  "readwise": {
    "name": "Readwise MCP Server",
    "githubLink": "https://github.com/IAmAlexander/readwise-mcp",
    "package": "readwise-mcp",
    "description": "An MCP server for accessing and interacting with your Readwise library, providing features like highlight retrieval and search functionality.",
    "installCommand": "npm install -g readwise-mcp",
    "requiredEnvVars": [
      "READWISE_API_KEY"
    ],
    "optionalParams": [
      "transport",
      "port",
      "debug"
    ],
    "usageInstructions": "Start with stdio transport (default): readwise-mcp, or with SSE transport: readwise-mcp --transport sse --port 3000",
    "category": "API Integration"
  },
  "resend": {
    "name": "Resend MCP Server",
    "githubLink": "https://github.com/Hawstein/resend-mcp",
    "package": "resend-mcp",
    "description": "MCP server for Resend API to compose and send emails",
    "installCommand": "npx -y resend-mcp",
    "requiredEnvVars": [
      "RESEND_API_KEY",
      "SENDER_EMAIL_ADDRESS"
    ],
    "optionalParams": [
      "from",
      "replyTo",
      "scheduledAt",
      "attachments"
    ],
    "usageInstructions": "Configure environment variables and use send_email tool",
    "category": "Communication"
  },
  "dingdingbot": {
    "name": "DingDing Bot MCP Server",
    "githubLink": "https://github.com/HundunOnline/mcp-dingdingbot-server",
    "package": "mcp-dingdingbot-server",
    "description": "An MCP server that sends various types of messages to DingDing group robots",
    "installCommand": "git clone https://github.com/HundunOnline/mcp-dingdingbot-server.git && cd mcp-dingdingbot-server && make build && sudo ln -s $PWD/dist/mcp-dingdingbot-server_xxx_xxxx /usr/local/bin/mcp-dingdingbot-server",
    "requiredEnvVars": [
      "DINGDING_BOT_WEBHOOK_KEY"
    ],
    "optionalParams": [
      "DINGDING_BOT_SIGN_KEY"
    ],
    "usageInstructions": "Use commands like send_text, send_markdown, send_image, send_news, send_template_card, upload_file to interact with DingDing",
    "category": "Communication"
  },
  "handwriting-ocr": {
    "name": "Handwriting OCR MCP Server",
    "githubLink": "https://github.com/Handwriting-OCR/handwriting-ocr-mcp-server",
    "package": "@Handwriting-OCR/handwriting-ocr-mcp-server",
    "description": "MCP Server for Handwriting OCR API, enabling image and PDF document transcription",
    "installCommand": "npx -y @smithery/cli install @Handwriting-OCR/handwriting-ocr-mcp-server --client claude",
    "requiredEnvVars": [
      "API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Set API_TOKEN environment variable and install via Smithery or manually configure for Claude Desktop",
    "category": "API Integration"
  },
  "matter-ai": {
    "name": "Matter AI MCP Server",
    "githubLink": "https://github.com/GravityCloudAI/matter-ai-mcp",
    "package": "matter-ai-mcp",
    "description": "Matter AI MCP Server provides code review capabilities and implementation planning for AI agents in IDEs",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "MATTER_AI_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server using 'python server.py' and connect to http://localhost:9000/sse",
    "category": "Development"
  },
  "hana": {
    "name": "HANA Cloud MCP Server",
    "githubLink": "https://github.com/HatriGt/hana-mcp-server",
    "package": "hana-mcp-server",
    "description": "MCP server implementation for SAP HANA Cloud DB integration with Cursor IDE, providing model registry, context management, and protocol adapters.",
    "installCommand": "git clone https://github.com/HatriGt/hana-mcp-server.git && cd hana-mcp-server && python -m venv venv && source venv/bin/activate && pip install -r requirements.txt && python setup.py",
    "requiredEnvVars": [
      "HANA_HOST",
      "HANA_PORT",
      "HANA_USER",
      "HANA_PASSWORD"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure environment variables in .env file, then run setup script to configure HANA Cloud connection and server settings.",
    "category": "Database"
  },
  "terminal-controller": {
    "name": "Terminal Controller for MCP",
    "githubLink": "https://github.com/GongRzhe/terminal-controller-mcp",
    "package": "terminal-controller",
    "description": "An MCP server enabling secure terminal command execution and file system operations through a standardized interface.",
    "installCommand": "pip install terminal-controller",
    "requiredEnvVars": [
      "Python3.11+",
      "MCP-compatible client"
    ],
    "optionalParams": [
      "UV/UVX installation"
    ],
    "usageInstructions": "Configure Claude Desktop or other MCP clients to use the server, then interact using natural language commands.",
    "category": "Development"
  },
  "yolo": {
    "name": "YOLO MCP Service",
    "githubLink": "https://github.com/GongRzhe/YOLO-MCP-Server",
    "package": "yolo-mcp-service",
    "description": "A powerful YOLO computer vision service integrating with Claude AI through Model Context Protocol (MCP) for object detection, segmentation, and classification.",
    "installCommand": "git clone https://github.com/GongRzhe/YOLO-MCP-Server.git . && python setup.py",
    "requiredEnvVars": [],
    "optionalParams": [
      "model_name",
      "confidence",
      "image_path",
      "dataset_path",
      "epochs"
    ],
    "usageInstructions": "1. Clone repository and run setup.py. 2. Download YOLO models. 3. Configure Claude using the generated MCP configuration.",
    "category": "Media"
  },
  "redis": {
    "name": "Redis MCP Server",
    "githubLink": "https://github.com/GongRzhe/REDIS-MCP-Server",
    "package": "@gongrzhe/server-redis-mcp",
    "description": "A Redis Model Context Protocol (MCP) server implementation for interacting with Redis databases through standardized tools.",
    "installCommand": "npx -y @smithery/cli install @gongrzhe/server-redis-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "redis://your-redis-host:port"
    ],
    "usageInstructions": "Run using 'npx @gongrzhe/server-redis-mcp@1.0.0 redis://your-redis-host:port' or install globally with 'npm install -g @gongrzhe/server-redis-mcp@1.0.0'",
    "category": "Database"
  },
  "audio": {
    "name": "Audio MCP Server",
    "githubLink": "https://github.com/GongRzhe/Audio-MCP-Server",
    "package": "@GongRzhe/Audio-MCP-Server",
    "description": "An MCP server providing audio input/output capabilities for AI assistants",
    "installCommand": "npx -y @smithery/cli install @GongRzhe/Audio-MCP-Server --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "duration",
      "sample_rate",
      "channels",
      "device_index",
      "text",
      "voice",
      "file_path"
    ],
    "usageInstructions": "Restart Claude Desktop after setup, then use commands like 'list audio devices' or 'record 5 seconds of audio'",
    "category": "Media"
  },
  "dubco": {
    "name": "Dub.co MCP Server",
    "githubLink": "https://github.com/Gitmaxd/dubco-mcp-server",
    "package": "dubco-mcp-server",
    "description": "An MCP server for interacting with the Dub.co link shortener API, allowing AI agents to create, update, and manage short links.",
    "installCommand": "npm install -g dubco-mcp-server",
    "requiredEnvVars": [
      "DUBCO_API_KEY"
    ],
    "optionalParams": [
      "url",
      "key",
      "domain",
      "externalId",
      "linkId"
    ],
    "usageInstructions": "Once installed and configured, the MCP server provides tools to AI agents to create, update, upsert, and delete short links on Dub.co.",
    "category": "API Integration"
  },
  "keitaro": {
    "name": "Keitaro TDS API MCP Plugin",
    "githubLink": "https://github.com/GodzillaDancer/keitaro-mcp",
    "package": "mcp-keitaro-tds",
    "description": "MCP server for integration with Keitaro TDS API, providing tools to work with campaigns, streams, offers, and other Keitaro entities.",
    "installCommand": "npm install -g mcp-keitaro-tds",
    "requiredEnvVars": [
      "KEITARO_API_URL",
      "KEITARO_API_KEY"
    ],
    "optionalParams": [
      "limit",
      "page",
      "search",
      "name",
      "type",
      "cost_type",
      "cost_value",
      "group_id",
      "state",
      "traffic_source_id",
      "from",
      "to",
      "group",
      "filters"
    ],
    "usageInstructions": "Launch Cursor, open command palette, find 'Keitaro' and select it to use the Keitaro API through Cursor.",
    "category": "API Integration"
  },
  "for-mas-developments": {
    "name": "privateGPT MCP Server",
    "githubLink": "https://github.com/Fujitsu-AI/MCP-Server-for-MAS-Developments",
    "package": "privategpt-mcp-server",
    "description": "An MCP server implementation that integrates privateGPT with MCP clients",
    "installCommand": "npm install privategpt-mcp-server",
    "requiredEnvVars": [
      "SERVER_PORT",
      "SSL_VALIDATION",
      "ENABLE_LOGIN"
    ],
    "optionalParams": [
      "PROXY_CONFIG",
      "LOG_IP",
      "ANONYMOUS_MODE"
    ],
    "usageInstructions": "Configure environment variables, then run the server",
    "category": "API Integration"
  },
  "leantool": {
    "name": "LeanTool",
    "githubLink": "https://github.com/GasStationManager/LeanTool",
    "package": "leantool",
    "description": "Utility connecting LLMs with Lean code interpreter for syntax correction and interactive features",
    "installCommand": "poetry install",
    "requiredEnvVars": [
      "OPENAI_API_KEY",
      "ANTHROPIC_API_KEY",
      "OPENROUTER_API_KEY"
    ],
    "optionalParams": [
      "model_name"
    ],
    "usageInstructions": "Run `poetry run python lean-api-server-flask.py` to launch API server",
    "category": "Development"
  },
  "focus": {
    "name": "Focus Data MCP Server",
    "githubLink": "https://github.com/FocusSearch/focus",
    "package": "focus_mcp_data",
    "description": "An MCP server enabling AI assistants to query data results from DataFocus using natural language.",
    "installCommand": "git clone https://github.com/FocusSearch/focus_mcp_data.git && cd focus_mcp_data && gradle clean && gradle bootJar",
    "requiredEnvVars": [
      "bearer"
    ],
    "optionalParams": [
      "name",
      "language",
      "chatId",
      "input"
    ],
    "usageInstructions": "Configure the MCP server in your settings file, then use tools like tableList, gptText2DataInit, and gptText2DataData to interact with DataFocus.",
    "category": "Data Storage"
  },
  "math": {
    "name": "Math-MCP Server",
    "githubLink": "https://github.com/EthanHenrickson/math-mcp",
    "package": "@EthanHenrickson/math-mcp",
    "description": "Provides basic mathematical and statistical functions to Large Language Models through a simple API.",
    "installCommand": "npx -y @smithery/cli install @EthanHenrickson/math-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Clone the repository, add the server to your MCP configuration file with the command 'node' and args pointing to the index.js file in the build directory.",
    "category": "Productivity"
  },
  "systemprompt-notion": {
    "name": "SystemPrompt MCP Notion Server",
    "githubLink": "https://github.com/Ejb503/systemprompt-mcp-notion",
    "package": "systemprompt-mcp-notion",
    "description": "A high-performance MCP server integrating Notion into AI workflows, enabling AI agents to interact with Notion pages and databases.",
    "installCommand": "npx -y @smithery/cli install systemprompt-mcp-notion --client claude",
    "requiredEnvVars": [
      "SYSTEMPROMPT_API_KEY",
      "NOTION_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Create a .env file with SYSTEMPROMPT_API_KEY and NOTION_API_KEY, then configure MCP client to use the server.",
    "category": "Productivity"
  },
  "systemprompt-gmail": {
    "name": "Systemprompt MCP Gmail Server",
    "githubLink": "https://github.com/Ejb503/systemprompt-mcp-gmail",
    "package": "systemprompt-mcp-gmail",
    "description": "MCP server for Gmail integration, enabling email search, read, delete, and send operations through AI agent interactions",
    "installCommand": "npx systemprompt-mcp-gmail",
    "requiredEnvVars": [
      "GOOGLE_CREDENTIALS",
      "GOOGLE_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Set GOOGLE_CREDENTIALS and GOOGLE_TOKEN environment variables, then run with npx",
    "category": "Communication"
  },
  "systemprompt-interview": {
    "name": "Systemprompt MCP Interview Server",
    "githubLink": "https://github.com/Ejb503/systemprompt-mcp-interview",
    "package": "systemprompt-mcp-interview",
    "description": "MCP server for AI-powered interview roleplay scenarios with real-time feedback and customizable interview scenarios",
    "installCommand": "npx systemprompt-mcp-interview",
    "requiredEnvVars": [
      "API_KEY"
    ],
    "optionalParams": [
      "CV_URI",
      "INTERVIEW_CONFIG"
    ],
    "usageInstructions": "Connect the MCP server in systemprompt.io console, add CV, configure interview, and activate agent",
    "category": "Productivity"
  },
  "sketchfab": {
    "name": "Sketchfab MCP Server",
    "githubLink": "https://github.com/Eddydpyl/sketchfab",
    "package": "sketchfab-mcp",
    "description": "A microservice for interacting with the Sketchfab API using MCP",
    "installCommand": "uvx sketchfab-mcp",
    "requiredEnvVars": [
      "SKETCHFAB_API_TOKEN"
    ],
    "optionalParams": [],
    "usageInstructions": "Create a Sketchfab account, obtain your API token, and run with 'env SKETCHFAB_API_TOKEN=your_token uvx sketchfab-mcp'",
    "category": "API Integration"
  },
  "cloudflare-github-backup": {
    "name": "Cloudflare to GitHub Backup MCP Server",
    "githubLink": "https://github.com/DynamicEndpoints/cloudflare-github-backup-mcp",
    "package": "@DynamicEndpoints/cloudflare-github-backup-mcp",
    "description": "An MCP server that backs up Cloudflare projects to a GitHub repository.",
    "installCommand": "npx -y @smithery/cli install @DynamicEndpoints/cloudflare-github-backup-mcp --client claude",
    "requiredEnvVars": [
      "CLOUDFLARE_API_TOKEN",
      "GITHUB_ACCESS_TOKEN",
      "GITHUB_REPO_NAME"
    ],
    "optionalParams": [],
    "usageInstructions": "Start the MCP server by restarting the VS Code extension, then use the 'use_mcp_tool' tool to call the 'backup_projects' tool.",
    "category": "API Integration"
  },
  "huntress": {
    "name": "Huntress API MCP Server",
    "githubLink": "https://github.com/DynamicEndpoints/huntress-mcp-server",
    "package": "huntress-mcp-server",
    "description": "An MCP server providing programmatic access to Huntress API functionality including account management, organization management, and incident reports.",
    "installCommand": "npx -y @smithery/cli install huntress-mcp-server --client claude",
    "requiredEnvVars": [
      "HUNTRESS_API_KEY",
      "HUNTRESS_API_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure MCP settings with server command and environment variables, then use available tools like get_account_info, list_organizations, and list_agents.",
    "category": "API Integration"
  },
  "pocketbase": {
    "name": "Advanced PocketBase MCP Server",
    "githubLink": "https://github.com/DynamicEndpoints/pocketbase-mcp-server",
    "package": "pocketbase-mcp-server",
    "description": "A comprehensive MCP server for advanced PocketBase database operations and schema management",
    "installCommand": "npx -y pocketbase-mcp-server",
    "requiredEnvVars": [
      "CLOUDFLARE_ACCOUNT_ID",
      "CLOUDFLARE_API_TOKEN"
    ],
    "optionalParams": [
      "--prod",
      "--debug"
    ],
    "usageInstructions": "Deploy using Cloudflare Workers or traditional Node.js server, configure environment variables as needed",
    "category": "Database"
  },
  "alphavantagemcpserver": {
    "name": "Alphavantage MCP Server",
    "githubLink": "https://github.com/DonMorr/AlphavantageMCPServer",
    "package": "alphavantage-mcp-server",
    "description": "MCP server for Alphavantage stock market data API",
    "installCommand": "npx -y alphavantage-mcp-server",
    "requiredEnvVars": [
      "ALPHAVANTAGE_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure in claude_desktop_config.json with ALPHAVANTAGE_API_KEY",
    "category": "API Integration"
  },
  "docswrite": {
    "name": "Docswrite MCP Server",
    "githubLink": "https://github.com/Docswrite/docswrite-mcp",
    "package": "docswrite-mcp",
    "description": "Server providing tools for Google Docs, Google Drive, and WordPress integration through Docswrite",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "docswriteToken"
    ],
    "optionalParams": [
      "title",
      "slug",
      "tags",
      "categories",
      "state",
      "author",
      "date",
      "excerpt",
      "post_type",
      "featured_image_url",
      "featured_image_alt_text",
      "featured_image_caption",
      "export_settings",
      "newspack_settings",
      "yoast_settings",
      "rankmath_settings"
    ],
    "usageInstructions": "Run the server with your Docswrite token: node dist/index.js --docswriteToken=your-docswrite-token",
    "category": "API Integration"
  },
  "apple": {
    "name": "Apple MCP Server",
    "githubLink": "https://github.com/Dhravya/apple-mcp",
    "package": "@Dhravya/apple-mcp",
    "description": "Apple-native tools for the MCP protocol, enabling interactions with Apple apps like Messages, Notes, Contacts, and more",
    "installCommand": "npx -y @smithery/cli@latest install @Dhravya/apple-mcp --client claude",
    "requiredEnvVars": [],
    "optionalParams": [
      "--client"
    ],
    "usageInstructions": "Ask Claude to use the apple-mcp tool with commands like 'send a message to John Doe' or 'create a reminder to Buy groceries for tomorrow at 5pm'",
    "category": "Productivity"
  },
  "automated-bod-25-01-cisa-microsoft-policies": {
    "name": "CISA M365 MCP Server",
    "githubLink": "https://github.com/DynamicEndpoints/Automated-BOD-25-01-CISA-Microsoft-Policies-MCP",
    "package": "@smithery/cli",
    "description": "MCP server implementing CISA BOD25-01 security controls for Microsoft365",
    "installCommand": "npx -y @smithery/cli install cisa-m365",
    "requiredEnvVars": [
      "TENANT_ID",
      "CLIENT_ID",
      "CLIENT_SECRET"
    ],
    "optionalParams": [
      "userIds"
    ],
    "usageInstructions": "Use tools like block_legacy_auth, enforce_phishing_resistant_mfa, configure_global_admins, get_policy_status",
    "category": "Security"
  },
  "paypal": {
    "name": "PayPal MCP Server",
    "githubLink": "https://github.com/DynamicEndpoints/Paypal-MCP",
    "package": "@DynamicEndpoints/Paypal-MCP",
    "description": "MCP server providing integration with PayPal's APIs for payment processing, invoicing, and business management",
    "installCommand": "npx -y @smithery/cli install @DynamicEndpoints/Paypal-MCP --client claude",
    "requiredEnvVars": [
      "PAYPAL_CLIENT_ID",
      "PAYPAL_CLIENT_SECRET"
    ],
    "optionalParams": [],
    "usageInstructions": "Use MCP client to call tools like create_order, create_invoice, create_payout",
    "category": "API Integration"
  },
  "netlify": {
    "name": "Netlify MCP Server",
    "githubLink": "https://github.com/DynamicEndpoints/Netlify-MCP-Server",
    "package": "@DynamicEndpoints/Netlify-MCP-Server",
    "description": "MCP server providing comprehensive access to Netlify CLI features through MCP SDK.",
    "installCommand": "npx -y @DynamicEndpoints/Netlify-MCP-Server",
    "requiredEnvVars": [
      "NETLIFY_AUTH_TOKEN"
    ],
    "optionalParams": [
      "site_id",
      "api_endpoint"
    ],
    "usageInstructions": "Run with 'npx @DynamicEndpoints/Netlify-MCP-Server' and configure using environment variables.",
    "category": "API Integration"
  },
  "meta": {
    "name": "Meta MCP Server",
    "githubLink": "https://github.com/DMontgomery40/meta-mcp-server",
    "package": "meta-mcp-server",
    "description": "An MCP server that generates customized MCP servers with dynamic file management and error handling.",
    "installCommand": "npx -y meta-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure in Claude Desktop using the provided command and args, or run using 'npx -y meta-mcp-server'",
    "category": "Development"
  },
  "3d-printer": {
    "name": "MCP 3D Printer Server",
    "githubLink": "https://github.com/DMontgomery40/mcp-3D-printer-server",
    "package": "mcp-3d-printer-server",
    "description": "An MCP server for connecting Claude with various 3D printer management systems",
    "installCommand": "npx mcp-3d-printer-server",
    "requiredEnvVars": [
      "BAMBU_STUDIO_CONFIG_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Run the server using 'npx mcp-3d-printer-server', configure environment variables as needed",
    "category": "API Integration"
  },
  "schemaflow": {
    "name": "SchemaFlow MCP Server",
    "githubLink": "https://github.com/CryptoRadi/schemaflow-mcp-server",
    "package": "schemaflow-mcp-server",
    "description": "Provides real-time access to PostgreSQL and Supabase database schemas through Model Context Protocol for AI-IDEs.",
    "installCommand": "npx schemaflow-mcp-server",
    "requiredEnvVars": [
      "MCP_TOKEN"
    ],
    "optionalParams": [
      "query_type"
    ],
    "usageInstructions": "Configure in AI-IDE settings using provided URL and token from SchemaFlow dashboard",
    "category": "Database"
  },
  "canvas-lms": {
    "name": "Canvas MCP Server",
    "githubLink": "https://github.com/DMontgomery40/mcp-canvas-lms",
    "package": "canvas-mcp-server",
    "description": "A comprehensive Model Context Protocol (MCP) server for Canvas LMS with complete student, instructor, and account administration functionality",
    "installCommand": "npm install -g canvas-mcp-server",
    "requiredEnvVars": [
      "CANVAS_API_TOKEN",
      "CANVAS_DOMAIN"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure environment variables CANVAS_API_TOKEN and CANVAS_DOMAIN, then run 'canvas-mcp-server'",
    "category": "API Integration"
  },
  "hal": {
    "name": "HAL (HTTP API Layer)",
    "githubLink": "https://github.com/DeanWard/HAL",
    "package": "hal-mcp",
    "description": "MCP server providing HTTP API capabilities to Large Language Models with secure secret management and OpenAPI/Swagger integration",
    "installCommand": "npx hal-mcp",
    "requiredEnvVars": [
      "HAL_SWAGGER_FILE",
      "HAL_API_BASE_URL"
    ],
    "optionalParams": [
      "HAL_SECRET_*",
      "HAL_ALLOW_*",
      "HAL_WHITELIST_URLS",
      "HAL_BLACKLIST_URLS"
    ],
    "usageInstructions": "Start the HAL server with 'npx hal-mcp' or configure it with environment variables for Swagger/OpenAPI integration and secret management",
    "category": "API Integration"
  },
  "coresignal": {
    "name": "Coresignal MCP Server",
    "githubLink": "https://github.com/Coresignal-com/coresignal-mcp",
    "package": "mcp-remote",
    "description": "Enables integration of Coresignal's B2B data with AI-powered applications",
    "installCommand": "npx mcp-remote https://mcp.coresignal.com/sse --header apikey:${APIKEY_VALUE}",
    "requiredEnvVars": [
      "APIKEY_VALUE"
    ],
    "optionalParams": [],
    "usageInstructions": "Connect to https://mcp.coresignal.com/sse using mcp-remote with API key",
    "category": "API Integration"
  },
  "time-local": {
    "name": "Time MCP Server",
    "githubLink": "https://github.com/ConechoAI/time-mcp-local",
    "package": "time-mcp-local",
    "description": "A Model Context Protocol server providing time and timezone conversion capabilities",
    "installCommand": "pip install time-mcp-local",
    "requiredEnvVars": [],
    "optionalParams": [
      "--local-timezone"
    ],
    "usageInstructions": "Run using 'python -m time-mcp-local' after installation",
    "category": "Productivity"
  },
  "openai-websearch": {
    "name": "OpenAI WebSearch MCP Server",
    "githubLink": "https://github.com/ConechoAI/openai-websearch-mcp",
    "package": "openai-websearch-mcp",
    "description": "MCP server providing OpenAI websearch functionality for AI assistants",
    "installCommand": "pip install openai-websearch-mcp",
    "requiredEnvVars": [
      "OPENAI_API_KEY"
    ],
    "optionalParams": [
      "search_context_size",
      "user_location"
    ],
    "usageInstructions": "Configure with Claude or Zed settings, providing OPENAI_API_KEY",
    "category": "API Integration"
  },
  "chronulus": {
    "name": "Chronulus MCP Server",
    "githubLink": "https://github.com/ChronulusAI/chronulus-mcp",
    "package": "chronulus-mcp",
    "description": "MCP Server for Chronulus AI Forecasting & Prediction Agents",
    "installCommand": "pip install chronulus-mcp",
    "requiredEnvVars": [
      "CHRONULUS_API_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure Claude desktop client with Chronulus MCP Server",
    "category": "API Integration"
  },
  "ebaymcpserver": {
    "name": "Ebay MCP Server",
    "githubLink": "https://github.com/CooKey-Monster/EbayMcpServer",
    "package": "git+https://github.com/CooKey-Monster/EbayMcpServer.git",
    "description": "Simple Ebay server for fetching auctions from Ebay.com",
    "installCommand": "uv pip install git+https://github.com/CooKey-Monster/EbayMcpServer.git",
    "requiredEnvVars": [
      "CLIENT_ID",
      "CLIENT_SECRET"
    ],
    "optionalParams": [
      "amount"
    ],
    "usageInstructions": "Use prompts like 'Find me 10 auctions for batman comics'",
    "category": "Web Scraping"
  },
  "codealive": {
    "name": "CodeAlive MCP Server",
    "githubLink": "https://github.com/CodeAlive-AI/codealive-mcp",
    "package": "@CodeAlive-AI/codealive-mcp",
    "description": "MCP server providing enriched context from codebases for AI clients",
    "installCommand": "npx -y @smithery/cli install @CodeAlive-AI/codealive-mcp --client claude",
    "requiredEnvVars": [
      "CODEALIVE_API_KEY"
    ],
    "optionalParams": [
      "--transport",
      "--host",
      "--port",
      "--debug"
    ],
    "usageInstructions": "Configure AI clients like Claude Desktop or VS Code with GitHub Copilot to use CodeAlive MCP",
    "category": "Development"
  },
  "keycloak-model-context-protocol": {
    "name": "Keycloak MCP Server",
    "githubLink": "https://github.com/ChristophEnglisch/keycloak-model-context-protocol",
    "package": "keycloak-model-context-protocol",
    "description": "A Model Context Protocol server for Keycloak administration, providing tools to manage users and realms.",
    "installCommand": "npx -y keycloak-model-context-protocol",
    "requiredEnvVars": [
      "KEYCLOAK_URL",
      "KEYCLOAK_ADMIN",
      "KEYCLOAK_ADMIN_PASSWORD"
    ],
    "optionalParams": [
      "realm",
      "username",
      "email",
      "firstName",
      "lastName",
      "userId"
    ],
    "usageInstructions": "Configure the server in your Claude Desktop configuration file with required environment variables and use available tools like create-user, delete-user, list-realms, and list-users.",
    "category": "Security"
  },
  "blog": {
    "name": "MCP Blog Upload Service",
    "githubLink": "https://github.com/Carrie-L/blog",
    "package": "blog",
    "description": "Automatically copies and processes Markdown files from Obsidian to a specified directory and pushes changes to GitHub",
    "installCommand": "npx -y blog",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Trigger with 'blog+article name' to copy and process the specified Markdown file",
    "category": "Productivity"
  },
  "python-jira": {
    "name": "Python Jira MCP Server",
    "githubLink": "https://github.com/Chase-Bullock/python-jira-mcp",
    "package": "python-jira-mcp",
    "description": "An MCP server implementation in Python that integrates with Jira API, allowing AI models to interact with Jira through a standardized protocol.",
    "installCommand": "pip install -r requirements.txt",
    "requiredEnvVars": [
      "Jira API token",
      "Jira email",
      "Jira domain"
    ],
    "optionalParams": [
      "max_results",
      "fields",
      "expand"
    ],
    "usageInstructions": "Run 'python main.py' to start the server, then configure the MCP server path in Cursor to point to 'main.py'",
    "category": "API Integration"
  },
  "memorymesh": {
    "name": "MemoryMesh",
    "githubLink": "https://github.com/CheMiguel23/MemoryMesh",
    "package": "memorymesh",
    "description": "A knowledge graph server for AI models, particularly suited for text-based RPGs and interactive storytelling.",
    "installCommand": "npx -y memorymesh",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Place schema files in dist/data/schemas directory and use the SchemaManager tool for creation and editing.",
    "category": "Data Storage"
  },
  "obsidian-jsoncanvas": {
    "name": "JSON Canvas MCP Server",
    "githubLink": "https://github.com/Cam10001110101/mcp-server-obsidian-jsoncanvas",
    "package": "mcp-server-jsoncanvas",
    "description": "MCP server for creating, modifying, and validating JSON Canvas files according to the official specification.",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "OUTPUT_PATH",
      "FORMAT"
    ],
    "usageInstructions": "Configure OUTPUT_PATH and FORMAT as needed, then use the provided Python API to create and manipulate canvases.",
    "category": "Productivity"
  },
  "outlook-email": {
    "name": "Email Processing MCP Server",
    "githubLink": "https://github.com/Cam10001110101/mcp-server-outlook-email",
    "package": "mcp-server-outlook-email",
    "description": "MCP server for processing Outlook emails with MongoDB integration for semantic search and SQLite storage",
    "installCommand": "uv pip install -e . && uv pip install fastmcp",
    "requiredEnvVars": [
      "MONGODB_URI",
      "SQLITE_DB_PATH",
      "EMBEDDING_BASE_URL",
      "EMBEDDING_MODEL",
      "COLLECTION_NAME"
    ],
    "optionalParams": [
      "PROCESS_DELETED_ITEMS",
      "LLM_MODEL"
    ],
    "usageInstructions": "Configure environment variables, activate virtual environment, and add server configuration to Claude for Desktop config file",
    "category": "Communication"
  },
  "prometheus": {
    "name": "Prometheus MCP Server",
    "githubLink": "https://github.com/CaesarYangs/prometheus",
    "package": "@CaesarYangs/prometheus_mcp_server",
    "description": "An MCP server for retrieving and analyzing data from Prometheus databases, enabling LLMs to invoke tool functions for metric data retrieval and analysis.",
    "installCommand": "npx -y @smithery/cli install @CaesarYangs/prometheus_mcp_server --client claude",
    "requiredEnvVars": [
      "PROMETHEUS_HOST"
    ],
    "optionalParams": [],
    "usageInstructions": "Set PROMETHEUS_HOST environment variable and run using 'uv --directory /path/to/prometheus_mcp_server run server.py'",
    "category": "Analytics"
  },
  "maigret": {
    "name": "Maigret MCP Server",
    "githubLink": "https://github.com/BurtTheCoder/mcp-maigret",
    "package": "mcp-maigret",
    "description": "An MCP server for maigret, a powerful OSINT tool that collects user account information from various public sources",
    "installCommand": "npm install -g mcp-maigret",
    "requiredEnvVars": [
      "MAIGRET_REPORTS_DIR"
    ],
    "optionalParams": [
      "format",
      "use_all_sites",
      "tags",
      "url"
    ],
    "usageInstructions": "Use the search_username or parse_url tools with required parameters, optionally specifying output format and site filters",
    "category": "OSINT"
  },
  "virustotal": {
    "name": "VirusTotal MCP Server",
    "githubLink": "https://github.com/BurtTheCoder/mcp-virustotal",
    "package": "@burtthecoder/mcp-virustotal",
    "description": "An MCP server for querying VirusTotal API, providing comprehensive security analysis tools",
    "installCommand": "npx -y @smithery/cli install @burtthecoder/mcp-virustotal --client claude",
    "requiredEnvVars": [
      "VIRUSTOTAL_API_KEY"
    ],
    "optionalParams": [
      "relationships",
      "limit",
      "cursor"
    ],
    "usageInstructions": "Install via Smithery or manually using npm, then configure Claude Desktop",
    "category": "Security"
  },
  "cursor": {
    "name": "Cursor MCP - Claude Desktop Integration",
    "githubLink": "https://github.com/Buga-luga/cursor-mcp",
    "package": "mcp-cursor",
    "description": "MCP implementation for seamless integration between Claude AI and desktop applications through Cursor IDE",
    "installCommand": "npx -y @smithery/cli install cursor-mcp-tool --client claude",
    "requiredEnvVars": [
      "DEFAULT_WORKSPACE_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Create .env file with DEFAULT_WORKSPACE_PATH, add to Claude's MCP configuration, and start server with 'mcp-cursor'",
    "category": "Development"
  },
  "watch": {
    "name": "Server Watch MCP",
    "githubLink": "https://github.com/BrennerSpear/server-watch-mcp",
    "package": "server-watch-mcp",
    "description": "A CLI wrapper that monitors command output and exposes it as an MCP server, useful for development workflows and log monitoring",
    "installCommand": "npm install -g server-watch-mcp",
    "requiredEnvVars": [],
    "optionalParams": [
      "command to monitor"
    ],
    "usageInstructions": "Start the server with 'server-watch-mcp <command>', then use MCP tools like 'get_logs' and 'search_logs' in Claude",
    "category": "Development"
  },
  "shodan": {
    "name": "Shodan MCP Server",
    "githubLink": "https://github.com/BurtTheCoder/mcp-shodan",
    "package": "@burtthecoder/mcp-shodan",
    "description": "An MCP server for querying Shodan API and CVEDB, providing network intelligence and security services",
    "installCommand": "npx -y @smithery/cli install @burtthecoder/mcp-shodan --client claude",
    "requiredEnvVars": [
      "SHODAN_API_KEY"
    ],
    "optionalParams": [
      "max_results",
      "count",
      "skip",
      "limit",
      "is_kev",
      "sort_by_epss",
      "start_date",
      "end_date"
    ],
    "usageInstructions": "Install via Smithery or manually using npm, then configure Claude Desktop with the server details",
    "category": "Security"
  },
  "bracketbot": {
    "name": "Multi-Robot Control MCP Agent",
    "githubLink": "https://github.com/BracketBotCapstone/bracketbot-mcp",
    "package": "bracketbot-mcp",
    "description": "MCP server for controlling multiple robots via FastAPI servers",
    "installCommand": "uv pip install -e .",
    "requiredEnvVars": [],
    "optionalParams": [
      "port"
    ],
    "usageInstructions": "Start FastAPI robot control servers on different ports, Claude desktop client automatically runs MCP server",
    "category": "Robotics/Other"
  },
  "summarization-functions": {
    "name": "Summarization Functions",
    "githubLink": "https://github.com/Braffolk/mcp-summarization-functions",
    "package": "mcp-summarization-functions",
    "description": "An MCP server providing intelligent text summarization capabilities for AI workflows",
    "installCommand": "npx -y @smithery/cli install mcp-summarization-functions --client claude",
    "requiredEnvVars": [
      "PROVIDER",
      "API_KEY"
    ],
    "optionalParams": [
      "MODEL_ID",
      "PROVIDER_BASE_URL",
      "MAX_TOKENS",
      "SUMMARIZATION_CHAR_THRESHOLD",
      "SUMMARIZATION_CACHE_MAX_AGE",
      "MCP_WORKING_DIR"
    ],
    "usageInstructions": "Add the server to your MCP configuration file with required environment variables",
    "category": "Development"
  },
  "gauntlet-incept": {
    "name": "Gauntlet-Incept MCP Server",
    "githubLink": "https://github.com/Birdsmith/Gauntlet-Incept-MCP",
    "package": "gauntlet-incept",
    "description": "MCP server for generating educational content for K-8 students",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "DATABASE_URL",
      "PGPASSWORD"
    ],
    "optionalParams": [
      "PORT",
      "HOST"
    ],
    "usageInstructions": "Run 'npm run mcp' to start the MCP server",
    "category": "Education"
  },
  "code-explainer": {
    "name": "Code Explainer MCP",
    "githubLink": "https://github.com/BillDuke13/code-explainer-mcp",
    "package": "code-explainer-mcp",
    "description": "A Cloudflare Worker that analyzes and explains code with comprehensive breakdowns of structure and functionality.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "SHARED_SECRET"
    ],
    "optionalParams": [
      "language"
    ],
    "usageInstructions": "Send a POST request to your worker URL with a JSON body containing the method 'explainCode' and code to analyze.",
    "category": "Development"
  },
  "memory-custom": {
    "name": "Memory Custom MCP Server",
    "githubLink": "https://github.com/BRO3886/mcp-memory-custom",
    "package": "@BRO3886/mcp-memory-custom",
    "description": "A customized memory server for managing knowledge graphs with features like custom memory paths and timestamping",
    "installCommand": "npx -y @smithery/cli install @BRO3886/mcp-memory-custom --client claude",
    "requiredEnvVars": [
      "MEMORY_FILE_PATH"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure MEMORY_FILE_PATH, then run 'npm run build' followed by 'node dist/index.js' to start the server",
    "category": "Data Storage"
  },
  "macos": {
    "name": "macOS MCP Server",
    "githubLink": "https://github.com/Atharva-Gundawar/macOS",
    "package": "",
    "description": "MCP server for macOS functionality",
    "installCommand": "",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "",
    "category": "Other"
  },
  "python-docs": {
    "name": "Python Docs Server",
    "githubLink": "https://github.com/AnuragRai017/python-docs-server-MCP-Server",
    "package": "@AnuragRai017/python-docs-server-MCP-Server",
    "description": "An MCP server that fetches Python documentation using the Brave Search API",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "search query"
    ],
    "usageInstructions": "Add server config to Claude Desktop configuration file",
    "category": "Development"
  },
  "pushover": {
    "name": "Pushover MCP",
    "githubLink": "https://github.com/AshikNesin/pushover-mcp",
    "package": "@AshikNesin/pushover-mcp",
    "description": "An MCP server for sending notifications via Pushover.net",
    "installCommand": "npx -y pushover-mcp@latest start --token YOUR_TOKEN --user YOUR_USER",
    "requiredEnvVars": [],
    "optionalParams": [
      "title",
      "priority",
      "sound",
      "url",
      "url_title",
      "device"
    ],
    "usageInstructions": "Configure the MCP server with your Pushover token and user key, then use the 'send' tool to send notifications",
    "category": "Communication"
  },
  "database-updater": {
    "name": "Database Updater MCP Server",
    "githubLink": "https://github.com/AnuragRai017/database-updater-MCP-Server",
    "package": "database-updater-mcp-server",
    "description": "An MCP server for updating databases from CSV and Excel files, supporting multiple database types.",
    "installCommand": "npm install database-updater-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "filePath",
      "databaseType",
      "connectionString",
      "tableName"
    ],
    "usageInstructions": "Use the `update_database` tool with required parameters: filePath, databaseType, connectionString, and tableName.",
    "category": "Database"
  },
  "command": {
    "name": "MCP Command Server",
    "githubLink": "https://github.com/Andrew-Beniash/mcp-command-server",
    "package": "mcp-command-server",
    "description": "A secure Model Context Protocol server for executing system commands through LLM applications",
    "installCommand": "uv pip install mcp-command-server",
    "requiredEnvVars": [
      "ALLOWED_COMMANDS"
    ],
    "optionalParams": [],
    "usageInstructions": "Configure allowed commands by setting ALLOWED_COMMANDS environment variable, then integrate with Claude Desktop",
    "category": "Security"
  },
  "clojars": {
    "name": "Clojars MCP Server",
    "githubLink": "https://github.com/Bigsy/Clojars-MCP-Server",
    "package": "clojars-deps-server",
    "description": "An MCP server providing tools for fetching Clojars dependency information",
    "installCommand": "npx clojars-deps-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "limit"
    ],
    "usageInstructions": "Run 'npx clojars-deps-server' to start the server, then configure in Claude settings",
    "category": "Development"
  },
  "agentops": {
    "name": "AgentOps MCP Server",
    "githubLink": "https://github.com/AgentOps-AI/agentops-mcp",
    "package": "@AgentOps-AI/agentops-mcp",
    "description": "Provides access to observability and tracing data for debugging complex AI agent runs.",
    "installCommand": "npx -y @smithery/cli install @AgentOps-AI/agentops-mcp --client claude",
    "requiredEnvVars": [
      "AGENTOPS_API_KEY"
    ],
    "optionalParams": [
      "api_key",
      "trace_id",
      "span_id"
    ],
    "usageInstructions": "Add agentops-mcp to your MCP configuration file with your AgentOps API key",
    "category": "Development"
  },
  "browser-tools": {
    "name": "BrowserTools MCP",
    "githubLink": "https://github.com/AgentDeskAI/browser-tools-mcp",
    "package": "@agentdeskai/browser-tools-mcp",
    "description": "A powerful browser monitoring and interaction tool for AI-powered applications via Anthropic's Model Context Protocol",
    "installCommand": "npx @agentdeskai/browser-tools-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Install Chrome extension, run 'npx @agentdeskai/browser-tools-mcp@latest' in IDE, and 'npx @agentdeskai/browser-tools-server@latest' in new terminal",
    "category": "Browser Automation"
  },
  "nostr": {
    "name": "Nostr MCP Server",
    "githubLink": "https://github.com/AbdelStark/nostr-mcp",
    "package": "@AbdelStark/nostr-mcp",
    "description": "MCP server enabling AI models to interact with Nostr protocol",
    "installCommand": "npx -y @smithery/cli install @AbdelStark/nostr-mcp --client claude",
    "requiredEnvVars": [
      "NOSTR_RELAYS",
      "NOSTR_NSEC_KEY",
      "SERVER_MODE"
    ],
    "optionalParams": [
      "LOG_LEVEL",
      "NODE_ENV",
      "PORT"
    ],
    "usageInstructions": "npm start or npm run dev for development mode",
    "category": "Communication"
  },
  "lightning": {
    "name": "Lightning Network MCP Server",
    "githubLink": "https://github.com/AbdelStark/lightning-mcp",
    "package": "@AbdelStark/lightning-mcp",
    "description": "An MCP server enabling AI models to interact with Lightning Network and pay invoices",
    "installCommand": "npx -y @smithery/cli install @AbdelStark/lightning-mcp --client claude",
    "requiredEnvVars": [
      "BITCOIN_LNBITS_NODE_URL",
      "BITCOIN_LNBITS_ADMIN_KEY",
      "BITCOIN_LNBITS_READ_KEY"
    ],
    "optionalParams": [],
    "usageInstructions": "Start the server using 'npm run dev' for development mode or 'npm start' for production mode",
    "category": "API Integration"
  },
  "truerag": {
    "name": "TrueRAG GraphQL Policies API MCP Server",
    "githubLink": "https://github.com/Ad-Veritas/mcp-server-trueRAG",
    "package": "mcp-server-trueRAG",
    "description": "MCP server implementation for GraphQL API providing access to policies",
    "installCommand": "uv run fastmcp run server.py",
    "requiredEnvVars": [
      "GRAPHQL_API_KEY",
      "GRAPHQL_ENDPOINT"
    ],
    "optionalParams": [],
    "usageInstructions": "Add to MCP Client like Claude Desktop by configuring claude_desktop_config.json",
    "category": "API Integration"
  },
  "bitcoin": {
    "name": "₿itcoin & Lightning Network MCP Server",
    "githubLink": "https://github.com/AbdelStark/bitcoin-mcp",
    "package": "bitcoin-mcp",
    "description": "An MCP server enabling AI models to interact with Bitcoin and Lightning Network for key generation, address validation, transaction decoding, and blockchain queries.",
    "installCommand": "npx -y bitcoin-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Configure in Claude Desktop by adding 'bitcoin-mcp': { 'command': 'npx', 'args': ['-y', 'bitcoin-mcp@latest'] } in claude_desktop_config.json under 'mcpServers'",
    "category": "API Integration"
  },
  "db": {
    "name": "Database MCP Server",
    "githubLink": "https://github.com/ALX99/db-mcp",
    "package": "github.com/alx99/db-mcp/cmd/db-mcp",
    "description": "MCP server for querying multiple database systems including PostgreSQL, MySQL, and SQLite",
    "installCommand": "go install github.com/alx99/db-mcp/cmd/db-mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": [
      "-default-dsn"
    ],
    "usageInstructions": "Run 'db-mcp' command after installation",
    "category": "Database"
  },
  "multi-service": {
    "name": "Multi-Service MCP Server",
    "githubLink": "https://github.com/AdamPippert/multi-service-mcp-server",
    "package": "mcp-server",
    "description": "A modular server implementing the Model Context Protocol standard for various tools",
    "installCommand": "git clone https://github.com/AdamPippert/multi-service-mcp-server.git && cd mcp-server && pip install -r requirements.txt && npm install",
    "requiredEnvVars": [
      "SECRET_KEY",
      "GITHUB_TOKEN",
      "GITLAB_TOKEN",
      "GMAPS_API_KEY",
      "MEMORY_DB_URI",
      "PUPPETEER_HEADLESS",
      "CHROME_PATH"
    ],
    "optionalParams": [
      "DEBUG"
    ],
    "usageInstructions": "Start the server using 'python app.py' after installation and configuration",
    "category": "API Integration"
  },
  "terminal-use": {
    "name": "MCP Terminal Use",
    "githubLink": "https://github.com/AItheLab/mcp-terminal-use",
    "package": "mcp-terminal-use",
    "description": "An MCP server providing terminal access to specified directories",
    "installCommand": "npm install mcp-terminal-use",
    "requiredEnvVars": [],
    "optionalParams": [
      "ALLOWED_DIRECTORY"
    ],
    "usageInstructions": "Configure ALLOWED_DIRECTORY environment variable and add server configuration to claude_desktop_config.json",
    "category": "Development"
  },
  "mcpnotes": {
    "name": "MCP Notes Server",
    "githubLink": "https://github.com/9Ninety/MCPNotes",
    "package": "mcp-notes",
    "description": "A simple note-taking application built on the MCP protocol for AI-driven note management",
    "installCommand": "npx -y mcp-notes mcp-notes-server --dynamodb dynamodb://access_key:secret_key@region/table",
    "requiredEnvVars": [
      "AWS_ACCESS_KEY_ID",
      "AWS_SECRET_ACCESS_KEY"
    ],
    "optionalParams": [
      "--dynamodb"
    ],
    "usageInstructions": "Run 'npx -p mcp-notes mcp-notes-web-server --dynamodb dynamodb://access_key:secret_key@region/table' and navigate to http://localhost:3100",
    "category": "Productivity"
  },
  "activitywatch": {
    "name": "ActivityWatch MCP Server",
    "githubLink": "https://github.com/8bitgentleman/activitywatch-mcp-server",
    "package": "activitywatch-mcp-server",
    "description": "An MCP server connecting to ActivityWatch for time tracking data interaction",
    "installCommand": "npm install -g activitywatch-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": [
      "type",
      "includeData",
      "timeperiods",
      "query",
      "name",
      "bucketId",
      "start",
      "end",
      "limit",
      "key"
    ],
    "usageInstructions": "Configure in Claude for Desktop config file, then restart Claude",
    "category": "Productivity"
  },
  "qwen": {
    "name": "Qwen Max MCP Server",
    "githubLink": "https://github.com/66julienmartin/MCP-server-Qwen",
    "package": "@66julienmartin/mcp-server-qwen_max",
    "description": "MCP server implementation for Qwen Max language model, providing text generation with configurable parameters.",
    "installCommand": "npx -y @smithery/cli install @66julienmartin/mcp-server-qwen_max --client claude",
    "requiredEnvVars": [
      "DASHSCOPE_API_KEY"
    ],
    "optionalParams": [
      "max_tokens",
      "temperature"
    ],
    "usageInstructions": "Configure Claude Desktop to use the server, then call the 'qwen_max' tool with prompt and optional parameters.",
    "category": "API Integration"
  },
  "etherscan": {
    "name": "Etherscan Tools MCP Server",
    "githubLink": "https://github.com/5ajaki/mcp-etherscan-server",
    "package": "mcp-etherscan-server",
    "description": "MCP server providing Ethereum blockchain data through Etherscan's API, including balance checking, transaction history, and ENS resolution.",
    "installCommand": "npx -y mcp-etherscan-server",
    "requiredEnvVars": [
      "ETHERSCAN_API_KEY"
    ],
    "optionalParams": [
      "limit"
    ],
    "usageInstructions": "Start the server using 'npm start', then configure in Claude Desktop through Settings > MCP Servers > Add Server",
    "category": "API Integration"
  },
  "veri5ight": {
    "name": "Veri5ight",
    "githubLink": "https://github.com/5ajaki/veri5ight",
    "package": "veri5ight",
    "description": "An MCP server providing direct interface between Claude and Ethereum nodes for real-time token info and smart contract data.",
    "installCommand": "npm install",
    "requiredEnvVars": [
      "ETH_NODE_URL"
    ],
    "optionalParams": [],
    "usageInstructions": "Run 'npm run build' then configure Claude Desktop to use the server by pointing to the compiled index.js file.",
    "category": "Blockchain"
  },
  "make-integration-issue": {
    "name": "Make MCP Server",
    "githubLink": "https://github.com/3rzy/make-mcp-integration-issue",
    "package": "make-mcp-server",
    "description": "MCP server for Make integration with Claude Desktop",
    "installCommand": "npm install make-mcp-server",
    "requiredEnvVars": [
      "MAKE_API_TOKEN",
      "PORT"
    ],
    "optionalParams": [
      "url"
    ],
    "usageInstructions": "Run the server using 'node make-mcp-server.js'",
    "category": "API Integration"
  },
  "markdown2pdf": {
    "name": "Markdown2PDF MCP Server",
    "githubLink": "https://github.com/2b3pro/markdown2pdf-mcp",
    "package": "markdown2pdf-mcp",
    "description": "MCP server for converting Markdown documents to PDF files with syntax highlighting and custom styling",
    "installCommand": "npm install",
    "requiredEnvVars": [],
    "optionalParams": [
      "outputFilename",
      "paperFormat",
      "paperOrientation",
      "paperBorder",
      "watermark"
    ],
    "usageInstructions": "Start server with 'npm start', then use 'create_pdf_from_markdown' tool with required 'markdown' parameter",
    "category": "File Management"
  },
  "record-to-markdown": {
    "name": "Record to Markdown/Apple Notes",
    "githubLink": "https://github.com/29decibel/record-to-markdown",
    "package": "record-to-markdown",
    "description": "Records Claude conversation to markdown or Apple notes",
    "installCommand": "pip install uv && git clone https://github.com/29decibel/record-to-markdown && cd record-to-markdown && uv sync",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "After installation, configure Claude desktop with: 'uv --directory /FULL_PATH_TO/record-to-markdown run server.py'",
    "category": "Productivity",
    "prerequisites": ["Python 3.8+", "uv package manager"],
    "installationType": "local-python",
    "configExample": {
      "command": "uv",
      "args": ["--directory", "/FULL_PATH_TO/record-to-markdown", "run", "server.py"]
    }
  },
  "mcpexec": {
    "name": "MCPExec",
    "githubLink": "https://github.com/0xBruno/MCPExec",
    "package": "mcp[cli]",
    "description": "MCP server to execute local CLI commands",
    "installCommand": "uv add \"mcp[cli]\"",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Set up uv, create a Python project, install dependencies, and configure MCP server",
    "category": "Development"
  },
  "taskwarrior": {
    "name": "Taskwarrior MCP Server",
    "githubLink": "https://github.com/0xbeedao/mcp-taskwarrior",
    "package": "@0xbeedao/mcp-taskwarrior",
    "description": "An MCP server for managing tasks in Taskwarrior, providing tools to add, update, delete, and list tasks.",
    "installCommand": "npx @0xbeedao/mcp-taskwarrior",
    "requiredEnvVars": [],
    "optionalParams": [],
    "usageInstructions": "Use with an MCP client like Cursor, Goose, or Claude by specifying the path to the tasks.ts file.",
    "category": "Productivity"
  }
}