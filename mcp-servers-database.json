{
  "aws-kb-retrieval-server": {
    "name": "AWS Knowledge Base Retrieval",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/aws-kb-retrieval-server",
    "package": "@modelcontextprotocol/server-aws-kb-retrieval",
    "description": "Query AWS Knowledge Base for Bedrock",
    "installCommand": "npx @modelcontextprotocol/server-aws-kb-retrieval",
    "requiredEnvVars": ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_REGION"],
    "optionalParams": ["KNOWLEDGE_BASE_ID"],
    "usageInstructions": "Connect to AWS Bedrock Knowledge Base to retrieve information and documents",
    "category": "AWS Services"
  },
  "brave-search": {
    "name": "Brave Search",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search",
    "package": "@modelcontextprotocol/server-brave-search",
    "description": "Web search using Brave Search API",
    "installCommand": "npx @modelcontextprotocol/server-brave-search",
    "requiredEnvVars": ["BRAVE_API_KEY"],
    "optionalParams": ["SEARCH_RESULTS_LIMIT"],
    "usageInstructions": "Perform web searches using Brave's privacy-focused search engine",
    "category": "Search"
  },
  "everart": {
    "name": "EverArt",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/everart",
    "package": "@modelcontextprotocol/server-everart",
    "description": "AI image generation using EverArt",
    "installCommand": "npx @modelcontextprotocol/server-everart",
    "requiredEnvVars": ["EVERART_API_KEY"],
    "optionalParams": ["IMAGE_SIZE", "STYLE"],
    "usageInstructions": "Generate AI images using various models and styles",
    "category": "AI/ML"
  },
  "everything": {
    "name": "Everything",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/everything",
    "package": "@modelcontextprotocol/server-everything",
    "description": "Reference/test server with prompts, resources, and tools",
    "installCommand": "npx @modelcontextprotocol/server-everything",
    "requiredEnvVars": [],
    "optionalParams": ["CONFIG_PATH"],
    "usageInstructions": "Development and testing server with example implementations",
    "category": "Development"
  },
  "fetch": {
    "name": "Fetch",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/fetch",
    "package": "@modelcontextprotocol/server-fetch",
    "description": "Web content fetching and processing",
    "installCommand": "npx @modelcontextprotocol/server-fetch",
    "requiredEnvVars": [],
    "optionalParams": ["USER_AGENT", "TIMEOUT"],
    "usageInstructions": "Fetch and process web content for efficient LLM usage",
    "category": "Web Scraping"
  },
  "filesystem": {
    "name": "Filesystem",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
    "package": "@modelcontextprotocol/server-filesystem",
    "description": "Local filesystem operations",
    "installCommand": "npx @modelcontextprotocol/server-filesystem",
    "requiredEnvVars": [],
    "optionalParams": ["ALLOWED_DIRECTORIES"],
    "usageInstructions": "Read, write, and manage local files and directories",
    "category": "File Management"
  },
  "gdrive": {
    "name": "Google Drive",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/gdrive",
    "package": "@modelcontextprotocol/server-gdrive",
    "description": "Google Drive integration",
    "installCommand": "npx @modelcontextprotocol/server-gdrive",
    "requiredEnvVars": ["GOOGLE_DRIVE_CREDENTIALS"],
    "optionalParams": ["FOLDER_ID"],
    "usageInstructions": "Access and manage Google Drive files and folders",
    "category": "Cloud Storage"
  },
  "git": {
    "name": "Git",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/git",
    "package": "@modelcontextprotocol/server-git",
    "description": "Git repository operations",
    "installCommand": "npx @modelcontextprotocol/server-git",
    "requiredEnvVars": [],
    "optionalParams": ["REPOSITORY_PATH"],
    "usageInstructions": "Perform Git operations like commit, push, pull, and branch management",
    "category": "Version Control"
  },
  "github": {
    "name": "GitHub",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/github",
    "package": "@modelcontextprotocol/server-github",
    "description": "GitHub API integration",
    "installCommand": "npx @modelcontextprotocol/server-github",
    "requiredEnvVars": ["GITHUB_TOKEN"],
    "optionalParams": ["REPOSITORY_OWNER", "REPOSITORY_NAME"],
    "usageInstructions": "Interact with GitHub repositories, issues, pull requests, and more",
    "category": "Version Control"
  },
  "gitlab": {
    "name": "GitLab",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab",
    "package": "@modelcontextprotocol/server-gitlab",
    "description": "GitLab API integration",
    "installCommand": "npx @modelcontextprotocol/server-gitlab",
    "requiredEnvVars": ["GITLAB_TOKEN"],
    "optionalParams": ["GITLAB_URL", "PROJECT_ID"],
    "usageInstructions": "Manage GitLab projects, merge requests, and CI/CD pipelines",
    "category": "Version Control"
  },
  "google-maps": {
    "name": "Google Maps",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps",
    "package": "@modelcontextprotocol/server-google-maps",
    "description": "Google Maps API integration",
    "installCommand": "npx @modelcontextprotocol/server-google-maps",
    "requiredEnvVars": ["GOOGLE_MAPS_API_KEY"],
    "optionalParams": ["DEFAULT_LOCATION"],
    "usageInstructions": "Search locations, get directions, and access mapping services",
    "category": "Location Services"
  },
  "memory": {
    "name": "Memory",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/memory",
    "package": "@modelcontextprotocol/server-memory",
    "description": "Persistent memory and knowledge storage",
    "installCommand": "npx @modelcontextprotocol/server-memory",
    "requiredEnvVars": [],
    "optionalParams": ["MEMORY_FILE_PATH"],
    "usageInstructions": "Store and retrieve persistent memories across conversations",
    "category": "Data Storage"
  },
  "postgres": {
    "name": "PostgreSQL",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
    "package": "@modelcontextprotocol/server-postgres",
    "description": "PostgreSQL database integration",
    "installCommand": "npx @modelcontextprotocol/server-postgres",
    "requiredEnvVars": ["DATABASE_URL"],
    "optionalParams": ["SCHEMA_NAME"],
    "usageInstructions": "Execute SQL queries and manage PostgreSQL databases",
    "category": "Database"
  },
  "puppeteer": {
    "name": "Puppeteer",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer",
    "package": "@modelcontextprotocol/server-puppeteer",
    "description": "Web automation using Puppeteer",
    "installCommand": "npx @modelcontextprotocol/server-puppeteer",
    "requiredEnvVars": [],
    "optionalParams": ["HEADLESS", "VIEWPORT_WIDTH", "VIEWPORT_HEIGHT"],
    "usageInstructions": "Automate web browser interactions and scraping",
    "category": "Web Automation"
  },
  "redis": {
    "name": "Redis",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/redis",
    "package": "@modelcontextprotocol/server-redis",
    "description": "Redis database integration",
    "installCommand": "npx @modelcontextprotocol/server-redis",
    "requiredEnvVars": ["REDIS_URL"],
    "optionalParams": ["REDIS_PASSWORD"],
    "usageInstructions": "Manage Redis key-value store and caching operations",
    "category": "Database"
  },
  "sentry": {
    "name": "Sentry",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/sentry",
    "package": "@modelcontextprotocol/server-sentry",
    "description": "Sentry error tracking integration",
    "installCommand": "npx @modelcontextprotocol/server-sentry",
    "requiredEnvVars": ["SENTRY_DSN"],
    "optionalParams": ["SENTRY_PROJECT", "SENTRY_ORGANIZATION"],
    "usageInstructions": "Monitor and manage application errors and performance",
    "category": "Monitoring"
  },
  "sequentialthinking": {
    "name": "Sequential Thinking",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking",
    "package": "@modelcontextprotocol/server-sequentialthinking",
    "description": "Sequential thinking and reasoning tools",
    "installCommand": "npx @modelcontextprotocol/server-sequentialthinking",
    "requiredEnvVars": [],
    "optionalParams": ["THINKING_DEPTH"],
    "usageInstructions": "Enable step-by-step reasoning and problem-solving approaches",
    "category": "AI/ML"
  },
  "slack": {
    "name": "Slack",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/slack",
    "package": "@modelcontextprotocol/server-slack",
    "description": "Slack integration",
    "installCommand": "npx @modelcontextprotocol/server-slack",
    "requiredEnvVars": ["SLACK_BOT_TOKEN"],
    "optionalParams": ["SLACK_CHANNEL"],
    "usageInstructions": "Send messages and interact with Slack workspaces",
    "category": "Communication"
  },
  "sqlite": {
    "name": "SQLite",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite",
    "package": "@modelcontextprotocol/server-sqlite",
    "description": "SQLite database integration",
    "installCommand": "npx @modelcontextprotocol/server-sqlite",
    "requiredEnvVars": [],
    "optionalParams": ["DATABASE_PATH"],
    "usageInstructions": "Manage SQLite databases with SQL queries and operations",
    "category": "Database"
  },
  "time": {
    "name": "Time",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/time",
    "package": "@modelcontextprotocol/server-time",
    "description": "Time and scheduling utilities",
    "installCommand": "npx @modelcontextprotocol/server-time",
    "requiredEnvVars": [],
    "optionalParams": ["TIMEZONE"],
    "usageInstructions": "Get current time, schedule events, and manage time zones",
    "category": "Utilities"
  },
  "obsidian": {
    "name": "Obsidian",
    "githubLink": "https://github.com/calclavia/mcp-obsidian",
    "package": null,
    "description": "Read and search through Obsidian vault or Markdown notes directory",
    "installCommand": "pip install mcp-obsidian",
    "requiredEnvVars": ["OBSIDIAN_VAULT_PATH"],
    "optionalParams": ["SEARCH_DEPTH"],
    "usageInstructions": "Access and search Obsidian notes and Markdown files",
    "category": "Knowledge Management"
  },
  "spotify": {
    "name": "Spotify",
    "githubLink": "https://github.com/varunneal/spotify-mcp",
    "package": null,
    "description": "MCP server allowing LLM to play and use Spotify",
    "installCommand": "pip install spotify-mcp",
    "requiredEnvVars": ["SPOTIFY_CLIENT_ID", "SPOTIFY_CLIENT_SECRET"],
    "optionalParams": ["SPOTIFY_REDIRECT_URI"],
    "usageInstructions": "Control Spotify playback and search music",
    "category": "Entertainment"
  },
  "kubernetes": {
    "name": "Kubernetes",
    "githubLink": "https://github.com/Flux159/mcp-server-kubernetes",
    "package": null,
    "description": "Connect to Kubernetes cluster and manage pods, deployments, and services",
    "installCommand": "pip install mcp-kubernetes",
    "requiredEnvVars": ["KUBECONFIG"],
    "optionalParams": ["NAMESPACE"],
    "usageInstructions": "Manage Kubernetes resources via natural language interface",
    "category": "DevOps"
  },
  "docker": {
    "name": "Docker",
    "githubLink": "https://github.com/zueai/mcp-server-docker",
    "package": null,
    "description": "Manage Docker containers, images, and Docker Compose services",
    "installCommand": "pip install mcp-docker",
    "requiredEnvVars": [],
    "optionalParams": ["DOCKER_HOST"],
    "usageInstructions": "Control Docker containers and manage containerized applications",
    "category": "DevOps"
  },
  "aws": {
    "name": "AWS",
    "githubLink": "https://github.com/awslabs/mcp",
    "package": null,
    "description": "Specialized MCP servers bringing AWS best practices to development workflow",
    "installCommand": "pip install mcp-aws",
    "requiredEnvVars": ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_REGION"],
    "optionalParams": ["AWS_PROFILE"],
    "usageInstructions": "Interact with various AWS services and resources",
    "category": "Cloud Services"
  },
  "azure": {
    "name": "Azure",
    "githubLink": "https://github.com/Azure/azure-mcp-server",
    "package": null,
    "description": "Microsoft Azure cloud services integration",
    "installCommand": "pip install azure-mcp",
    "requiredEnvVars": ["AZURE_CLIENT_ID", "AZURE_CLIENT_SECRET", "AZURE_TENANT_ID"],
    "optionalParams": ["AZURE_SUBSCRIPTION_ID"],
    "usageInstructions": "Manage Azure resources and services",
    "category": "Cloud Services"
  },
  "notion": {
    "name": "Notion",
    "githubLink": "https://github.com/agentic-labs/mcp-notion",
    "package": null,
    "description": "Notion integration for databases, pages, and content management",
    "installCommand": "pip install mcp-notion",
    "requiredEnvVars": ["NOTION_TOKEN"],
    "optionalParams": ["DATABASE_ID"],
    "usageInstructions": "Create, read, and update Notion pages and databases",
    "category": "Productivity"
  },
  "linear": {
    "name": "Linear",
    "githubLink": "https://github.com/lxy-yz/mcp-linear",
    "package": null,
    "description": "Linear project management and issue tracking",
    "installCommand": "pip install mcp-linear",
    "requiredEnvVars": ["LINEAR_API_KEY"],
    "optionalParams": ["TEAM_ID"],
    "usageInstructions": "Manage Linear issues, projects, and team workflows",
    "category": "Project Management"
  },
  "jira": {
    "name": "Jira",
    "githubLink": "https://github.com/shankarpandala/mcp-jira",
    "package": null,
    "description": "Atlassian Jira integration for issue tracking and project management",
    "installCommand": "pip install mcp-jira",
    "requiredEnvVars": ["JIRA_URL", "JIRA_USERNAME", "JIRA_API_TOKEN"],
    "optionalParams": ["PROJECT_KEY"],
    "usageInstructions": "Create, update, and manage Jira issues and projects",
    "category": "Project Management"
  },
  "pandoc": {
    "name": "Pandoc",
    "githubLink": "https://github.com/vivekuppal/mcp-pandoc",
    "package": null,
    "description": "Document conversion using Pandoc - convert between various markup formats",
    "installCommand": "pip install mcp-pandoc",
    "requiredEnvVars": [],
    "optionalParams": ["PANDOC_PATH"],
    "usageInstructions": "Convert documents between formats like Markdown, HTML, LaTeX, Word, and more",
    "category": "Document Processing"
  },
  "mysql": {
    "name": "MySQL",
    "githubLink": "https://github.com/designcomputer/mysql_mcp_server",
    "package": null,
    "description": "MySQL database integration for queries and management",
    "installCommand": "pip install mysql-mcp-server",
    "requiredEnvVars": ["MYSQL_HOST", "MYSQL_USER", "MYSQL_PASSWORD", "MYSQL_DATABASE"],
    "optionalParams": ["MYSQL_PORT"],
    "usageInstructions": "Execute SQL queries and manage MySQL databases",
    "category": "Database"
  },
  "mongodb": {
    "name": "MongoDB",
    "githubLink": "https://github.com/ductran95/mcp-mongodb-server",
    "package": null,
    "description": "MongoDB database integration and document management",
    "installCommand": "npm install -g @ductran95/mcp-mongodb-server",
    "requiredEnvVars": ["MONGODB_URI"],
    "optionalParams": ["DATABASE_NAME"],
    "usageInstructions": "Interact with MongoDB collections and documents",
    "category": "Database"
  },
  "anthropic": {
    "name": "Anthropic",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/anthropic",
    "package": "@modelcontextprotocol/server-anthropic",
    "description": "Anthropic Claude API integration",
    "installCommand": "npx @modelcontextprotocol/server-anthropic",
    "requiredEnvVars": ["ANTHROPIC_API_KEY"],
    "optionalParams": ["MODEL_NAME"],
    "usageInstructions": "Interact with Claude AI models via API",
    "category": "AI/ML"
  },
  "discord": {
    "name": "Discord",
    "githubLink": "https://github.com/QuantGeekDev/discord-mcp",
    "package": null,
    "description": "Discord bot integration for sending messages and managing servers",
    "installCommand": "pip install discord-mcp",
    "requiredEnvVars": ["DISCORD_BOT_TOKEN"],
    "optionalParams": ["GUILD_ID", "CHANNEL_ID"],
    "usageInstructions": "Send messages, manage channels, and interact with Discord servers",
    "category": "Communication"
  },
  "cloudflare": {
    "name": "Cloudflare",
    "githubLink": "https://github.com/cloudflare/mcp-server-cloudflare",
    "package": null,
    "description": "Cloudflare API integration for DNS, Workers, and zone management",
    "installCommand": "pip install cloudflare-mcp",
    "requiredEnvVars": ["CLOUDFLARE_API_TOKEN"],
    "optionalParams": ["ZONE_ID"],
    "usageInstructions": "Manage DNS records, Workers, and Cloudflare zones",
    "category": "Cloud Services"
  },
  "elasticsearch": {
    "name": "Elasticsearch",
    "githubLink": "https://github.com/MarkBorcherding/mcp-elasticsearch",
    "package": null,
    "description": "Elasticsearch search and indexing operations",
    "installCommand": "pip install mcp-elasticsearch",
    "requiredEnvVars": ["ELASTICSEARCH_URL"],
    "optionalParams": ["USERNAME", "PASSWORD", "INDEX_NAME"],
    "usageInstructions": "Search, index, and manage Elasticsearch documents and indices",
    "category": "Search"
  },
  "uptime-kuma": {
    "name": "Uptime Kuma",
    "githubLink": "https://github.com/jerelmiller/uptime-kuma-mcp",
    "package": null,
    "description": "Uptime Kuma monitoring integration",
    "installCommand": "npm install -g uptime-kuma-mcp",
    "requiredEnvVars": ["UPTIME_KUMA_URL", "UPTIME_KUMA_USERNAME", "UPTIME_KUMA_PASSWORD"],
    "optionalParams": ["MONITOR_ID"],
    "usageInstructions": "Monitor website uptime and manage monitoring settings",
    "category": "Monitoring"
  },
  "todoist": {
    "name": "Todoist",
    "githubLink": "https://github.com/abhiz123/todoist-mcp",
    "package": null,
    "description": "Todoist task and project management integration",
    "installCommand": "pip install todoist-mcp",
    "requiredEnvVars": ["TODOIST_API_TOKEN"],
    "optionalParams": ["PROJECT_ID"],
    "usageInstructions": "Create, update, and manage Todoist tasks and projects",
    "category": "Productivity"
  },
  "google-sheets": {
    "name": "Google Sheets",
    "githubLink": "https://github.com/strowk/mcp-k8s-go",
    "package": null,
    "description": "Google Sheets integration for spreadsheet management",
    "installCommand": "pip install google-sheets-mcp",
    "requiredEnvVars": ["GOOGLE_SHEETS_API_KEY", "SPREADSHEET_ID"],
    "optionalParams": ["SHEET_NAME"],
    "usageInstructions": "Read, write, and manage Google Sheets data",
    "category": "Productivity"
  },
  "huggingface": {
    "name": "Hugging Face",
    "githubLink": "https://github.com/evalstate/mcp-huggingface",
    "package": null,
    "description": "Hugging Face model and dataset integration",
    "installCommand": "pip install huggingface-mcp",
    "requiredEnvVars": ["HUGGINGFACE_API_TOKEN"],
    "optionalParams": ["MODEL_NAME", "DATASET_NAME"],
    "usageInstructions": "Access Hugging Face models, datasets, and spaces",
    "category": "AI/ML"
  },
  "meilisearch": {
    "name": "Meilisearch",
    "githubLink": "https://github.com/blazickjp/mcp-meilisearch",
    "package": null,
    "description": "Meilisearch instant search engine integration",
    "installCommand": "pip install meilisearch-mcp",
    "requiredEnvVars": ["MEILISEARCH_URL"],
    "optionalParams": ["MEILISEARCH_KEY", "INDEX_NAME"],
    "usageInstructions": "Search, index, and manage documents with Meilisearch",
    "category": "Search"
  },
  "raycast": {
    "name": "Raycast",
    "githubLink": "https://github.com/raycast/mcp-raycast",
    "package": null,
    "description": "Raycast launcher integration and automation",
    "installCommand": "npm install -g raycast-mcp",
    "requiredEnvVars": [],
    "optionalParams": ["RAYCAST_TOKEN"],
    "usageInstructions": "Automate Raycast commands and manage launcher functionality",
    "category": "Productivity"
  },
  "neon": {
    "name": "Neon Database",
    "githubLink": "https://github.com/neondatabase/mcp-server-neon",
    "package": null,
    "description": "Neon serverless PostgreSQL database integration",
    "installCommand": "pip install neon-mcp",
    "requiredEnvVars": ["NEON_API_KEY", "DATABASE_URL"],
    "optionalParams": ["PROJECT_ID"],
    "usageInstructions": "Manage Neon databases and execute PostgreSQL queries",
    "category": "Database"
  },
  "tmux": {
    "name": "Tmux",
    "githubLink": "https://github.com/ianatha/mcp-tmux",
    "package": null,
    "description": "Terminal multiplexer tmux session management",
    "installCommand": "pip install tmux-mcp",
    "requiredEnvVars": [],
    "optionalParams": ["SESSION_NAME"],
    "usageInstructions": "Create, manage, and control tmux sessions and windows",
    "category": "Development"
  },
  "bash": {
    "name": "Bash",
    "githubLink": "https://github.com/mzxrai/mcp-bash",
    "package": null,
    "description": "Execute bash commands and scripts safely",
    "installCommand": "pip install bash-mcp",
    "requiredEnvVars": [],
    "optionalParams": ["ALLOWED_COMMANDS", "WORKING_DIRECTORY"],
    "usageInstructions": "Execute bash commands with safety restrictions",
    "category": "Development"
  },
  "terraform": {
    "name": "Terraform",
    "githubLink": "https://github.com/ianatha/mcp-terraform",
    "package": null,
    "description": "Terraform infrastructure as code management",
    "installCommand": "pip install terraform-mcp",
    "requiredEnvVars": [],
    "optionalParams": ["TERRAFORM_DIR", "STATE_FILE"],
    "usageInstructions": "Plan, apply, and manage Terraform infrastructure",
    "category": "DevOps"
  },
  "surrealdb": {
    "name": "SurrealDB",
    "githubLink": "https://github.com/surrealdb/mcp-server-surrealdb",
    "package": null,
    "description": "SurrealDB multi-model database integration",
    "installCommand": "pip install surrealdb-mcp",
    "requiredEnvVars": ["SURREALDB_URL"],
    "optionalParams": ["NAMESPACE", "DATABASE", "USERNAME", "PASSWORD"],
    "usageInstructions": "Query and manage SurrealDB multi-model databases",
    "category": "Database"
  },
  "youtube": {
    "name": "YouTube",
    "githubLink": "https://github.com/evalstate/mcp-youtube",
    "package": null,
    "description": "YouTube video and channel management integration",
    "installCommand": "pip install youtube-mcp",
    "requiredEnvVars": ["YOUTUBE_API_KEY"],
    "optionalParams": ["CHANNEL_ID"],
    "usageInstructions": "Search videos, manage playlists, and access YouTube data",
    "category": "Entertainment"
  }
}