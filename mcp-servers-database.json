{
  "everything": {
    "name": "Everything",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/everything",
    "package": "@modelcontextprotocol/server-everything",
    "description": "Reference/test server with prompts, resources, and tools",
    "installCommand": "npx -y @modelcontextprotocol/server-everything",
    "requiredEnvVars": [],
    "optionalParams": ["CONFIG_PATH"],
    "usageInstructions": "Development and testing server with example implementations",
    "category": "Development"
  },
  "fetch": {
    "name": "Fetch",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/fetch",
    "package": "mcp-server-fetch",
    "description": "Web content fetching and processing",
    "installCommand": "uvx mcp-server-fetch",
    "requiredEnvVars": [],
    "optionalParams": ["USER_AGENT", "TIMEOUT"],
    "usageInstructions": "Fetch and process web content for efficient LLM usage",
    "category": "Web Scraping"
  },
  "filesystem": {
    "name": "Filesystem",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
    "package": "@modelcontextprotocol/server-filesystem",
    "description": "Local filesystem operations",
    "installCommand": "npx -y @modelcontextprotocol/server-filesystem",
    "requiredEnvVars": [],
    "optionalParams": ["ALLOWED_DIRECTORIES"],
    "usageInstructions": "Read, write, and manage local files and directories",
    "category": "File Management"
  },
  "git": {
    "name": "Git",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/git",
    "package": "mcp-server-git",
    "description": "Git repository operations",
    "installCommand": "uvx mcp-server-git",
    "requiredEnvVars": [],
    "optionalParams": ["REPOSITORY_PATH"],
    "usageInstructions": "Perform Git operations like commit, push, pull, and branch management",
    "category": "Version Control"
  },
  "memory": {
    "name": "Memory",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/memory",
    "package": "@modelcontextprotocol/server-memory",
    "description": "Persistent memory and knowledge storage",
    "installCommand": "npx -y @modelcontextprotocol/server-memory",
    "requiredEnvVars": [],
    "optionalParams": ["MEMORY_FILE_PATH"],
    "usageInstructions": "Store and retrieve persistent memories across conversations",
    "category": "Data Storage"
  },
  "sequentialthinking": {
    "name": "Sequential Thinking",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking",
    "package": "@modelcontextprotocol/server-sequential-thinking",
    "description": "Sequential thinking and reasoning tools",
    "installCommand": "npx -y @modelcontextprotocol/server-sequential-thinking",
    "requiredEnvVars": [],
    "optionalParams": ["THINKING_DEPTH"],
    "usageInstructions": "Enable step-by-step reasoning and problem-solving approaches",
    "category": "AI/ML"
  },
  "time": {
    "name": "Time",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/time",
    "package": "mcp-server-time",
    "description": "Time and scheduling utilities",
    "installCommand": "uvx mcp-server-time",
    "requiredEnvVars": [],
    "optionalParams": ["TIMEZONE"],
    "usageInstructions": "Get current time, schedule events, and manage time zones",
    "category": "Utilities"
  },
  "obsidian": {
    "name": "Obsidian",
    "githubLink": "https://github.com/calclavia/mcp-obsidian",
    "package": null,
    "description": "Read and search through Obsidian vault or Markdown notes directory",
    "installCommand": "pip install mcp-obsidian",
    "requiredEnvVars": ["OBSIDIAN_VAULT_PATH"],
    "optionalParams": ["SEARCH_DEPTH"],
    "usageInstructions": "Access and search Obsidian notes and Markdown files",
    "category": "Knowledge Management"
  },
  "spotify": {
    "name": "Spotify",
    "githubLink": "https://github.com/varunneal/spotify-mcp",
    "package": null,
    "description": "MCP server allowing LLM to play and use Spotify",
    "installCommand": "pip install spotify-mcp",
    "requiredEnvVars": ["SPOTIFY_CLIENT_ID", "SPOTIFY_CLIENT_SECRET"],
    "optionalParams": ["SPOTIFY_REDIRECT_URI"],
    "usageInstructions": "Control Spotify playback and search music",
    "category": "Entertainment"
  },
  "kubernetes": {
    "name": "Kubernetes",
    "githubLink": "https://github.com/Flux159/mcp-server-kubernetes",
    "package": null,
    "description": "Connect to Kubernetes cluster and manage pods, deployments, and services",
    "installCommand": "pip install mcp-kubernetes",
    "requiredEnvVars": ["KUBECONFIG"],
    "optionalParams": ["NAMESPACE"],
    "usageInstructions": "Manage Kubernetes resources via natural language interface",
    "category": "DevOps"
  },
  "aws": {
    "name": "AWS",
    "githubLink": "https://github.com/awslabs/mcp",
    "package": null,
    "description": "Specialized MCP servers bringing AWS best practices to development workflow",
    "installCommand": "pip install mcp-aws",
    "requiredEnvVars": ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_REGION"],
    "optionalParams": ["AWS_PROFILE"],
    "usageInstructions": "Interact with various AWS services and resources",
    "category": "Cloud Services"
  },
  "clerk": {
    "name": "Clerk",
    "githubLink": "https://github.com/clerk/javascript/tree/HEAD/packages/agent-toolkit",
    "package": "@clerk/agent-toolkit",
    "description": "Authentication and user management with Clerk for AI agents",
    "installCommand": "npx -y @clerk/agent-toolkit",
    "requiredEnvVars": ["CLERK_SECRET_KEY"],
    "optionalParams": [],
    "usageInstructions": "Integrate Clerk authentication with AI agent frameworks. Manage users, organizations, and inject session claims into AI prompts. Warning: Agent behavior is non-deterministic - use carefully in production.",
    "category": "Authentication"
  },
  "playwright": {
    "name": "Microsoft Playwright",
    "githubLink": "https://github.com/microsoft/playwright-mcp",
    "package": "@playwright/mcp@latest",
    "description": "Browser automation and testing with Playwright",
    "installCommand": "npx -y @playwright/mcp@latest",
    "requiredEnvVars": [],
    "optionalParams": ["BROWSER_TYPE", "HEADLESS", "VIEWPORT_WIDTH", "VIEWPORT_HEIGHT", "DEFAULT_TIMEOUT"],
    "usageInstructions": "Automate browser interactions, perform web testing, and capture screenshots",
    "category": "Development Tools"
  },
  "context7": {
    "name": "Context7",
    "githubLink": "https://github.com/upstash/context7",
    "package": "@upstash/context7-mcp",
    "description": "Context management and conversation memory system",
    "installCommand": "npx -y @upstash/context7-mcp",
    "requiredEnvVars": [],
    "optionalParams": ["UPSTASH_REDIS_REST_URL", "UPSTASH_REDIS_REST_TOKEN", "CONTEXT_KEY", "MAX_CONTEXT_SIZE"],
    "usageInstructions": "Manage conversation context, maintain session memory, and handle context switching",
    "category": "AI & Machine Learning"
  },
  "taskmaster": {
    "name": "Task Master",
    "githubLink": "https://github.com/eyaltoledano/claude-task-master",
    "package": "task-master-mcp",
    "description": "Comprehensive task management with projects, contexts, and advanced organization",
    "installCommand": "npx -y --package=task-master-ai task-master-ai",
    "requiredEnvVars": [],
    "optionalParams": [""],
    "usageInstructions": "Manage tasks with projects, contexts, priorities, due dates, and dependencies. Supports natural language input for task creation and filtering.",
    "category": "Productivity"
  },
  "xcodebuild": {
    "name": "Xcode Build",
    "githubLink": "https://github.com/cameroncooke/XcodeBuildMCP",
    "package": "xcodebuildmcp",
    "description": "Xcode project building and iOS/macOS development automation",
    "installCommand": "npx -y xcodebuildmcp@latest",
    "requiredEnvVars": [],
    "optionalParams": ["SENTRY_DISABLED", "PROJECT_PATH", "SCHEME", "CONFIGURATION", "DESTINATION"],
    "usageInstructions": "Build, test, and manage Xcode projects for iOS and macOS development",
    "category": "Development Tools"
  },
  "supabase": {
    "name": "Supabase",
    "githubLink": "https://github.com/supabase-community/supabase-mcp",
    "package": "@supabase/mcp-server-supabase",
    "description": "Complete Supabase platform integration for database and project management",
    "installCommand": "npx -y @supabase/mcp-server-supabase@latest",
    "requiredEnvVars": ["SUPABASE_ACCESS_TOKEN"],
    "optionalParams": ["PROJECT_REF"],
    "usageInstructions": "Manage Supabase projects, design tables, run SQL queries, create database branches, generate TypeScript types, and handle migrations",
    "category": "Databases"
  },
  "postgres-crystal": {
    "name": "PostgreSQL (Crystal DBA)",
    "githubLink": "https://github.com/crystaldba/postgres-mcp",
    "package": "postgres-mcp",
    "description": "PostgreSQL database operations with advanced DBA capabilities",
    "installCommand": "pip install postgres-mcp",
    "requiredEnvVars": ["PG_CONNECTION_STRING"],
    "optionalParams": [],
    "usageInstructions": "Execute SQL queries, manage database schema, perform DBA operations on PostgreSQL databases. Requires a PostgreSQL connection string.",
    "category": "Databases"
  },
  "qdrant": {
    "name": "Qdrant",
    "githubLink": "https://github.com/qdrant/mcp-server-qdrant",
    "package": "@qdrant/mcp-server-qdrant",
    "description": "Vector database operations for Qdrant - store and search high-dimensional vectors",
    "installCommand": "npx -y @qdrant/mcp-server-qdrant",
    "requiredEnvVars": ["QDRANT_URL"],
    "optionalParams": ["QDRANT_API_KEY"],
    "usageInstructions": "Manage collections, insert vectors, perform similarity searches, and handle vector data in Qdrant. Requires Qdrant instance URL.",
    "category": "Databases"
  },
  "skyvern": {
    "name": "Skyvern",
    "githubLink": "https://github.com/Skyvern-AI/skyvern",
    "package": "skyvern",
    "description": "Browser automation for AI applications - enables form filling, file downloads, and web research",
    "installCommand": "pip install skyvern",
    "requiredEnvVars": ["SKYVERN_BASE_URL", "SKYVERN_API_KEY"],
    "optionalParams": [],
    "usageInstructions": "Connect AI applications to the browser for automated web interactions. Supports form filling, file downloads, web research, and other browser-based tasks. Run 'skyvern init' to configure, then optionally 'skyvern run server' for local deployment.",
    "category": "Automation"
  },
  "nixos": {
    "name": "NixOS",
    "githubLink": "https://github.com/utensils/mcp-nixos",
    "package": "mcp-nixos",
    "description": "Provides real-time information about NixOS packages, configurations, and version histories",
    "installCommand": "uvx mcp-nixos",
    "requiredEnvVars": [],
    "optionalParams": ["ELASTICSEARCH_URL"],
    "usageInstructions": "Search NixOS packages, configuration options, Home Manager settings, nix-darwin configurations, and package version history. Queries live NixOS APIs for accurate data.",
    "category": "Development Tools"
  },
  "shadcn-ui": {
    "name": "shadcn/ui",
    "githubLink": "https://github.com/heilgar/shadcn-ui-mcp-server",
    "package": "@heilgar/shadcn-ui-mcp-server",
    "description": "Browse and install shadcn/ui components and utilities for React applications",
    "installCommand": "npx -y @heilgar/shadcn-ui-mcp-server",
    "requiredEnvVars": [],
    "optionalParams": ["FRAMEWORK"],
    "usageInstructions": "Search, view documentation, and install shadcn/ui components directly into your React project. Supports component browsing, installation, and dependency management.",
    "category": "UI Components"
  },
  "gpt-researcher": {
    "name": "GPT Researcher",
    "githubLink": "https://github.com/assafelovic/gpt-researcher",
    "package": "gptr-mcp",
    "description": "AI-powered research assistant that conducts comprehensive online research on any topic",
    "installCommand": "git clone https://github.com/assafelovic/gptr-mcp.git && cd gptr-mcp && pip install -r requirements.txt",
    "requiredEnvVars": ["OPENAI_API_KEY", "TAVILY_API_KEY"],
    "optionalParams": ["RESEARCH_DEPTH", "REPORT_FORMAT", "MAX_SOURCES"],
    "usageInstructions": "Perform deep research on topics, generate comprehensive reports, quick searches, and track sources. Requires manual setup with git clone and Python environment.",
    "category": "Research & Analysis"
  },
  "pr-reviewer": {
    "name": "PR Reviewer",
    "githubLink": "https://github.com/elhadjaoui/pr_reviewer",
    "package": null,
    "description": "Automatically analyzes Pull Requests, reviews changes, and adds comments directly to modified files",
    "installCommand": "pip install requests python-dotenv 'mcp[cli]' pydrive",
    "requiredEnvVars": ["GITHUB_TOKEN"],
    "optionalParams": ["GOOGLE_PARENT_FOLDER_ID"],
    "usageInstructions": "Review pull requests automatically, add inline comments, approve PRs, and optionally store reviews in Google Drive. Requires GitHub personal access token with appropriate permissions.",
    "category": "Development Tools"
  },
  "gdrive-ej": {
    "name": "Google Drive (Enhanced)",
    "githubLink": "https://github.com/ejoyee/ej-mcp-server-gdrive",
    "package": "@modelcontextprotocol/server-gdrive",
    "description": "Enhanced Google Drive integration with file listing, reading, and searching capabilities with automatic format conversion",
    "installCommand": "npx -y @modelcontextprotocol/server-gdrive",
    "requiredEnvVars": ["GDRIVE_CREDENTIALS_PATH"],
    "optionalParams": ["FOLDER_ID", "MAX_RESULTS"],
    "usageInstructions": "Access Google Drive files with advanced search, read documents with automatic format conversion, and manage Drive content. Requires Google OAuth credentials JSON file.",
    "category": "Cloud Storage"
  },
  "sharepoint": {
    "name": "SharePoint",
    "githubLink": "https://github.com/Sofias-ai/mcp-sharepoint",
    "package": "mcp-sharepoint-server",
    "description": "Lightweight Microsoft SharePoint integration for document and folder management",
    "installCommand": "pip install mcp-sharepoint-server",
    "requiredEnvVars": ["SHP_ID_APP", "SHP_ID_APP_SECRET", "SHP_SITE_URL", "SHP_TENANT_ID"],
    "optionalParams": ["SHP_DOC_LIBRARY"],
    "usageInstructions": "List, read, search, and download SharePoint documents and folders. Requires Azure AD application credentials for authentication.",
    "category": "Cloud Storage"
  },
  "just-prompt": {
    "name": "Just Prompt",
    "githubLink": "https://github.com/disler/just-prompt",
    "package": null,
    "description": "Unified interface to multiple LLM providers with parallel querying capabilities",
    "installCommand": "git clone https://github.com/disler/just-prompt && cd just-prompt && uv sync",
    "requiredEnvVars": [],
    "optionalParams": ["OPENAI_API_KEY", "ANTHROPIC_API_KEY", "GEMINI_API_KEY", "GROQ_API_KEY", "DEEPSEEK_API_KEY", "OLLAMA_HOST"],
    "usageInstructions": "Query multiple LLM providers (OpenAI, Anthropic, Google, Groq, DeepSeek, Ollama) simultaneously or individually. Configure API keys for the providers you want to use.",
    "category": "AI/ML"
  },
  "clickup": {
    "name": "ClickUp",
    "githubLink": "https://github.com/taazkareem/clickup-mcp-server",
    "package": "@taazkareem/clickup-mcp-server",
    "description": "Comprehensive ClickUp task management integration with 36 tools for AI applications",
    "installCommand": "npx -y @taazkareem/clickup-mcp-server@latest",
    "requiredEnvVars": ["CLICKUP_API_KEY", "CLICKUP_TEAM_ID"],
    "optionalParams": ["ENABLE_SSE", "PORT", "DISABLED_TOOLS"],
    "usageInstructions": "Manage ClickUp tasks, spaces, lists, and folders with natural language. Create, update, track time, and manage team members. Supports HTTP/SSE transport and markdown formatting.",
    "category": "Project Management"
  },
  "cognition-wheel": {
    "name": "Cognition Wheel",
    "githubLink": "https://github.com/Hormold/cognition-wheel",
    "package": "cognition-wheel",
    "description": "AI-powered cognitive assessment and development tool that helps track and improve various cognitive abilities",
    "installCommand": "pip install cognition-wheel",
    "requiredEnvVars": [],
    "optionalParams": ["CONFIG_PATH", "MODEL_PATH", "OUTPUT_DIR"],
    "usageInstructions": "Assess and track cognitive abilities including memory, attention, reasoning, and problem-solving. Generate personalized cognitive development plans and track progress over time.",
    "category": "AI & Machine Learning"
  },
  "github-project-manager": {
    "name": "GitHub Project Manager",
    "githubLink": "https://github.com/kunwarVivek/mcp-github-project-manager",
    "package": "mcp-github-project-manager",
    "description": "Comprehensive GitHub project management tool for managing repositories, issues, pull requests, and GitHub Projects",
    "installCommand": "npx -y mcp-github-project-manager",
    "requiredEnvVars": ["GITHUB_TOKEN", "GITHUB_OWNER"],
    "optionalParams": ["DEFAULT_ORG", "DEFAULT_REPO", "MAX_RESULTS"],
    "usageInstructions": "Manage GitHub repositories, create and update issues, handle pull requests, manage GitHub Projects (v2), and automate project workflows. Requires a GitHub personal access token with appropriate permissions.",
    "category": "Development Tools"
  },
  "github": {
    "name": "GitHub",
    "githubLink": "https://github.com/github/github-mcp-server",
    "package": "ghcr.io/github/github-mcp-server",
    "description": "Official GitHub MCP server providing seamless integration with GitHub APIs for advanced automation and interaction capabilities",
    "installCommand": "docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> ghcr.io/github/github-mcp-server",
    "requiredEnvVars": ["GITHUB_PERSONAL_ACCESS_TOKEN"],
    "optionalParams": ["--toolsets", "--read-only", "--gh-host", "--dynamic-toolsets"],
    "usageInstructions": "Access GitHub APIs through MCP for repository management, issues, pull requests, actions, and more. Requires Docker and a GitHub Personal Access Token.",
    "category": "Development Tools"
  },
  "firecrawl": {
    "name": "Firecrawl",
    "githubLink": "https://github.com/mendableai/firecrawl-mcp-server",
    "package": "firecrawl-mcp-server",
    "description": "Advanced web scraping and crawling with intelligent content extraction and data processing",
    "installCommand": "npx -y firecrawl-mcp-server",
    "requiredEnvVars": ["FIRECRAWL_API_KEY"],
    "optionalParams": ["MAX_PAGES", "TIMEOUT", "INCLUDE_HTML", "INCLUDE_RAW_HTML"],
    "usageInstructions": "Crawl websites, extract structured data, and process web content at scale. Supports intelligent content extraction with configurable crawling parameters.",
    "category": "Web Scraping"
  },
  "google-maps": {
    "name": "Google Maps",
    "githubLink": "https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps",
    "package": "@modelcontextprotocol/server-google-maps",
    "description": "Google Maps integration for location services, directions, and place information",
    "installCommand": "npx -y @modelcontextprotocol/server-google-maps",
    "requiredEnvVars": ["GOOGLE_MAPS_API_KEY"],
    "optionalParams": ["DEFAULT_LOCATION", "SEARCH_RADIUS", "LANGUAGE"],
    "usageInstructions": "Search places, get directions, geocode addresses, and access Google Maps services. Requires Google Maps API key with appropriate services enabled.",
    "category": "Location Services"
  },
  "apple-mcp": {
    "name": "Apple MCP",
    "githubLink": "https://github.com/supermemoryai/apple-mcp",
    "package": "apple-mcp",
    "description": "Apple ecosystem integration for accessing iOS/macOS system information and device management",
    "installCommand": "pip install apple-mcp",
    "requiredEnvVars": [],
    "optionalParams": ["DEVICE_ID", "BUNDLE_ID", "SYSTEM_INTEGRATION_LEVEL"],
    "usageInstructions": "Access Apple device information, system status, and integrate with iOS/macOS applications. Provides device management and system monitoring capabilities.",
    "category": "System Integration"
  },
  "mindsdb": {
    "name": "MindsDB",
    "githubLink": "https://github.com/mindsdb/mindsdb",
    "package": "mindsdb",
    "description": "AI query engine for federated data sources with built-in MCP server for database and ML operations",
    "installCommand": "pip install mindsdb",
    "requiredEnvVars": [],
    "optionalParams": ["MINDSDB_DB_CON", "MINDSDB_STORAGE_PATH", "MINDSDB_CONFIG_PATH"],
    "usageInstructions": "Connect multiple data sources (SQL databases, APIs, files) and query them with natural language. Includes ML capabilities and predictive analytics.",
    "category": "AI & Machine Learning"
  },
  "fastmcp": {
    "name": "FastMCP",
    "githubLink": "https://github.com/jlowin/fastmcp",
    "package": "fastmcp",
    "description": "Python framework for rapidly building MCP servers and clients with simplified development workflow",
    "installCommand": "uv pip install fastmcp",
    "requiredEnvVars": [],
    "optionalParams": ["SERVER_NAME", "DEBUG", "LOG_LEVEL"],
    "usageInstructions": "Build custom MCP servers quickly using Python. Provides scaffolding, decorators, and utilities for MCP development.",
    "category": "Development Tools"
  },
  "figma-context": {
    "name": "Figma Context MCP",
    "githubLink": "https://github.com/GLips/Figma-Context-MCP",
    "package": "figma-developer-mcp",
    "description": "Provides Figma design data and context to AI coding tools for design-to-code workflows",
    "installCommand": "npx -y figma-developer-mcp",
    "requiredEnvVars": ["FIGMA_API_KEY"],
    "optionalParams": ["PORT"],
    "usageInstructions": "Access Figma files, frames, and design tokens to enhance AI-powered code generation. Requires Figma API access token.",
    "category": "Design Tools"
  },
  "ghidra-mcp": {
    "name": "Ghidra MCP",
    "githubLink": "https://github.com/LaurieWired/GhidraMCP",
    "package": null,
    "description": "MCP server for autonomous reverse engineering with Ghidra - enables AI-powered binary analysis",
    "installCommand": "git clone https://github.com/LaurieWired/GhidraMCP.git && cd GhidraMCP && python3 -m pip install mcp",
    "requiredEnvVars": [],
    "optionalParams": ["GHIDRA_HOST", "GHIDRA_PORT"],
    "usageInstructions": "Perform automated reverse engineering and binary analysis using Ghidra with AI assistance. Requires Ghidra installation and manual setup.",
    "category": "Security"
  }
}